  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UPD", "MERGE_INS", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=177;
    public static final int FLOAT_SUFFIX=337;
    public static final int STAR=280;
    public static final int DOT_EXPR=185;
    public static final int NUMERIC_PARAM_LIST=117;
    public static final int MOD=298;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=159;
    public static final int LIB_FUNC_CHAIN=184;
    public static final int CREATE_COL_TYPE_LIST=234;
    public static final int BSR=319;
    public static final int MERGE_INS=250;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=183;
    public static final int TIMEPERIOD_MILLISECONDS=98;
    public static final int FULL_OUTERJOIN_EXPR=163;
    public static final int MATCHREC_PATTERN_CONCAT=262;
    public static final int INC=312;
    public static final int LNOT=308;
    public static final int RPAREN=275;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=285;
    public static final int BSR_ASSIGN=320;
    public static final int CAST_EXPR=214;
    public static final int MATCHES=109;
    public static final int USING=113;
    public static final int STREAM_EXPR=158;
    public static final int TIMEPERIOD_SECONDS=95;
    public static final int NOT_EQUAL=290;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=126;
    public static final int LAST_AGGREG=241;
    public static final int REGEXP=9;
    public static final int MATCHED=115;
    public static final int FOLLOWED_BY_EXPR=120;
    public static final int FOLLOWED_BY=302;
    public static final int HOUR_PART=190;
    public static final int RBRACK=279;
    public static final int MATCHREC_PATTERN_NESTED=264;
    public static final int MATCH_UNTIL_RANGE_CLOSED=232;
    public static final int GE=294;
    public static final int METHOD_JOIN_EXPR=228;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=125;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=124;
    public static final int MINUS_ASSIGN=313;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=136;
    public static final int NUM_DOUBLE=258;
    public static final int INSERTINTO_STREAM_NAME=202;
    public static final int LCURLY=299;
    public static final int TIMEPERIOD_MILLISEC=96;
    public static final int UNARY_MINUS=186;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=200;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=134;
    public static final int WS=329;
    public static final int EMAILAT=328;
    public static final int SUBSELECT_GROUP_EXPR=206;
    public static final int ON_SELECT_INSERT_EXPR=223;
    public static final int ESCAPECHAR=303;
    public static final int EXPRCOL=181;
    public static final int SL_COMMENT=330;
    public static final int NULL_TYPE=257;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=230;
    public static final int GT=292;
    public static final int BNOT=309;
    public static final int WHERE_EXPR=145;
    public static final int END=33;
    public static final int LAND=326;
    public static final int INNERJOIN_EXPR=160;
    public static final int NOT_REGEXP=197;
    public static final int MATCH_UNTIL_EXPR=229;
    public static final int EVENT_PROP_EXPR=167;
    public static final int LBRACK=278;
    public static final int MERGE_UPD=249;
    public static final int VIEW_EXPR=142;
    public static final int ANNOTATION=237;
    public static final int LONG_TYPE=252;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=127;
    public static final int MATCHREC_PATTERN=260;
    public static final int TIMEPERIOD_SEC=93;
    public static final int TICKED_STRING_LITERAL=304;
    public static final int ON_SELECT_EXPR=221;
    public static final int MINUTE_PART=191;
    public static final int PATTERN_NOT_EXPR=123;
    public static final int SQL_NE=289;
    public static final int SUM=18;
    public static final int HexDigit=335;
    public static final int UPDATE_EXPR=243;
    public static final int LPAREN=274;
    public static final int IN_SUBSELECT_EXPR=208;
    public static final int AT=85;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=99;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=266;
    public static final int NOT_IN_RANGE=204;
    public static final int OFFSET=103;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=192;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=105;
    public static final int IDENT=273;
    public static final int DATABASE_JOIN_EXPR=144;
    public static final int BXOR=288;
    public static final int PLUS=282;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=87;
    public static final int CREATE_SCHEMA_EXPR=245;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=170;
    public static final int CREATE_INDEX_EXPR=215;
    public static final int TIMEPERIOD_MILLISECOND=97;
    public static final int EVAL_NOTEQUALS_EXPR=151;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=231;
    public static final int CREATE_VARIABLE_EXPR=227;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=267;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=121;
    public static final int RIGHT_OUTERJOIN_EXPR=162;
    public static final int NUMBERSETSTAR=236;
    public static final int LAST_OPERATOR=211;
    public static final int PATTERN_FILTER_EXPR=122;
    public static final int MERGE=114;
    public static final int EVAL_AND_EXPR=148;
    public static final int LEFT_OUTERJOIN_EXPR=161;
    public static final int EPL_EXPR=259;
    public static final int GROUP_BY_EXPR=164;
    public static final int SET=82;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=168;
    public static final int MINUS=296;
    public static final int SEMI=327;
    public static final int STAR_ASSIGN=315;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=248;
    public static final int FIRST_AGGREG=240;
    public static final int COLON=284;
    public static final int EVAL_EQUALS_GROUP_EXPR=152;
    public static final int BAND_ASSIGN=325;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=178;
    public static final int NOT_IN_SET=194;
    public static final int VALUE_NULL=101;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=171;
    public static final int SL=321;
    public static final int NOT_IN_SUBSELECT_EXPR=209;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=140;
    public static final int SR=317;
    public static final int RCURLY=300;
    public static final int PLUS_ASSIGN=311;
    public static final int EXISTS_SUBSELECT_EXPR=207;
    public static final int DAY_PART=189;
    public static final int EVENT_FILTER_IN=135;
    public static final int DIV=297;
    public static final int OBJECT_PARAM_ORDERED_EXPR=119;
    public static final int OctalEscape=334;
    public static final int MILLISECOND_PART=193;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=102;
    public static final int SELECTION_EXPR=155;
    public static final int LOR=295;
    public static final int CAST=78;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=201;
    public static final int EXPONENT=336;
    public static final int LT=291;
    public static final int PATTERN_INCL_EXPR=143;
    public static final int WHILE=112;
    public static final int ORDER_BY_EXPR=165;
    public static final int BOOL_TYPE=256;
    public static final int MOD_ASSIGN=316;
    public static final int ANNOTATION_ARRAY=238;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=210;
    public static final int EQUALS=276;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=310;
    public static final int WINDOW_AGGREG=242;
    public static final int SL_ASSIGN=322;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=265;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=222;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=188;
    public static final int CREATE_COL_TYPE=235;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=100;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=153;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=253;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=94;
    public static final int EVENT_FILTER_BETWEEN=137;
    public static final int ANNOTATION_VALUE=239;
    public static final int SUBSELECT_EXPR=205;
    public static final int NUMERIC_PARAM_RANGE=116;
    public static final int CONCAT=182;
    public static final int CLASS_IDENT=139;
    public static final int MATCHREC_PATTERN_ALTER=263;
    public static final int ON_EXPR=218;
    public static final int CREATE_WINDOW_EXPR=216;
    public static final int PROPERTY_SELECTION_STREAM=129;
    public static final int ON_DELETE_EXPR=220;
    public static final int NUM_LONG=305;
    public static final int ON=41;
    public static final int TIME_PERIOD=187;
    public static final int DOUBLE_TYPE=254;
    public static final int DELETE=80;
    public static final int INT_TYPE=251;
    public static final int MATCHREC_PARTITION=271;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=147;
    public static final int ORDER_ELEMENT_EXPR=166;
    public static final int TIMEPERIOD_HOURS=90;
    public static final int VARIABLE=83;
    public static final int SUBSTITUTION=213;
    public static final int UNTIL=84;
    public static final int STRING_TYPE=255;
    public static final int NUM_INT=301;
    public static final int MATCHREC_DEFINE_ITEM=268;
    public static final int ON_SET_EXPR=226;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=247;
    public static final int NUM_FLOAT=306;
    public static final int ON_EXPR_FROM=225;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=332;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=128;
    public static final int WEEKDAY_OPERATOR=212;
    public static final int DEC=314;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=323;
    public static final int NUMERIC_PARAM_FREQUENCY=118;
    public static final int SNAPSHOT=81;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=176;
    public static final int EVENT_FILTER_PARAM=132;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=173;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=104;
    public static final int FOR=111;
    public static final int ON_STREAM=219;
    public static final int DEFINE=107;
    public static final int TIMEPERIOD_DAYS=88;
    public static final int EVENT_FILTER_RANGE=133;
    public static final int ML_COMMENT=331;
    public static final int INDEX=86;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=172;
    public static final int BOR_ASSIGN=324;
    public static final int COMMA=272;
    public static final int IS=42;
    public static final int PARTITION=108;
    public static final int WHEN_LIMIT_EXPR=179;
    public static final int TIMEPERIOD_LIMIT_EXPR=175;
    public static final int SOME=49;
    public static final int EQUAL=307;
    public static final int BOR=281;
    public static final int MATCHREC_MEASURE_ITEM=270;
    public static final int TIMEPERIOD_HOUR=89;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=138;
    public static final int IN_RANGE=203;
    public static final int DOT=277;
    public static final int MATCHREC_MEASURES=269;
    public static final int CURRENT_TIMESTAMP=79;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=130;
    public static final int INSERTINTO_EXPR=180;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=146;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=233;
    public static final int EVAL_EQUALS_EXPR=150;
    public static final int TIMEPERIOD_MINUTES=92;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=196;
    public static final int EVENT_LIMIT_EXPR=174;
    public static final int NOT_BETWEEN=195;
    public static final int TIMEPERIOD_MINUTE=91;
    public static final int EVAL_OR_EXPR=149;
    public static final int ON_SELECT_INSERT_OUTPUT=224;
    public static final int MEASURES=106;
    public static final int AFTER=110;
    public static final int BAND=287;
    public static final int MATCHREC_PATTERN_ATOM=261;
    public static final int QUOTED_STRING_LITERAL=286;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=283;
    public static final int OBSERVER_EXPR=141;
    public static final int CREATE_SCHEMA_EXPR_QUAL=246;
    public static final int EVENT_FILTER_IDENT=131;
    public static final int EVENT_PROP_MAPPED=169;
    public static final int UnicodeEscape=333;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=198;
    public static final int SELECTION_ELEMENT_EXPR=156;
    public static final int CREATE_WINDOW_SELECT_EXPR=217;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=244;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=157;
    public static final int SR_ASSIGN=318;
    public static final int LE=293;
    public static final int DBFROM_CLAUSE=199;
    public static final int EVAL_IDENT=154;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1662);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1667);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1671); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1685);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1691);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1721);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1725); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1747);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);
                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);
                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1755);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1759);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1807);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1815);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1819);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1865);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1868); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1871);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1892);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1895); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1898);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1925);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1966);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1997);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2008);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2021);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2044);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2055);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2068);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2076);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2099);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2102); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2104);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2147);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2150); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2152);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.mergeExpr_return mergeExpr57 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr58 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=8;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            case MERGE:
                {
                alt17=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2196);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2201);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2206);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2211);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2216);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2221);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2226);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_mergeExpr_in_eplExpression2231);
                    mergeExpr57=mergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeExpr57.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2234);
                    forExpr58=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr58.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT59=null;
        Token SELECT61=null;
        Token FROM63=null;
        Token WHERE66=null;
        Token GROUP68=null;
        Token BY69=null;
        Token HAVING71=null;
        Token OUTPUT73=null;
        Token ORDER75=null;
        Token BY76=null;
        Token ROW_LIMIT_EXPR78=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr60 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause62 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause64 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog65 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause67 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr70 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause72 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit74 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr77 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit79 = null;
        CommonTree INSERT59_tree=null;
        CommonTree SELECT61_tree=null;
        CommonTree FROM63_tree=null;
        CommonTree WHERE66_tree=null;
        CommonTree GROUP68_tree=null;
        CommonTree BY69_tree=null;
        CommonTree HAVING71_tree=null;
        CommonTree OUTPUT73_tree=null;
        CommonTree ORDER75_tree=null;
        CommonTree BY76_tree=null;
        CommonTree ROW_LIMIT_EXPR78_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT59=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2248); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2251);
                    insertIntoExpr60=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr60.getTree());
                    }
                    break;
            }
            SELECT61=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2257); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2260);
            selectClause62=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause62.getTree());
            FROM63=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2264); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2267);
            fromClause64=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause64.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2271);
                    matchRecog65=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog65.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE66=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2277); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2280);
                    whereClause67=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause67.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP68=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2287); if (state.failed) return retval;
                    BY69=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2290); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2293);
                    groupByListExpr70=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr70.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING71=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2300); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2303);
                    havingClause72=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause72.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT73=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2310); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2313);
                    outputLimit74=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit74.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER75=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2320); if (state.failed) return retval;
                    BY76=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2323); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2326);
                    orderByListExpr77=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr77.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR78=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2333); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2336);
                    rowLimit79=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit79.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON80=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr81 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr82 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr83 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr84 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert85 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr86 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr87 = null;
        CommonTree ON80_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON80=(Token)match(input,ON,FOLLOW_ON_in_onExpr2351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON80);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2353);
            onStreamExpr81=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr81.getTree());
            int alt30=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2358);
                    onDeleteExpr82=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr82.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2362);
                    onSelectExpr83=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr83.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2365);
                            	    onSelectInsertExpr84=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr84.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2368);
                                    outputClauseInsert85=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert85.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2375);
                    onSetExpr86=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr86.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2379);
                    onUpdateExpr87=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2422);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2426);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2475);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2496);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2499); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2501);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2511);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeExpr_return mergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.mergeExpr_return retval = new EsperEPL2GrammarParser.mergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token IDENT103=null;
        Token AS104=null;
        Token USING105=null;
        Token ON107=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr106 = null;
        EsperEPL2GrammarParser.expression_return expression108 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched109 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched110 = null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree IDENT103_tree=null;
        CommonTree AS104_tree=null;
        CommonTree USING105_tree=null;
        CommonTree ON107_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_mergeMatched=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatched");
        RewriteRuleSubtreeStream stream_mergeUnmatched=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatched");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_mergeExpr2546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_mergeExpr2548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO102);
            IDENT103=(Token)match(input,IDENT,FOLLOW_IDENT_in_mergeExpr2550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT103);
            int alt36=3;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==AS) ) {
                alt36=1;
            }
            else if ( (LA36_0==IDENT) ) {
                alt36=2;
            }
            switch (alt36) {
                case 1 :
                    {
                    AS104=(Token)match(input,AS,FOLLOW_AS_in_mergeExpr2553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS104);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_mergeExpr2557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_mergeExpr2563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            USING105=(Token)match(input,USING,FOLLOW_USING_in_mergeExpr2569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_USING.add(USING105);
            pushFollow(FOLLOW_onStreamExpr_in_mergeExpr2571);
            onStreamExpr106=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr106.getTree());
            ON107=(Token)match(input,ON,FOLLOW_ON_in_mergeExpr2575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON107);
            pushFollow(FOLLOW_expression_in_mergeExpr2577);
            expression108=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression108.getTree());
            int cnt37=0;
            loop37:
            do {
                int alt37=3;
                int LA37_0 = input.LA(1);
                if ( (LA37_0==WHEN) ) {
                    int LA37_3 = input.LA(2);
                    if ( (LA37_3==MATCHED) ) {
                        alt37=1;
                    }
                    else if ( (LA37_3==NOT_EXPR) ) {
                        alt37=2;
                    }
                }
                switch (alt37) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatched_in_mergeExpr2582);
            	    mergeMatched109=mergeMatched();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatched.add(mergeMatched109.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatched_in_mergeExpr2586);
            	    mergeUnmatched110=mergeUnmatched();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatched.add(mergeUnmatched110.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt37 >= 1 ) break loop37;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(37, input);
                        throw eee;
                }
                cnt37++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MERGE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                while ( stream_mergeMatched.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatched.nextTree());
                }
                stream_mergeMatched.reset();
                while ( stream_mergeUnmatched.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatched.nextTree());
                }
                stream_mergeUnmatched.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN111=null;
        Token MATCHED112=null;
        Token THEN113=null;
        Token UPDATE114=null;
        Token SET115=null;
        Token COMMA117=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment116 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment118 = null;
        CommonTree WHEN111_tree=null;
        CommonTree MATCHED112_tree=null;
        CommonTree THEN113_tree=null;
        CommonTree UPDATE114_tree=null;
        CommonTree SET115_tree=null;
        CommonTree COMMA117_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            WHEN111=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN111);
            MATCHED112=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED112);
            THEN113=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatched2632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN113);
            UPDATE114=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatched2636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE114);
            SET115=(Token)match(input,SET,FOLLOW_SET_in_mergeMatched2638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET115);
            pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2640);
            onSetAssignment116=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment116.getTree());
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);
                if ( (LA38_0==COMMA) ) {
                    alt38=1;
                }
                switch (alt38) {
            	case 1 :
            	    {
            	    COMMA117=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatched2643); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA117);
            	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2645);
            	    onSetAssignment118=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment118.getTree());
            	    }
            	    break;
            	default :
            	    break loop38;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN119=null;
        Token NOT_EXPR120=null;
        Token MATCHED121=null;
        Token THEN122=null;
        Token INSERT123=null;
        Token LPAREN124=null;
        Token RPAREN126=null;
        Token SELECT127=null;
        EsperEPL2GrammarParser.columnList_return columnList125 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList128 = null;
        CommonTree WHEN119_tree=null;
        CommonTree NOT_EXPR120_tree=null;
        CommonTree MATCHED121_tree=null;
        CommonTree THEN122_tree=null;
        CommonTree INSERT123_tree=null;
        CommonTree LPAREN124_tree=null;
        CommonTree RPAREN126_tree=null;
        CommonTree SELECT127_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            WHEN119=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN119);
            NOT_EXPR120=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR120);
            MATCHED121=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED121);
            THEN122=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatched2676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN122);
            INSERT123=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeUnmatched2680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT123);
            int alt39=2;
            int LA39_0 = input.LA(1);
            if ( (LA39_0==LPAREN) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    {
                    LPAREN124=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeUnmatched2683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN124);
                    pushFollow(FOLLOW_columnList_in_mergeUnmatched2685);
                    columnList125=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList125.getTree());
                    RPAREN126=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeUnmatched2687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN126);
                    }
                    break;
            }
            SELECT127=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeUnmatched2691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT127);
            pushFollow(FOLLOW_selectionList_in_mergeUnmatched2693);
            selectionList128=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList128.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT129=null;
        Token SELECT131=null;
        Token DISTINCT132=null;
        Token WHERE135=null;
        Token GROUP137=null;
        Token BY138=null;
        Token HAVING140=null;
        Token ORDER142=null;
        Token BY143=null;
        Token ROW_LIMIT_EXPR145=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr130 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList133 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom134 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause136 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr139 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause141 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr144 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit146 = null;
        CommonTree INSERT129_tree=null;
        CommonTree SELECT131_tree=null;
        CommonTree DISTINCT132_tree=null;
        CommonTree WHERE135_tree=null;
        CommonTree GROUP137_tree=null;
        CommonTree BY138_tree=null;
        CommonTree HAVING140_tree=null;
        CommonTree ORDER142_tree=null;
        CommonTree BY143_tree=null;
        CommonTree ROW_LIMIT_EXPR145_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==INSERT) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    {
                    INSERT129=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT129);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2734);
                    insertIntoExpr130=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr130.getTree());
                    }
                    break;
            }
            SELECT131=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT131);
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==DISTINCT) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    DISTINCT132=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT132);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr2745);
            selectionList133=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList133.getTree());
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==FROM) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2749);
                    onExprFrom134=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom134.getTree());
                    }
                    break;
            }
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==WHERE) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    {
                    WHERE135=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE135);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2757);
                    whereClause136=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause136.getTree());
                    }
                    break;
            }
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==GROUP) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    GROUP137=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP137);
                    BY138=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY138);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2770);
                    groupByListExpr139=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr139.getTree());
                    }
                    break;
            }
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==HAVING) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    HAVING140=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING140);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2779);
                    havingClause141=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause141.getTree());
                    }
                    break;
            }
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==ORDER) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    ORDER142=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER142);
                    BY143=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY143);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2790);
                    orderByListExpr144=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr144.getTree());
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==ROW_LIMIT_EXPR) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR145=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR145);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2799);
                    rowLimit146=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit146.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE147=null;
        Token AS148=null;
        Token SET149=null;
        Token COMMA151=null;
        Token WHERE153=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment150 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment152 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause154 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE147_tree=null;
        CommonTree AS148_tree=null;
        CommonTree SET149_tree=null;
        CommonTree COMMA151_tree=null;
        CommonTree WHERE153_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE147=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE147);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt48=3;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==AS) ) {
                alt48=1;
            }
            else if ( (LA48_0==IDENT) ) {
                alt48=2;
            }
            switch (alt48) {
                case 1 :
                    {
                    AS148=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS148);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET149=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET149);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2887);
            onSetAssignment150=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment150.getTree());
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);
                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }
                switch (alt49) {
            	case 1 :
            	    {
            	    COMMA151=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2890); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA151);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2892);
            	    onSetAssignment152=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment152.getTree());
            	    }
            	    break;
            	default :
            	    break loop49;
                }
            } while (true);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==WHERE) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    WHERE153=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE153);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2901);
                    whereClause154=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause154.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT155=null;
        Token SELECT157=null;
        Token WHERE159=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr156 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList158 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause160 = null;
        CommonTree INSERT155_tree=null;
        CommonTree SELECT157_tree=null;
        CommonTree WHERE159_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT155=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT155);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2954);
            insertIntoExpr156=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr156.getTree());
            SELECT157=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT157);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2960);
            selectionList158=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList158.getTree());
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==WHERE) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    WHERE159=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE159);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2967);
                    whereClause160=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause160.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT161=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT161_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT161=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT161);
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==FIRST) ) {
                alt52=1;
            }
            else if ( (LA52_0==ALL) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);
                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE162=null;
        Token WHERE164=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom163 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause165 = null;
        CommonTree DELETE162_tree=null;
        CommonTree WHERE164_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE162=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE162);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3055);
            onExprFrom163=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom163.getTree());
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==WHERE) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    WHERE164=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE164);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3062);
                    whereClause165=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause165.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET166=null;
        Token COMMA168=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment167 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment169 = null;
        CommonTree SET166_tree=null;
        CommonTree COMMA168_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET166=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET166);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3104);
            onSetAssignment167=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment167.getTree());
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);
                if ( (LA54_0==COMMA) ) {
                    alt54=1;
                }
                switch (alt54) {
            	case 1 :
            	    {
            	    COMMA168=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3107); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA168);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3109);
            	    onSetAssignment169=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment169.getTree());
            	    }
            	    break;
            	default :
            	    break loop54;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS171=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty170 = null;
        EsperEPL2GrammarParser.expression_return expression172 = null;
        CommonTree EQUALS171_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3134);
            eventProperty170=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty170.getTree());
            EQUALS171=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS171);
            pushFollow(FOLLOW_expression_in_onSetAssignment3138);
            expression172=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression172.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM173=null;
        Token AS174=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM173_tree=null;
        CommonTree AS174_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM173=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM173);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt55=3;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==AS) ) {
                alt55=1;
            }
            else if ( (LA55_0==IDENT) ) {
                alt55=2;
            }
            switch (alt55) {
                case 1 :
                    {
                    AS174=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS174);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE175=null;
        Token WINDOW176=null;
        Token DOT177=null;
        Token DOT179=null;
        Token AS181=null;
        Token LPAREN183=null;
        Token RPAREN185=null;
        Token WHERE186=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression178 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression180 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter182 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList184 = null;
        EsperEPL2GrammarParser.expression_return expression187 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE175_tree=null;
        CommonTree WINDOW176_tree=null;
        CommonTree DOT177_tree=null;
        CommonTree DOT179_tree=null;
        CommonTree AS181_tree=null;
        CommonTree LPAREN183_tree=null;
        CommonTree RPAREN185_tree=null;
        CommonTree WHERE186_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE175=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE175);
            WINDOW176=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW176);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==DOT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    DOT177=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT177);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3219);
                    viewExpression178=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression178.getTree());
                    loop56:
                    do {
                        int alt56=2;
                        int LA56_0 = input.LA(1);
                        if ( (LA56_0==DOT) ) {
                            alt56=1;
                        }
                        switch (alt56) {
                    	case 1 :
                    	    {
                    	    DOT179=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3222); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT179);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3224);
                    	    viewExpression180=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression180.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop56;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt58=3;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==RETAINUNION) ) {
                alt58=1;
            }
            else if ( (LA58_0==RETAININTERSECTION) ) {
                alt58=2;
            }
            switch (alt58) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==AS) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    AS181=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS181);
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==SELECT||LA60_0==IDENT||LA60_0==TICKED_STRING_LITERAL) ) {
                alt60=1;
            }
            else if ( (LA60_0==LPAREN) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);
                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3256);
                    createWindowExprModelAfter182=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter182.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN183=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN183);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3273);
                    createColumnList184=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList184.getTree());
                    RPAREN185=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN185);
                    }
                    break;
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==INSERT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt61=2;
                    int LA61_0 = input.LA(1);
                    if ( (LA61_0==WHERE) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            {
                            WHERE186=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3295); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE186);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3297);
                            expression187=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression187.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT188=null;
        Token FROM190=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList189 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier191 = null;
        CommonTree SELECT188_tree=null;
        CommonTree FROM190_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==SELECT) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    SELECT188=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3384); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3387);
                    createSelectionList189=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList189.getTree());
                    FROM190=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3389); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3394);
            classIdentifier191=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier191.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE192=null;
        Token INDEX193=null;
        Token ON194=null;
        Token LPAREN195=null;
        Token RPAREN197=null;
        EsperEPL2GrammarParser.columnList_return columnList196 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE192_tree=null;
        CommonTree INDEX193_tree=null;
        CommonTree ON194_tree=null;
        CommonTree LPAREN195_tree=null;
        CommonTree RPAREN197_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE192=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE192);
            INDEX193=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX193);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON194=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON194);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN195=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN195);
            pushFollow(FOLLOW_columnList_in_createIndexExpr3423);
            columnList196=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList196.getTree());
            RPAREN197=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN197);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE198=null;
        Token VARIABLE199=null;
        Token EQUALS201=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier200 = null;
        EsperEPL2GrammarParser.expression_return expression202 = null;
        CommonTree n_tree=null;
        CommonTree CREATE198_tree=null;
        CommonTree VARIABLE199_tree=null;
        CommonTree EQUALS201_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE198=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE198);
            VARIABLE199=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE199);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3456);
            classIdentifier200=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier200.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==EQUALS) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    EQUALS201=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS201);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3465);
                    expression202=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression202.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA204=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement203 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement205 = null;
        CommonTree COMMA204_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3507);
            createColumnListElement203=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement203.getTree());
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);
                if ( (LA65_0==COMMA) ) {
                    alt65=1;
                }
                switch (alt65) {
            	case 1 :
            	    {
            	    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3510); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA204);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3512);
            	    createColumnListElement205=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement205.getTree());
            	    }
            	    break;
            	default :
            	    break loop65;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token b=null;
        Token RBRACK207=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier206 = null;
        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK207_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3545);
            classIdentifier206=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier206.getTree());
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==LBRACK) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK207=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK207);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA209=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement208 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement210 = null;
        CommonTree COMMA209_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3596);
            createSelectionListElement208=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement208.getTree());
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);
                if ( (LA67_0==COMMA) ) {
                    alt67=1;
                }
                switch (alt67) {
            	case 1 :
            	    {
            	    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3599); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA209);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3601);
            	    createSelectionListElement210=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement210.getTree());
            	    }
            	    break;
            	default :
            	    break loop67;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS212=null;
        Token AS214=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty211 = null;
        EsperEPL2GrammarParser.constant_return constant213 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS212_tree=null;
        CommonTree AS214_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt69=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt69=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt69=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt69=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);
                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3642);
                    eventProperty211=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty211.getTree());
                    int alt68=2;
                    int LA68_0 = input.LA(1);
                    if ( (LA68_0==AS) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            {
                            AS212=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3645); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS212);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3649); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3670);
                    constant213=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant213.getTree());
                    AS214=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS214);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE215=null;
        Token SCHEMA216=null;
        Token AS217=null;
        Token LPAREN219=null;
        Token RPAREN221=null;
        EsperEPL2GrammarParser.variantList_return variantList218 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList220 = null;
        EsperEPL2GrammarParser.columnList_return columnList222 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE215_tree=null;
        CommonTree SCHEMA216_tree=null;
        CommonTree AS217_tree=null;
        CommonTree LPAREN219_tree=null;
        CommonTree RPAREN221_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE215=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE215);
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==IDENT) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA216=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA216);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==AS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    AS217=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS217);
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==IDENT||LA74_0==STAR||LA74_0==TICKED_STRING_LITERAL) ) {
                alt74=1;
            }
            else if ( (LA74_0==LPAREN) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);
                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3727);
                    variantList218=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList218.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN219=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN219);
                    int alt72=2;
                    int LA72_0 = input.LA(1);
                    if ( (LA72_0==IDENT) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3740);
                            createColumnList220=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList220.getTree());
                            }
                            break;
                    }
                    RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);
                    int alt73=2;
                    int LA73_0 = input.LA(1);
                    if ( (LA73_0==IDENT) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3748); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3750);
                            columnList222=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList222.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA224=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement223 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement225 = null;
        CommonTree COMMA224_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3839);
            variantListElement223=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement223.getTree());
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);
                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }
                switch (alt75) {
            	case 1 :
            	    {
            	    COMMA224=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3842); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA224);
            	    pushFollow(FOLLOW_variantListElement_in_variantList3844);
            	    variantListElement225=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement225.getTree());
            	    }
            	    break;
            	default :
            	    break loop75;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR226=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier227 = null;
        CommonTree STAR226_tree=null;
        try {
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==STAR) ) {
                alt76=1;
            }
            else if ( (LA76_0==IDENT||LA76_0==TICKED_STRING_LITERAL) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);
                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR226=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR226_tree = (CommonTree)adaptor.create(STAR226);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR226_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3877);
                    classIdentifier227=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier227.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token INTO228=null;
        Token LPAREN229=null;
        Token RPAREN231=null;
        EsperEPL2GrammarParser.columnList_return columnList230 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO228_tree=null;
        CommonTree LPAREN229_tree=null;
        CommonTree RPAREN231_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt77=3;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==ISTREAM) ) {
                alt77=1;
            }
            else if ( (LA77_0==RSTREAM) ) {
                alt77=2;
            }
            switch (alt77) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO228=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO228);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==LPAREN) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    LPAREN229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN229);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3921);
                    columnList230=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList230.getTree());
                    RPAREN231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN231);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT232=null;
        Token COMMA233=null;
        Token IDENT234=null;
        CommonTree IDENT232_tree=null;
        CommonTree COMMA233_tree=null;
        CommonTree IDENT234_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT232=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT232);
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);
                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }
                switch (alt79) {
            	case 1 :
            	    {
            	    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList3960); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);
            	    IDENT234=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3962); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT234);
            	    }
            	    break;
            	default :
            	    break loop79;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression235 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin236 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList237 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4000);
            streamExpression235=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression235.getTree());
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==EOF||LA80_0==WHERE||(LA80_0>=GROUP && LA80_0<=HAVING)||LA80_0==OUTPUT||LA80_0==ORDER||LA80_0==ROW_LIMIT_EXPR||LA80_0==MATCH_RECOGNIZE||LA80_0==FOR||LA80_0==COMMA) ) {
                alt80=1;
            }
            else if ( ((LA80_0>=INNER && LA80_0<=FULL)) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);
                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4003);
                    regularJoin236=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin236.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4007);
                    outerJoinList237=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList237.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA238=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression239 = null;
        CommonTree COMMA238_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA238=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4021); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4024);
            	    streamExpression239=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression239.getTree());
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin240 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin241 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4038);
            outerJoin240=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin240.getTree());
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);
                if ( ((LA82_0>=INNER && LA82_0<=FULL)) ) {
                    alt82=1;
                }
                switch (alt82) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4041);
            	    outerJoin241=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin241.getTree());
            	    }
            	    break;
            	default :
            	    break loop82;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER242=null;
        Token JOIN243=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression244 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent245 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER242_tree=null;
        CommonTree JOIN243_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt85=2;
            int LA85_0 = input.LA(1);
            if ( ((LA85_0>=JOIN && LA85_0<=FULL)) ) {
                alt85=1;
            }
            else if ( (LA85_0==INNER) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);
                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    {
                    int alt84=2;
                    int LA84_0 = input.LA(1);
                    if ( ((LA84_0>=LEFT && LA84_0<=FULL)) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            int alt83=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt83=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt83=2;
                                }
                                break;
                            case FULL:
                                {
                                alt83=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 83, 0, input);
                                throw nvae;
                            }
                            switch (alt83) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4084); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4088); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4092); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER242=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4095); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER242);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN243=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN243);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4132);
            streamExpression244=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression244.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4134);
            outerJoinIdent245=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent245.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON246=null;
        Token AND_EXPR248=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair247 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair249 = null;
        CommonTree ON246_tree=null;
        CommonTree AND_EXPR248_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON246=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4199); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4202);
            outerJoinIdentPair247=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair247.getTree());
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);
                if ( (LA86_0==AND_EXPR) ) {
                    alt86=1;
                }
                switch (alt86) {
            	case 1 :
            	    {
            	    AND_EXPR248=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4205); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4208);
            	    outerJoinIdentPair249=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair249.getTree());
            	    }
            	    break;
            	default :
            	    break loop86;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS251=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty250 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty252 = null;
        CommonTree EQUALS251_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4223);
            eventProperty250=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty250.getTree());
            EQUALS251=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4225); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4228);
            eventProperty252=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty252.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression253 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4250);
            evalOrExpression253=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression253.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList254 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt87=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt87=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt87=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt87=3;
                    }
                    break;
            }
            switch (alt87) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==DISTINCT) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4307);
            selectionList254=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList254.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA256=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement255 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement257 = null;
        CommonTree COMMA256_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4338);
            selectionListElement255=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement255.getTree());
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA256=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4341); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4344);
            	    selectionListElement257=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement257.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS260=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector258 = null;
        EsperEPL2GrammarParser.expression_return expression259 = null;
        CommonTree s_tree=null;
        CommonTree AS260_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt91=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt91=1;
                }
                break;
            case IDENT:
                {
                int LA91_2 = input.LA(2);
                if ( (LA91_2==DOT) ) {
                    int LA91_68 = input.LA(3);
                    if ( (LA91_68==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt91=2;
                    }
                    else if ( (LA91_68==WINDOW||LA91_68==ESCAPE||LA91_68==EVERY_EXPR||(LA91_68>=SUM && LA91_68<=COUNT)||LA91_68==OUTER||(LA91_68>=JOIN && LA91_68<=FULL)||(LA91_68>=EVENTS && LA91_68<=LAST)||(LA91_68>=UNIDIRECTIONAL && LA91_68<=PREVIOUSTAIL)||LA91_68==PRIOR||(LA91_68>=WEEKDAY && LA91_68<=CAST)||LA91_68==SNAPSHOT||(LA91_68>=VARIABLE && LA91_68<=INDEX)||(LA91_68>=DEFINE && LA91_68<=MATCHES)||LA91_68==WHILE||(LA91_68>=MERGE && LA91_68<=MATCHED)||LA91_68==IDENT||LA91_68==TICKED_STRING_LITERAL) ) {
                        alt91=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 68, input);
                        throw nvae;
                    }
                }
                else if ( (LA91_2==EOF||(LA91_2>=IN_SET && LA91_2<=REGEXP)||(LA91_2>=OR_EXPR && LA91_2<=NOT_EXPR)||(LA91_2>=WHERE && LA91_2<=AS)||LA91_2==WHEN||LA91_2==FROM||LA91_2==IS||(LA91_2>=GROUP && LA91_2<=HAVING)||LA91_2==OUTPUT||LA91_2==INSERT||LA91_2==ORDER||LA91_2==ROW_LIMIT_EXPR||LA91_2==FOR||LA91_2==COMMA||LA91_2==LPAREN||LA91_2==EQUALS||LA91_2==LBRACK||(LA91_2>=STAR && LA91_2<=QUESTION)||(LA91_2>=BAND && LA91_2<=MOD)||LA91_2==ESCAPECHAR) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);
                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4386);
                    streamSelector258=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector258.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4391);
                    expression259=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression259.getTree());
                    int alt90=2;
                    int LA90_0 = input.LA(1);
                    if ( (LA90_0==AS) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            AS260=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4394); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS260);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4398);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT261=null;
        Token STAR262=null;
        Token AS263=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT261_tree=null;
        CommonTree STAR262_tree=null;
        CommonTree AS263_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT261=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT261);
            STAR262=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR262);
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    AS263=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS263);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT268=null;
        Token DOT270=null;
        Token AS272=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression264 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression265 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression266 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression267 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression269 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression271 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT268_tree=null;
        CommonTree DOT270_tree=null;
        CommonTree AS272_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt93=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA93_1 = input.LA(2);
                if ( (LA93_1==EOF||(LA93_1>=WHERE && LA93_1<=AS)||(LA93_1>=INNER && LA93_1<=ON)||(LA93_1>=GROUP && LA93_1<=HAVING)||LA93_1==OUTPUT||LA93_1==ORDER||(LA93_1>=UNIDIRECTIONAL && LA93_1<=RETAININTERSECTION)||LA93_1==ROW_LIMIT_EXPR||LA93_1==MATCH_RECOGNIZE||LA93_1==FOR||(LA93_1>=COMMA && LA93_1<=LPAREN)||(LA93_1>=EQUALS && LA93_1<=LBRACK)) ) {
                    alt93=1;
                }
                else if ( (LA93_1==COLON) ) {
                    alt93=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt93=1;
                }
                break;
            case PATTERN:
                {
                alt93=2;
                }
                break;
            case SQL:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4496);
                    eventFilterExpression264=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression264.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4500);
                    patternInclusionExpression265=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression265.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4504);
                    databaseJoinExpression266=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression266.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4508);
                    methodJoinExpression267=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression267.getTree());
                    }
                    break;
            }
            int alt95=2;
            int LA95_0 = input.LA(1);
            if ( (LA95_0==DOT) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    DOT268=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT268);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4517);
                    viewExpression269=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression269.getTree());
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);
                        if ( (LA94_0==DOT) ) {
                            alt94=1;
                        }
                        switch (alt94) {
                    	case 1 :
                    	    {
                    	    DOT270=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4520); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT270);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4522);
                    	    viewExpression271=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression271.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop94;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt96=3;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==AS) ) {
                alt96=1;
            }
            else if ( (LA96_0==IDENT) ) {
                alt96=2;
            }
            switch (alt96) {
                case 1 :
                    {
                    AS272=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS272);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt97=2;
            int LA97_0 = input.LA(1);
            if ( (LA97_0==UNIDIRECTIONAL) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4546); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt98=3;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==RETAINUNION) ) {
                alt98=1;
            }
            else if ( (LA98_0==RETAININTERSECTION) ) {
                alt98=2;
            }
            switch (alt98) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR273=null;
        Token LPAREN274=null;
        Token RPAREN276=null;
        EsperEPL2GrammarParser.expressionList_return expressionList275 = null;
        CommonTree i_tree=null;
        CommonTree FOR273_tree=null;
        CommonTree LPAREN274_tree=null;
        CommonTree RPAREN276_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR273=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR273);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt100=2;
            int LA100_0 = input.LA(1);
            if ( (LA100_0==LPAREN) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    {
                    LPAREN274=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN274);
                    int alt99=2;
                    int LA99_0 = input.LA(1);
                    if ( (LA99_0==WINDOW||LA99_0==ESCAPE||(LA99_0>=NOT_EXPR && LA99_0<=EVERY_EXPR)||(LA99_0>=SUM && LA99_0<=COUNT)||LA99_0==CASE||LA99_0==OUTER||(LA99_0>=JOIN && LA99_0<=FULL)||(LA99_0>=EVENTS && LA99_0<=LAST)||(LA99_0>=UNIDIRECTIONAL && LA99_0<=CURRENT_TIMESTAMP)||LA99_0==SNAPSHOT||(LA99_0>=VARIABLE && LA99_0<=INDEX)||(LA99_0>=BOOLEAN_TRUE && LA99_0<=VALUE_NULL)||(LA99_0>=DEFINE && LA99_0<=MATCHES)||LA99_0==WHILE||(LA99_0>=MERGE && LA99_0<=MATCHED)||LA99_0==NUM_DOUBLE||(LA99_0>=IDENT && LA99_0<=LPAREN)||(LA99_0>=PLUS && LA99_0<=QUESTION)||(LA99_0>=STRING_LITERAL && LA99_0<=QUOTED_STRING_LITERAL)||LA99_0==MINUS||LA99_0==LCURLY||LA99_0==NUM_INT||(LA99_0>=TICKED_STRING_LITERAL && LA99_0<=NUM_FLOAT)) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4622);
                            expressionList275=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList275.getTree());
                            }
                            break;
                    }
                    RPAREN276=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN276);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE277=null;
        Token LPAREN278=null;
        Token RPAREN286=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy279 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures280 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection281 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip282 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern283 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval284 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine285 = null;
        CommonTree MATCH_RECOGNIZE277_tree=null;
        CommonTree LPAREN278_tree=null;
        CommonTree RPAREN286_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE277=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE277);
            LPAREN278=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN278);
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==PARTITION) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4681);
                    matchRecogPartitionBy279=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy279.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4688);
            matchRecogMeasures280=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures280.getTree());
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==ALL) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4693);
                    matchRecogMatchesSelection281=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection281.getTree());
                    }
                    break;
            }
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==AFTER) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4699);
                    matchRecogMatchesAfterSkip282=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip282.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4705);
            matchRecogPattern283=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern283.getTree());
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==IDENT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4711);
                    matchRecogMatchesInterval284=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval284.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4717);
            matchRecogDefine285=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine285.getTree());
            RPAREN286=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN286);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION287=null;
        Token BY288=null;
        Token COMMA290=null;
        EsperEPL2GrammarParser.expression_return expression289 = null;
        EsperEPL2GrammarParser.expression_return expression291 = null;
        CommonTree PARTITION287_tree=null;
        CommonTree BY288_tree=null;
        CommonTree COMMA290_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION287=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION287);
            BY288=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY288);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4765);
            expression289=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression289.getTree());
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);
                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }
                switch (alt105) {
            	case 1 :
            	    {
            	    COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4768); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA290);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4770);
            	    expression291=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression291.getTree());
            	    }
            	    break;
            	default :
            	    break loop105;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES292=null;
        Token COMMA294=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem293 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem295 = null;
        CommonTree MEASURES292_tree=null;
        CommonTree COMMA294_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES292=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES292);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4801);
            matchRecogMeasureItem293=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem293.getTree());
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);
                if ( (LA106_0==COMMA) ) {
                    alt106=1;
                }
                switch (alt106) {
            	case 1 :
            	    {
            	    COMMA294=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4804); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA294);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4806);
            	    matchRecogMeasureItem295=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem295.getTree());
            	    }
            	    break;
            	default :
            	    break loop106;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS297=null;
        EsperEPL2GrammarParser.expression_return expression296 = null;
        CommonTree i_tree=null;
        CommonTree AS297_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4831);
            expression296=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression296.getTree());
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==AS) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    AS297=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS297);
                    int alt107=2;
                    int LA107_0 = input.LA(1);
                    if ( (LA107_0==IDENT) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4839); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL298=null;
        Token MATCHES299=null;
        CommonTree ALL298_tree=null;
        CommonTree MATCHES299_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL298=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL298_tree = (CommonTree)adaptor.create(ALL298);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL298_tree, root_0);
            }
            MATCHES299=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4873); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN300=null;
        Token LPAREN301=null;
        Token RPAREN303=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration302 = null;
        CommonTree PATTERN300_tree=null;
        CommonTree LPAREN301_tree=null;
        CommonTree RPAREN303_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN300=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN300);
            LPAREN301=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN301);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4892);
            matchRecogPatternAlteration302=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration302.getTree());
            RPAREN303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN303);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER304=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER304_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER304=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER304);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4920);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4924);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4928);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4932);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4936);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod305 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4974);
            timePeriod305=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod305.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat306 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat307 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5000);
            matchRecogPatternConcat306=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat306.getTree());
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);
                if ( (LA109_0==BOR) ) {
                    alt109=1;
                }
                switch (alt109) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5005); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5007);
            	    matchRecogPatternConcat307=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat307.getTree());
            	    }
            	    break;
            	default :
            	    break loop109;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary308 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);
                if ( ((LA110_0>=IDENT && LA110_0<=LPAREN)) ) {
                    alt110=1;
                }
                switch (alt110) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5040);
            	    matchRecogPatternUnary308=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary308.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested309 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom310 = null;
        try {
            int alt111=2;
            int LA111_0 = input.LA(1);
            if ( (LA111_0==LPAREN) ) {
                alt111=1;
            }
            else if ( (LA111_0==IDENT) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);
                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5065);
                    matchRecogPatternNested309=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested309.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5071);
                    matchRecogPatternAtom310=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom310.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN311=null;
        Token RPAREN313=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration312 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN311_tree=null;
        CommonTree RPAREN313_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN311=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN311);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5085);
            matchRecogPatternAlteration312=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration312.getTree());
            RPAREN313=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN313);
            int alt112=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt112=1;
                    }
                    break;
                case PLUS:
                    {
                    alt112=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt112=3;
                    }
                    break;
            }
            switch (alt112) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==STAR||(LA115_0>=PLUS && LA115_0<=QUESTION)) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    int alt113=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt113=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt113=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt113=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 113, 0, input);
                        throw nvae;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5149); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5155); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5161); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt114=2;
                    int LA114_0 = input.LA(1);
                    if ( (LA114_0==QUESTION) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE314=null;
        Token COMMA316=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem315 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem317 = null;
        CommonTree DEFINE314_tree=null;
        CommonTree COMMA316_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE314=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE314);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5213);
            matchRecogDefineItem315=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem315.getTree());
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);
                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }
                switch (alt116) {
            	case 1 :
            	    {
            	    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5216); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA316);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5218);
            	    matchRecogDefineItem317=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem317.getTree());
            	    }
            	    break;
            	default :
            	    break loop116;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS318=null;
        EsperEPL2GrammarParser.expression_return expression319 = null;
        CommonTree i_tree=null;
        CommonTree AS318_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS318=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS318);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5249);
            expression319=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression319.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN320=null;
        Token LBRACK321=null;
        Token RBRACK323=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression322 = null;
        CommonTree PATTERN320_tree=null;
        CommonTree LBRACK321_tree=null;
        CommonTree RBRACK323_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN320=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN320);
            LBRACK321=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK321);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5278);
            patternExpression322=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression322.getTree());
            RBRACK323=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK323);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL324=null;
        Token COLON325=null;
        Token LBRACK326=null;
        Token METADATASQL327=null;
        Token RBRACK328=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL324_tree=null;
        CommonTree COLON325_tree=null;
        CommonTree LBRACK326_tree=null;
        CommonTree METADATASQL327_tree=null;
        CommonTree RBRACK328_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL324=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL324);
            COLON325=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON325);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK326=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK326);
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==STRING_LITERAL) ) {
                alt117=1;
            }
            else if ( (LA117_0==QUOTED_STRING_LITERAL) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);
                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==METADATASQL) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    METADATASQL327=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL327);
                    int alt118=2;
                    int LA118_0 = input.LA(1);
                    if ( (LA118_0==STRING_LITERAL) ) {
                        alt118=1;
                    }
                    else if ( (LA118_0==QUOTED_STRING_LITERAL) ) {
                        alt118=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 0, input);
                        throw nvae;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5341); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5347); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK328=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK328);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON329=null;
        Token LPAREN331=null;
        Token RPAREN333=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier330 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList332 = null;
        CommonTree i_tree=null;
        CommonTree COLON329_tree=null;
        CommonTree LPAREN331_tree=null;
        CommonTree RPAREN333_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON329=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON329);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5407);
            classIdentifier330=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier330.getTree());
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==LPAREN) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    LPAREN331=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN331);
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( (LA120_0==WINDOW||LA120_0==ESCAPE||(LA120_0>=NOT_EXPR && LA120_0<=EVERY_EXPR)||(LA120_0>=SUM && LA120_0<=COUNT)||LA120_0==CASE||LA120_0==OUTER||(LA120_0>=JOIN && LA120_0<=FULL)||(LA120_0>=EVENTS && LA120_0<=LAST)||(LA120_0>=UNIDIRECTIONAL && LA120_0<=CURRENT_TIMESTAMP)||LA120_0==SNAPSHOT||(LA120_0>=VARIABLE && LA120_0<=INDEX)||(LA120_0>=BOOLEAN_TRUE && LA120_0<=VALUE_NULL)||(LA120_0>=DEFINE && LA120_0<=MATCHES)||LA120_0==WHILE||(LA120_0>=MERGE && LA120_0<=MATCHED)||LA120_0==NUM_DOUBLE||(LA120_0>=IDENT && LA120_0<=LPAREN)||(LA120_0>=PLUS && LA120_0<=QUESTION)||(LA120_0>=STRING_LITERAL && LA120_0<=QUOTED_STRING_LITERAL)||LA120_0==MINUS||LA120_0==LCURLY||LA120_0==NUM_INT||(LA120_0>=TICKED_STRING_LITERAL && LA120_0<=NUM_FLOAT)) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5412);
                            expressionList332=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList332.getTree());
                            }
                            break;
                    }
                    RPAREN333=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN333);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token COLON334=null;
        Token LPAREN335=null;
        Token RPAREN337=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList336 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON334_tree=null;
        CommonTree LPAREN335_tree=null;
        CommonTree RPAREN337_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON334=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON334);
            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);
            LPAREN335=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN335);
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==WINDOW||LA122_0==ESCAPE||(LA122_0>=NOT_EXPR && LA122_0<=EVERY_EXPR)||(LA122_0>=SUM && LA122_0<=COUNT)||LA122_0==CASE||LA122_0==OUTER||(LA122_0>=JOIN && LA122_0<=FULL)||(LA122_0>=EVENTS && LA122_0<=LAST)||(LA122_0>=UNIDIRECTIONAL && LA122_0<=CURRENT_TIMESTAMP)||LA122_0==SNAPSHOT||(LA122_0>=VARIABLE && LA122_0<=INDEX)||(LA122_0>=BOOLEAN_TRUE && LA122_0<=VALUE_NULL)||(LA122_0>=DEFINE && LA122_0<=MATCHES)||LA122_0==WHILE||(LA122_0>=MERGE && LA122_0<=MATCHED)||LA122_0==NUM_DOUBLE||(LA122_0>=IDENT && LA122_0<=LPAREN)||LA122_0==LBRACK||LA122_0==STAR||(LA122_0>=PLUS && LA122_0<=QUESTION)||(LA122_0>=STRING_LITERAL && LA122_0<=QUOTED_STRING_LITERAL)||LA122_0==MINUS||LA122_0==LCURLY||LA122_0==NUM_INT||(LA122_0>=TICKED_STRING_LITERAL && LA122_0<=NUM_FLOAT)) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5478);
                    expressionWithTimeList336=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList336.getTree());
                    }
                    break;
            }
            RPAREN337=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN337);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA339=null;
        EsperEPL2GrammarParser.expression_return expression338 = null;
        EsperEPL2GrammarParser.expression_return expression340 = null;
        CommonTree COMMA339_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5520);
            expression338=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression338.getTree());
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);
                if ( (LA123_0==COMMA) ) {
                    alt123=1;
                }
                switch (alt123) {
            	case 1 :
            	    {
            	    COMMA339=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5523); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA339);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5525);
            	    expression340=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression340.getTree());
            	    }
            	    break;
            	default :
            	    break loop123;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA342=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement341 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement343 = null;
        CommonTree COMMA342_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5560);
            orderByListElement341=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement341.getTree());
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);
                if ( (LA124_0==COMMA) ) {
                    alt124=1;
                }
                switch (alt124) {
            	case 1 :
            	    {
            	    COMMA342=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5563); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA342);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5565);
            	    orderByListElement343=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement343.getTree());
            	    }
            	    break;
            	default :
            	    break loop124;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression344 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5590);
            expression344=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression344.getTree());
            int alt125=3;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==ASC) ) {
                alt125=1;
            }
            else if ( (LA125_0==DESC) ) {
                alt125=2;
            }
            switch (alt125) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression345 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5637);
            evalOrExpression345=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression345.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN351=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter346 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod347 = null;
        EsperEPL2GrammarParser.number_return number348 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet349 = null;
        EsperEPL2GrammarParser.expression_return expression350 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr352 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN351_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==AFTER) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5675);
                    outputLimitAfter346=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter346.getTree());
                    }
                    break;
            }
            int alt127=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt127=1;
                    }
                    break;
                case FIRST:
                    {
                    alt127=2;
                    }
                    break;
                case LAST:
                    {
                    alt127=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt127=4;
                    }
                    break;
            }
            switch (alt127) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt131=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt131=1;
                }
                break;
            case AT:
                {
                alt131=2;
                }
                break;
            case WHEN:
                {
                alt131=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt131=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);
                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt129=2;
                    int LA129_0 = input.LA(1);
                    if ( (LA129_0==NUM_INT) ) {
                        int LA129_1 = input.LA(2);
                        if ( (LA129_1==EVENTS) ) {
                            alt129=2;
                        }
                        else if ( (LA129_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 129, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA129_0==NUM_LONG) ) {
                        int LA129_2 = input.LA(2);
                        if ( (LA129_2==EVENTS) ) {
                            alt129=2;
                        }
                        else if ( (LA129_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 129, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA129_0==NUM_FLOAT) ) {
                        int LA129_3 = input.LA(2);
                        if ( (LA129_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==EVENTS) ) {
                            alt129=2;
                        }
                        else if ( (LA129_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 129, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA129_0==NUM_DOUBLE) ) {
                        int LA129_4 = input.LA(2);
                        if ( (LA129_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==EVENTS) ) {
                            alt129=2;
                        }
                        else if ( (LA129_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 129, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA129_0==IDENT) ) {
                        int LA129_5 = input.LA(2);
                        if ( (LA129_5==EVENTS) ) {
                            alt129=2;
                        }
                        else if ( (LA129_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else if ( (LA129_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt129=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 129, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA129_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt129=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 129, 0, input);
                        throw nvae;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5759);
                            timePeriod347=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod347.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt128=2;
                            int LA128_0 = input.LA(1);
                            if ( (LA128_0==NUM_DOUBLE||LA128_0==NUM_INT||(LA128_0>=NUM_LONG && LA128_0<=NUM_FLOAT)) ) {
                                alt128=1;
                            }
                            else if ( (LA128_0==IDENT) ) {
                                alt128=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 128, 0, input);
                                throw nvae;
                            }
                            switch (alt128) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5770);
                                    number348=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number348.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5776); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5782); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5815);
                    crontabLimitParameterSet349=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet349.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit5834);
                    expression350=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression350.getTree());
                    int alt130=2;
                    int LA130_0 = input.LA(1);
                    if ( (LA130_0==THEN) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            {
                            THEN351=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5837); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN351);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5839);
                            onSetExpr352=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr352.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS355=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod353 = null;
        EsperEPL2GrammarParser.number_return number354 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS355_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt132=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA132_1 = input.LA(2);
                if ( (LA132_1==EVENTS) ) {
                    alt132=2;
                }
                else if ( (LA132_1==MIN||(LA132_1>=TIMEPERIOD_DAY && LA132_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt132=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA132_2 = input.LA(2);
                if ( (LA132_2==MIN||(LA132_2>=TIMEPERIOD_DAY && LA132_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt132=1;
                }
                else if ( (LA132_2==EVENTS) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA132_3 = input.LA(2);
                if ( (LA132_3==MIN||(LA132_3>=TIMEPERIOD_DAY && LA132_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt132=1;
                }
                else if ( (LA132_3==EVENTS) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA132_4 = input.LA(2);
                if ( (LA132_4==MIN||(LA132_4>=TIMEPERIOD_DAY && LA132_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt132=1;
                }
                else if ( (LA132_4==EVENTS) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt132=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);
                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5992);
                    timePeriod353=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod353.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5996);
                    number354=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number354.getTree());
                    EVENTS355=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS355);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==NUM_DOUBLE||LA133_0==PLUS||LA133_0==MINUS||LA133_0==NUM_INT||(LA133_0>=NUM_LONG && LA133_0<=NUM_FLOAT)) ) {
                alt133=1;
            }
            else if ( (LA133_0==IDENT) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);
                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6044);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==OFFSET||LA136_0==COMMA) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==COMMA) ) {
                        alt134=1;
                    }
                    else if ( (LA134_0==OFFSET) ) {
                        alt134=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);
                        throw nvae;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6057); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6063); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( (LA135_0==NUM_DOUBLE||LA135_0==PLUS||LA135_0==MINUS||LA135_0==NUM_INT||(LA135_0>=NUM_LONG && LA135_0<=NUM_FLOAT)) ) {
                        alt135=1;
                    }
                    else if ( (LA135_0==IDENT) ) {
                        alt135=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);
                        throw nvae;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6069);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6075); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN356=null;
        Token COMMA358=null;
        Token COMMA360=null;
        Token COMMA362=null;
        Token COMMA364=null;
        Token COMMA366=null;
        Token RPAREN368=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime357 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime359 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime361 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime363 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime365 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime367 = null;
        CommonTree LPAREN356_tree=null;
        CommonTree COMMA358_tree=null;
        CommonTree COMMA360_tree=null;
        CommonTree COMMA362_tree=null;
        CommonTree COMMA364_tree=null;
        CommonTree COMMA366_tree=null;
        CommonTree RPAREN368_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN356=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN356);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6129);
            expressionWithTime357=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime357.getTree());
            COMMA358=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA358);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6133);
            expressionWithTime359=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime359.getTree());
            COMMA360=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA360);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6137);
            expressionWithTime361=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime361.getTree());
            COMMA362=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA362);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6141);
            expressionWithTime363=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime363.getTree());
            COMMA364=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA364);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6145);
            expressionWithTime365=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime365.getTree());
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==COMMA) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    COMMA366=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA366);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6150);
                    expressionWithTime367=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime367.getTree());
                    }
                    break;
            }
            RPAREN368=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN368);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN369=null;
        Token THEN371=null;
        EsperEPL2GrammarParser.expression_return expression370 = null;
        EsperEPL2GrammarParser.expression_return expression372 = null;
        CommonTree WHEN369_tree=null;
        CommonTree THEN371_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN369=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6184); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6187);
            expression370=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression370.getTree());
            THEN371=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6189); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6192);
            expression372=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression372.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE373=null;
        EsperEPL2GrammarParser.expression_return expression374 = null;
        CommonTree ELSE373_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE373=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6205); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6208);
            expression374=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression374.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression375 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6221);
            caseExpression375=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression375.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE376=null;
        Token END379=null;
        Token CASE380=null;
        Token END384=null;
        EsperEPL2GrammarParser.whenClause_return whenClause377 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause378 = null;
        EsperEPL2GrammarParser.expression_return expression381 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause382 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause383 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression385 = null;
        CommonTree CASE376_tree=null;
        CommonTree END379_tree=null;
        CommonTree CASE380_tree=null;
        CommonTree END384_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt142=3;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==CASE) ) {
                int LA142_1 = input.LA(2);
                if ( (LA142_1==WINDOW||LA142_1==ESCAPE||(LA142_1>=NOT_EXPR && LA142_1<=EVERY_EXPR)||(LA142_1>=SUM && LA142_1<=COUNT)||LA142_1==CASE||LA142_1==OUTER||(LA142_1>=JOIN && LA142_1<=FULL)||(LA142_1>=EVENTS && LA142_1<=LAST)||(LA142_1>=UNIDIRECTIONAL && LA142_1<=CURRENT_TIMESTAMP)||LA142_1==SNAPSHOT||(LA142_1>=VARIABLE && LA142_1<=INDEX)||(LA142_1>=BOOLEAN_TRUE && LA142_1<=VALUE_NULL)||(LA142_1>=DEFINE && LA142_1<=MATCHES)||LA142_1==WHILE||(LA142_1>=MERGE && LA142_1<=MATCHED)||LA142_1==NUM_DOUBLE||(LA142_1>=IDENT && LA142_1<=LPAREN)||(LA142_1>=PLUS && LA142_1<=QUESTION)||(LA142_1>=STRING_LITERAL && LA142_1<=QUOTED_STRING_LITERAL)||LA142_1==MINUS||LA142_1==LCURLY||LA142_1==NUM_INT||(LA142_1>=TICKED_STRING_LITERAL && LA142_1<=NUM_FLOAT)) ) {
                    alt142=2;
                }
                else if ( (LA142_1==WHEN) ) {
                    alt142=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA142_0==WINDOW||LA142_0==ESCAPE||(LA142_0>=NOT_EXPR && LA142_0<=EVERY_EXPR)||(LA142_0>=SUM && LA142_0<=COUNT)||LA142_0==OUTER||(LA142_0>=JOIN && LA142_0<=FULL)||(LA142_0>=EVENTS && LA142_0<=LAST)||(LA142_0>=UNIDIRECTIONAL && LA142_0<=CURRENT_TIMESTAMP)||LA142_0==SNAPSHOT||(LA142_0>=VARIABLE && LA142_0<=INDEX)||(LA142_0>=BOOLEAN_TRUE && LA142_0<=VALUE_NULL)||(LA142_0>=DEFINE && LA142_0<=MATCHES)||LA142_0==WHILE||(LA142_0>=MERGE && LA142_0<=MATCHED)||LA142_0==NUM_DOUBLE||(LA142_0>=IDENT && LA142_0<=LPAREN)||(LA142_0>=PLUS && LA142_0<=QUESTION)||(LA142_0>=STRING_LITERAL && LA142_0<=QUOTED_STRING_LITERAL)||LA142_0==MINUS||LA142_0==LCURLY||LA142_0==NUM_INT||(LA142_0>=TICKED_STRING_LITERAL && LA142_0<=NUM_FLOAT)) ) {
                alt142=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);
                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE376=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6235); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE376_tree = (CommonTree)adaptor.create(CASE376);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE376_tree, root_0);
                    }
                    int cnt138=0;
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);
                        if ( (LA138_0==WHEN) ) {
                            alt138=1;
                        }
                        switch (alt138) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6238);
                    	    whenClause377=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause377.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt138 >= 1 ) break loop138;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(138, input);
                                throw eee;
                        }
                        cnt138++;
                    } while (true);
                    int alt139=2;
                    int LA139_0 = input.LA(1);
                    if ( (LA139_0==ELSE) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6241);
                            elseClause378=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause378.getTree());
                            }
                            break;
                    }
                    END379=(Token)match(input,END,FOLLOW_END_in_caseExpression6244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE380=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE380);
                    pushFollow(FOLLOW_expression_in_caseExpression6257);
                    expression381=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression381.getTree());
                    int cnt140=0;
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);
                        if ( (LA140_0==WHEN) ) {
                            alt140=1;
                        }
                        switch (alt140) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6259);
                    	    whenClause382=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause382.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt140 >= 1 ) break loop140;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(140, input);
                                throw eee;
                        }
                        cnt140++;
                    } while (true);
                    int alt141=2;
                    int LA141_0 = input.LA(1);
                    if ( (LA141_0==ELSE) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6262);
                            elseClause383=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause383.getTree());
                            }
                            break;
                    }
                    END384=(Token)match(input,END,FOLLOW_END_in_caseExpression6265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END384);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6289);
                    evalOrExpression385=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression385.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression386 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression387 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6300);
            evalAndExpression386=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression386.getTree());
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);
                if ( (LA143_0==OR_EXPR) ) {
                    alt143=1;
                }
                switch (alt143) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6305); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6307);
            	    evalAndExpression387=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression387.getTree());
            	    }
            	    break;
            	default :
            	    break loop143;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression388 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression389 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6339);
            bitWiseExpression388=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression388.getTree());
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);
                if ( (LA144_0==AND_EXPR) ) {
                    alt144=1;
                }
                switch (alt144) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6344); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6346);
            	    bitWiseExpression389=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression389.getTree());
            	    }
            	    break;
            	default :
            	    break loop144;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND391=null;
        Token BOR392=null;
        Token BXOR393=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression390 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression394 = null;
        CommonTree BAND391_tree=null;
        CommonTree BOR392_tree=null;
        CommonTree BXOR393_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6378);
            negatedExpression390=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression390.getTree());
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);
                if ( (LA146_0==BOR||(LA146_0>=BAND && LA146_0<=BXOR)) ) {
                    alt146=1;
                }
                switch (alt146) {
            	case 1 :
            	    {
            	    int alt145=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt145=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt145=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt145=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 145, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt145) {
            	        case 1 :
            	            {
            	            BAND391=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6383); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND391_tree = (CommonTree)adaptor.create(BAND391);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND391_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR392=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6386); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR392_tree = (CommonTree)adaptor.create(BOR392);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR392_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR393=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6389); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR393_tree = (CommonTree)adaptor.create(BXOR393);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR393_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6393);
            	    negatedExpression394=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression394.getTree());
            	    }
            	    break;
            	default :
            	    break loop146;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR396=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression395 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression397 = null;
        CommonTree NOT_EXPR396_tree=null;
        try {
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==WINDOW||LA147_0==ESCAPE||LA147_0==EVERY_EXPR||(LA147_0>=SUM && LA147_0<=COUNT)||LA147_0==OUTER||(LA147_0>=JOIN && LA147_0<=FULL)||(LA147_0>=EVENTS && LA147_0<=LAST)||(LA147_0>=UNIDIRECTIONAL && LA147_0<=CURRENT_TIMESTAMP)||LA147_0==SNAPSHOT||(LA147_0>=VARIABLE && LA147_0<=INDEX)||(LA147_0>=BOOLEAN_TRUE && LA147_0<=VALUE_NULL)||(LA147_0>=DEFINE && LA147_0<=MATCHES)||LA147_0==WHILE||(LA147_0>=MERGE && LA147_0<=MATCHED)||LA147_0==NUM_DOUBLE||(LA147_0>=IDENT && LA147_0<=LPAREN)||(LA147_0>=PLUS && LA147_0<=QUESTION)||(LA147_0>=STRING_LITERAL && LA147_0<=QUOTED_STRING_LITERAL)||LA147_0==MINUS||LA147_0==LCURLY||LA147_0==NUM_INT||(LA147_0>=TICKED_STRING_LITERAL && LA147_0<=NUM_FLOAT)) ) {
                alt147=1;
            }
            else if ( (LA147_0==NOT_EXPR) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);
                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6408);
                    evalEqualsExpression395=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression395.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR396=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR396_tree = (CommonTree)adaptor.create(NOT_EXPR396);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR396_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6417);
                    evalEqualsExpression397=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression397.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR399=null;
        Token LPAREN401=null;
        Token RPAREN403=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression398 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression400 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList402 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression404 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR399_tree=null;
        CommonTree LPAREN401_tree=null;
        CommonTree RPAREN403_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6430);
            evalRelationalExpression398=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression398.getTree());
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==IS||LA153_0==EQUALS||(LA153_0>=SQL_NE && LA153_0<=NOT_EQUAL)) ) {
                    alt153=1;
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    int alt148=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt148=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA148_2 = input.LA(2);
            	        if ( (LA148_2==NOT_EXPR) ) {
            	            alt148=3;
            	        }
            	        else if ( (LA148_2==WINDOW||LA148_2==ESCAPE||LA148_2==EVERY_EXPR||(LA148_2>=SUM && LA148_2<=COUNT)||LA148_2==OUTER||(LA148_2>=JOIN && LA148_2<=FULL)||(LA148_2>=ALL && LA148_2<=SOME)||(LA148_2>=EVENTS && LA148_2<=LAST)||(LA148_2>=UNIDIRECTIONAL && LA148_2<=CURRENT_TIMESTAMP)||LA148_2==SNAPSHOT||(LA148_2>=VARIABLE && LA148_2<=INDEX)||(LA148_2>=BOOLEAN_TRUE && LA148_2<=VALUE_NULL)||(LA148_2>=DEFINE && LA148_2<=MATCHES)||LA148_2==WHILE||(LA148_2>=MERGE && LA148_2<=MATCHED)||LA148_2==NUM_DOUBLE||(LA148_2>=IDENT && LA148_2<=LPAREN)||(LA148_2>=PLUS && LA148_2<=QUESTION)||(LA148_2>=STRING_LITERAL && LA148_2<=QUOTED_STRING_LITERAL)||LA148_2==MINUS||LA148_2==LCURLY||LA148_2==NUM_INT||(LA148_2>=TICKED_STRING_LITERAL && LA148_2<=NUM_FLOAT)) ) {
            	            alt148=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 148, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt148=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt148=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6443); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6461); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6475); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR399=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6477); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR399);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6491); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6505); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt152=2;
            	    int LA152_0 = input.LA(1);
            	    if ( (LA152_0==WINDOW||LA152_0==ESCAPE||LA152_0==EVERY_EXPR||(LA152_0>=SUM && LA152_0<=COUNT)||LA152_0==OUTER||(LA152_0>=JOIN && LA152_0<=FULL)||(LA152_0>=EVENTS && LA152_0<=LAST)||(LA152_0>=UNIDIRECTIONAL && LA152_0<=CURRENT_TIMESTAMP)||LA152_0==SNAPSHOT||(LA152_0>=VARIABLE && LA152_0<=INDEX)||(LA152_0>=BOOLEAN_TRUE && LA152_0<=VALUE_NULL)||(LA152_0>=DEFINE && LA152_0<=MATCHES)||LA152_0==WHILE||(LA152_0>=MERGE && LA152_0<=MATCHED)||LA152_0==NUM_DOUBLE||(LA152_0>=IDENT && LA152_0<=LPAREN)||(LA152_0>=PLUS && LA152_0<=QUESTION)||(LA152_0>=STRING_LITERAL && LA152_0<=QUOTED_STRING_LITERAL)||LA152_0==MINUS||LA152_0==LCURLY||LA152_0==NUM_INT||(LA152_0>=TICKED_STRING_LITERAL && LA152_0<=NUM_FLOAT)) ) {
            	        alt152=1;
            	    }
            	    else if ( ((LA152_0>=ALL && LA152_0<=SOME)) ) {
            	        alt152=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 152, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt152) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6535);
            	            evalRelationalExpression400=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression400.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt149=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt149=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt149=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt149=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 149, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt149) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6552); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6558); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6564); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt151=2;
            	            int LA151_0 = input.LA(1);
            	            if ( (LA151_0==LPAREN) ) {
            	                int LA151_1 = input.LA(2);
            	                if ( (LA151_1==SELECT) ) {
            	                    alt151=2;
            	                }
            	                else if ( (LA151_1==WINDOW||LA151_1==ESCAPE||(LA151_1>=NOT_EXPR && LA151_1<=EVERY_EXPR)||(LA151_1>=SUM && LA151_1<=COUNT)||LA151_1==CASE||LA151_1==OUTER||(LA151_1>=JOIN && LA151_1<=FULL)||(LA151_1>=EVENTS && LA151_1<=LAST)||(LA151_1>=UNIDIRECTIONAL && LA151_1<=CURRENT_TIMESTAMP)||LA151_1==SNAPSHOT||(LA151_1>=VARIABLE && LA151_1<=INDEX)||(LA151_1>=BOOLEAN_TRUE && LA151_1<=VALUE_NULL)||(LA151_1>=DEFINE && LA151_1<=MATCHES)||LA151_1==WHILE||(LA151_1>=MERGE && LA151_1<=MATCHED)||LA151_1==NUM_DOUBLE||(LA151_1>=IDENT && LA151_1<=RPAREN)||(LA151_1>=PLUS && LA151_1<=QUESTION)||(LA151_1>=STRING_LITERAL && LA151_1<=QUOTED_STRING_LITERAL)||LA151_1==MINUS||LA151_1==LCURLY||LA151_1==NUM_INT||(LA151_1>=TICKED_STRING_LITERAL && LA151_1<=NUM_FLOAT)) ) {
            	                    alt151=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 151, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 151, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt151) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN401=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6570); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN401);
            	                    int alt150=2;
            	                    int LA150_0 = input.LA(1);
            	                    if ( (LA150_0==WINDOW||LA150_0==ESCAPE||(LA150_0>=NOT_EXPR && LA150_0<=EVERY_EXPR)||(LA150_0>=SUM && LA150_0<=COUNT)||LA150_0==CASE||LA150_0==OUTER||(LA150_0>=JOIN && LA150_0<=FULL)||(LA150_0>=EVENTS && LA150_0<=LAST)||(LA150_0>=UNIDIRECTIONAL && LA150_0<=CURRENT_TIMESTAMP)||LA150_0==SNAPSHOT||(LA150_0>=VARIABLE && LA150_0<=INDEX)||(LA150_0>=BOOLEAN_TRUE && LA150_0<=VALUE_NULL)||(LA150_0>=DEFINE && LA150_0<=MATCHES)||LA150_0==WHILE||(LA150_0>=MERGE && LA150_0<=MATCHED)||LA150_0==NUM_DOUBLE||(LA150_0>=IDENT && LA150_0<=LPAREN)||(LA150_0>=PLUS && LA150_0<=QUESTION)||(LA150_0>=STRING_LITERAL && LA150_0<=QUOTED_STRING_LITERAL)||LA150_0==MINUS||LA150_0==LCURLY||LA150_0==NUM_INT||(LA150_0>=TICKED_STRING_LITERAL && LA150_0<=NUM_FLOAT)) ) {
            	                        alt150=1;
            	                    }
            	                    switch (alt150) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6572);
            	                            expressionList402=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList402.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN403=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6575); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN403);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6580);
            	                    subSelectGroupExpression404=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression404.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN407=null;
        Token RPAREN409=null;
        Token COMMA413=null;
        Token IN_SET415=null;
        Token BETWEEN417=null;
        Token LIKE419=null;
        Token ESCAPE421=null;
        Token REGEXP423=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr405 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr406 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList408 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression410 = null;
        EsperEPL2GrammarParser.expression_return expression411 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        EsperEPL2GrammarParser.expression_return expression414 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery416 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList418 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr420 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant422 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr424 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree RPAREN409_tree=null;
        CommonTree COMMA413_tree=null;
        CommonTree IN_SET415_tree=null;
        CommonTree BETWEEN417_tree=null;
        CommonTree LIKE419_tree=null;
        CommonTree ESCAPE421_tree=null;
        CommonTree REGEXP423_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6708);
            concatenationExpr405=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr405.getTree());
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==EOF||(LA167_0>=OR_EXPR && LA167_0<=AND_EXPR)||(LA167_0>=WHERE && LA167_0<=AS)||(LA167_0>=ELSE && LA167_0<=FROM)||LA167_0==IS||(LA167_0>=GROUP && LA167_0<=HAVING)||LA167_0==ALL||LA167_0==OUTPUT||LA167_0==INSERT||(LA167_0>=ORDER && LA167_0<=DESC)||LA167_0==PATTERN||(LA167_0>=TIMEPERIOD_SEC && LA167_0<=TIMEPERIOD_SECONDS)||LA167_0==ROW_LIMIT_EXPR||LA167_0==MEASURES||(LA167_0>=AFTER && LA167_0<=FOR)||LA167_0==COMMA||(LA167_0>=RPAREN && LA167_0<=EQUALS)||LA167_0==RBRACK||LA167_0==BOR||LA167_0==COLON||(LA167_0>=BAND && LA167_0<=GE)||LA167_0==RCURLY) ) {
                alt167=1;
            }
            else if ( ((LA167_0>=IN_SET && LA167_0<=REGEXP)||LA167_0==NOT_EXPR) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);
                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    {
                    {
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);
                        if ( ((LA159_0>=LT && LA159_0<=GE)) ) {
                            alt159=1;
                        }
                        switch (alt159) {
                    	case 1 :
                    	    {
                    	    int alt154=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt154=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt154=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt154=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt154=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 154, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt154) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6740); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6744); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6748); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6752); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt158=2;
                    	    int LA158_0 = input.LA(1);
                    	    if ( (LA158_0==WINDOW||LA158_0==ESCAPE||LA158_0==EVERY_EXPR||(LA158_0>=SUM && LA158_0<=COUNT)||LA158_0==OUTER||(LA158_0>=JOIN && LA158_0<=FULL)||(LA158_0>=EVENTS && LA158_0<=LAST)||(LA158_0>=UNIDIRECTIONAL && LA158_0<=CURRENT_TIMESTAMP)||LA158_0==SNAPSHOT||(LA158_0>=VARIABLE && LA158_0<=INDEX)||(LA158_0>=BOOLEAN_TRUE && LA158_0<=VALUE_NULL)||(LA158_0>=DEFINE && LA158_0<=MATCHES)||LA158_0==WHILE||(LA158_0>=MERGE && LA158_0<=MATCHED)||LA158_0==NUM_DOUBLE||(LA158_0>=IDENT && LA158_0<=LPAREN)||(LA158_0>=PLUS && LA158_0<=QUESTION)||(LA158_0>=STRING_LITERAL && LA158_0<=QUOTED_STRING_LITERAL)||LA158_0==MINUS||LA158_0==LCURLY||LA158_0==NUM_INT||(LA158_0>=TICKED_STRING_LITERAL && LA158_0<=NUM_FLOAT)) ) {
                    	        alt158=1;
                    	    }
                    	    else if ( ((LA158_0>=ALL && LA158_0<=SOME)) ) {
                    	        alt158=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 158, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt158) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6776);
                    	            concatenationExpr406=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr406.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt155=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt155=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt155=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt155=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 155, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt155) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6793); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6799); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6805); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt157=2;
                    	            int LA157_0 = input.LA(1);
                    	            if ( (LA157_0==LPAREN) ) {
                    	                int LA157_1 = input.LA(2);
                    	                if ( (LA157_1==SELECT) ) {
                    	                    alt157=2;
                    	                }
                    	                else if ( (LA157_1==WINDOW||LA157_1==ESCAPE||(LA157_1>=NOT_EXPR && LA157_1<=EVERY_EXPR)||(LA157_1>=SUM && LA157_1<=COUNT)||LA157_1==CASE||LA157_1==OUTER||(LA157_1>=JOIN && LA157_1<=FULL)||(LA157_1>=EVENTS && LA157_1<=LAST)||(LA157_1>=UNIDIRECTIONAL && LA157_1<=CURRENT_TIMESTAMP)||LA157_1==SNAPSHOT||(LA157_1>=VARIABLE && LA157_1<=INDEX)||(LA157_1>=BOOLEAN_TRUE && LA157_1<=VALUE_NULL)||(LA157_1>=DEFINE && LA157_1<=MATCHES)||LA157_1==WHILE||(LA157_1>=MERGE && LA157_1<=MATCHED)||LA157_1==NUM_DOUBLE||(LA157_1>=IDENT && LA157_1<=RPAREN)||(LA157_1>=PLUS && LA157_1<=QUESTION)||(LA157_1>=STRING_LITERAL && LA157_1<=QUOTED_STRING_LITERAL)||LA157_1==MINUS||LA157_1==LCURLY||LA157_1==NUM_INT||(LA157_1>=TICKED_STRING_LITERAL && LA157_1<=NUM_FLOAT)) ) {
                    	                    alt157=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 157, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 157, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt157) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN407=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6811); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN407);
                    	                    int alt156=2;
                    	                    int LA156_0 = input.LA(1);
                    	                    if ( (LA156_0==WINDOW||LA156_0==ESCAPE||(LA156_0>=NOT_EXPR && LA156_0<=EVERY_EXPR)||(LA156_0>=SUM && LA156_0<=COUNT)||LA156_0==CASE||LA156_0==OUTER||(LA156_0>=JOIN && LA156_0<=FULL)||(LA156_0>=EVENTS && LA156_0<=LAST)||(LA156_0>=UNIDIRECTIONAL && LA156_0<=CURRENT_TIMESTAMP)||LA156_0==SNAPSHOT||(LA156_0>=VARIABLE && LA156_0<=INDEX)||(LA156_0>=BOOLEAN_TRUE && LA156_0<=VALUE_NULL)||(LA156_0>=DEFINE && LA156_0<=MATCHES)||LA156_0==WHILE||(LA156_0>=MERGE && LA156_0<=MATCHED)||LA156_0==NUM_DOUBLE||(LA156_0>=IDENT && LA156_0<=LPAREN)||(LA156_0>=PLUS && LA156_0<=QUESTION)||(LA156_0>=STRING_LITERAL && LA156_0<=QUOTED_STRING_LITERAL)||LA156_0==MINUS||LA156_0==LCURLY||LA156_0==NUM_INT||(LA156_0>=TICKED_STRING_LITERAL && LA156_0<=NUM_FLOAT)) ) {
                    	                        alt156=1;
                    	                    }
                    	                    switch (alt156) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6813);
                    	                            expressionList408=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList408.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN409=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6816); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN409);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6821);
                    	                    subSelectGroupExpression410=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression410.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop159;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt160=2;
                    int LA160_0 = input.LA(1);
                    if ( (LA160_0==NOT_EXPR) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6917); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt166=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA166_1 = input.LA(2);
                        if ( (LA166_1==LPAREN) ) {
                            int LA166_5 = input.LA(3);
                            if ( (LA166_5==SELECT) ) {
                                alt166=2;
                            }
                            else if ( (LA166_5==WINDOW||LA166_5==ESCAPE||(LA166_5>=NOT_EXPR && LA166_5<=EVERY_EXPR)||(LA166_5>=SUM && LA166_5<=COUNT)||LA166_5==CASE||LA166_5==OUTER||(LA166_5>=JOIN && LA166_5<=FULL)||(LA166_5>=EVENTS && LA166_5<=LAST)||(LA166_5>=UNIDIRECTIONAL && LA166_5<=CURRENT_TIMESTAMP)||LA166_5==SNAPSHOT||(LA166_5>=VARIABLE && LA166_5<=INDEX)||(LA166_5>=BOOLEAN_TRUE && LA166_5<=VALUE_NULL)||(LA166_5>=DEFINE && LA166_5<=MATCHES)||LA166_5==WHILE||(LA166_5>=MERGE && LA166_5<=MATCHED)||LA166_5==NUM_DOUBLE||(LA166_5>=IDENT && LA166_5<=LPAREN)||(LA166_5>=PLUS && LA166_5<=QUESTION)||(LA166_5>=STRING_LITERAL && LA166_5<=QUOTED_STRING_LITERAL)||LA166_5==MINUS||LA166_5==LCURLY||LA166_5==NUM_INT||(LA166_5>=TICKED_STRING_LITERAL && LA166_5<=NUM_FLOAT)) ) {
                                alt166=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 166, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA166_1==LBRACK) ) {
                            alt166=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 166, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt166=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt166=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt166=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 166, 0, input);
                        throw nvae;
                    }
                    switch (alt166) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6944); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt161=2;
                            int LA161_0 = input.LA(1);
                            if ( (LA161_0==LPAREN) ) {
                                alt161=1;
                            }
                            else if ( (LA161_0==LBRACK) ) {
                                alt161=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 161, 0, input);
                                throw nvae;
                            }
                            switch (alt161) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6956); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6962); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6965);
                            expression411=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression411.getTree());
                            int alt163=2;
                            int LA163_0 = input.LA(1);
                            if ( (LA163_0==COLON) ) {
                                alt163=1;
                            }
                            else if ( (LA163_0==COMMA||LA163_0==RPAREN||LA163_0==RBRACK) ) {
                                alt163=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 163, 0, input);
                                throw nvae;
                            }
                            switch (alt163) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6987); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6990);
                                    expression412=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop162:
                                    do {
                                        int alt162=2;
                                        int LA162_0 = input.LA(1);
                                        if ( (LA162_0==COMMA) ) {
                                            alt162=1;
                                        }
                                        switch (alt162) {
                                    	case 1 :
                                    	    {
                                    	    COMMA413=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7016); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA413);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7018);
                                    	    expression414=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression414.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop162;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt164=2;
                            int LA164_0 = input.LA(1);
                            if ( (LA164_0==RPAREN) ) {
                                alt164=1;
                            }
                            else if ( (LA164_0==RBRACK) ) {
                                alt164=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 164, 0, input);
                                throw nvae;
                            }
                            switch (alt164) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7044); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7050); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET415=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7173); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET415);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7175);
                            inSubSelectQuery416=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery416.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN417=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7221); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN417);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7223);
                            betweenList418=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList418.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE419=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7273); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE419);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7275);
                            concatenationExpr420=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr420.getTree());
                            int alt165=2;
                            int LA165_0 = input.LA(1);
                            if ( (LA165_0==ESCAPE) ) {
                                alt165=1;
                            }
                            switch (alt165) {
                                case 1 :
                                    {
                                    ESCAPE421=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7278); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE421);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7280);
                                    stringconstant422=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant422.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP423=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7332); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP423);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7334);
                            concatenationExpr424=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr424.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr425 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7396);
            subQueryExpr425=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr425.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR428=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression426 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression427 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression429 = null;
        CommonTree c_tree=null;
        CommonTree LOR428_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7421);
            additiveExpression426=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression426.getTree());
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==LOR) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7429);
                    additiveExpression427=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression427.getTree());
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);
                        if ( (LA168_0==LOR) ) {
                            alt168=1;
                        }
                        switch (alt168) {
                    	case 1 :
                    	    {
                    	    LOR428=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7433); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR428);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7435);
                    	    additiveExpression429=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression429.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop168;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS431=null;
        Token MINUS432=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression430 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression433 = null;
        CommonTree PLUS431_tree=null;
        CommonTree MINUS432_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7476);
            multiplyExpression430=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression430.getTree());
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);
                if ( (LA171_0==PLUS||LA171_0==MINUS) ) {
                    alt171=1;
                }
                switch (alt171) {
            	case 1 :
            	    {
            	    int alt170=2;
            	    int LA170_0 = input.LA(1);
            	    if ( (LA170_0==PLUS) ) {
            	        alt170=1;
            	    }
            	    else if ( (LA170_0==MINUS) ) {
            	        alt170=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 170, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt170) {
            	        case 1 :
            	            {
            	            PLUS431=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7481); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS431_tree = (CommonTree)adaptor.create(PLUS431);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS431_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS432=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7484); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS432_tree = (CommonTree)adaptor.create(MINUS432);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS432_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7488);
            	    multiplyExpression433=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression433.getTree());
            	    }
            	    break;
            	default :
            	    break loop171;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR435=null;
        Token DIV436=null;
        Token MOD437=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression434 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression438 = null;
        CommonTree STAR435_tree=null;
        CommonTree DIV436_tree=null;
        CommonTree MOD437_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7502);
            unaryExpression434=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression434.getTree());
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);
                if ( (LA173_0==STAR||(LA173_0>=DIV && LA173_0<=MOD)) ) {
                    alt173=1;
                }
                switch (alt173) {
            	case 1 :
            	    {
            	    int alt172=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt172=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt172=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt172=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 172, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt172) {
            	        case 1 :
            	            {
            	            STAR435=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7507); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR435_tree = (CommonTree)adaptor.create(STAR435);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR435_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV436=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7510); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV436_tree = (CommonTree)adaptor.create(DIV436);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV436_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD437=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7513); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD437_tree = (CommonTree)adaptor.create(MOD437);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD437_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7517);
            	    unaryExpression438=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression438.getTree());
            	    }
            	    break;
            	default :
            	    break loop173;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS439=null;
        Token LPAREN443=null;
        Token RPAREN445=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty440 = null;
        EsperEPL2GrammarParser.constant_return constant441 = null;
        EsperEPL2GrammarParser.substitution_return substitution442 = null;
        EsperEPL2GrammarParser.expression_return expression444 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass446 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass447 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction448 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc449 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression450 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression451 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression452 = null;
        CommonTree d_tree=null;
        CommonTree MINUS439_tree=null;
        CommonTree LPAREN443_tree=null;
        CommonTree RPAREN445_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt176=9;
            alt176 = dfa176.predict(input);
            switch (alt176) {
                case 1 :
                    {
                    MINUS439=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS439);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7534);
                    eventProperty440=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty440.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7547);
                    constant441=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant441.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7552);
                    substitution442=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution442.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN443=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN443);
                    pushFollow(FOLLOW_expression_in_unaryExpression7559);
                    expression444=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression444.getTree());
                    RPAREN445=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN445);
                    int alt175=2;
                    int LA175_0 = input.LA(1);
                    if ( (LA175_0==DOT) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7566); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7568);
                            libFunctionNoClass446=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass446.getTree());
                            loop174:
                            do {
                                int alt174=2;
                                int LA174_0 = input.LA(1);
                                if ( (LA174_0==DOT) ) {
                                    alt174=1;
                                }
                                switch (alt174) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7573); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7575);
                            	    libFunctionNoClass447=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass447.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop174;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7612);
                    eventPropertyOrLibFunction448=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction448.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7624);
                    builtinFunc449=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc449.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7630);
                    arrayExpression450=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression450.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7635);
                    subSelectExpression451=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression451.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7640);
                    existsSubSelectExpression452=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression452.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr453 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7657);
            subQueryExpr453=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr453.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr454 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7679);
            subQueryExpr454=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr454.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS455=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr456 = null;
        CommonTree EXISTS455_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS455=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS455);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7703);
            subQueryExpr456=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr456.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN457=null;
        Token SELECT458=null;
        Token DISTINCT459=null;
        Token FROM461=null;
        Token WHERE463=null;
        Token RPAREN465=null;
        EsperEPL2GrammarParser.selectionList_return selectionList460 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr462 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause464 = null;
        CommonTree LPAREN457_tree=null;
        CommonTree SELECT458_tree=null;
        CommonTree DISTINCT459_tree=null;
        CommonTree FROM461_tree=null;
        CommonTree WHERE463_tree=null;
        CommonTree RPAREN465_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN457=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7736); if (state.failed) return retval;
            SELECT458=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7742); if (state.failed) return retval;
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==DISTINCT) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    DISTINCT459=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT459_tree = (CommonTree)adaptor.create(DISTINCT459);
                    adaptor.addChild(root_0, DISTINCT459_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr7748);
            selectionList460=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList460.getTree());
            FROM461=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7755); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7758);
            subSelectFilterExpr462=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr462.getTree());
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==WHERE) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    WHERE463=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7766); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7769);
                    whereClause464=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause464.getTree());
                    }
                    break;
            }
            RPAREN465=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7778); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT467=null;
        Token DOT469=null;
        Token AS471=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression466 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression468 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression470 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT467_tree=null;
        CommonTree DOT469_tree=null;
        CommonTree AS471_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7802);
            eventFilterExpression466=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression466.getTree());
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==DOT) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    DOT467=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT467);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7809);
                    viewExpression468=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression468.getTree());
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);
                        if ( (LA179_0==DOT) ) {
                            alt179=1;
                        }
                        switch (alt179) {
                    	case 1 :
                    	    {
                    	    DOT469=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7812); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT469);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7814);
                    	    viewExpression470=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression470.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop179;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt181=3;
            int LA181_0 = input.LA(1);
            if ( (LA181_0==AS) ) {
                alt181=1;
            }
            else if ( (LA181_0==IDENT) ) {
                alt181=2;
            }
            switch (alt181) {
                case 1 :
                    {
                    AS471=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS471);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt182=3;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==RETAINUNION) ) {
                alt182=1;
            }
            else if ( (LA182_0==RETAININTERSECTION) ) {
                alt182=2;
            }
            switch (alt182) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY472=null;
        Token COMMA474=null;
        Token RCURLY476=null;
        EsperEPL2GrammarParser.expression_return expression473 = null;
        EsperEPL2GrammarParser.expression_return expression475 = null;
        CommonTree LCURLY472_tree=null;
        CommonTree COMMA474_tree=null;
        CommonTree RCURLY476_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY472=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY472);
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==WINDOW||LA184_0==ESCAPE||(LA184_0>=NOT_EXPR && LA184_0<=EVERY_EXPR)||(LA184_0>=SUM && LA184_0<=COUNT)||LA184_0==CASE||LA184_0==OUTER||(LA184_0>=JOIN && LA184_0<=FULL)||(LA184_0>=EVENTS && LA184_0<=LAST)||(LA184_0>=UNIDIRECTIONAL && LA184_0<=CURRENT_TIMESTAMP)||LA184_0==SNAPSHOT||(LA184_0>=VARIABLE && LA184_0<=INDEX)||(LA184_0>=BOOLEAN_TRUE && LA184_0<=VALUE_NULL)||(LA184_0>=DEFINE && LA184_0<=MATCHES)||LA184_0==WHILE||(LA184_0>=MERGE && LA184_0<=MATCHED)||LA184_0==NUM_DOUBLE||(LA184_0>=IDENT && LA184_0<=LPAREN)||(LA184_0>=PLUS && LA184_0<=QUESTION)||(LA184_0>=STRING_LITERAL && LA184_0<=QUOTED_STRING_LITERAL)||LA184_0==MINUS||LA184_0==LCURLY||LA184_0==NUM_INT||(LA184_0>=TICKED_STRING_LITERAL && LA184_0<=NUM_FLOAT)) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7885);
                    expression473=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression473.getTree());
                    loop183:
                    do {
                        int alt183=2;
                        int LA183_0 = input.LA(1);
                        if ( (LA183_0==COMMA) ) {
                            alt183=1;
                        }
                        switch (alt183) {
                    	case 1 :
                    	    {
                    	    COMMA474=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7888); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA474);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression7890);
                    	    expression475=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression475.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop183;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY476=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY476);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM477=null;
        Token LPAREN478=null;
        Token ALL479=null;
        Token DISTINCT480=null;
        Token RPAREN482=null;
        Token AVG483=null;
        Token LPAREN484=null;
        Token ALL485=null;
        Token DISTINCT486=null;
        Token RPAREN488=null;
        Token COUNT489=null;
        Token LPAREN490=null;
        Token ALL491=null;
        Token DISTINCT492=null;
        Token STAR494=null;
        Token RPAREN495=null;
        Token MEDIAN496=null;
        Token LPAREN497=null;
        Token ALL498=null;
        Token DISTINCT499=null;
        Token RPAREN501=null;
        Token STDDEV502=null;
        Token LPAREN503=null;
        Token ALL504=null;
        Token DISTINCT505=null;
        Token RPAREN507=null;
        Token AVEDEV508=null;
        Token LPAREN509=null;
        Token ALL510=null;
        Token DISTINCT511=null;
        Token RPAREN513=null;
        Token COALESCE517=null;
        Token LPAREN518=null;
        Token COMMA520=null;
        Token COMMA522=null;
        Token RPAREN524=null;
        Token PREVIOUS525=null;
        Token LPAREN526=null;
        Token COMMA528=null;
        Token RPAREN530=null;
        Token PREVIOUSTAIL531=null;
        Token LPAREN532=null;
        Token COMMA534=null;
        Token RPAREN536=null;
        Token PREVIOUSCOUNT537=null;
        Token LPAREN538=null;
        Token RPAREN540=null;
        Token PREVIOUSWINDOW541=null;
        Token LPAREN542=null;
        Token RPAREN544=null;
        Token PRIOR545=null;
        Token LPAREN546=null;
        Token NUM_INT547=null;
        Token COMMA548=null;
        Token RPAREN550=null;
        Token INSTANCEOF551=null;
        Token LPAREN552=null;
        Token COMMA554=null;
        Token COMMA556=null;
        Token RPAREN558=null;
        Token CAST559=null;
        Token LPAREN560=null;
        Token COMMA562=null;
        Token AS563=null;
        Token RPAREN565=null;
        Token EXISTS566=null;
        Token LPAREN567=null;
        Token RPAREN569=null;
        Token CURRENT_TIMESTAMP570=null;
        Token LPAREN571=null;
        Token RPAREN572=null;
        EsperEPL2GrammarParser.expression_return expression481 = null;
        EsperEPL2GrammarParser.expression_return expression487 = null;
        EsperEPL2GrammarParser.expression_return expression493 = null;
        EsperEPL2GrammarParser.expression_return expression500 = null;
        EsperEPL2GrammarParser.expression_return expression506 = null;
        EsperEPL2GrammarParser.expression_return expression512 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation514 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation515 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation516 = null;
        EsperEPL2GrammarParser.expression_return expression519 = null;
        EsperEPL2GrammarParser.expression_return expression521 = null;
        EsperEPL2GrammarParser.expression_return expression523 = null;
        EsperEPL2GrammarParser.expression_return expression527 = null;
        EsperEPL2GrammarParser.expression_return expression529 = null;
        EsperEPL2GrammarParser.expression_return expression533 = null;
        EsperEPL2GrammarParser.expression_return expression535 = null;
        EsperEPL2GrammarParser.expression_return expression539 = null;
        EsperEPL2GrammarParser.expression_return expression543 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty549 = null;
        EsperEPL2GrammarParser.expression_return expression553 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier555 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier557 = null;
        EsperEPL2GrammarParser.expression_return expression561 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier564 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty568 = null;
        CommonTree SUM477_tree=null;
        CommonTree LPAREN478_tree=null;
        CommonTree ALL479_tree=null;
        CommonTree DISTINCT480_tree=null;
        CommonTree RPAREN482_tree=null;
        CommonTree AVG483_tree=null;
        CommonTree LPAREN484_tree=null;
        CommonTree ALL485_tree=null;
        CommonTree DISTINCT486_tree=null;
        CommonTree RPAREN488_tree=null;
        CommonTree COUNT489_tree=null;
        CommonTree LPAREN490_tree=null;
        CommonTree ALL491_tree=null;
        CommonTree DISTINCT492_tree=null;
        CommonTree STAR494_tree=null;
        CommonTree RPAREN495_tree=null;
        CommonTree MEDIAN496_tree=null;
        CommonTree LPAREN497_tree=null;
        CommonTree ALL498_tree=null;
        CommonTree DISTINCT499_tree=null;
        CommonTree RPAREN501_tree=null;
        CommonTree STDDEV502_tree=null;
        CommonTree LPAREN503_tree=null;
        CommonTree ALL504_tree=null;
        CommonTree DISTINCT505_tree=null;
        CommonTree RPAREN507_tree=null;
        CommonTree AVEDEV508_tree=null;
        CommonTree LPAREN509_tree=null;
        CommonTree ALL510_tree=null;
        CommonTree DISTINCT511_tree=null;
        CommonTree RPAREN513_tree=null;
        CommonTree COALESCE517_tree=null;
        CommonTree LPAREN518_tree=null;
        CommonTree COMMA520_tree=null;
        CommonTree COMMA522_tree=null;
        CommonTree RPAREN524_tree=null;
        CommonTree PREVIOUS525_tree=null;
        CommonTree LPAREN526_tree=null;
        CommonTree COMMA528_tree=null;
        CommonTree RPAREN530_tree=null;
        CommonTree PREVIOUSTAIL531_tree=null;
        CommonTree LPAREN532_tree=null;
        CommonTree COMMA534_tree=null;
        CommonTree RPAREN536_tree=null;
        CommonTree PREVIOUSCOUNT537_tree=null;
        CommonTree LPAREN538_tree=null;
        CommonTree RPAREN540_tree=null;
        CommonTree PREVIOUSWINDOW541_tree=null;
        CommonTree LPAREN542_tree=null;
        CommonTree RPAREN544_tree=null;
        CommonTree PRIOR545_tree=null;
        CommonTree LPAREN546_tree=null;
        CommonTree NUM_INT547_tree=null;
        CommonTree COMMA548_tree=null;
        CommonTree RPAREN550_tree=null;
        CommonTree INSTANCEOF551_tree=null;
        CommonTree LPAREN552_tree=null;
        CommonTree COMMA554_tree=null;
        CommonTree COMMA556_tree=null;
        CommonTree RPAREN558_tree=null;
        CommonTree CAST559_tree=null;
        CommonTree LPAREN560_tree=null;
        CommonTree COMMA562_tree=null;
        CommonTree AS563_tree=null;
        CommonTree RPAREN565_tree=null;
        CommonTree EXISTS566_tree=null;
        CommonTree LPAREN567_tree=null;
        CommonTree RPAREN569_tree=null;
        CommonTree CURRENT_TIMESTAMP570_tree=null;
        CommonTree LPAREN571_tree=null;
        CommonTree RPAREN572_tree=null;
        try {
            int alt198=19;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt198=1;
                }
                break;
            case AVG:
                {
                alt198=2;
                }
                break;
            case COUNT:
                {
                alt198=3;
                }
                break;
            case MEDIAN:
                {
                alt198=4;
                }
                break;
            case STDDEV:
                {
                alt198=5;
                }
                break;
            case AVEDEV:
                {
                alt198=6;
                }
                break;
            case FIRST:
                {
                alt198=7;
                }
                break;
            case LAST:
                {
                alt198=8;
                }
                break;
            case WINDOW:
                {
                alt198=9;
                }
                break;
            case COALESCE:
                {
                alt198=10;
                }
                break;
            case PREVIOUS:
                {
                alt198=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt198=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt198=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt198=14;
                }
                break;
            case PRIOR:
                {
                alt198=15;
                }
                break;
            case INSTANCEOF:
                {
                alt198=16;
                }
                break;
            case CAST:
                {
                alt198=17;
                }
                break;
            case EXISTS:
                {
                alt198=18;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt198=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);
                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM477=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM477_tree = (CommonTree)adaptor.create(SUM477);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM477_tree, root_0);
                    }
                    LPAREN478=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7923); if (state.failed) return retval;
                    int alt185=3;
                    int LA185_0 = input.LA(1);
                    if ( (LA185_0==ALL) ) {
                        alt185=1;
                    }
                    else if ( (LA185_0==DISTINCT) ) {
                        alt185=2;
                    }
                    switch (alt185) {
                        case 1 :
                            {
                            ALL479=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7927); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT480=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7932); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT480_tree = (CommonTree)adaptor.create(DISTINCT480);
                            adaptor.addChild(root_0, DISTINCT480_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc7936);
                    expression481=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());
                    RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7938); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG483=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG483_tree = (CommonTree)adaptor.create(AVG483);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG483_tree, root_0);
                    }
                    LPAREN484=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7947); if (state.failed) return retval;
                    int alt186=3;
                    int LA186_0 = input.LA(1);
                    if ( (LA186_0==ALL) ) {
                        alt186=1;
                    }
                    else if ( (LA186_0==DISTINCT) ) {
                        alt186=2;
                    }
                    switch (alt186) {
                        case 1 :
                            {
                            ALL485=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7951); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT486=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7956); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT486_tree = (CommonTree)adaptor.create(DISTINCT486);
                            adaptor.addChild(root_0, DISTINCT486_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc7960);
                    expression487=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression487.getTree());
                    RPAREN488=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7962); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT489=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT489_tree = (CommonTree)adaptor.create(COUNT489);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT489_tree, root_0);
                    }
                    LPAREN490=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7971); if (state.failed) return retval;
                    int alt188=2;
                    int LA188_0 = input.LA(1);
                    if ( (LA188_0==WINDOW||LA188_0==ESCAPE||(LA188_0>=NOT_EXPR && LA188_0<=EVERY_EXPR)||(LA188_0>=SUM && LA188_0<=COUNT)||LA188_0==CASE||LA188_0==OUTER||(LA188_0>=JOIN && LA188_0<=FULL)||(LA188_0>=DISTINCT && LA188_0<=ALL)||(LA188_0>=EVENTS && LA188_0<=LAST)||(LA188_0>=UNIDIRECTIONAL && LA188_0<=CURRENT_TIMESTAMP)||LA188_0==SNAPSHOT||(LA188_0>=VARIABLE && LA188_0<=INDEX)||(LA188_0>=BOOLEAN_TRUE && LA188_0<=VALUE_NULL)||(LA188_0>=DEFINE && LA188_0<=MATCHES)||LA188_0==WHILE||(LA188_0>=MERGE && LA188_0<=MATCHED)||LA188_0==NUM_DOUBLE||(LA188_0>=IDENT && LA188_0<=LPAREN)||(LA188_0>=PLUS && LA188_0<=QUESTION)||(LA188_0>=STRING_LITERAL && LA188_0<=QUOTED_STRING_LITERAL)||LA188_0==MINUS||LA188_0==LCURLY||LA188_0==NUM_INT||(LA188_0>=TICKED_STRING_LITERAL && LA188_0<=NUM_FLOAT)) ) {
                        alt188=1;
                    }
                    else if ( (LA188_0==STAR) ) {
                        alt188=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 188, 0, input);
                        throw nvae;
                    }
                    switch (alt188) {
                        case 1 :
                            {
                            {
                            int alt187=3;
                            int LA187_0 = input.LA(1);
                            if ( (LA187_0==ALL) ) {
                                alt187=1;
                            }
                            else if ( (LA187_0==DISTINCT) ) {
                                alt187=2;
                            }
                            switch (alt187) {
                                case 1 :
                                    {
                                    ALL491=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7983); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT492=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7988); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT492_tree = (CommonTree)adaptor.create(DISTINCT492);
                                    adaptor.addChild(root_0, DISTINCT492_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc7992);
                            expression493=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression493.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR494=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8003); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN495=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8014); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN496=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN496_tree = (CommonTree)adaptor.create(MEDIAN496);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN496_tree, root_0);
                    }
                    LPAREN497=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8023); if (state.failed) return retval;
                    int alt189=3;
                    int LA189_0 = input.LA(1);
                    if ( (LA189_0==ALL) ) {
                        alt189=1;
                    }
                    else if ( (LA189_0==DISTINCT) ) {
                        alt189=2;
                    }
                    switch (alt189) {
                        case 1 :
                            {
                            ALL498=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8027); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT499=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8032); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT499_tree = (CommonTree)adaptor.create(DISTINCT499);
                            adaptor.addChild(root_0, DISTINCT499_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8036);
                    expression500=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression500.getTree());
                    RPAREN501=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8038); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV502=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV502_tree = (CommonTree)adaptor.create(STDDEV502);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV502_tree, root_0);
                    }
                    LPAREN503=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8047); if (state.failed) return retval;
                    int alt190=3;
                    int LA190_0 = input.LA(1);
                    if ( (LA190_0==ALL) ) {
                        alt190=1;
                    }
                    else if ( (LA190_0==DISTINCT) ) {
                        alt190=2;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            ALL504=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8051); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT505=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8056); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT505_tree = (CommonTree)adaptor.create(DISTINCT505);
                            adaptor.addChild(root_0, DISTINCT505_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8060);
                    expression506=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression506.getTree());
                    RPAREN507=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8062); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV508=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV508_tree = (CommonTree)adaptor.create(AVEDEV508);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV508_tree, root_0);
                    }
                    LPAREN509=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8071); if (state.failed) return retval;
                    int alt191=3;
                    int LA191_0 = input.LA(1);
                    if ( (LA191_0==ALL) ) {
                        alt191=1;
                    }
                    else if ( (LA191_0==DISTINCT) ) {
                        alt191=2;
                    }
                    switch (alt191) {
                        case 1 :
                            {
                            ALL510=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8075); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT511=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8080); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT511_tree = (CommonTree)adaptor.create(DISTINCT511);
                            adaptor.addChild(root_0, DISTINCT511_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8084);
                    expression512=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression512.getTree());
                    RPAREN513=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8086); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8092);
                    firstAggregation514=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation514.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8097);
                    lastAggregation515=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation515.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8102);
                    windowAggregation516=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation516.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE517=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE517_tree = (CommonTree)adaptor.create(COALESCE517);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE517_tree, root_0);
                    }
                    LPAREN518=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8110); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8113);
                    expression519=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression519.getTree());
                    COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8115); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8118);
                    expression521=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression521.getTree());
                    loop192:
                    do {
                        int alt192=2;
                        int LA192_0 = input.LA(1);
                        if ( (LA192_0==COMMA) ) {
                            alt192=1;
                        }
                        switch (alt192) {
                    	case 1 :
                    	    {
                    	    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8121); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8124);
                    	    expression523=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression523.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop192;
                        }
                    } while (true);
                    RPAREN524=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8128); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS525=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS525_tree = (CommonTree)adaptor.create(PREVIOUS525);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS525_tree, root_0);
                    }
                    LPAREN526=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8137); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8140);
                    expression527=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression527.getTree());
                    int alt193=2;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==COMMA) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8143); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8146);
                            expression529=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression529.getTree());
                            }
                            break;
                    }
                    RPAREN530=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8150); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL531=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL531_tree = (CommonTree)adaptor.create(PREVIOUSTAIL531);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL531_tree, root_0);
                    }
                    LPAREN532=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8159); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8162);
                    expression533=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());
                    int alt194=2;
                    int LA194_0 = input.LA(1);
                    if ( (LA194_0==COMMA) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            COMMA534=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8165); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8168);
                            expression535=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression535.getTree());
                            }
                            break;
                    }
                    RPAREN536=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8172); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT537=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT537_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT537);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT537_tree, root_0);
                    }
                    LPAREN538=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8181); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8184);
                    expression539=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression539.getTree());
                    RPAREN540=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8186); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW541=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW541_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW541);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW541_tree, root_0);
                    }
                    LPAREN542=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8195); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8198);
                    expression543=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression543.getTree());
                    RPAREN544=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8200); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR545=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR545_tree = (CommonTree)adaptor.create(PRIOR545);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR545_tree, root_0);
                    }
                    LPAREN546=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8209); if (state.failed) return retval;
                    NUM_INT547=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8212); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT547_tree = (CommonTree)adaptor.create(NUM_INT547);
                    adaptor.addChild(root_0, NUM_INT547_tree);
                    }
                    COMMA548=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8214); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8217);
                    eventProperty549=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty549.getTree());
                    RPAREN550=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8219); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF551=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF551_tree = (CommonTree)adaptor.create(INSTANCEOF551);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF551_tree, root_0);
                    }
                    LPAREN552=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8232); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8235);
                    expression553=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression553.getTree());
                    COMMA554=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8237); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8240);
                    classIdentifier555=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier555.getTree());
                    loop195:
                    do {
                        int alt195=2;
                        int LA195_0 = input.LA(1);
                        if ( (LA195_0==COMMA) ) {
                            alt195=1;
                        }
                        switch (alt195) {
                    	case 1 :
                    	    {
                    	    COMMA556=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8243); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8246);
                    	    classIdentifier557=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier557.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop195;
                        }
                    } while (true);
                    RPAREN558=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8250); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST559=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST559_tree = (CommonTree)adaptor.create(CAST559);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST559_tree, root_0);
                    }
                    LPAREN560=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8259); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8262);
                    expression561=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression561.getTree());
                    int alt196=2;
                    int LA196_0 = input.LA(1);
                    if ( (LA196_0==COMMA) ) {
                        alt196=1;
                    }
                    else if ( (LA196_0==AS) ) {
                        alt196=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 196, 0, input);
                        throw nvae;
                    }
                    switch (alt196) {
                        case 1 :
                            {
                            COMMA562=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8265); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS563=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8270); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8274);
                    classIdentifier564=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier564.getTree());
                    RPAREN565=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8276); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS566=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS566_tree = (CommonTree)adaptor.create(EXISTS566);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS566_tree, root_0);
                    }
                    LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8285); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8288);
                    eventProperty568=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty568.getTree());
                    RPAREN569=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8290); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP570=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP570_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP570);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP570_tree, root_0);
                    }
                    int alt197=2;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==LPAREN) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            LPAREN571=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8300); if (state.failed) return retval;
                            RPAREN572=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8303); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST573=null;
        Token LPAREN574=null;
        Token COMMA576=null;
        Token RPAREN578=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr575 = null;
        EsperEPL2GrammarParser.expression_return expression577 = null;
        CommonTree FIRST573_tree=null;
        CommonTree LPAREN574_tree=null;
        CommonTree COMMA576_tree=null;
        CommonTree RPAREN578_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST573=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST573);
            LPAREN574=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN574);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8322);
            accessAggExpr575=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr575.getTree());
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==COMMA) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    COMMA576=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA576);
                    pushFollow(FOLLOW_expression_in_firstAggregation8327);
                    expression577=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression577.getTree());
                    }
                    break;
            }
            RPAREN578=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN578);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST579=null;
        Token LPAREN580=null;
        Token COMMA582=null;
        Token RPAREN584=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr581 = null;
        EsperEPL2GrammarParser.expression_return expression583 = null;
        CommonTree LAST579_tree=null;
        CommonTree LPAREN580_tree=null;
        CommonTree COMMA582_tree=null;
        CommonTree RPAREN584_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST579=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST579);
            LPAREN580=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN580);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8360);
            accessAggExpr581=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr581.getTree());
            int alt200=2;
            int LA200_0 = input.LA(1);
            if ( (LA200_0==COMMA) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    {
                    COMMA582=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8363); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA582);
                    pushFollow(FOLLOW_expression_in_lastAggregation8365);
                    expression583=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression583.getTree());
                    }
                    break;
            }
            RPAREN584=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN584);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW585=null;
        Token LPAREN586=null;
        Token RPAREN588=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr587 = null;
        CommonTree WINDOW585_tree=null;
        CommonTree LPAREN586_tree=null;
        CommonTree RPAREN588_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW585=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW585);
            LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN586);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8399);
            accessAggExpr587=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr587.getTree());
            RPAREN588=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN588);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector589 = null;
        EsperEPL2GrammarParser.expression_return expression590 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt201=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt201=1;
                }
                break;
            case IDENT:
                {
                int LA201_2 = input.LA(2);
                if ( (LA201_2==DOT) ) {
                    int LA201_68 = input.LA(3);
                    if ( (LA201_68==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt201=2;
                    }
                    else if ( (LA201_68==WINDOW||LA201_68==ESCAPE||LA201_68==EVERY_EXPR||(LA201_68>=SUM && LA201_68<=COUNT)||LA201_68==OUTER||(LA201_68>=JOIN && LA201_68<=FULL)||(LA201_68>=EVENTS && LA201_68<=LAST)||(LA201_68>=UNIDIRECTIONAL && LA201_68<=PREVIOUSTAIL)||LA201_68==PRIOR||(LA201_68>=WEEKDAY && LA201_68<=CAST)||LA201_68==SNAPSHOT||(LA201_68>=VARIABLE && LA201_68<=INDEX)||(LA201_68>=DEFINE && LA201_68<=MATCHES)||LA201_68==WHILE||(LA201_68>=MERGE && LA201_68<=MATCHED)||LA201_68==IDENT||LA201_68==TICKED_STRING_LITERAL) ) {
                        alt201=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 201, 68, input);
                        throw nvae;
                    }
                }
                else if ( ((LA201_2>=IN_SET && LA201_2<=REGEXP)||(LA201_2>=OR_EXPR && LA201_2<=NOT_EXPR)||LA201_2==IS||LA201_2==COMMA||(LA201_2>=LPAREN && LA201_2<=EQUALS)||LA201_2==LBRACK||(LA201_2>=STAR && LA201_2<=QUESTION)||(LA201_2>=BAND && LA201_2<=MOD)||LA201_2==ESCAPECHAR) ) {
                    alt201=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 201, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt201=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);
                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8447);
                    propertyStreamSelector589=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector589.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8452);
                    expression590=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression590.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX591=null;
        Token MIN592=null;
        Token LPAREN593=null;
        Token COMMA595=null;
        Token COMMA597=null;
        Token RPAREN599=null;
        EsperEPL2GrammarParser.expression_return expression594 = null;
        EsperEPL2GrammarParser.expression_return expression596 = null;
        EsperEPL2GrammarParser.expression_return expression598 = null;
        CommonTree MAX591_tree=null;
        CommonTree MIN592_tree=null;
        CommonTree LPAREN593_tree=null;
        CommonTree COMMA595_tree=null;
        CommonTree COMMA597_tree=null;
        CommonTree RPAREN599_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt202=2;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==MAX) ) {
                alt202=1;
            }
            else if ( (LA202_0==MIN) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);
                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    {
                    MAX591=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX591_tree = (CommonTree)adaptor.create(MAX591);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX591_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN592=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN592_tree = (CommonTree)adaptor.create(MIN592);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN592_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN593=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8474); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8477);
            expression594=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression594.getTree());
            int alt204=2;
            int LA204_0 = input.LA(1);
            if ( (LA204_0==COMMA) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    COMMA595=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8480); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8483);
                    expression596=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression596.getTree());
                    loop203:
                    do {
                        int alt203=2;
                        int LA203_0 = input.LA(1);
                        if ( (LA203_0==COMMA) ) {
                            alt203=1;
                        }
                        switch (alt203) {
                    	case 1 :
                    	    {
                    	    COMMA597=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8486); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8489);
                    	    expression598=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression598.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop203;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8496); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty600 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction601 = null;
        try {
            int alt205=2;
            int LA205_0 = input.LA(1);
            if ( (LA205_0==IDENT) ) {
                int LA205_1 = input.LA(2);
                if ( (LA205_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt205=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA205_292 = input.LA(4);
                        if ( ((LA205_292>=IN_SET && LA205_292<=REGEXP)||(LA205_292>=OR_EXPR && LA205_292<=NOT_EXPR)||LA205_292==IS||LA205_292==COMMA||LA205_292==EQUALS||(LA205_292>=STAR && LA205_292<=PLUS)||(LA205_292>=BAND && LA205_292<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_292==RPAREN) ) {
                            int LA205_671 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 671, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 292, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA205_293 = input.LA(4);
                        if ( ((LA205_293>=IN_SET && LA205_293<=REGEXP)||(LA205_293>=OR_EXPR && LA205_293<=NOT_EXPR)||LA205_293==IS||LA205_293==COMMA||LA205_293==EQUALS||(LA205_293>=STAR && LA205_293<=PLUS)||(LA205_293>=BAND && LA205_293<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_293==RPAREN) ) {
                            int LA205_697 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 697, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 293, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 47, input);
                        throw nvae;
                    }
                }
                else if ( (LA205_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==DOT) ) {
                    int LA205_51 = input.LA(3);
                    if ( (LA205_51==IDENT) ) {
                        int LA205_352 = input.LA(4);
                        if ( (LA205_352==LPAREN) ) {
                            int LA205_703 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 703, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_352==DOT) ) {
                            int LA205_704 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 704, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_352==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_352==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 352, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_51==TICKED_STRING_LITERAL) ) {
                        int LA205_353 = input.LA(4);
                        if ( (LA205_353==LPAREN) ) {
                            int LA205_762 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 762, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_353==DOT) ) {
                            int LA205_763 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 763, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_353==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_353==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 353, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_51==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==MAX) ) {
                        int LA205_360 = input.LA(4);
                        if ( (LA205_360==LPAREN) ) {
                            int LA205_821 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 821, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_360==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_360==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 360, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_51==MIN) ) {
                        int LA205_361 = input.LA(4);
                        if ( (LA205_361==LPAREN) ) {
                            int LA205_880 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 880, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_361==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_361==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 361, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_51==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_51==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 51, input);
                        throw nvae;
                    }
                }
                else if ( (LA205_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA205_0==TICKED_STRING_LITERAL) ) {
                int LA205_2 = input.LA(2);
                if ( (LA205_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt205=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA205_407 = input.LA(4);
                        if ( ((LA205_407>=IN_SET && LA205_407<=REGEXP)||(LA205_407>=OR_EXPR && LA205_407<=NOT_EXPR)||LA205_407==IS||LA205_407==COMMA||LA205_407==EQUALS||(LA205_407>=STAR && LA205_407<=PLUS)||(LA205_407>=BAND && LA205_407<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_407==RPAREN) ) {
                            int LA205_959 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 959, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 407, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA205_408 = input.LA(4);
                        if ( ((LA205_408>=IN_SET && LA205_408<=REGEXP)||(LA205_408>=OR_EXPR && LA205_408<=NOT_EXPR)||LA205_408==IS||LA205_408==COMMA||LA205_408==EQUALS||(LA205_408>=STAR && LA205_408<=PLUS)||(LA205_408>=BAND && LA205_408<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_408==RPAREN) ) {
                            int LA205_985 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 985, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 408, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA205_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==DOT) ) {
                    int LA205_110 = input.LA(3);
                    if ( (LA205_110==IDENT) ) {
                        int LA205_467 = input.LA(4);
                        if ( (LA205_467==LPAREN) ) {
                            int LA205_991 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 991, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_467==DOT) ) {
                            int LA205_992 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 992, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_467==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_467==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 467, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_110==TICKED_STRING_LITERAL) ) {
                        int LA205_468 = input.LA(4);
                        if ( (LA205_468==LPAREN) ) {
                            int LA205_1050 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1050, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_468==DOT) ) {
                            int LA205_1051 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1051, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_468==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_468==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 468, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_110==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==MAX) ) {
                        int LA205_475 = input.LA(4);
                        if ( (LA205_475==LPAREN) ) {
                            int LA205_1109 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1109, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_475==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_475==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 475, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_110==MIN) ) {
                        int LA205_476 = input.LA(4);
                        if ( (LA205_476==LPAREN) ) {
                            int LA205_1168 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1168, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA205_476==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==END) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else if ( (LA205_476==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt205=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 476, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA205_110==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else if ( (LA205_110==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt205=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 110, input);
                        throw nvae;
                    }
                }
                else if ( (LA205_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA205_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==MAX) ) {
                int LA205_9 = input.LA(2);
                if ( (LA205_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt205=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA205_522 = input.LA(4);
                        if ( ((LA205_522>=IN_SET && LA205_522<=REGEXP)||(LA205_522>=OR_EXPR && LA205_522<=NOT_EXPR)||LA205_522==IS||LA205_522==COMMA||LA205_522==EQUALS||(LA205_522>=STAR && LA205_522<=PLUS)||(LA205_522>=BAND && LA205_522<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_522==RPAREN) ) {
                            int LA205_1247 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1247, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 522, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA205_523 = input.LA(4);
                        if ( ((LA205_523>=IN_SET && LA205_523<=REGEXP)||(LA205_523>=OR_EXPR && LA205_523<=NOT_EXPR)||LA205_523==IS||LA205_523==COMMA||LA205_523==EQUALS||(LA205_523>=STAR && LA205_523<=PLUS)||(LA205_523>=BAND && LA205_523<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_523==RPAREN) ) {
                            int LA205_1273 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1273, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 523, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 165, input);
                        throw nvae;
                    }
                }
                else if ( (LA205_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA205_0==MIN) ) {
                int LA205_10 = input.LA(2);
                if ( (LA205_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt205=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA205_591 = input.LA(4);
                        if ( ((LA205_591>=IN_SET && LA205_591<=REGEXP)||(LA205_591>=OR_EXPR && LA205_591<=NOT_EXPR)||LA205_591==IS||LA205_591==COMMA||LA205_591==EQUALS||(LA205_591>=STAR && LA205_591<=PLUS)||(LA205_591>=BAND && LA205_591<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_591==RPAREN) ) {
                            int LA205_1299 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1299, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 591, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA205_592 = input.LA(4);
                        if ( ((LA205_592>=IN_SET && LA205_592<=REGEXP)||(LA205_592>=OR_EXPR && LA205_592<=NOT_EXPR)||LA205_592==IS||LA205_592==COMMA||LA205_592==EQUALS||(LA205_592>=STAR && LA205_592<=PLUS)||(LA205_592>=BAND && LA205_592<=MOD)) ) {
                            alt205=2;
                        }
                        else if ( (LA205_592==RPAREN) ) {
                            int LA205_1325 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt205=1;
                            }
                            else if ( (true) ) {
                                alt205=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 1325, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 205, 592, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 224, input);
                        throw nvae;
                    }
                }
                else if ( (LA205_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else if ( (LA205_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt205=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA205_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else if ( (LA205_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt205=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);
                throw nvae;
            }
            switch (alt205) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8515);
                    eventProperty600=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty600.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8520);
                    libFunction601=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction601.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT603=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass602 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass604 = null;
        CommonTree DOT603_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8532);
            libFunctionWithClass602=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass602.getTree());
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);
                if ( (LA206_0==DOT) ) {
                    alt206=1;
                }
                switch (alt206) {
            	case 1 :
            	    {
            	    DOT603=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8535); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT603);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8537);
            	    libFunctionNoClass604=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass604.getTree());
            	    }
            	    break;
            	default :
            	    break loop206;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT606=null;
        Token LPAREN608=null;
        Token RPAREN610=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy605 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent607 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs609 = null;
        CommonTree DOT606_tree=null;
        CommonTree LPAREN608_tree=null;
        CommonTree RPAREN610_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( (LA207_0==IDENT) ) {
                int LA207_1 = input.LA(2);
                if ( (LA207_1==DOT) ) {
                    alt207=1;
                }
            }
            else if ( (LA207_0==TICKED_STRING_LITERAL) ) {
                int LA207_2 = input.LA(2);
                if ( (LA207_2==DOT) ) {
                    alt207=1;
                }
            }
            switch (alt207) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8567);
                    classIdentifierNonGreedy605=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy605.getTree());
                    DOT606=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT606);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8573);
            funcIdent607=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent607.getTree());
            LPAREN608=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN608);
            int alt208=2;
            int LA208_0 = input.LA(1);
            if ( (LA208_0==WINDOW||LA208_0==ESCAPE||(LA208_0>=NOT_EXPR && LA208_0<=EVERY_EXPR)||(LA208_0>=SUM && LA208_0<=COUNT)||LA208_0==CASE||LA208_0==OUTER||(LA208_0>=JOIN && LA208_0<=FULL)||(LA208_0>=DISTINCT && LA208_0<=ALL)||(LA208_0>=EVENTS && LA208_0<=LAST)||(LA208_0>=UNIDIRECTIONAL && LA208_0<=CURRENT_TIMESTAMP)||LA208_0==SNAPSHOT||(LA208_0>=VARIABLE && LA208_0<=INDEX)||(LA208_0>=BOOLEAN_TRUE && LA208_0<=VALUE_NULL)||(LA208_0>=DEFINE && LA208_0<=MATCHES)||LA208_0==WHILE||(LA208_0>=MERGE && LA208_0<=MATCHED)||LA208_0==NUM_DOUBLE||(LA208_0>=IDENT && LA208_0<=LPAREN)||(LA208_0>=PLUS && LA208_0<=QUESTION)||(LA208_0>=STRING_LITERAL && LA208_0<=QUOTED_STRING_LITERAL)||LA208_0==MINUS||LA208_0==LCURLY||LA208_0==NUM_INT||(LA208_0>=TICKED_STRING_LITERAL && LA208_0<=NUM_FLOAT)) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8578);
                    libFunctionArgs609=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs609.getTree());
                    }
                    break;
            }
            RPAREN610=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN610);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN612=null;
        Token RPAREN614=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent611 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs613 = null;
        CommonTree LPAREN612_tree=null;
        CommonTree RPAREN614_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8611);
            funcIdent611=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent611.getTree());
            LPAREN612=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN612);
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==WINDOW||LA209_0==ESCAPE||(LA209_0>=NOT_EXPR && LA209_0<=EVERY_EXPR)||(LA209_0>=SUM && LA209_0<=COUNT)||LA209_0==CASE||LA209_0==OUTER||(LA209_0>=JOIN && LA209_0<=FULL)||(LA209_0>=DISTINCT && LA209_0<=ALL)||(LA209_0>=EVENTS && LA209_0<=LAST)||(LA209_0>=UNIDIRECTIONAL && LA209_0<=CURRENT_TIMESTAMP)||LA209_0==SNAPSHOT||(LA209_0>=VARIABLE && LA209_0<=INDEX)||(LA209_0>=BOOLEAN_TRUE && LA209_0<=VALUE_NULL)||(LA209_0>=DEFINE && LA209_0<=MATCHES)||LA209_0==WHILE||(LA209_0>=MERGE && LA209_0<=MATCHED)||LA209_0==NUM_DOUBLE||(LA209_0>=IDENT && LA209_0<=LPAREN)||(LA209_0>=PLUS && LA209_0<=QUESTION)||(LA209_0>=STRING_LITERAL && LA209_0<=QUOTED_STRING_LITERAL)||LA209_0==MINUS||LA209_0==LCURLY||LA209_0==NUM_INT||(LA209_0>=TICKED_STRING_LITERAL && LA209_0<=NUM_FLOAT)) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8616);
                    libFunctionArgs613=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs613.getTree());
                    }
                    break;
            }
            RPAREN614=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN614);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent615 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt210=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt210=1;
                }
                break;
            case MAX:
                {
                alt210=2;
                }
                break;
            case MIN:
                {
                alt210=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);
                throw nvae;
            }
            switch (alt210) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8646);
                    escapableIdent615=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent615.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL616=null;
        Token DISTINCT617=null;
        Token COMMA619=null;
        EsperEPL2GrammarParser.expression_return expression618 = null;
        EsperEPL2GrammarParser.expression_return expression620 = null;
        CommonTree ALL616_tree=null;
        CommonTree DISTINCT617_tree=null;
        CommonTree COMMA619_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt211=3;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==ALL) ) {
                alt211=1;
            }
            else if ( (LA211_0==DISTINCT) ) {
                alt211=2;
            }
            switch (alt211) {
                case 1 :
                    {
                    ALL616=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8683); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT617=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT617_tree = (CommonTree)adaptor.create(DISTINCT617);
                    adaptor.addChild(root_0, DISTINCT617_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs8692);
            expression618=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression618.getTree());
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);
                if ( (LA212_0==COMMA) ) {
                    alt212=1;
                }
                switch (alt212) {
            	case 1 :
            	    {
            	    COMMA619=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8695); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8698);
            	    expression620=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression620.getTree());
            	    }
            	    break;
            	default :
            	    break loop212;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR622=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr621 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr623 = null;
        CommonTree AND_EXPR622_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8712);
            concatenationExpr621=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr621.getTree());
            AND_EXPR622=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8714); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8717);
            concatenationExpr623=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr623.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression624 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression8745);
            followedByExpression624=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression624.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression625 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression626 = null;
        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8757);
            orExpression625=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression625.getTree());
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);
                if ( (LA213_0==FOLLOWED_BY) ) {
                    alt213=1;
                }
                switch (alt213) {
            	case 1 :
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8762); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8764);
            	    orExpression626=orExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression626.getTree());
            	    }
            	    break;
            	default :
            	    break loop213;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (f != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());
                }
                stream_orExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression627 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression628 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8803);
            andExpression627=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression627.getTree());
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);
                if ( (LA214_0==OR_EXPR) ) {
                    alt214=1;
                }
                switch (alt214) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8808); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression8810);
            	    andExpression628=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression628.getTree());
            	    }
            	    break;
            	default :
            	    break loop214;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression629 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression630 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8842);
            matchUntilExpression629=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression629.getTree());
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);
                if ( (LA215_0==AND_EXPR) ) {
                    alt215=1;
                }
                switch (alt215) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8847); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8849);
            	    matchUntilExpression630=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression630.getTree());
            	    }
            	    break;
            	default :
            	    break loop215;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression631 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression632 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==LBRACK) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8884);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8888);
            qualifyExpression631=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression631.getTree());
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( (LA217_0==UNTIL) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8895);
                    qualifyExpression632=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression632.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList633 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix634 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( ((LA220_0>=NOT_EXPR && LA220_0<=EVERY_DISTINCT_EXPR)) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    int alt218=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt218=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt218=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt218=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 0, input);
                        throw nvae;
                    }
                    switch (alt218) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8960); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8966); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8972); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8974);
                            distinctExpressionList633=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList633.getTree());
                            }
                            break;
                    }
                    int alt219=2;
                    int LA219_0 = input.LA(1);
                    if ( (LA219_0==LBRACK) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8980);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8989);
            guardPostFix634=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix634.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN635=null;
        Token COMMA637=null;
        Token RPAREN639=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom636 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom638 = null;
        CommonTree LPAREN635_tree=null;
        CommonTree COMMA637_tree=null;
        CommonTree RPAREN639_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN635=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN635);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9106);
            distinctExpressionAtom636=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom636.getTree());
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    COMMA637=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9109); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA637);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9111);
            	    distinctExpressionAtom638=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom638.getTree());
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            RPAREN639=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN639);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expression_return expression640 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_distinctExpressionAtom9138);
            expression640=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression640.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN643=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression641 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression642 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression644 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression645 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN643_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt222=2;
            int LA222_0 = input.LA(1);
            if ( (LA222_0==IDENT||LA222_0==TICKED_STRING_LITERAL) ) {
                alt222=1;
            }
            else if ( (LA222_0==LPAREN) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);
                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9153);
                    atomicExpression641=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression641.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9161);
                    patternExpression642=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression642.getTree());
                    RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN643);
                    }
                    break;
            }
            int alt223=3;
            int LA223_0 = input.LA(1);
            if ( (LA223_0==WHERE) ) {
                alt223=1;
            }
            else if ( (LA223_0==WHILE) ) {
                alt223=2;
            }
            switch (alt223) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9172);
                    guardWhereExpression644=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression644.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9182);
                    guardWhileExpression645=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression645.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression646 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression647 = null;
        try {
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==IDENT) ) {
                int LA224_1 = input.LA(2);
                if ( (LA224_1==COLON) ) {
                    alt224=1;
                }
                else if ( (LA224_1==EOF||(LA224_1>=OR_EXPR && LA224_1<=AND_EXPR)||LA224_1==WHERE||LA224_1==UNTIL||LA224_1==WHILE||(LA224_1>=LPAREN && LA224_1<=RBRACK)||LA224_1==FOLLOWED_BY) ) {
                    alt224=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 224, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA224_0==TICKED_STRING_LITERAL) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);
                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9244);
                    observerExpression646=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression646.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9248);
                    patternFilterExpression647=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression647.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON648=null;
        Token LPAREN649=null;
        Token RPAREN651=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList650 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON648_tree=null;
        CommonTree LPAREN649_tree=null;
        CommonTree RPAREN651_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON648=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON648);
            int alt225=2;
            int LA225_0 = input.LA(1);
            if ( (LA225_0==IDENT) ) {
                alt225=1;
            }
            else if ( (LA225_0==AT) ) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);
                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9276); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN649=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN649);
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==WINDOW||LA226_0==ESCAPE||(LA226_0>=NOT_EXPR && LA226_0<=EVERY_EXPR)||(LA226_0>=SUM && LA226_0<=COUNT)||LA226_0==CASE||LA226_0==OUTER||(LA226_0>=JOIN && LA226_0<=FULL)||(LA226_0>=EVENTS && LA226_0<=LAST)||(LA226_0>=UNIDIRECTIONAL && LA226_0<=CURRENT_TIMESTAMP)||LA226_0==SNAPSHOT||(LA226_0>=VARIABLE && LA226_0<=INDEX)||(LA226_0>=BOOLEAN_TRUE && LA226_0<=VALUE_NULL)||(LA226_0>=DEFINE && LA226_0<=MATCHES)||LA226_0==WHILE||(LA226_0>=MERGE && LA226_0<=MATCHED)||LA226_0==NUM_DOUBLE||(LA226_0>=IDENT && LA226_0<=LPAREN)||LA226_0==LBRACK||LA226_0==STAR||(LA226_0>=PLUS && LA226_0<=QUESTION)||(LA226_0>=STRING_LITERAL && LA226_0<=QUOTED_STRING_LITERAL)||LA226_0==MINUS||LA226_0==LCURLY||LA226_0==NUM_INT||(LA226_0>=TICKED_STRING_LITERAL && LA226_0<=NUM_FLOAT)) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9281);
                    expressionWithTimeList650=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList650.getTree());
                    }
                    break;
            }
            RPAREN651=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN651);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT652=null;
        Token COLON653=null;
        Token IDENT654=null;
        Token LPAREN655=null;
        Token RPAREN657=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList656 = null;
        CommonTree IDENT652_tree=null;
        CommonTree COLON653_tree=null;
        CommonTree IDENT654_tree=null;
        CommonTree LPAREN655_tree=null;
        CommonTree RPAREN657_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT652=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT652_tree = (CommonTree)adaptor.create(IDENT652);
            adaptor.addChild(root_0, IDENT652_tree);
            }
            COLON653=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9335); if (state.failed) return retval;
            IDENT654=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT654_tree = (CommonTree)adaptor.create(IDENT654);
            adaptor.addChild(root_0, IDENT654_tree);
            }
            LPAREN655=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9340); if (state.failed) return retval;
            int alt227=2;
            int LA227_0 = input.LA(1);
            if ( (LA227_0==WINDOW||LA227_0==ESCAPE||(LA227_0>=NOT_EXPR && LA227_0<=EVERY_EXPR)||(LA227_0>=SUM && LA227_0<=COUNT)||LA227_0==CASE||LA227_0==OUTER||(LA227_0>=JOIN && LA227_0<=FULL)||(LA227_0>=EVENTS && LA227_0<=LAST)||(LA227_0>=UNIDIRECTIONAL && LA227_0<=CURRENT_TIMESTAMP)||LA227_0==SNAPSHOT||(LA227_0>=VARIABLE && LA227_0<=INDEX)||(LA227_0>=BOOLEAN_TRUE && LA227_0<=VALUE_NULL)||(LA227_0>=DEFINE && LA227_0<=MATCHES)||LA227_0==WHILE||(LA227_0>=MERGE && LA227_0<=MATCHED)||LA227_0==NUM_DOUBLE||(LA227_0>=IDENT && LA227_0<=LPAREN)||LA227_0==LBRACK||LA227_0==STAR||(LA227_0>=PLUS && LA227_0<=QUESTION)||(LA227_0>=STRING_LITERAL && LA227_0<=QUOTED_STRING_LITERAL)||LA227_0==MINUS||LA227_0==LCURLY||LA227_0==NUM_INT||(LA227_0>=TICKED_STRING_LITERAL && LA227_0<=NUM_FLOAT)) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9344);
                    expressionWithTimeList656=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList656.getTree());
                    }
                    break;
            }
            RPAREN657=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9348); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN658=null;
        Token RPAREN660=null;
        EsperEPL2GrammarParser.expression_return expression659 = null;
        CommonTree LPAREN658_tree=null;
        CommonTree RPAREN660_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN658=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9361); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9364);
            expression659=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression659.getTree());
            RPAREN660=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9366); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK661=null;
        Token RBRACK665=null;
        EsperEPL2GrammarParser.expression_return expression662 = null;
        EsperEPL2GrammarParser.expression_return expression663 = null;
        EsperEPL2GrammarParser.expression_return expression664 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK661_tree=null;
        CommonTree RBRACK665_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK661=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK661);
            int alt230=2;
            int LA230_0 = input.LA(1);
            if ( (LA230_0==WINDOW||LA230_0==ESCAPE||(LA230_0>=NOT_EXPR && LA230_0<=EVERY_EXPR)||(LA230_0>=SUM && LA230_0<=COUNT)||LA230_0==CASE||LA230_0==OUTER||(LA230_0>=JOIN && LA230_0<=FULL)||(LA230_0>=EVENTS && LA230_0<=LAST)||(LA230_0>=UNIDIRECTIONAL && LA230_0<=CURRENT_TIMESTAMP)||LA230_0==SNAPSHOT||(LA230_0>=VARIABLE && LA230_0<=INDEX)||(LA230_0>=BOOLEAN_TRUE && LA230_0<=VALUE_NULL)||(LA230_0>=DEFINE && LA230_0<=MATCHES)||LA230_0==WHILE||(LA230_0>=MERGE && LA230_0<=MATCHED)||LA230_0==NUM_DOUBLE||(LA230_0>=IDENT && LA230_0<=LPAREN)||(LA230_0>=PLUS && LA230_0<=QUESTION)||(LA230_0>=STRING_LITERAL && LA230_0<=QUOTED_STRING_LITERAL)||LA230_0==MINUS||LA230_0==LCURLY||LA230_0==NUM_INT||(LA230_0>=TICKED_STRING_LITERAL && LA230_0<=NUM_FLOAT)) ) {
                alt230=1;
            }
            else if ( (LA230_0==COLON) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);
                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9394);
                    expression662=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression662.getTree());
                    int alt229=2;
                    int LA229_0 = input.LA(1);
                    if ( (LA229_0==COLON) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9399); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt228=2;
                            int LA228_0 = input.LA(1);
                            if ( (LA228_0==WINDOW||LA228_0==ESCAPE||(LA228_0>=NOT_EXPR && LA228_0<=EVERY_EXPR)||(LA228_0>=SUM && LA228_0<=COUNT)||LA228_0==CASE||LA228_0==OUTER||(LA228_0>=JOIN && LA228_0<=FULL)||(LA228_0>=EVENTS && LA228_0<=LAST)||(LA228_0>=UNIDIRECTIONAL && LA228_0<=CURRENT_TIMESTAMP)||LA228_0==SNAPSHOT||(LA228_0>=VARIABLE && LA228_0<=INDEX)||(LA228_0>=BOOLEAN_TRUE && LA228_0<=VALUE_NULL)||(LA228_0>=DEFINE && LA228_0<=MATCHES)||LA228_0==WHILE||(LA228_0>=MERGE && LA228_0<=MATCHED)||LA228_0==NUM_DOUBLE||(LA228_0>=IDENT && LA228_0<=LPAREN)||(LA228_0>=PLUS && LA228_0<=QUESTION)||(LA228_0>=STRING_LITERAL && LA228_0<=QUOTED_STRING_LITERAL)||LA228_0==MINUS||LA228_0==LCURLY||LA228_0==NUM_INT||(LA228_0>=TICKED_STRING_LITERAL && LA228_0<=NUM_FLOAT)) ) {
                                alt228=1;
                            }
                            switch (alt228) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9402);
                                    expression663=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression663.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9424);
                    expression664=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression664.getTree());
                    }
                    break;
            }
            RBRACK665=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK665);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS666=null;
        Token LPAREN668=null;
        Token RPAREN670=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier667 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList669 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression671 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS666_tree=null;
        CommonTree LPAREN668_tree=null;
        CommonTree RPAREN670_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==IDENT) ) {
                int LA231_1 = input.LA(2);
                if ( (LA231_1==EQUALS) ) {
                    alt231=1;
                }
            }
            switch (alt231) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS666=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS666);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9533);
            classIdentifier667=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier667.getTree());
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==LPAREN) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    LPAREN668=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN668);
                    int alt232=2;
                    int LA232_0 = input.LA(1);
                    if ( (LA232_0==WINDOW||LA232_0==ESCAPE||(LA232_0>=NOT_EXPR && LA232_0<=EVERY_EXPR)||(LA232_0>=SUM && LA232_0<=COUNT)||LA232_0==CASE||LA232_0==OUTER||(LA232_0>=JOIN && LA232_0<=FULL)||(LA232_0>=EVENTS && LA232_0<=LAST)||(LA232_0>=UNIDIRECTIONAL && LA232_0<=CURRENT_TIMESTAMP)||LA232_0==SNAPSHOT||(LA232_0>=VARIABLE && LA232_0<=INDEX)||(LA232_0>=BOOLEAN_TRUE && LA232_0<=VALUE_NULL)||(LA232_0>=DEFINE && LA232_0<=MATCHES)||LA232_0==WHILE||(LA232_0>=MERGE && LA232_0<=MATCHED)||LA232_0==NUM_DOUBLE||(LA232_0>=IDENT && LA232_0<=LPAREN)||(LA232_0>=PLUS && LA232_0<=QUESTION)||(LA232_0>=STRING_LITERAL && LA232_0<=QUOTED_STRING_LITERAL)||LA232_0==MINUS||LA232_0==LCURLY||LA232_0==NUM_INT||(LA232_0>=TICKED_STRING_LITERAL && LA232_0<=NUM_FLOAT)) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9546);
                            expressionList669=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList669.getTree());
                            }
                            break;
                    }
                    RPAREN670=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN670);
                    }
                    break;
            }
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==LBRACK) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9561);
                    propertyExpression671=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression671.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic672 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic673 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9606);
            propertyExpressionAtomic672=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic672.getTree());
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);
                if ( (LA235_0==LBRACK) ) {
                    alt235=1;
                }
                switch (alt235) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9609);
            	    propertyExpressionAtomic673=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic673.getTree());
            	    }
            	    break;
            	default :
            	    break loop235;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK674=null;
        Token SELECT675=null;
        Token FROM677=null;
        Token AS679=null;
        Token IDENT680=null;
        Token WHERE681=null;
        Token RBRACK683=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList676 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty678 = null;
        EsperEPL2GrammarParser.expression_return expression682 = null;
        CommonTree LBRACK674_tree=null;
        CommonTree SELECT675_tree=null;
        CommonTree FROM677_tree=null;
        CommonTree AS679_tree=null;
        CommonTree IDENT680_tree=null;
        CommonTree WHERE681_tree=null;
        CommonTree RBRACK683_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK674=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK674);
            int alt236=2;
            int LA236_0 = input.LA(1);
            if ( (LA236_0==SELECT) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    SELECT675=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT675);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9644);
                    propertySelectionList676=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList676.getTree());
                    FROM677=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM677);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9650);
            eventProperty678=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty678.getTree());
            int alt237=2;
            int LA237_0 = input.LA(1);
            if ( (LA237_0==AS) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    AS679=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS679);
                    IDENT680=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT680);
                    }
                    break;
            }
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==WHERE) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    WHERE681=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE681);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9662);
                    expression682=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression682.getTree());
                    }
                    break;
            }
            RBRACK683=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK683);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA685=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement684 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement686 = null;
        CommonTree COMMA685_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9716);
            propertySelectionListElement684=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement684.getTree());
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);
                if ( (LA239_0==COMMA) ) {
                    alt239=1;
                }
                switch (alt239) {
            	case 1 :
            	    {
            	    COMMA685=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9719); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9722);
            	    propertySelectionListElement686=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement686.getTree());
            	    }
            	    break;
            	default :
            	    break loop239;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS689=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector687 = null;
        EsperEPL2GrammarParser.expression_return expression688 = null;
        CommonTree s_tree=null;
        CommonTree AS689_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt241=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt241=1;
                }
                break;
            case IDENT:
                {
                int LA241_2 = input.LA(2);
                if ( (LA241_2==DOT) ) {
                    int LA241_68 = input.LA(3);
                    if ( (LA241_68==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt241=2;
                    }
                    else if ( (LA241_68==WINDOW||LA241_68==ESCAPE||LA241_68==EVERY_EXPR||(LA241_68>=SUM && LA241_68<=COUNT)||LA241_68==OUTER||(LA241_68>=JOIN && LA241_68<=FULL)||(LA241_68>=EVENTS && LA241_68<=LAST)||(LA241_68>=UNIDIRECTIONAL && LA241_68<=PREVIOUSTAIL)||LA241_68==PRIOR||(LA241_68>=WEEKDAY && LA241_68<=CAST)||LA241_68==SNAPSHOT||(LA241_68>=VARIABLE && LA241_68<=INDEX)||(LA241_68>=DEFINE && LA241_68<=MATCHES)||LA241_68==WHILE||(LA241_68>=MERGE && LA241_68<=MATCHED)||LA241_68==IDENT||LA241_68==TICKED_STRING_LITERAL) ) {
                        alt241=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 241, 68, input);
                        throw nvae;
                    }
                }
                else if ( ((LA241_2>=IN_SET && LA241_2<=REGEXP)||(LA241_2>=OR_EXPR && LA241_2<=NOT_EXPR)||LA241_2==AS||LA241_2==FROM||LA241_2==IS||LA241_2==COMMA||LA241_2==LPAREN||LA241_2==EQUALS||LA241_2==LBRACK||(LA241_2>=STAR && LA241_2<=QUESTION)||(LA241_2>=BAND && LA241_2<=MOD)||LA241_2==ESCAPECHAR) ) {
                    alt241=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt241=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);
                throw nvae;
            }
            switch (alt241) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9764);
                    propertyStreamSelector687=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector687.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9769);
                    expression688=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression688.getTree());
                    int alt240=2;
                    int LA240_0 = input.LA(1);
                    if ( (LA240_0==AS) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            {
                            AS689=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9772); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS689);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9776);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT690=null;
        Token STAR691=null;
        Token AS692=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT690_tree=null;
        CommonTree STAR691_tree=null;
        CommonTree AS692_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT690=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT690);
            STAR691=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR691);
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==AS) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    AS692=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS692);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS693=null;
        Token LPAREN695=null;
        Token RPAREN697=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier694 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList696 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression698 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS693_tree=null;
        CommonTree LPAREN695_tree=null;
        CommonTree RPAREN697_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==IDENT) ) {
                int LA243_1 = input.LA(2);
                if ( (LA243_1==EQUALS) ) {
                    alt243=1;
                }
            }
            switch (alt243) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS693=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS693);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9889);
            classIdentifier694=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier694.getTree());
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==LPAREN) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    LPAREN695=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN695);
                    int alt244=2;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==WINDOW||LA244_0==ESCAPE||(LA244_0>=NOT_EXPR && LA244_0<=EVERY_EXPR)||(LA244_0>=SUM && LA244_0<=COUNT)||LA244_0==CASE||LA244_0==OUTER||(LA244_0>=JOIN && LA244_0<=FULL)||(LA244_0>=EVENTS && LA244_0<=LAST)||(LA244_0>=UNIDIRECTIONAL && LA244_0<=CURRENT_TIMESTAMP)||LA244_0==SNAPSHOT||(LA244_0>=VARIABLE && LA244_0<=INDEX)||(LA244_0>=BOOLEAN_TRUE && LA244_0<=VALUE_NULL)||(LA244_0>=DEFINE && LA244_0<=MATCHES)||LA244_0==WHILE||(LA244_0>=MERGE && LA244_0<=MATCHED)||LA244_0==NUM_DOUBLE||(LA244_0>=IDENT && LA244_0<=LPAREN)||(LA244_0>=PLUS && LA244_0<=QUESTION)||(LA244_0>=STRING_LITERAL && LA244_0<=QUOTED_STRING_LITERAL)||LA244_0==MINUS||LA244_0==LCURLY||LA244_0==NUM_INT||(LA244_0>=TICKED_STRING_LITERAL && LA244_0<=NUM_FLOAT)) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9902);
                            expressionList696=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList696.getTree());
                            }
                            break;
                    }
                    RPAREN697=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN697);
                    }
                    break;
            }
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==LBRACK) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9917);
                    propertyExpression698=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression698.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT699=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT699_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier9972);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);
                if ( (LA247_0==DOT) ) {
                    int LA247_22 = input.LA(2);
                    if ( (LA247_22==IDENT) ) {
                        int LA247_45 = input.LA(3);
                        if ( (LA247_45==EOF||LA247_45==CREATE||(LA247_45>=OR_EXPR && LA247_45<=AS)||LA247_45==SELECT||(LA247_45>=INNER && LA247_45<=ON)||(LA247_45>=GROUP && LA247_45<=HAVING)||LA247_45==OUTPUT||LA247_45==INSERT||LA247_45==ORDER||(LA247_45>=UNIDIRECTIONAL && LA247_45<=RETAININTERSECTION)||LA247_45==DELETE||LA247_45==SET||LA247_45==UNTIL||LA247_45==ROW_LIMIT_EXPR||(LA247_45>=UPDATE && LA247_45<=MATCH_RECOGNIZE)||(LA247_45>=FOR && LA247_45<=WHILE)||LA247_45==MERGE||(LA247_45>=COMMA && LA247_45<=RPAREN)||(LA247_45>=DOT && LA247_45<=RBRACK)||LA247_45==RCURLY||LA247_45==FOLLOWED_BY||LA247_45==TICKED_STRING_LITERAL||LA247_45==EMAILAT) ) {
                            alt247=1;
                        }
                    }
                    else if ( (LA247_22==TICKED_STRING_LITERAL) ) {
                        alt247=1;
                    }
                }
                switch (alt247) {
            	case 1 :
            	    {
            	    DOT699=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9991); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT699);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier9995);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop247;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT700=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT700_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10040);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);
                if ( (LA248_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA248_2 = input.LA(3);
                        if ( (LA248_2==DOT) ) {
                            alt248=1;
                        }
                        else if ( (LA248_2==LPAREN) ) {
                            alt248=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA248_3 = input.LA(3);
                        if ( (LA248_3==DOT) ) {
                            alt248=1;
                        }
                        else if ( (LA248_3==LPAREN) ) {
                            alt248=2;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt248=2;
                        }
                        break;
                    }
                }
                switch (alt248) {
            	case 1 :
            	    {
            	    DOT700=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10075); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT700);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10079);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop248;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA702=null;
        EsperEPL2GrammarParser.expression_return expression701 = null;
        EsperEPL2GrammarParser.expression_return expression703 = null;
        CommonTree COMMA702_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10121);
            expression701=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression701.getTree());
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( (LA249_0==COMMA) ) {
                    alt249=1;
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    COMMA702=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10124); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10127);
            	    expression703=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression703.getTree());
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA705=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime704 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime706 = null;
        CommonTree COMMA705_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10155);
            expressionWithTime704=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime704.getTree());
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);
                if ( (LA250_0==COMMA) ) {
                    alt250=1;
                }
                switch (alt250) {
            	case 1 :
            	    {
            	    COMMA705=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10158); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10161);
            	    expressionWithTime706=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime706.getTree());
            	    }
            	    break;
            	default :
            	    break loop250;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand707 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand708 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod709 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable710 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand711 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand712 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator713 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator714 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList715 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar716 = null;
        try {
            int alt251=10;
            int LA251_0 = input.LA(1);
            if ( (LA251_0==LAST) ) {
                int LA251_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt251=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt251=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==LW) ) {
                int LA251_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt251=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt251=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==NUM_INT) ) {
                int LA251_3 = input.LA(2);
                if ( (LA251_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt251=7;
                }
                else if ( (LA251_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==TIMEPERIOD_SECONDS) ) {
                    int LA251_168 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 168, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_3==TIMEPERIOD_SECOND) ) {
                    int LA251_169 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 169, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_3==TIMEPERIOD_SEC) ) {
                    int LA251_170 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt251=8;
                }
                else if ( (LA251_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt251=5;
                }
                else if ( (LA251_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==NUM_LONG) ) {
                int LA251_4 = input.LA(2);
                if ( (LA251_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt251=7;
                }
                else if ( (LA251_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt251=8;
                }
                else if ( (LA251_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==TIMEPERIOD_SECONDS) ) {
                    int LA251_213 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 213, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_4==TIMEPERIOD_SECOND) ) {
                    int LA251_214 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 214, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_4==TIMEPERIOD_SEC) ) {
                    int LA251_215 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 215, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt251=5;
                }
                else if ( (LA251_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==NUM_FLOAT) ) {
                int LA251_5 = input.LA(2);
                if ( (LA251_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt251=8;
                }
                else if ( (LA251_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt251=7;
                }
                else if ( (LA251_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==TIMEPERIOD_SECONDS) ) {
                    int LA251_256 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 256, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_5==TIMEPERIOD_SECOND) ) {
                    int LA251_257 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 257, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_5==TIMEPERIOD_SEC) ) {
                    int LA251_258 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 258, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt251=5;
                }
                else if ( (LA251_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==NUM_DOUBLE) ) {
                int LA251_6 = input.LA(2);
                if ( (LA251_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt251=5;
                }
                else if ( (LA251_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt251=8;
                }
                else if ( (LA251_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt251=7;
                }
                else if ( (LA251_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==TIMEPERIOD_SECONDS) ) {
                    int LA251_304 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 304, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_6==TIMEPERIOD_SECOND) ) {
                    int LA251_305 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 305, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_6==TIMEPERIOD_SEC) ) {
                    int LA251_306 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 306, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==IDENT) ) {
                int LA251_7 = input.LA(2);
                if ( (LA251_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt251=7;
                }
                else if ( (LA251_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==TIMEPERIOD_SECONDS) ) {
                    int LA251_324 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 324, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_7==TIMEPERIOD_SECOND) ) {
                    int LA251_325 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 325, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_7==TIMEPERIOD_SEC) ) {
                    int LA251_326 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 326, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt251=5;
                }
                else if ( (LA251_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt251=8;
                }
                else if ( (LA251_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==QUESTION) ) {
                int LA251_8 = input.LA(2);
                if ( (LA251_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt251=7;
                }
                else if ( (LA251_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==TIMEPERIOD_SECONDS) ) {
                    int LA251_393 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 393, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_8==TIMEPERIOD_SECOND) ) {
                    int LA251_394 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 394, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_8==TIMEPERIOD_SEC) ) {
                    int LA251_395 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt251=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt251=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 395, input);
                        throw nvae;
                    }
                }
                else if ( (LA251_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt251=4;
                }
                else if ( (LA251_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt251=8;
                }
                else if ( (LA251_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt251=3;
                }
                else if ( (LA251_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt251=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt251=4;
            }
            else if ( (LA251_0==STAR) ) {
                int LA251_67 = input.LA(2);
                if ( (LA251_67==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt251=6;
                }
                else if ( (LA251_67==COMMA||LA251_67==RPAREN) ) {
                    alt251=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 67, input);
                    throw nvae;
                }
            }
            else if ( (LA251_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt251=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);
                throw nvae;
            }
            switch (alt251) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10187);
                    lastOperand707=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand707.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10198);
                    lastWeekdayOperand708=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand708.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10209);
                    timePeriod709=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod709.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10220);
                    expressionQualifyable710=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable710.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10231);
                    rangeOperand711=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand711.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10243);
                    frequencyOperand712=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand712.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10254);
                    lastOperator713=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator713.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10266);
                    weekDayOperator714=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator714.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10278);
                    numericParameterList715=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList715.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10283);
                    numberSetStar716=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar716.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression717 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10294);
            expression717=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression717.getTree());
            int alt252=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt252=1;
                    }
                    break;
                case DESC:
                    {
                    alt252=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt252=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt252=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt252=5;
                    }
                    break;
            }
            switch (alt252) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR718=null;
        CommonTree STAR718_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR718=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR718);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW719=null;
        CommonTree LW719_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW719=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10392); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW719_tree = (CommonTree)adaptor.create(LW719);
            root_0 = (CommonTree)adaptor.becomeRoot(LW719_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST720=null;
        CommonTree LAST720_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST720=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST720_tree = (CommonTree)adaptor.create(LAST720);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST720_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR721=null;
        Token DIV722=null;
        EsperEPL2GrammarParser.number_return number723 = null;
        EsperEPL2GrammarParser.substitution_return substitution724 = null;
        CommonTree i_tree=null;
        CommonTree STAR721_tree=null;
        CommonTree DIV722_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR721=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR721);
            DIV722=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV722);
            int alt253=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt253=1;
                }
                break;
            case IDENT:
                {
                alt253=2;
                }
                break;
            case QUESTION:
                {
                alt253=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);
                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10422);
                    number723=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number723.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10426); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10428);
                    substitution724=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution724.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON727=null;
        EsperEPL2GrammarParser.number_return number725 = null;
        EsperEPL2GrammarParser.substitution_return substitution726 = null;
        EsperEPL2GrammarParser.number_return number728 = null;
        EsperEPL2GrammarParser.substitution_return substitution729 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON727_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt254=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt254=1;
                }
                break;
            case IDENT:
                {
                alt254=2;
                }
                break;
            case QUESTION:
                {
                alt254=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);
                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10477);
                    number725=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number725.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10483);
                    substitution726=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution726.getTree());
                    }
                    break;
            }
            COLON727=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON727);
            int alt255=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt255=1;
                }
                break;
            case IDENT:
                {
                alt255=2;
                }
                break;
            case QUESTION:
                {
                alt255=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);
                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10489);
                    number728=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number728.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10495);
                    substitution729=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution729.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST732=null;
        EsperEPL2GrammarParser.number_return number730 = null;
        EsperEPL2GrammarParser.substitution_return substitution731 = null;
        CommonTree i_tree=null;
        CommonTree LAST732_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt256=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt256=1;
                }
                break;
            case IDENT:
                {
                alt256=2;
                }
                break;
            case QUESTION:
                {
                alt256=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);
                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10609);
                    number730=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number730.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10615);
                    substitution731=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution731.getTree());
                    }
                    break;
            }
            LAST732=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST732);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY735=null;
        EsperEPL2GrammarParser.number_return number733 = null;
        EsperEPL2GrammarParser.substitution_return substitution734 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY735_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt257=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt257=1;
                }
                break;
            case IDENT:
                {
                alt257=2;
                }
                break;
            case QUESTION:
                {
                alt257=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);
                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10666);
                    number733=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number733.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10672);
                    substitution734=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution734.getTree());
                    }
                    break;
            }
            WEEKDAY735=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY735);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK736=null;
        Token COMMA738=null;
        Token RBRACK740=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter737 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter739 = null;
        CommonTree LBRACK736_tree=null;
        CommonTree COMMA738_tree=null;
        CommonTree RBRACK740_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK736=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK736);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10724);
            numericListParameter737=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter737.getTree());
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);
                if ( (LA258_0==COMMA) ) {
                    alt258=1;
                }
                switch (alt258) {
            	case 1 :
            	    {
            	    COMMA738=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10727); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA738);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10729);
            	    numericListParameter739=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter739.getTree());
            	    }
            	    break;
            	default :
            	    break loop258;
                }
            } while (true);
            RBRACK740=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK740);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand741 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand742 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant743 = null;
        try {
            int alt259=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA259_1 = input.LA(2);
                if ( (LA259_1==COMMA||LA259_1==RBRACK) ) {
                    alt259=3;
                }
                else if ( (LA259_1==COLON) ) {
                    alt259=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA259_2 = input.LA(2);
                if ( (LA259_2==COMMA||LA259_2==RBRACK) ) {
                    alt259=3;
                }
                else if ( (LA259_2==COLON) ) {
                    alt259=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA259_3 = input.LA(2);
                if ( (LA259_3==COLON) ) {
                    alt259=1;
                }
                else if ( (LA259_3==COMMA||LA259_3==RBRACK) ) {
                    alt259=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA259_4 = input.LA(2);
                if ( (LA259_4==COLON) ) {
                    alt259=1;
                }
                else if ( (LA259_4==COMMA||LA259_4==RBRACK) ) {
                    alt259=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt259=1;
                }
                break;
            case STAR:
                {
                alt259=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt259=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);
                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10755);
                    rangeOperand741=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand741.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10761);
                    frequencyOperand742=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand742.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10766);
                    numberconstant743=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant743.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT745=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic744 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic746 = null;
        CommonTree DOT745_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10782);
            eventPropertyAtomic744=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic744.getTree());
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);
                if ( (LA260_0==DOT) ) {
                    alt260=1;
                }
                switch (alt260) {
            	case 1 :
            	    {
            	    DOT745=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10785); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT745);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10787);
            	    eventPropertyAtomic746=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic746.getTree());
            	    }
            	    break;
            	default :
            	    break loop260;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK748=null;
        Token RPAREN749=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent747 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK748_tree=null;
        CommonTree RPAREN749_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10813);
            eventPropertyIdent747=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent747.getTree());
            int alt264=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt264=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt264=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt264=3;
                    }
                    break;
            }
            switch (alt264) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK748=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK748);
                    int alt261=2;
                    int LA261_0 = input.LA(1);
                    if ( (LA261_0==QUESTION) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10833); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt262=2;
                    int LA262_0 = input.LA(1);
                    if ( (LA262_0==STRING_LITERAL) ) {
                        alt262=1;
                    }
                    else if ( (LA262_0==QUOTED_STRING_LITERAL) ) {
                        alt262=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 262, 0, input);
                        throw nvae;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10852); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10858); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN749=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN749);
                    int alt263=2;
                    int LA263_0 = input.LA(1);
                    if ( (LA263_0==QUESTION) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10866); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR750=null;
        Token DOT751=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR750_tree=null;
        CommonTree DOT751_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11003);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop266:
            do {
                int alt266=2;
                int LA266_0 = input.LA(1);
                if ( (LA266_0==ESCAPECHAR) ) {
                    alt266=1;
                }
                switch (alt266) {
            	case 1 :
            	    {
            	    ESCAPECHAR750=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11015); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR750);
            	    DOT751=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11017); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT751);
            	    int alt265=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt265=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA265_5 = input.LA(2);
            	            if ( (LA265_5==EOF||(LA265_5>=IN_SET && LA265_5<=NOT_EXPR)||(LA265_5>=WHERE && LA265_5<=AS)||(LA265_5>=ELSE && LA265_5<=FROM)||(LA265_5>=INNER && LA265_5<=FULL)||LA265_5==IS||(LA265_5>=GROUP && LA265_5<=HAVING)||LA265_5==ALL||LA265_5==OUTPUT||LA265_5==INSERT||(LA265_5>=ORDER && LA265_5<=DESC)||LA265_5==PATTERN||(LA265_5>=TIMEPERIOD_SEC && LA265_5<=TIMEPERIOD_SECONDS)||LA265_5==ROW_LIMIT_EXPR||(LA265_5>=MATCH_RECOGNIZE && LA265_5<=MEASURES)||(LA265_5>=AFTER && LA265_5<=FOR)||LA265_5==COMMA||(LA265_5>=LPAREN && LA265_5<=COLON)||(LA265_5>=BAND && LA265_5<=MOD)||LA265_5==RCURLY||LA265_5==ESCAPECHAR) ) {
            	                alt265=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA265_25 = input.LA(2);
            	            if ( (LA265_25==LPAREN) ) {
            	                int LA265_173 = input.LA(3);
            	                if ( ((LA265_173>=STRING_LITERAL && LA265_173<=QUOTED_STRING_LITERAL)) ) {
            	                    alt265=1;
            	                }
            	            }
            	            else if ( (LA265_25==EOF||(LA265_25>=IN_SET && LA265_25<=NOT_EXPR)||(LA265_25>=WHERE && LA265_25<=AS)||(LA265_25>=ELSE && LA265_25<=FROM)||(LA265_25>=INNER && LA265_25<=FULL)||LA265_25==IS||(LA265_25>=GROUP && LA265_25<=HAVING)||LA265_25==ALL||LA265_25==OUTPUT||LA265_25==INSERT||(LA265_25>=ORDER && LA265_25<=DESC)||LA265_25==PATTERN||(LA265_25>=TIMEPERIOD_SEC && LA265_25<=TIMEPERIOD_SECONDS)||LA265_25==ROW_LIMIT_EXPR||(LA265_25>=MATCH_RECOGNIZE && LA265_25<=MEASURES)||(LA265_25>=AFTER && LA265_25<=FOR)||LA265_25==COMMA||(LA265_25>=RPAREN && LA265_25<=COLON)||(LA265_25>=BAND && LA265_25<=MOD)||LA265_25==RCURLY||LA265_25==ESCAPECHAR) ) {
            	                alt265=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA265_39 = input.LA(2);
            	            if ( (LA265_39==EOF||(LA265_39>=IN_SET && LA265_39<=NOT_EXPR)||(LA265_39>=WHERE && LA265_39<=AS)||(LA265_39>=ELSE && LA265_39<=FROM)||(LA265_39>=INNER && LA265_39<=FULL)||LA265_39==IS||(LA265_39>=GROUP && LA265_39<=HAVING)||LA265_39==ALL||LA265_39==OUTPUT||LA265_39==INSERT||(LA265_39>=ORDER && LA265_39<=DESC)||LA265_39==PATTERN||(LA265_39>=TIMEPERIOD_SEC && LA265_39<=TIMEPERIOD_SECONDS)||LA265_39==ROW_LIMIT_EXPR||(LA265_39>=MATCH_RECOGNIZE && LA265_39<=MEASURES)||(LA265_39>=AFTER && LA265_39<=FOR)||LA265_39==COMMA||(LA265_39>=LPAREN && LA265_39<=COLON)||(LA265_39>=BAND && LA265_39<=MOD)||LA265_39==RCURLY||LA265_39==ESCAPECHAR) ) {
            	                alt265=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA265_40 = input.LA(2);
            	            if ( (LA265_40==EOF||(LA265_40>=IN_SET && LA265_40<=NOT_EXPR)||(LA265_40>=WHERE && LA265_40<=AS)||(LA265_40>=ELSE && LA265_40<=FROM)||(LA265_40>=INNER && LA265_40<=FULL)||LA265_40==IS||(LA265_40>=GROUP && LA265_40<=HAVING)||LA265_40==ALL||LA265_40==OUTPUT||LA265_40==INSERT||(LA265_40>=ORDER && LA265_40<=DESC)||LA265_40==PATTERN||(LA265_40>=TIMEPERIOD_SEC && LA265_40<=TIMEPERIOD_SECONDS)||LA265_40==ROW_LIMIT_EXPR||(LA265_40>=MATCH_RECOGNIZE && LA265_40<=MEASURES)||(LA265_40>=AFTER && LA265_40<=FOR)||LA265_40==COMMA||(LA265_40>=LPAREN && LA265_40<=COLON)||(LA265_40>=BAND && LA265_40<=MOD)||LA265_40==RCURLY||LA265_40==ESCAPECHAR) ) {
            	                alt265=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA265_42 = input.LA(2);
            	            if ( (LA265_42==EOF||(LA265_42>=IN_SET && LA265_42<=NOT_EXPR)||(LA265_42>=WHERE && LA265_42<=AS)||(LA265_42>=ELSE && LA265_42<=FROM)||(LA265_42>=INNER && LA265_42<=FULL)||LA265_42==IS||(LA265_42>=GROUP && LA265_42<=HAVING)||LA265_42==ALL||LA265_42==OUTPUT||LA265_42==INSERT||(LA265_42>=ORDER && LA265_42<=DESC)||LA265_42==PATTERN||(LA265_42>=TIMEPERIOD_SEC && LA265_42<=TIMEPERIOD_SECONDS)||LA265_42==ROW_LIMIT_EXPR||(LA265_42>=MATCH_RECOGNIZE && LA265_42<=MEASURES)||(LA265_42>=AFTER && LA265_42<=FOR)||LA265_42==COMMA||(LA265_42>=LPAREN && LA265_42<=COLON)||(LA265_42>=BAND && LA265_42<=MOD)||LA265_42==RCURLY||LA265_42==ESCAPECHAR) ) {
            	                alt265=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA265_43 = input.LA(2);
            	            if ( (LA265_43==PATTERN) ) {
            	                int LA265_438 = input.LA(3);
            	                if ( (LA265_438==LPAREN) ) {
            	                    alt265=1;
            	                }
            	            }
            	            else if ( (LA265_43==EOF||(LA265_43>=IN_SET && LA265_43<=NOT_EXPR)||(LA265_43>=WHERE && LA265_43<=AS)||(LA265_43>=ELSE && LA265_43<=FROM)||(LA265_43>=INNER && LA265_43<=FULL)||LA265_43==IS||(LA265_43>=GROUP && LA265_43<=HAVING)||LA265_43==ALL||LA265_43==OUTPUT||LA265_43==INSERT||(LA265_43>=ORDER && LA265_43<=DESC)||(LA265_43>=TIMEPERIOD_SEC && LA265_43<=TIMEPERIOD_SECONDS)||LA265_43==ROW_LIMIT_EXPR||(LA265_43>=MATCH_RECOGNIZE && LA265_43<=MEASURES)||(LA265_43>=AFTER && LA265_43<=FOR)||LA265_43==COMMA||(LA265_43>=LPAREN && LA265_43<=COLON)||(LA265_43>=BAND && LA265_43<=MOD)||LA265_43==RCURLY||LA265_43==ESCAPECHAR) ) {
            	                alt265=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt265) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11021);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop266;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT752=null;
        Token COUNT753=null;
        Token ESCAPE754=null;
        Token EVERY_EXPR755=null;
        Token SUM756=null;
        Token AVG757=null;
        Token MAX758=null;
        Token MIN759=null;
        Token COALESCE760=null;
        Token MEDIAN761=null;
        Token STDDEV762=null;
        Token AVEDEV763=null;
        Token EVENTS764=null;
        Token FIRST765=null;
        Token LAST766=null;
        Token WHILE767=null;
        Token MERGE768=null;
        Token MATCHED769=null;
        Token UNIDIRECTIONAL770=null;
        Token RETAINUNION771=null;
        Token RETAININTERSECTION772=null;
        Token UNTIL773=null;
        Token PATTERN774=null;
        Token SQL775=null;
        Token METADATASQL776=null;
        Token PREVIOUS777=null;
        Token PREVIOUSTAIL778=null;
        Token PRIOR779=null;
        Token WEEKDAY780=null;
        Token LW781=null;
        Token INSTANCEOF782=null;
        Token CAST783=null;
        Token SNAPSHOT784=null;
        Token VARIABLE785=null;
        Token INDEX786=null;
        Token WINDOW787=null;
        Token LEFT788=null;
        Token RIGHT789=null;
        Token OUTER790=null;
        Token FULL791=null;
        Token JOIN792=null;
        Token DEFINE793=null;
        Token PARTITION794=null;
        Token MATCHES795=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT752_tree=null;
        CommonTree COUNT753_tree=null;
        CommonTree ESCAPE754_tree=null;
        CommonTree EVERY_EXPR755_tree=null;
        CommonTree SUM756_tree=null;
        CommonTree AVG757_tree=null;
        CommonTree MAX758_tree=null;
        CommonTree MIN759_tree=null;
        CommonTree COALESCE760_tree=null;
        CommonTree MEDIAN761_tree=null;
        CommonTree STDDEV762_tree=null;
        CommonTree AVEDEV763_tree=null;
        CommonTree EVENTS764_tree=null;
        CommonTree FIRST765_tree=null;
        CommonTree LAST766_tree=null;
        CommonTree WHILE767_tree=null;
        CommonTree MERGE768_tree=null;
        CommonTree MATCHED769_tree=null;
        CommonTree UNIDIRECTIONAL770_tree=null;
        CommonTree RETAINUNION771_tree=null;
        CommonTree RETAININTERSECTION772_tree=null;
        CommonTree UNTIL773_tree=null;
        CommonTree PATTERN774_tree=null;
        CommonTree SQL775_tree=null;
        CommonTree METADATASQL776_tree=null;
        CommonTree PREVIOUS777_tree=null;
        CommonTree PREVIOUSTAIL778_tree=null;
        CommonTree PRIOR779_tree=null;
        CommonTree WEEKDAY780_tree=null;
        CommonTree LW781_tree=null;
        CommonTree INSTANCEOF782_tree=null;
        CommonTree CAST783_tree=null;
        CommonTree SNAPSHOT784_tree=null;
        CommonTree VARIABLE785_tree=null;
        CommonTree INDEX786_tree=null;
        CommonTree WINDOW787_tree=null;
        CommonTree LEFT788_tree=null;
        CommonTree RIGHT789_tree=null;
        CommonTree OUTER790_tree=null;
        CommonTree FULL791_tree=null;
        CommonTree JOIN792_tree=null;
        CommonTree DEFINE793_tree=null;
        CommonTree PARTITION794_tree=null;
        CommonTree MATCHES795_tree=null;
        try {
            int alt267=46;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt267=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt267=2;
                }
                break;
            case AT:
                {
                alt267=3;
                }
                break;
            case COUNT:
                {
                alt267=4;
                }
                break;
            case ESCAPE:
                {
                alt267=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt267=6;
                }
                break;
            case SUM:
                {
                alt267=7;
                }
                break;
            case AVG:
                {
                alt267=8;
                }
                break;
            case MAX:
                {
                alt267=9;
                }
                break;
            case MIN:
                {
                alt267=10;
                }
                break;
            case COALESCE:
                {
                alt267=11;
                }
                break;
            case MEDIAN:
                {
                alt267=12;
                }
                break;
            case STDDEV:
                {
                alt267=13;
                }
                break;
            case AVEDEV:
                {
                alt267=14;
                }
                break;
            case EVENTS:
                {
                alt267=15;
                }
                break;
            case FIRST:
                {
                alt267=16;
                }
                break;
            case LAST:
                {
                alt267=17;
                }
                break;
            case WHILE:
                {
                alt267=18;
                }
                break;
            case MERGE:
                {
                alt267=19;
                }
                break;
            case MATCHED:
                {
                alt267=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt267=21;
                }
                break;
            case RETAINUNION:
                {
                alt267=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt267=23;
                }
                break;
            case UNTIL:
                {
                alt267=24;
                }
                break;
            case PATTERN:
                {
                alt267=25;
                }
                break;
            case SQL:
                {
                alt267=26;
                }
                break;
            case METADATASQL:
                {
                alt267=27;
                }
                break;
            case PREVIOUS:
                {
                alt267=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt267=29;
                }
                break;
            case PRIOR:
                {
                alt267=30;
                }
                break;
            case WEEKDAY:
                {
                alt267=31;
                }
                break;
            case LW:
                {
                alt267=32;
                }
                break;
            case INSTANCEOF:
                {
                alt267=33;
                }
                break;
            case CAST:
                {
                alt267=34;
                }
                break;
            case SNAPSHOT:
                {
                alt267=35;
                }
                break;
            case VARIABLE:
                {
                alt267=36;
                }
                break;
            case INDEX:
                {
                alt267=37;
                }
                break;
            case WINDOW:
                {
                alt267=38;
                }
                break;
            case LEFT:
                {
                alt267=39;
                }
                break;
            case RIGHT:
                {
                alt267=40;
                }
                break;
            case OUTER:
                {
                alt267=41;
                }
                break;
            case FULL:
                {
                alt267=42;
                }
                break;
            case JOIN:
                {
                alt267=43;
                }
                break;
            case DEFINE:
                {
                alt267=44;
                }
                break;
            case PARTITION:
                {
                alt267=45;
                }
                break;
            case MATCHES:
                {
                alt267=46;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);
                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT752=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT752_tree = (CommonTree)adaptor.create(AT752);
                    adaptor.addChild(root_0, AT752_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT753=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT753_tree = (CommonTree)adaptor.create(COUNT753);
                    adaptor.addChild(root_0, COUNT753_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE754=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE754_tree = (CommonTree)adaptor.create(ESCAPE754);
                    adaptor.addChild(root_0, ESCAPE754_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR755=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR755_tree = (CommonTree)adaptor.create(EVERY_EXPR755);
                    adaptor.addChild(root_0, EVERY_EXPR755_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM756=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM756_tree = (CommonTree)adaptor.create(SUM756);
                    adaptor.addChild(root_0, SUM756_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG757=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG757_tree = (CommonTree)adaptor.create(AVG757);
                    adaptor.addChild(root_0, AVG757_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX758=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX758_tree = (CommonTree)adaptor.create(MAX758);
                    adaptor.addChild(root_0, MAX758_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN759=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN759_tree = (CommonTree)adaptor.create(MIN759);
                    adaptor.addChild(root_0, MIN759_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE760=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE760_tree = (CommonTree)adaptor.create(COALESCE760);
                    adaptor.addChild(root_0, COALESCE760_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN761=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN761_tree = (CommonTree)adaptor.create(MEDIAN761);
                    adaptor.addChild(root_0, MEDIAN761_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV762=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV762_tree = (CommonTree)adaptor.create(STDDEV762);
                    adaptor.addChild(root_0, STDDEV762_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV763=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV763_tree = (CommonTree)adaptor.create(AVEDEV763);
                    adaptor.addChild(root_0, AVEDEV763_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS764=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS764_tree = (CommonTree)adaptor.create(EVENTS764);
                    adaptor.addChild(root_0, EVENTS764_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST765=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST765_tree = (CommonTree)adaptor.create(FIRST765);
                    adaptor.addChild(root_0, FIRST765_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST766=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST766_tree = (CommonTree)adaptor.create(LAST766);
                    adaptor.addChild(root_0, LAST766_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE767=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE767_tree = (CommonTree)adaptor.create(WHILE767);
                    adaptor.addChild(root_0, WHILE767_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE768=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE768_tree = (CommonTree)adaptor.create(MERGE768);
                    adaptor.addChild(root_0, MERGE768_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED769=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED769_tree = (CommonTree)adaptor.create(MATCHED769);
                    adaptor.addChild(root_0, MATCHED769_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL770=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL770_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL770);
                    adaptor.addChild(root_0, UNIDIRECTIONAL770_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION771=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION771_tree = (CommonTree)adaptor.create(RETAINUNION771);
                    adaptor.addChild(root_0, RETAINUNION771_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION772=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION772_tree = (CommonTree)adaptor.create(RETAININTERSECTION772);
                    adaptor.addChild(root_0, RETAININTERSECTION772_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL773=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL773_tree = (CommonTree)adaptor.create(UNTIL773);
                    adaptor.addChild(root_0, UNTIL773_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN774=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN774_tree = (CommonTree)adaptor.create(PATTERN774);
                    adaptor.addChild(root_0, PATTERN774_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL775=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL775_tree = (CommonTree)adaptor.create(SQL775);
                    adaptor.addChild(root_0, SQL775_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL776=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL776_tree = (CommonTree)adaptor.create(METADATASQL776);
                    adaptor.addChild(root_0, METADATASQL776_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS777=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS777_tree = (CommonTree)adaptor.create(PREVIOUS777);
                    adaptor.addChild(root_0, PREVIOUS777_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL778=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL778_tree = (CommonTree)adaptor.create(PREVIOUSTAIL778);
                    adaptor.addChild(root_0, PREVIOUSTAIL778_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR779=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR779_tree = (CommonTree)adaptor.create(PRIOR779);
                    adaptor.addChild(root_0, PRIOR779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY780=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY780_tree = (CommonTree)adaptor.create(WEEKDAY780);
                    adaptor.addChild(root_0, WEEKDAY780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW781=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW781_tree = (CommonTree)adaptor.create(LW781);
                    adaptor.addChild(root_0, LW781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF782=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF782_tree = (CommonTree)adaptor.create(INSTANCEOF782);
                    adaptor.addChild(root_0, INSTANCEOF782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST783=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST783_tree = (CommonTree)adaptor.create(CAST783);
                    adaptor.addChild(root_0, CAST783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT784=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT784_tree = (CommonTree)adaptor.create(SNAPSHOT784);
                    adaptor.addChild(root_0, SNAPSHOT784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE785=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE785_tree = (CommonTree)adaptor.create(VARIABLE785);
                    adaptor.addChild(root_0, VARIABLE785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX786=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX786_tree = (CommonTree)adaptor.create(INDEX786);
                    adaptor.addChild(root_0, INDEX786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW787=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW787_tree = (CommonTree)adaptor.create(WINDOW787);
                    adaptor.addChild(root_0, WINDOW787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT788=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT788_tree = (CommonTree)adaptor.create(LEFT788);
                    adaptor.addChild(root_0, LEFT788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT789=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT789_tree = (CommonTree)adaptor.create(RIGHT789);
                    adaptor.addChild(root_0, RIGHT789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER790=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER790_tree = (CommonTree)adaptor.create(OUTER790);
                    adaptor.addChild(root_0, OUTER790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL791=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL791_tree = (CommonTree)adaptor.create(FULL791);
                    adaptor.addChild(root_0, FULL791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN792=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN792_tree = (CommonTree)adaptor.create(JOIN792);
                    adaptor.addChild(root_0, JOIN792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE793=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE793_tree = (CommonTree)adaptor.create(DEFINE793);
                    adaptor.addChild(root_0, DEFINE793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION794=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION794_tree = (CommonTree)adaptor.create(PARTITION794);
                    adaptor.addChild(root_0, PARTITION794_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES795=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES795_tree = (CommonTree)adaptor.create(MATCHES795);
                    adaptor.addChild(root_0, MATCHES795_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt268=2;
            int LA268_0 = input.LA(1);
            if ( (LA268_0==IDENT) ) {
                alt268=1;
            }
            else if ( (LA268_0==TICKED_STRING_LITERAL) ) {
                alt268=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);
                throw nvae;
            }
            switch (alt268) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT796=null;
        CommonTree t_tree=null;
        CommonTree IDENT796_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt269=2;
            int LA269_0 = input.LA(1);
            if ( (LA269_0==IDENT) ) {
                alt269=1;
            }
            else if ( (LA269_0==TICKED_STRING_LITERAL) ) {
                alt269=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);
                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT796=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT796_tree = (CommonTree)adaptor.create(IDENT796);
                    adaptor.addChild(root_0, IDENT796_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart797 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart798 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart799 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart800 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart801 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart802 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart803 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart804 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart805 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart806 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart807 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart808 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart809 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart810 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart811 = null;
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            {
            int alt280=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt280=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt280=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt280=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt280=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt280=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt280=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt280=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt280=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt280=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt280=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt280=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt280=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt280=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt280=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt280=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt280=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt280=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt280=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt280=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt280=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt280=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt280=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt280=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt280=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt280=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt280=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt280=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt280=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt280=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt280=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);
                throw nvae;
            }
            switch (alt280) {
                case 1 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11462);
                    dayPart797=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart797.getTree());
                    int alt270=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA270_1 = input.LA(2);
                            if ( ((LA270_1>=TIMEPERIOD_HOUR && LA270_1<=TIMEPERIOD_HOURS)) ) {
                                alt270=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA270_2 = input.LA(2);
                            if ( ((LA270_2>=TIMEPERIOD_HOUR && LA270_2<=TIMEPERIOD_HOURS)) ) {
                                alt270=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA270_3 = input.LA(2);
                            if ( ((LA270_3>=TIMEPERIOD_HOUR && LA270_3<=TIMEPERIOD_HOURS)) ) {
                                alt270=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA270_4 = input.LA(2);
                            if ( ((LA270_4>=TIMEPERIOD_HOUR && LA270_4<=TIMEPERIOD_HOURS)) ) {
                                alt270=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA270_5 = input.LA(2);
                            if ( ((LA270_5>=TIMEPERIOD_HOUR && LA270_5<=TIMEPERIOD_HOURS)) ) {
                                alt270=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA270_6 = input.LA(2);
                            if ( ((LA270_6>=TIMEPERIOD_HOUR && LA270_6<=TIMEPERIOD_HOURS)) ) {
                                alt270=1;
                            }
                            }
                            break;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11464);
                            hourPart798=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart798.getTree());
                            }
                            break;
                    }
                    int alt271=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA271_1 = input.LA(2);
                            if ( (LA271_1==MIN||(LA271_1>=TIMEPERIOD_MINUTE && LA271_1<=TIMEPERIOD_MINUTES)) ) {
                                alt271=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA271_2 = input.LA(2);
                            if ( (LA271_2==MIN||(LA271_2>=TIMEPERIOD_MINUTE && LA271_2<=TIMEPERIOD_MINUTES)) ) {
                                alt271=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA271_3 = input.LA(2);
                            if ( (LA271_3==MIN||(LA271_3>=TIMEPERIOD_MINUTE && LA271_3<=TIMEPERIOD_MINUTES)) ) {
                                alt271=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA271_4 = input.LA(2);
                            if ( (LA271_4==MIN||(LA271_4>=TIMEPERIOD_MINUTE && LA271_4<=TIMEPERIOD_MINUTES)) ) {
                                alt271=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA271_5 = input.LA(2);
                            if ( (LA271_5==MIN||(LA271_5>=TIMEPERIOD_MINUTE && LA271_5<=TIMEPERIOD_MINUTES)) ) {
                                alt271=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA271_6 = input.LA(2);
                            if ( (LA271_6==MIN||(LA271_6>=TIMEPERIOD_MINUTE && LA271_6<=TIMEPERIOD_MINUTES)) ) {
                                alt271=1;
                            }
                            }
                            break;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11467);
                            minutePart799=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart799.getTree());
                            }
                            break;
                    }
                    int alt272=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA272_1 = input.LA(2);
                            if ( ((LA272_1>=TIMEPERIOD_SEC && LA272_1<=TIMEPERIOD_SECONDS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA272_2 = input.LA(2);
                            if ( ((LA272_2>=TIMEPERIOD_SEC && LA272_2<=TIMEPERIOD_SECONDS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA272_3 = input.LA(2);
                            if ( ((LA272_3>=TIMEPERIOD_SEC && LA272_3<=TIMEPERIOD_SECONDS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA272_4 = input.LA(2);
                            if ( ((LA272_4>=TIMEPERIOD_SEC && LA272_4<=TIMEPERIOD_SECONDS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA272_5 = input.LA(2);
                            if ( ((LA272_5>=TIMEPERIOD_SEC && LA272_5<=TIMEPERIOD_SECONDS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA272_6 = input.LA(2);
                            if ( ((LA272_6>=TIMEPERIOD_SEC && LA272_6<=TIMEPERIOD_SECONDS)) ) {
                                alt272=1;
                            }
                            }
                            break;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11470);
                            secondPart800=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart800.getTree());
                            }
                            break;
                    }
                    int alt273=2;
                    int LA273_0 = input.LA(1);
                    if ( (LA273_0==NUM_DOUBLE||LA273_0==IDENT||LA273_0==QUESTION||LA273_0==NUM_INT||(LA273_0>=NUM_LONG && LA273_0<=NUM_FLOAT)) ) {
                        alt273=1;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11473);
                            millisecondPart801=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart801.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11479);
                    hourPart802=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart802.getTree());
                    int alt274=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA274_1 = input.LA(2);
                            if ( (LA274_1==MIN||(LA274_1>=TIMEPERIOD_MINUTE && LA274_1<=TIMEPERIOD_MINUTES)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA274_2 = input.LA(2);
                            if ( (LA274_2==MIN||(LA274_2>=TIMEPERIOD_MINUTE && LA274_2<=TIMEPERIOD_MINUTES)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA274_3 = input.LA(2);
                            if ( (LA274_3==MIN||(LA274_3>=TIMEPERIOD_MINUTE && LA274_3<=TIMEPERIOD_MINUTES)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA274_4 = input.LA(2);
                            if ( (LA274_4==MIN||(LA274_4>=TIMEPERIOD_MINUTE && LA274_4<=TIMEPERIOD_MINUTES)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA274_5 = input.LA(2);
                            if ( (LA274_5==MIN||(LA274_5>=TIMEPERIOD_MINUTE && LA274_5<=TIMEPERIOD_MINUTES)) ) {
                                alt274=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA274_6 = input.LA(2);
                            if ( (LA274_6==MIN||(LA274_6>=TIMEPERIOD_MINUTE && LA274_6<=TIMEPERIOD_MINUTES)) ) {
                                alt274=1;
                            }
                            }
                            break;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11481);
                            minutePart803=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart803.getTree());
                            }
                            break;
                    }
                    int alt275=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA275_1 = input.LA(2);
                            if ( ((LA275_1>=TIMEPERIOD_SEC && LA275_1<=TIMEPERIOD_SECONDS)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA275_2 = input.LA(2);
                            if ( ((LA275_2>=TIMEPERIOD_SEC && LA275_2<=TIMEPERIOD_SECONDS)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA275_3 = input.LA(2);
                            if ( ((LA275_3>=TIMEPERIOD_SEC && LA275_3<=TIMEPERIOD_SECONDS)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA275_4 = input.LA(2);
                            if ( ((LA275_4>=TIMEPERIOD_SEC && LA275_4<=TIMEPERIOD_SECONDS)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA275_5 = input.LA(2);
                            if ( ((LA275_5>=TIMEPERIOD_SEC && LA275_5<=TIMEPERIOD_SECONDS)) ) {
                                alt275=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA275_6 = input.LA(2);
                            if ( ((LA275_6>=TIMEPERIOD_SEC && LA275_6<=TIMEPERIOD_SECONDS)) ) {
                                alt275=1;
                            }
                            }
                            break;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11484);
                            secondPart804=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart804.getTree());
                            }
                            break;
                    }
                    int alt276=2;
                    int LA276_0 = input.LA(1);
                    if ( (LA276_0==NUM_DOUBLE||LA276_0==IDENT||LA276_0==QUESTION||LA276_0==NUM_INT||(LA276_0>=NUM_LONG && LA276_0<=NUM_FLOAT)) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11487);
                            millisecondPart805=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart805.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11493);
                    minutePart806=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart806.getTree());
                    int alt277=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA277_1 = input.LA(2);
                            if ( ((LA277_1>=TIMEPERIOD_SEC && LA277_1<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA277_2 = input.LA(2);
                            if ( ((LA277_2>=TIMEPERIOD_SEC && LA277_2<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA277_3 = input.LA(2);
                            if ( ((LA277_3>=TIMEPERIOD_SEC && LA277_3<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA277_4 = input.LA(2);
                            if ( ((LA277_4>=TIMEPERIOD_SEC && LA277_4<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA277_5 = input.LA(2);
                            if ( ((LA277_5>=TIMEPERIOD_SEC && LA277_5<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA277_6 = input.LA(2);
                            if ( ((LA277_6>=TIMEPERIOD_SEC && LA277_6<=TIMEPERIOD_SECONDS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11495);
                            secondPart807=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart807.getTree());
                            }
                            break;
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==NUM_DOUBLE||LA278_0==IDENT||LA278_0==QUESTION||LA278_0==NUM_INT||(LA278_0>=NUM_LONG && LA278_0<=NUM_FLOAT)) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11498);
                            millisecondPart808=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart808.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11504);
                    secondPart809=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart809.getTree());
                    int alt279=2;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==NUM_DOUBLE||LA279_0==IDENT||LA279_0==QUESTION||LA279_0==NUM_INT||(LA279_0>=NUM_LONG && LA279_0<=NUM_FLOAT)) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11506);
                            millisecondPart810=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart810.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11512);
                    millisecondPart811=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart811.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS814=null;
        Token TIMEPERIOD_DAY815=null;
        EsperEPL2GrammarParser.number_return number812 = null;
        EsperEPL2GrammarParser.substitution_return substitution813 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS814_tree=null;
        CommonTree TIMEPERIOD_DAY815_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt281=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt281=1;
                }
                break;
            case IDENT:
                {
                alt281=2;
                }
                break;
            case QUESTION:
                {
                alt281=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);
                throw nvae;
            }
            switch (alt281) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart11550);
                    number812=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number812.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11556);
                    substitution813=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution813.getTree());
                    }
                    break;
            }
            int alt282=2;
            int LA282_0 = input.LA(1);
            if ( (LA282_0==TIMEPERIOD_DAYS) ) {
                alt282=1;
            }
            else if ( (LA282_0==TIMEPERIOD_DAY) ) {
                alt282=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);
                throw nvae;
            }
            switch (alt282) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS814=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS814);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY815=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY815);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS818=null;
        Token TIMEPERIOD_HOUR819=null;
        EsperEPL2GrammarParser.number_return number816 = null;
        EsperEPL2GrammarParser.substitution_return substitution817 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS818_tree=null;
        CommonTree TIMEPERIOD_HOUR819_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt283=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt283=1;
                }
                break;
            case IDENT:
                {
                alt283=2;
                }
                break;
            case QUESTION:
                {
                alt283=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart11613);
                    number816=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number816.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11619);
                    substitution817=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution817.getTree());
                    }
                    break;
            }
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==TIMEPERIOD_HOURS) ) {
                alt284=1;
            }
            else if ( (LA284_0==TIMEPERIOD_HOUR) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);
                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS818=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS818);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR819=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR819);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES822=null;
        Token TIMEPERIOD_MINUTE823=null;
        Token MIN824=null;
        EsperEPL2GrammarParser.number_return number820 = null;
        EsperEPL2GrammarParser.substitution_return substitution821 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES822_tree=null;
        CommonTree TIMEPERIOD_MINUTE823_tree=null;
        CommonTree MIN824_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt285=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt285=1;
                }
                break;
            case IDENT:
                {
                alt285=2;
                }
                break;
            case QUESTION:
                {
                alt285=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);
                throw nvae;
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart11676);
                    number820=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number820.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11682);
                    substitution821=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution821.getTree());
                    }
                    break;
            }
            int alt286=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt286=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt286=2;
                }
                break;
            case MIN:
                {
                alt286=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);
                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES822=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES822);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE823=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE823);
                    }
                    break;
                case 3 :
                    {
                    MIN824=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN824);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS827=null;
        Token TIMEPERIOD_SECOND828=null;
        Token TIMEPERIOD_SEC829=null;
        EsperEPL2GrammarParser.number_return number825 = null;
        EsperEPL2GrammarParser.substitution_return substitution826 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS827_tree=null;
        CommonTree TIMEPERIOD_SECOND828_tree=null;
        CommonTree TIMEPERIOD_SEC829_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt287=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt287=1;
                }
                break;
            case IDENT:
                {
                alt287=2;
                }
                break;
            case QUESTION:
                {
                alt287=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart11744);
                    number825=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number825.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11750);
                    substitution826=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution826.getTree());
                    }
                    break;
            }
            int alt288=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt288=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt288=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt288=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);
                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS827=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS827);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND828=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND828);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC829=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC829);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS832=null;
        Token TIMEPERIOD_MILLISECOND833=null;
        Token TIMEPERIOD_MILLISEC834=null;
        EsperEPL2GrammarParser.number_return number830 = null;
        EsperEPL2GrammarParser.substitution_return substitution831 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS832_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND833_tree=null;
        CommonTree TIMEPERIOD_MILLISEC834_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt289=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt289=1;
                }
                break;
            case IDENT:
                {
                alt289=2;
                }
                break;
            case QUESTION:
                {
                alt289=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11812);
                    number830=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number830.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11818);
                    substitution831=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution831.getTree());
                    }
                    break;
            }
            int alt290=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt290=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt290=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt290=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);
                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS832=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS832);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND833=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND833);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC834=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC834);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt291=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt291=1;
                }
                break;
            case NUM_LONG:
                {
                alt291=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt291=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt291=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant835 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant836 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt292=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt292=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt292=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt292=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt292=4;
                }
                break;
            case VALUE_NULL:
                {
                alt292=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);
                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant11976);
                    numberconstant835=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant835.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant11983);
                    stringconstant836=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant836.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number837 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt293=3;
            int LA293_0 = input.LA(1);
            if ( (LA293_0==MINUS) ) {
                alt293=1;
            }
            else if ( (LA293_0==PLUS) ) {
                alt293=2;
            }
            switch (alt293) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12068);
            number837=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number837.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number837!=null?((CommonTree)number837.tree):null).getType(), "-" + (number837!=null?input.toString(number837.start,number837.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==STRING_LITERAL) ) {
                alt294=1;
            }
            else if ( (LA294_0==QUOTED_STRING_LITERAL) ) {
                alt294=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);
                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4381);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5754);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7618);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8442);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8510);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9759);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10182);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10193);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10204);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10215);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10226);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10238);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10249);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10260);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10273);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA176 dfa176 = new DFA176(this);
    static final String DFA176_eotS =
        "\u0ad6\uffff";
    static final String DFA176_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\2\16\3\uffff\1\16\u0aa2\uffff";
    static final String DFA176_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\2\6\3\uffff\1\6\12\uffff\1\u0112\167\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\u011d\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72"+
        "\uffff\1\5\2\6\103\uffff\2\6\102\uffff\2\6\102\uffff\2\6\100\uffff"+
        "\2\6\102\uffff\2\6\102\uffff\2\6\102\uffff\2\6\101\uffff\2\6\101"+
        "\uffff\2\6\100\uffff\2\6\103\uffff\2\6\100\uffff\2\6\100\uffff\2"+
        "\6\u0083\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\5\uffff\1\0\53\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\u0082\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA176_maxS =
        "\2\u0132\13\uffff\1\u0132\3\uffff\1\u012f\2\uffff\2\u012f\2\uffff"+
        "\4\u012f\1\uffff\2\u012f\12\uffff\3\u012f\2\uffff\2\u012f\3\uffff"+
        "\1\u012f\12\uffff\1\u0112\167\uffff\1\u0132\72\uffff\1\u0132\72"+
        "\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132"+
        "\72\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132\72\uffff\1\u0132"+
        "\72\uffff\1\u0132\72\uffff\1\u012d\72\uffff\1\u0132\72\uffff\1\u0132"+
        "\72\uffff\1\u0132\72\uffff\1\u0130\2\u012a\103\uffff\2\u012a\102"+
        "\uffff\2\u012a\102\uffff\2\u012a\100\uffff\2\u012a\102\uffff\2\u012a"+
        "\102\uffff\2\u012a\102\uffff\2\u012a\101\uffff\2\u012a\101\uffff"+
        "\2\u012a\100\uffff\2\u012a\103\uffff\2\u012a\100\uffff\2\u012a\100"+
        "\uffff\2\u012a\u0083\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\5\uffff"+
        "\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\u0082\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA176_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\55\uffff\2\6\1\uffff\1\6"+
        "\1\7\4\uffff\1\1\55\uffff\1\10\1\4\u03b9\uffff\103\6\2\uffff\102"+
        "\6\2\uffff\102\6\2\uffff\100\6\2\uffff\102\6\2\uffff\102\6\2\uffff"+
        "\102\6\2\uffff\101\6\2\uffff\101\6\2\uffff\100\6\2\uffff\101\6\4"+
        "\uffff\100\6\2\uffff\100\6\2\uffff\101\6\1\11\101\6\1\uffff\30\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\5\6"+
        "\1\uffff\62\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5\6\1\uffff\53\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6"+
        "\1\uffff\55\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\36\6\1\uffff\31\6\1\uffff\32\6\1\uffff\32\6\1\uffff\23"+
        "\6\1\uffff\30\6\1\uffff\5\6";
    static final String DFA176_specialS =
        "\1\0\u00b5\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\72\uffff\1\17\72\uffff\1\20\1\21\1\22\103\uffff\1\23\1\24"+
        "\102\uffff\1\25\1\26\102\uffff\1\27\1\30\100\uffff\1\31\1\32\102"+
        "\uffff\1\33\1\34\102\uffff\1\35\1\36\102\uffff\1\37\1\40\101\uffff"+
        "\1\41\1\42\101\uffff\1\43\1\44\100\uffff\1\45\1\46\103\uffff\1\47"+
        "\1\50\100\uffff\1\51\1\52\100\uffff\1\53\1\54\u0083\uffff\1\55\30"+
        "\uffff\1\56\30\uffff\1\57\30\uffff\1\60\30\uffff\1\61\30\uffff\1"+
        "\62\114\uffff\1\63\30\uffff\1\64\5\uffff\1\65\53\uffff\1\66\30\uffff"+
        "\1\67\30\uffff\1\70\31\uffff\1\71\31\uffff\1\72\5\uffff\1\73\55"+
        "\uffff\1\74\31\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff\1"+
        "\100\u0082\uffff\1\101\30\uffff\1\102\5\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\63\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\74\1\75\1\53\1\76\2\16"+
            "\1\56\1\57\1\77\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff"+
            "\3\16\2\uffff\1\16\1\uffff\2\16\u008e\uffff\1\2\16\uffff\1\16"+
            "\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff\1\100"+
            "\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\105\4\uffff\1\105\3\uffff\1\105\3\uffff\11\105\10\uffff"+
            "\1\105\1\uffff\4\105\12\uffff\3\105\11\uffff\10\105\2\uffff"+
            "\1\105\1\uffff\4\105\2\uffff\1\105\1\uffff\4\105\24\uffff\3"+
            "\105\2\uffff\1\105\1\uffff\2\105\u008e\uffff\1\2\16\uffff\1"+
            "\105\33\uffff\1\2\2\uffff\1\105\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\164\4\uffff\1\164\2\uffff\2\164\3\uffff\11\164\1\163\1"+
            "\164\6\uffff\1\164\1\uffff\4\164\12\uffff\3\164\11\uffff\21"+
            "\164\1\uffff\1\164\1\uffff\4\164\14\uffff\3\164\5\uffff\3\164"+
            "\2\uffff\1\164\1\uffff\2\164\u008e\uffff\1\164\16\uffff\2\164"+
            "\7\uffff\2\164\1\uffff\2\164\11\uffff\1\164\2\uffff\1\164\1"+
            "\uffff\1\164\2\uffff\3\164",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u00b6\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u00f1\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u012c\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0167\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u01a2\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u01dd\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0218\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0253\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u028e\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u02c9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u0304\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u033f\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u037a\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u03b5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a0"+
            "\uffff\1\16\1\uffff\1\u03f0\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u042b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0461\4\uffff\1\u0440\2\uffff\1\u046f\1\u0441\3\uffff\1"+
            "\u0442\1\u0443\1\u0444\1\u0445\1\u0446\1\u0447\1\u0448\1\u0449"+
            "\1\u043f\1\uffff\1\u0430\6\uffff\1\u0464\1\uffff\1\u0466\1\u0462"+
            "\1\u0463\1\u0465\5\uffff\1\u042f\1\u042e\3\uffff\1\u044a\1\u044b"+
            "\1\u044c\11\uffff\1\u0450\1\u0451\1\u0452\1\u0454\1\u0455\1"+
            "\u0456\1\u0457\1\u0458\1\u046a\1\u046b\1\u0459\1\u046c\1\u045a"+
            "\1\u045b\1\u045c\1\u045d\1\u046d\1\uffff\1\u045e\1\uffff\1\u045f"+
            "\1\u0453\1\u043e\1\u0460\14\uffff\1\u0437\1\u0438\1\u0439\5"+
            "\uffff\1\u0467\1\u0468\1\u0469\2\uffff\1\u044d\1\uffff\1\u044e"+
            "\1\u044f\u008e\uffff\1\u0436\16\uffff\1\u043c\1\u043b\5\uffff"+
            "\1\u0470\1\uffff\1\u0432\1\u043a\1\uffff\1\u042c\1\u042d\11"+
            "\uffff\1\u0431\2\uffff\1\u046e\1\uffff\1\u0433\2\uffff\1\u043d"+
            "\1\u0434\1\u0435",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04a6\4\uffff\1\u0485\2\uffff\1\u04b4\1\u0486\3\uffff\1"+
            "\u0487\1\u0488\1\u0489\1\u048a\1\u048b\1\u048c\1\u048d\1\u048e"+
            "\1\u0484\1\uffff\1\u0475\6\uffff\1\u04a9\1\uffff\1\u04ab\1\u04a7"+
            "\1\u04a8\1\u04aa\5\uffff\1\u0474\1\u0473\3\uffff\1\u048f\1\u0490"+
            "\1\u0491\11\uffff\1\u0495\1\u0496\1\u0497\1\u0499\1\u049a\1"+
            "\u049b\1\u049c\1\u049d\1\u04af\1\u04b0\1\u049e\1\u04b1\1\u049f"+
            "\1\u04a0\1\u04a1\1\u04a2\1\u04b2\1\uffff\1\u04a3\1\uffff\1\u04a4"+
            "\1\u0498\1\u0483\1\u04a5\14\uffff\1\u047c\1\u047d\1\u047e\5"+
            "\uffff\1\u04ac\1\u04ad\1\u04ae\2\uffff\1\u0492\1\uffff\1\u0493"+
            "\1\u0494\u008e\uffff\1\u047b\16\uffff\1\u0481\1\u0480\7\uffff"+
            "\1\u0477\1\u047f\1\uffff\1\u0471\1\u0472\11\uffff\1\u0476\2"+
            "\uffff\1\u04b3\1\uffff\1\u0478\2\uffff\1\u0482\1\u0479\1\u047a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04ea\4\uffff\1\u04c9\2\uffff\1\u04f8\1\u04ca\3\uffff\1"+
            "\u04cb\1\u04cc\1\u04cd\1\u04ce\1\u04cf\1\u04d0\1\u04d1\1\u04d2"+
            "\1\u04c8\1\uffff\1\u04b9\6\uffff\1\u04ed\1\uffff\1\u04ef\1\u04eb"+
            "\1\u04ec\1\u04ee\5\uffff\1\u04b8\1\u04b7\3\uffff\1\u04d3\1\u04d4"+
            "\1\u04d5\11\uffff\1\u04d9\1\u04da\1\u04db\1\u04dd\1\u04de\1"+
            "\u04df\1\u04e0\1\u04e1\1\u04f3\1\u04f4\1\u04e2\1\u04f5\1\u04e3"+
            "\1\u04e4\1\u04e5\1\u04e6\1\u04f6\1\uffff\1\u04e7\1\uffff\1\u04e8"+
            "\1\u04dc\1\u04c7\1\u04e9\14\uffff\1\u04c0\1\u04c1\1\u04c2\5"+
            "\uffff\1\u04f0\1\u04f1\1\u04f2\2\uffff\1\u04d6\1\uffff\1\u04d7"+
            "\1\u04d8\u008e\uffff\1\u04bf\16\uffff\1\u04c5\1\u04c4\7\uffff"+
            "\1\u04bb\1\u04c3\1\uffff\1\u04b5\1\u04b6\11\uffff\1\u04ba\2"+
            "\uffff\1\u04f7\1\uffff\1\u04bc\2\uffff\1\u04c6\1\u04bd\1\u04be",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u052c\4\uffff\1\u050b\2\uffff\1\u053a\1\u050c\3\uffff\1"+
            "\u050d\1\u050e\1\u050f\1\u0510\1\u0511\1\u0512\1\u0513\1\u0514"+
            "\1\u050a\1\uffff\1\u04fb\6\uffff\1\u052f\1\uffff\1\u0531\1\u052d"+
            "\1\u052e\1\u0530\12\uffff\1\u0515\1\u0516\1\u0517\11\uffff\1"+
            "\u051b\1\u051c\1\u051d\1\u051f\1\u0520\1\u0521\1\u0522\1\u0523"+
            "\1\u0535\1\u0536\1\u0524\1\u0537\1\u0525\1\u0526\1\u0527\1\u0528"+
            "\1\u0538\1\uffff\1\u0529\1\uffff\1\u052a\1\u051e\1\u0509\1\u052b"+
            "\14\uffff\1\u0502\1\u0503\1\u0504\5\uffff\1\u0532\1\u0533\1"+
            "\u0534\2\uffff\1\u0518\1\uffff\1\u0519\1\u051a\u008e\uffff\1"+
            "\u0501\16\uffff\1\u0507\1\u0506\7\uffff\1\u04fd\1\u0505\1\uffff"+
            "\1\u04f9\1\u04fa\11\uffff\1\u04fc\2\uffff\1\u0539\1\uffff\1"+
            "\u04fe\2\uffff\1\u0508\1\u04ff\1\u0500",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0570\4\uffff\1\u054f\2\uffff\1\u057e\1\u0550\3\uffff\1"+
            "\u0551\1\u0552\1\u0553\1\u0554\1\u0555\1\u0556\1\u0557\1\u0558"+
            "\1\u054e\1\uffff\1\u053f\6\uffff\1\u0573\1\uffff\1\u0575\1\u0571"+
            "\1\u0572\1\u0574\5\uffff\1\u053e\1\u053d\3\uffff\1\u0559\1\u055a"+
            "\1\u055b\11\uffff\1\u055f\1\u0560\1\u0561\1\u0563\1\u0564\1"+
            "\u0565\1\u0566\1\u0567\1\u0579\1\u057a\1\u0568\1\u057b\1\u0569"+
            "\1\u056a\1\u056b\1\u056c\1\u057c\1\uffff\1\u056d\1\uffff\1\u056e"+
            "\1\u0562\1\u054d\1\u056f\14\uffff\1\u0546\1\u0547\1\u0548\5"+
            "\uffff\1\u0576\1\u0577\1\u0578\2\uffff\1\u055c\1\uffff\1\u055d"+
            "\1\u055e\u008e\uffff\1\u0545\16\uffff\1\u054b\1\u054a\7\uffff"+
            "\1\u0541\1\u0549\1\uffff\1\u053b\1\u053c\11\uffff\1\u0540\2"+
            "\uffff\1\u057d\1\uffff\1\u0542\2\uffff\1\u054c\1\u0543\1\u0544",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b4\4\uffff\1\u0593\2\uffff\1\u05c2\1\u0594\3\uffff\1"+
            "\u0595\1\u0596\1\u0597\1\u0598\1\u0599\1\u059a\1\u059b\1\u059c"+
            "\1\u0592\1\uffff\1\u0583\6\uffff\1\u05b7\1\uffff\1\u05b9\1\u05b5"+
            "\1\u05b6\1\u05b8\5\uffff\1\u0582\1\u0581\3\uffff\1\u059d\1\u059e"+
            "\1\u059f\11\uffff\1\u05a3\1\u05a4\1\u05a5\1\u05a7\1\u05a8\1"+
            "\u05a9\1\u05aa\1\u05ab\1\u05bd\1\u05be\1\u05ac\1\u05bf\1\u05ad"+
            "\1\u05ae\1\u05af\1\u05b0\1\u05c0\1\uffff\1\u05b1\1\uffff\1\u05b2"+
            "\1\u05a6\1\u0591\1\u05b3\14\uffff\1\u058a\1\u058b\1\u058c\5"+
            "\uffff\1\u05ba\1\u05bb\1\u05bc\2\uffff\1\u05a0\1\uffff\1\u05a1"+
            "\1\u05a2\u008e\uffff\1\u0589\16\uffff\1\u058f\1\u058e\7\uffff"+
            "\1\u0585\1\u058d\1\uffff\1\u057f\1\u0580\11\uffff\1\u0584\2"+
            "\uffff\1\u05c1\1\uffff\1\u0586\2\uffff\1\u0590\1\u0587\1\u0588",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f8\4\uffff\1\u05d7\2\uffff\1\u0606\1\u05d8\3\uffff\1"+
            "\u05d9\1\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df\1\u05e0"+
            "\1\u05d6\1\uffff\1\u05c7\6\uffff\1\u05fb\1\uffff\1\u05fd\1\u05f9"+
            "\1\u05fa\1\u05fc\5\uffff\1\u05c6\1\u05c5\3\uffff\1\u05e1\1\u05e2"+
            "\1\u05e3\11\uffff\1\u05e7\1\u05e8\1\u05e9\1\u05eb\1\u05ec\1"+
            "\u05ed\1\u05ee\1\u05ef\1\u0601\1\u0602\1\u05f0\1\u0603\1\u05f1"+
            "\1\u05f2\1\u05f3\1\u05f4\1\u0604\1\uffff\1\u05f5\1\uffff\1\u05f6"+
            "\1\u05ea\1\u05d5\1\u05f7\14\uffff\1\u05ce\1\u05cf\1\u05d0\5"+
            "\uffff\1\u05fe\1\u05ff\1\u0600\2\uffff\1\u05e4\1\uffff\1\u05e5"+
            "\1\u05e6\u008e\uffff\1\u05cd\16\uffff\1\u05d3\1\u05d2\7\uffff"+
            "\1\u05c9\1\u05d1\1\uffff\1\u05c3\1\u05c4\11\uffff\1\u05c8\2"+
            "\uffff\1\u0605\1\uffff\1\u05ca\2\uffff\1\u05d4\1\u05cb\1\u05cc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u063b\4\uffff\1\u061a\2\uffff\1\u0649\1\u061b\3\uffff\1"+
            "\u061c\1\u061d\1\u061e\1\u061f\1\u0620\1\u0621\1\u0622\1\u0623"+
            "\1\u0619\1\uffff\1\u060b\6\uffff\1\u063e\1\uffff\1\u0640\1\u063c"+
            "\1\u063d\1\u063f\12\uffff\1\u0624\1\u0625\1\u0626\11\uffff\1"+
            "\u062a\1\u062b\1\u062c\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632"+
            "\1\u0644\1\u0645\1\u0633\1\u0646\1\u0634\1\u0635\1\u0636\1\u0637"+
            "\1\u0647\1\uffff\1\u0638\1\uffff\1\u0639\1\u062d\1\u0618\1\u063a"+
            "\14\uffff\1\u0612\1\u0613\1\u0614\5\uffff\1\u0641\1\u0642\1"+
            "\u0643\2\uffff\1\u0627\1\uffff\1\u0628\1\u0629\u008e\uffff\1"+
            "\u0611\16\uffff\1\u060a\1\u0616\5\uffff\1\u0609\1\uffff\1\u060d"+
            "\1\u0615\1\uffff\1\u0607\1\u0608\11\uffff\1\u060c\2\uffff\1"+
            "\u0648\1\uffff\1\u060e\2\uffff\1\u0617\1\u060f\1\u0610",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u067e\4\uffff\1\u065d\2\uffff\1\u068c\1\u065e\3\uffff\1"+
            "\u065f\1\u0660\1\u0661\1\u0662\1\u0663\1\u0664\1\u0665\1\u0666"+
            "\1\u065c\1\uffff\1\u064e\6\uffff\1\u0681\1\uffff\1\u0683\1\u067f"+
            "\1\u0680\1\u0682\12\uffff\1\u0667\1\u0668\1\u0669\11\uffff\1"+
            "\u066d\1\u066e\1\u066f\1\u0671\1\u0672\1\u0673\1\u0674\1\u0675"+
            "\1\u0687\1\u0688\1\u0676\1\u0689\1\u0677\1\u0678\1\u0679\1\u067a"+
            "\1\u068a\1\uffff\1\u067b\1\uffff\1\u067c\1\u0670\1\u065b\1\u067d"+
            "\14\uffff\1\u0655\1\u0656\1\u0657\5\uffff\1\u0684\1\u0685\1"+
            "\u0686\2\uffff\1\u066a\1\uffff\1\u066b\1\u066c\u008e\uffff\1"+
            "\u0654\16\uffff\1\u064d\1\u0659\5\uffff\1\u064c\1\uffff\1\u0650"+
            "\1\u0658\1\uffff\1\u064a\1\u064b\11\uffff\1\u064f\2\uffff\1"+
            "\u068b\1\uffff\1\u0651\2\uffff\1\u065a\1\u0652\1\u0653",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06c0\4\uffff\1\u069f\2\uffff\1\u06ce\1\u06a0\3\uffff\1"+
            "\u06a1\1\u06a2\1\u06a3\1\u06a4\1\u06a5\1\u06a6\1\u06a7\1\u06a8"+
            "\1\u069e\1\uffff\1\u068f\6\uffff\1\u06c3\1\uffff\1\u06c5\1\u06c1"+
            "\1\u06c2\1\u06c4\12\uffff\1\u06a9\1\u06aa\1\u06ab\11\uffff\1"+
            "\u06af\1\u06b0\1\u06b1\1\u06b3\1\u06b4\1\u06b5\1\u06b6\1\u06b7"+
            "\1\u06c9\1\u06ca\1\u06b8\1\u06cb\1\u06b9\1\u06ba\1\u06bb\1\u06bc"+
            "\1\u06cc\1\uffff\1\u06bd\1\uffff\1\u06be\1\u06b2\1\u069d\1\u06bf"+
            "\14\uffff\1\u0696\1\u0697\1\u0698\5\uffff\1\u06c6\1\u06c7\1"+
            "\u06c8\2\uffff\1\u06ac\1\uffff\1\u06ad\1\u06ae\u008e\uffff\1"+
            "\u0695\16\uffff\1\u069b\1\u069a\7\uffff\1\u0691\1\u0699\1\uffff"+
            "\1\u068d\1\u068e\11\uffff\1\u0690\2\uffff\1\u06cd\1\uffff\1"+
            "\u0692\2\uffff\1\u069c\1\u0693\1\u0694",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0702\4\uffff\1\u06e1\2\uffff\1\u0710\1\u06e2\3\uffff\1"+
            "\u06e3\1\u06e4\1\u06e5\1\u06e6\1\u06e7\1\u06e8\1\u06e9\1\u06ea"+
            "\1\u06e0\1\uffff\1\u06d1\6\uffff\1\u0705\1\uffff\1\u0707\1\u0703"+
            "\1\u0704\1\u0706\12\uffff\1\u06eb\1\u06ec\1\u06ed\11\uffff\1"+
            "\u06f1\1\u06f2\1\u06f3\1\u06f5\1\u06f6\1\u06f7\1\u06f8\1\u06f9"+
            "\1\u070b\1\u070c\1\u06fa\1\u070d\1\u06fb\1\u06fc\1\u06fd\1\u06fe"+
            "\1\u070e\1\uffff\1\u06ff\1\uffff\1\u0700\1\u06f4\1\u06df\1\u0701"+
            "\14\uffff\1\u06d8\1\u06d9\1\u06da\5\uffff\1\u0708\1\u0709\1"+
            "\u070a\2\uffff\1\u06ee\1\uffff\1\u06ef\1\u06f0\u008e\uffff\1"+
            "\u06d7\16\uffff\1\u06dd\1\u06dc\7\uffff\1\u06d3\1\u06db\1\uffff"+
            "\1\u06cf\1\u06d0\11\uffff\1\u06d2\2\uffff\1\u070f\1\uffff\1"+
            "\u06d4\2\uffff\1\u06de\1\u06d5\1\u06d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0711",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0747\4\uffff\1\u0726\2\uffff\1\u0755\1\u0727\3\uffff\1"+
            "\u0728\1\u0729\1\u072a\1\u072b\1\u072c\1\u072d\1\u072e\1\u072f"+
            "\1\u0725\1\uffff\1\u0716\6\uffff\1\u074a\1\uffff\1\u074c\1\u0748"+
            "\1\u0749\1\u074b\12\uffff\1\u0730\1\u0731\1\u0732\11\uffff\1"+
            "\u0736\1\u0737\1\u0738\1\u073a\1\u073b\1\u073c\1\u073d\1\u073e"+
            "\1\u0750\1\u0751\1\u073f\1\u0752\1\u0740\1\u0741\1\u0742\1\u0743"+
            "\1\u0753\1\uffff\1\u0744\1\uffff\1\u0745\1\u0739\1\u0724\1\u0746"+
            "\14\uffff\1\u071d\1\u071e\1\u071f\5\uffff\1\u074d\1\u074e\1"+
            "\u074f\2\uffff\1\u0733\1\uffff\1\u0734\1\u0735\u008e\uffff\1"+
            "\u071c\16\uffff\1\u0722\1\u0721\7\uffff\1\u0718\1\u0720\1\uffff"+
            "\1\u0714\1\u0715\11\uffff\1\u0717\2\uffff\1\u0754\1\uffff\1"+
            "\u0719\2\uffff\1\u0723\1\u071a\1\u071b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0789\4\uffff\1\u0768\2\uffff\1\u0797\1\u0769\3\uffff\1"+
            "\u076a\1\u076b\1\u076c\1\u076d\1\u076e\1\u076f\1\u0770\1\u0771"+
            "\1\u0767\1\uffff\1\u0758\6\uffff\1\u078c\1\uffff\1\u078e\1\u078a"+
            "\1\u078b\1\u078d\12\uffff\1\u0772\1\u0773\1\u0774\11\uffff\1"+
            "\u0778\1\u0779\1\u077a\1\u077c\1\u077d\1\u077e\1\u077f\1\u0780"+
            "\1\u0792\1\u0793\1\u0781\1\u0794\1\u0782\1\u0783\1\u0784\1\u0785"+
            "\1\u0795\1\uffff\1\u0786\1\uffff\1\u0787\1\u077b\1\u0766\1\u0788"+
            "\14\uffff\1\u075f\1\u0760\1\u0761\5\uffff\1\u078f\1\u0790\1"+
            "\u0791\2\uffff\1\u0775\1\uffff\1\u0776\1\u0777\u008e\uffff\1"+
            "\u075e\16\uffff\1\u0764\1\u0763\7\uffff\1\u075a\1\u0762\1\uffff"+
            "\1\u0756\1\u0757\11\uffff\1\u0759\2\uffff\1\u0796\1\uffff\1"+
            "\u075b\2\uffff\1\u0765\1\u075c\1\u075d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07cc\4\uffff\1\u07ab\2\uffff\1\u07da\1\u07ac\3\uffff\1"+
            "\u07ad\1\u07ae\1\u07af\1\u07b0\1\u07b1\1\u07b2\1\u07b3\1\u07b4"+
            "\1\u07aa\1\uffff\1\u079c\6\uffff\1\u07cf\1\uffff\1\u07d1\1\u07cd"+
            "\1\u07ce\1\u07d0\12\uffff\1\u07b5\1\u07b6\1\u07b7\11\uffff\1"+
            "\u07bb\1\u07bc\1\u07bd\1\u07bf\1\u07c0\1\u07c1\1\u07c2\1\u07c3"+
            "\1\u07d5\1\u07d6\1\u07c4\1\u07d7\1\u07c5\1\u07c6\1\u07c7\1\u07c8"+
            "\1\u07d8\1\uffff\1\u07c9\1\uffff\1\u07ca\1\u07be\1\u07a9\1\u07cb"+
            "\14\uffff\1\u07a3\1\u07a4\1\u07a5\5\uffff\1\u07d2\1\u07d3\1"+
            "\u07d4\2\uffff\1\u07b8\1\uffff\1\u07b9\1\u07ba\u008e\uffff\1"+
            "\u07a2\16\uffff\1\u079b\1\u07a7\5\uffff\1\u079a\1\uffff\1\u079e"+
            "\1\u07a6\1\uffff\1\u0798\1\u0799\11\uffff\1\u079d\2\uffff\1"+
            "\u07d9\1\uffff\1\u079f\2\uffff\1\u07a8\1\u07a0\1\u07a1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0801\4\uffff\1\u07e0\3\uffff\1\u07e1\3\uffff\1\u07e2\1"+
            "\u07e3\1\u07e4\1\u07e5\1\u07e6\1\u07e7\1\u07e8\1\u07e9\1\u07df"+
            "\1\u07db\7\uffff\1\u0804\1\uffff\1\u0806\1\u0802\1\u0803\1\u0805"+
            "\12\uffff\1\u07ea\1\u07eb\1\u07ec\11\uffff\1\u07f0\1\u07f1\1"+
            "\u07f2\1\u07f4\1\u07f5\1\u07f6\1\u07f7\1\u07f8\2\uffff\1\u07f9"+
            "\1\uffff\1\u07fa\1\u07fb\1\u07fc\1\u07fd\2\uffff\1\u07fe\1\uffff"+
            "\1\u07ff\1\u07f3\1\u07de\1\u0800\24\uffff\1\u0807\1\u0808\1"+
            "\u0809\2\uffff\1\u07ed\1\uffff\1\u07ee\1\u07ef\u009d\uffff\1"+
            "\u07dc\36\uffff\1\u07dd",
            "\1\u081f\1\u0820\1\u0821\1\u0822\1\uffff\1\u081c\1\u081b\1"+
            "\u081e\34\uffff\1\u0815\u00e8\uffff\1\u081d\1\u0814\3\uffff"+
            "\1\u080a\1\u0819\1\u080d\4\uffff\1\u0818\1\u081a\1\u0816\1\u0817"+
            "\1\u0810\1\u0811\1\u0812\1\u0813\1\u080f\1\u080e\1\u080b\1\u080c",
            "\1\u0838\1\u0839\1\u083a\1\u083b\1\uffff\1\u0835\1\u0834\1"+
            "\u0837\34\uffff\1\u082e\u00e8\uffff\1\u0836\1\u082d\3\uffff"+
            "\1\u0823\1\u0832\1\u0826\4\uffff\1\u0831\1\u0833\1\u082f\1\u0830"+
            "\1\u0829\1\u082a\1\u082b\1\u082c\1\u0828\1\u0827\1\u0824\1\u0825",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0851\1\u0852\1\u0853\1\u0854\1\uffff\1\u084e\1\u084d\1"+
            "\u0850\34\uffff\1\u0847\u00e8\uffff\1\u084f\1\u0846\3\uffff"+
            "\1\u083c\1\u084b\1\u083f\4\uffff\1\u084a\1\u084c\1\u0848\1\u0849"+
            "\1\u0842\1\u0843\1\u0844\1\u0845\1\u0841\1\u0840\1\u083d\1\u083e",
            "\1\u086a\1\u086b\1\u086c\1\u086d\1\uffff\1\u0867\1\u0866\1"+
            "\u0869\34\uffff\1\u0860\u00e8\uffff\1\u0868\1\u085f\3\uffff"+
            "\1\u0855\1\u0864\1\u0858\4\uffff\1\u0863\1\u0865\1\u0861\1\u0862"+
            "\1\u085b\1\u085c\1\u085d\1\u085e\1\u085a\1\u0859\1\u0856\1\u0857",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0883\1\u0884\1\u0885\1\u0886\1\uffff\1\u0880\1\u087f\1"+
            "\u0882\34\uffff\1\u0879\u00e8\uffff\1\u0881\1\u0878\3\uffff"+
            "\1\u086e\1\u087d\1\u0871\4\uffff\1\u087c\1\u087e\1\u087a\1\u087b"+
            "\1\u0874\1\u0875\1\u0876\1\u0877\1\u0873\1\u0872\1\u086f\1\u0870",
            "\1\u089c\1\u089d\1\u089e\1\u089f\1\uffff\1\u0899\1\u0898\1"+
            "\u089b\34\uffff\1\u0892\u00e8\uffff\1\u089a\1\u0891\3\uffff"+
            "\1\u0887\1\u0896\1\u088a\4\uffff\1\u0895\1\u0897\1\u0893\1\u0894"+
            "\1\u088d\1\u088e\1\u088f\1\u0890\1\u088c\1\u088b\1\u0888\1\u0889",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b6\1\u08b7\1\u08b8\1\u08b9\1\uffff\1\u08b3\1\u08b2\1"+
            "\u08b5\34\uffff\1\u08ac\u00e5\uffff\1\u08b4\2\uffff\1\16\1\u08ab"+
            "\3\uffff\1\u08a1\1\u08b0\1\u08a4\4\uffff\1\u08af\1\u08b1\1\u08ad"+
            "\1\u08ae\1\u08a7\1\u08a8\1\u08a9\1\u08aa\1\u08a6\1\u08a5\1\u08a2"+
            "\1\u08a3",
            "\1\u08cf\1\u08d0\1\u08d1\1\u08d2\1\uffff\1\u08cc\1\u08cb\1"+
            "\u08ce\34\uffff\1\u08c5\u00e5\uffff\1\u08cd\2\uffff\1\16\1\u08c4"+
            "\3\uffff\1\u08ba\1\u08c9\1\u08bd\4\uffff\1\u08c8\1\u08ca\1\u08c6"+
            "\1\u08c7\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\u08bf\1\u08be\1\u08bb"+
            "\1\u08bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08e9\1\u08ea\1\u08eb\1\u08ec\1\uffff\1\u08e6\1\u08e5\1"+
            "\u08e8\34\uffff\1\u08df\u00e8\uffff\1\u08e7\1\u08de\3\uffff"+
            "\1\u08d4\1\u08e3\1\u08d7\4\uffff\1\u08e2\1\u08e4\1\u08e0\1\u08e1"+
            "\1\u08da\1\u08db\1\u08dc\1\u08dd\1\u08d9\1\u08d8\1\u08d5\1\u08d6",
            "\1\u0902\1\u0903\1\u0904\1\u0905\1\uffff\1\u08ff\1\u08fe\1"+
            "\u0901\34\uffff\1\u08f8\u00e8\uffff\1\u0900\1\u08f7\3\uffff"+
            "\1\u08ed\1\u08fc\1\u08f0\4\uffff\1\u08fb\1\u08fd\1\u08f9\1\u08fa"+
            "\1\u08f3\1\u08f4\1\u08f5\1\u08f6\1\u08f2\1\u08f1\1\u08ee\1\u08ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u091b\1\u091c\1\u091d\1\u091e\1\uffff\1\u0919\1\u0918\1"+
            "\u091a\34\uffff\1\u0912\u00e8\uffff\1\u0906\1\u0911\3\uffff"+
            "\1\u0907\1\u0916\1\u090a\4\uffff\1\u0915\1\u0917\1\u0913\1\u0914"+
            "\1\u090d\1\u090e\1\u090f\1\u0910\1\u090c\1\u090b\1\u0908\1\u0909",
            "\1\u0934\1\u0935\1\u0936\1\u0937\1\uffff\1\u0931\1\u0930\1"+
            "\u0933\34\uffff\1\u092a\u00e8\uffff\1\u0932\1\u0929\3\uffff"+
            "\1\u091f\1\u092e\1\u0922\4\uffff\1\u092d\1\u092f\1\u092b\1\u092c"+
            "\1\u0925\1\u0926\1\u0927\1\u0928\1\u0924\1\u0923\1\u0920\1\u0921",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u094d\1\u094e\1\u094f\1\u0950\1\uffff\1\u094a\1\u0949\1"+
            "\u094c\34\uffff\1\u0943\u00e8\uffff\1\u094b\1\u0942\3\uffff"+
            "\1\u0938\1\u0947\1\u093b\4\uffff\1\u0946\1\u0948\1\u0944\1\u0945"+
            "\1\u093e\1\u093f\1\u0940\1\u0941\1\u093d\1\u093c\1\u0939\1\u093a",
            "\1\u0966\1\u0967\1\u0968\1\u0969\1\uffff\1\u0963\1\u0962\1"+
            "\u0965\34\uffff\1\u095c\u00e8\uffff\1\u0964\1\u095b\3\uffff"+
            "\1\u0951\1\u0960\1\u0954\4\uffff\1\u095f\1\u0961\1\u095d\1\u095e"+
            "\1\u0957\1\u0958\1\u0959\1\u095a\1\u0956\1\u0955\1\u0952\1\u0953",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0980\1\u0981\1\u0982\1\u0983\1\uffff\1\u097c\1\u097b\1"+
            "\u097f\34\uffff\1\u0975\u00e5\uffff\1\u097d\2\uffff\1\u097e"+
            "\1\u0974\3\uffff\1\u096a\1\u0979\1\u096d\4\uffff\1\u0978\1\u097a"+
            "\1\u0976\1\u0977\1\u0970\1\u0971\1\u0972\1\u0973\1\u096f\1\u096e"+
            "\1\u096b\1\u096c",
            "\1\u099a\1\u099b\1\u099c\1\u099d\1\uffff\1\u0996\1\u0995\1"+
            "\u0999\34\uffff\1\u098f\u00e5\uffff\1\u0997\2\uffff\1\u0998"+
            "\1\u098e\3\uffff\1\u0984\1\u0993\1\u0987\4\uffff\1\u0992\1\u0994"+
            "\1\u0990\1\u0991\1\u098a\1\u098b\1\u098c\1\u098d\1\u0989\1\u0988"+
            "\1\u0985\1\u0986",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09b4\1\u09b5\1\u09b6\1\u09b7\1\uffff\1\u09b1\1\u09b0\1"+
            "\u09b3\34\uffff\1\u09aa\u00e5\uffff\1\u09b2\2\uffff\1\u099e"+
            "\1\u09a9\3\uffff\1\u099f\1\u09ae\1\u09a2\4\uffff\1\u09ad\1\u09af"+
            "\1\u09ab\1\u09ac\1\u09a5\1\u09a6\1\u09a7\1\u09a8\1\u09a4\1\u09a3"+
            "\1\u09a0\1\u09a1",
            "\1\u09ce\1\u09cf\1\u09d0\1\u09d1\1\uffff\1\u09ca\1\u09c9\1"+
            "\u09cd\34\uffff\1\u09c3\u00e5\uffff\1\u09cb\2\uffff\1\u09cc"+
            "\1\u09c2\3\uffff\1\u09b8\1\u09c7\1\u09bb\4\uffff\1\u09c6\1\u09c8"+
            "\1\u09c4\1\u09c5\1\u09be\1\u09bf\1\u09c0\1\u09c1\1\u09bd\1\u09bc"+
            "\1\u09b9\1\u09ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09e8\1\u09e9\1\u09ea\1\u09eb\1\uffff\1\u09e4\1\u09e3\1"+
            "\u09e7\34\uffff\1\u09dd\u00e5\uffff\1\u09e5\2\uffff\1\u09e6"+
            "\1\u09dc\3\uffff\1\u09d2\1\u09e1\1\u09d5\4\uffff\1\u09e0\1\u09e2"+
            "\1\u09de\1\u09df\1\u09d8\1\u09d9\1\u09da\1\u09db\1\u09d7\1\u09d6"+
            "\1\u09d3\1\u09d4",
            "\1\u0a02\1\u0a03\1\u0a04\1\u0a05\1\uffff\1\u09fe\1\u09fd\1"+
            "\u0a01\34\uffff\1\u09f7\u00e5\uffff\1\u09ff\2\uffff\1\u0a00"+
            "\1\u09f6\3\uffff\1\u09ec\1\u09fb\1\u09ef\4\uffff\1\u09fa\1\u09fc"+
            "\1\u09f8\1\u09f9\1\u09f2\1\u09f3\1\u09f4\1\u09f5\1\u09f1\1\u09f0"+
            "\1\u09ed\1\u09ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a1c\1\u0a1d\1\u0a1e\1\u0a1f\1\uffff\1\u0a18\1\u0a17\1"+
            "\u0a1b\34\uffff\1\u0a11\u00e5\uffff\1\u0a19\2\uffff\1\u0a1a"+
            "\1\u0a10\3\uffff\1\u0a06\1\u0a15\1\u0a09\4\uffff\1\u0a14\1\u0a16"+
            "\1\u0a12\1\u0a13\1\u0a0c\1\u0a0d\1\u0a0e\1\u0a0f\1\u0a0b\1\u0a0a"+
            "\1\u0a07\1\u0a08",
            "\1\u0a36\1\u0a37\1\u0a38\1\u0a39\1\uffff\1\u0a32\1\u0a31\1"+
            "\u0a35\34\uffff\1\u0a2b\u00e5\uffff\1\u0a33\2\uffff\1\u0a34"+
            "\1\u0a2a\3\uffff\1\u0a20\1\u0a2f\1\u0a23\4\uffff\1\u0a2e\1\u0a30"+
            "\1\u0a2c\1\u0a2d\1\u0a26\1\u0a27\1\u0a28\1\u0a29\1\u0a25\1\u0a24"+
            "\1\u0a21\1\u0a22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a4f\1\u0a50\1\u0a51\1\u0a52\1\uffff\1\u0a4c\1\u0a4b\1"+
            "\u0a4e\34\uffff\1\u0a45\u00e5\uffff\1\u0a4d\2\uffff\1\16\1\u0a44"+
            "\3\uffff\1\u0a3a\1\u0a49\1\u0a3d\4\uffff\1\u0a48\1\u0a4a\1\u0a46"+
            "\1\u0a47\1\u0a40\1\u0a41\1\u0a42\1\u0a43\1\u0a3f\1\u0a3e\1\u0a3b"+
            "\1\u0a3c",
            "\1\u0a69\1\u0a6a\1\u0a6b\1\u0a6c\1\uffff\1\u0a66\1\u0a65\1"+
            "\u0a68\34\uffff\1\u0a5f\u00e5\uffff\1\u0a67\2\uffff\1\16\1\u0a5e"+
            "\3\uffff\1\u0a54\1\u0a63\1\u0a57\4\uffff\1\u0a62\1\u0a64\1\u0a60"+
            "\1\u0a61\1\u0a5a\1\u0a5b\1\u0a5c\1\u0a5d\1\u0a59\1\u0a58\1\u0a55"+
            "\1\u0a56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a84\1\u0a85\1\u0a86\1\u0a87\1\uffff\1\u0a80\1\u0a7f\1"+
            "\u0a83\3\uffff\1\u0a82\30\uffff\1\u0a79\u00e5\uffff\1\u0a81"+
            "\2\uffff\1\16\1\u0a78\3\uffff\1\u0a6e\1\u0a7d\1\u0a71\4\uffff"+
            "\1\u0a7c\1\u0a7e\1\u0a7a\1\u0a7b\1\u0a74\1\u0a75\1\u0a76\1\u0a77"+
            "\1\u0a73\1\u0a72\1\u0a6f\1\u0a70",
            "\1\u0a9f\1\u0aa0\1\u0aa1\1\u0aa2\1\uffff\1\u0a9b\1\u0a9a\1"+
            "\u0a9e\3\uffff\1\u0a9d\30\uffff\1\u0a94\u00e5\uffff\1\u0a9c"+
            "\2\uffff\1\16\1\u0a93\3\uffff\1\u0a89\1\u0a98\1\u0a8c\4\uffff"+
            "\1\u0a97\1\u0a99\1\u0a95\1\u0a96\1\u0a8f\1\u0a90\1\u0a91\1\u0a92"+
            "\1\u0a8e\1\u0a8d\1\u0a8a\1\u0a8b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0ab9\1\u0aba\1\u0abb\1\u0abc\1\uffff\1\u0ab6\1\u0ab5\1"+
            "\u0ab8\34\uffff\1\u0aaf\u00e8\uffff\1\u0ab7\1\u0aae\3\uffff"+
            "\1\u0aa4\1\u0ab3\1\u0aa7\4\uffff\1\u0ab2\1\u0ab4\1\u0ab0\1\u0ab1"+
            "\1\u0aaa\1\u0aab\1\u0aac\1\u0aad\1\u0aa9\1\u0aa8\1\u0aa5\1\u0aa6",
            "\1\u0ad2\1\u0ad3\1\u0ad4\1\u0ad5\1\uffff\1\u0acf\1\u0ace\1"+
            "\u0ad1\34\uffff\1\u0ac8\u00e8\uffff\1\u0ad0\1\u0ac7\3\uffff"+
            "\1\u0abd\1\u0acc\1\u0ac0\4\uffff\1\u0acb\1\u0acd\1\u0ac9\1\u0aca"+
            "\1\u0ac3\1\u0ac4\1\u0ac5\1\u0ac6\1\u0ac2\1\u0ac1\1\u0abe\1\u0abf",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;
    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }
    class DFA176 extends DFA {
        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "1226:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA176_0 = input.LA(1);
                        int index176_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_0==MINUS) ) {s = 1;}
                        else if ( ((LA176_0>=BOOLEAN_TRUE && LA176_0<=VALUE_NULL)||LA176_0==NUM_DOUBLE||LA176_0==PLUS||(LA176_0>=STRING_LITERAL && LA176_0<=QUOTED_STRING_LITERAL)||LA176_0==NUM_INT||(LA176_0>=NUM_LONG && LA176_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA176_0==QUESTION) ) {s = 12;}
                        else if ( (LA176_0==LPAREN) ) {s = 13;}
                        else if ( (LA176_0==ESCAPE||LA176_0==EVERY_EXPR||(LA176_0>=MAX && LA176_0<=MIN)||LA176_0==OUTER||(LA176_0>=JOIN && LA176_0<=FULL)||LA176_0==EVENTS||(LA176_0>=UNIDIRECTIONAL && LA176_0<=METADATASQL)||(LA176_0>=WEEKDAY && LA176_0<=LW)||LA176_0==SNAPSHOT||(LA176_0>=VARIABLE && LA176_0<=INDEX)||(LA176_0>=DEFINE && LA176_0<=MATCHES)||LA176_0==WHILE||(LA176_0>=MERGE && LA176_0<=MATCHED)||LA176_0==IDENT||LA176_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA176_0==COUNT) ) {s = 17;}
                        else if ( (LA176_0==SUM) ) {s = 20;}
                        else if ( (LA176_0==AVG) ) {s = 21;}
                        else if ( (LA176_0==COALESCE) ) {s = 24;}
                        else if ( (LA176_0==MEDIAN) ) {s = 25;}
                        else if ( (LA176_0==STDDEV) ) {s = 26;}
                        else if ( (LA176_0==AVEDEV) ) {s = 27;}
                        else if ( (LA176_0==FIRST) ) {s = 29;}
                        else if ( (LA176_0==LAST) ) {s = 30;}
                        else if ( (LA176_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA176_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA176_0==PRIOR) ) {s = 43;}
                        else if ( (LA176_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA176_0==CAST) ) {s = 47;}
                        else if ( (LA176_0==WINDOW) ) {s = 51;}
                        else if ( (LA176_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 60;}
                        else if ( (LA176_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA176_0==EXISTS) ) {s = 62;}
                        else if ( (LA176_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA176_0==LCURLY) ) {s = 64;}
                        input.seek(index176_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA176_182 = input.LA(1);
                        int index176_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_182==STRING_LITERAL) ) {s = 1068;}
                        else if ( (LA176_182==QUOTED_STRING_LITERAL) ) {s = 1069;}
                        else if ( (LA176_182==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1070;}
                        else if ( (LA176_182==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1071;}
                        else if ( (LA176_182==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}
                        else if ( (LA176_182==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1073;}
                        else if ( (LA176_182==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1074;}
                        else if ( (LA176_182==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1075;}
                        else if ( (LA176_182==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1076;}
                        else if ( (LA176_182==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1077;}
                        else if ( (LA176_182==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1078;}
                        else if ( (LA176_182==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1079;}
                        else if ( (LA176_182==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1080;}
                        else if ( (LA176_182==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1081;}
                        else if ( (LA176_182==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1082;}
                        else if ( (LA176_182==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1083;}
                        else if ( (LA176_182==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1084;}
                        else if ( (LA176_182==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1085;}
                        else if ( (LA176_182==AT) && (synpred3_EsperEPL2Grammar())) {s = 1086;}
                        else if ( (LA176_182==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}
                        else if ( (LA176_182==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1088;}
                        else if ( (LA176_182==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1089;}
                        else if ( (LA176_182==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1090;}
                        else if ( (LA176_182==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1091;}
                        else if ( (LA176_182==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1092;}
                        else if ( (LA176_182==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1093;}
                        else if ( (LA176_182==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1094;}
                        else if ( (LA176_182==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1095;}
                        else if ( (LA176_182==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1096;}
                        else if ( (LA176_182==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1097;}
                        else if ( (LA176_182==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1098;}
                        else if ( (LA176_182==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1099;}
                        else if ( (LA176_182==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1100;}
                        else if ( (LA176_182==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1101;}
                        else if ( (LA176_182==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1102;}
                        else if ( (LA176_182==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1103;}
                        else if ( (LA176_182==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1104;}
                        else if ( (LA176_182==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1105;}
                        else if ( (LA176_182==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1106;}
                        else if ( (LA176_182==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1107;}
                        else if ( (LA176_182==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1108;}
                        else if ( (LA176_182==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1109;}
                        else if ( (LA176_182==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1110;}
                        else if ( (LA176_182==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1111;}
                        else if ( (LA176_182==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1112;}
                        else if ( (LA176_182==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1113;}
                        else if ( (LA176_182==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1114;}
                        else if ( (LA176_182==LW) && (synpred3_EsperEPL2Grammar())) {s = 1115;}
                        else if ( (LA176_182==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1116;}
                        else if ( (LA176_182==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1117;}
                        else if ( (LA176_182==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1118;}
                        else if ( (LA176_182==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1119;}
                        else if ( (LA176_182==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1120;}
                        else if ( (LA176_182==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1121;}
                        else if ( (LA176_182==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}
                        else if ( (LA176_182==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1123;}
                        else if ( (LA176_182==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1124;}
                        else if ( (LA176_182==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1125;}
                        else if ( (LA176_182==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1126;}
                        else if ( (LA176_182==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1127;}
                        else if ( (LA176_182==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1128;}
                        else if ( (LA176_182==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1129;}
                        else if ( (LA176_182==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA176_182==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA176_182==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA176_182==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA176_182==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA176_182==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA176_182==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1136;}
                        input.seek(index176_182);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA176_241 = input.LA(1);
                        int index176_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_241==STRING_LITERAL) ) {s = 1137;}
                        else if ( (LA176_241==QUOTED_STRING_LITERAL) ) {s = 1138;}
                        else if ( (LA176_241==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}
                        else if ( (LA176_241==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1140;}
                        else if ( (LA176_241==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA176_241==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA176_241==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA176_241==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA176_241==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA176_241==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA176_241==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA176_241==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA176_241==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA176_241==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA176_241==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA176_241==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA176_241==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA176_241==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA176_241==AT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA176_241==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA176_241==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA176_241==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA176_241==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA176_241==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA176_241==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA176_241==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA176_241==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA176_241==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA176_241==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA176_241==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA176_241==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA176_241==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA176_241==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA176_241==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA176_241==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA176_241==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA176_241==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA176_241==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA176_241==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA176_241==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA176_241==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA176_241==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA176_241==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA176_241==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA176_241==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA176_241==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA176_241==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA176_241==LW) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA176_241==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA176_241==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA176_241==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA176_241==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA176_241==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA176_241==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA176_241==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA176_241==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA176_241==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA176_241==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA176_241==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA176_241==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA176_241==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA176_241==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA176_241==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA176_241==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA176_241==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA176_241==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA176_241==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA176_241==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        input.seek(index176_241);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA176_300 = input.LA(1);
                        int index176_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_300==STRING_LITERAL) ) {s = 1205;}
                        else if ( (LA176_300==QUOTED_STRING_LITERAL) ) {s = 1206;}
                        else if ( (LA176_300==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA176_300==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA176_300==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA176_300==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA176_300==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA176_300==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA176_300==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA176_300==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA176_300==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA176_300==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA176_300==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA176_300==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA176_300==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA176_300==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA176_300==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA176_300==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA176_300==AT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA176_300==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA176_300==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA176_300==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA176_300==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA176_300==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA176_300==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA176_300==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA176_300==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA176_300==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA176_300==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA176_300==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA176_300==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA176_300==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA176_300==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA176_300==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA176_300==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA176_300==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA176_300==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA176_300==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA176_300==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA176_300==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA176_300==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA176_300==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA176_300==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA176_300==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA176_300==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA176_300==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA176_300==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA176_300==LW) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA176_300==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA176_300==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA176_300==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA176_300==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA176_300==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA176_300==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA176_300==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA176_300==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA176_300==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA176_300==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA176_300==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA176_300==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA176_300==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA176_300==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA176_300==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA176_300==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA176_300==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA176_300==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA176_300==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA176_300==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        input.seek(index176_300);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA176_359 = input.LA(1);
                        int index176_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_359==STRING_LITERAL) ) {s = 1273;}
                        else if ( (LA176_359==QUOTED_STRING_LITERAL) ) {s = 1274;}
                        else if ( (LA176_359==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA176_359==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA176_359==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA176_359==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA176_359==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA176_359==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA176_359==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA176_359==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA176_359==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA176_359==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA176_359==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA176_359==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA176_359==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA176_359==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA176_359==AT) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA176_359==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA176_359==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA176_359==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA176_359==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA176_359==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA176_359==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA176_359==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA176_359==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA176_359==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA176_359==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA176_359==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA176_359==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA176_359==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA176_359==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA176_359==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA176_359==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA176_359==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA176_359==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA176_359==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA176_359==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA176_359==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA176_359==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA176_359==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA176_359==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA176_359==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA176_359==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA176_359==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA176_359==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA176_359==LW) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA176_359==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA176_359==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA176_359==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA176_359==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA176_359==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA176_359==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA176_359==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA176_359==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA176_359==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA176_359==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA176_359==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA176_359==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA176_359==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA176_359==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA176_359==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA176_359==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA176_359==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA176_359==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA176_359==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA176_359==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        input.seek(index176_359);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA176_418 = input.LA(1);
                        int index176_418 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_418==STRING_LITERAL) ) {s = 1339;}
                        else if ( (LA176_418==QUOTED_STRING_LITERAL) ) {s = 1340;}
                        else if ( (LA176_418==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA176_418==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA176_418==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA176_418==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA176_418==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA176_418==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA176_418==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA176_418==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA176_418==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA176_418==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA176_418==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA176_418==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA176_418==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA176_418==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA176_418==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA176_418==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA176_418==AT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA176_418==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA176_418==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA176_418==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA176_418==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA176_418==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA176_418==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA176_418==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA176_418==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA176_418==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA176_418==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA176_418==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA176_418==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA176_418==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA176_418==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA176_418==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA176_418==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA176_418==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA176_418==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA176_418==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA176_418==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA176_418==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA176_418==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA176_418==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA176_418==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA176_418==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA176_418==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA176_418==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA176_418==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA176_418==LW) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA176_418==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA176_418==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA176_418==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA176_418==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA176_418==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA176_418==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA176_418==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA176_418==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA176_418==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA176_418==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA176_418==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA176_418==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA176_418==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA176_418==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA176_418==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA176_418==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA176_418==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA176_418==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA176_418==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA176_418==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        input.seek(index176_418);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA176_477 = input.LA(1);
                        int index176_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_477==STRING_LITERAL) ) {s = 1407;}
                        else if ( (LA176_477==QUOTED_STRING_LITERAL) ) {s = 1408;}
                        else if ( (LA176_477==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA176_477==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA176_477==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA176_477==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA176_477==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA176_477==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA176_477==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA176_477==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA176_477==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA176_477==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA176_477==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA176_477==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA176_477==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA176_477==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA176_477==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA176_477==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA176_477==AT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA176_477==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA176_477==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA176_477==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA176_477==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA176_477==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA176_477==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA176_477==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA176_477==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA176_477==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA176_477==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA176_477==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA176_477==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA176_477==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA176_477==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA176_477==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA176_477==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA176_477==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA176_477==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA176_477==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA176_477==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA176_477==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA176_477==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA176_477==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA176_477==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA176_477==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA176_477==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA176_477==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA176_477==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA176_477==LW) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA176_477==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA176_477==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA176_477==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA176_477==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA176_477==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA176_477==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA176_477==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA176_477==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA176_477==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA176_477==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA176_477==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA176_477==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA176_477==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA176_477==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA176_477==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA176_477==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA176_477==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA176_477==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA176_477==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA176_477==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        input.seek(index176_477);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA176_536 = input.LA(1);
                        int index176_536 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_536==STRING_LITERAL) ) {s = 1475;}
                        else if ( (LA176_536==QUOTED_STRING_LITERAL) ) {s = 1476;}
                        else if ( (LA176_536==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA176_536==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA176_536==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA176_536==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA176_536==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA176_536==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA176_536==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA176_536==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA176_536==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA176_536==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA176_536==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA176_536==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA176_536==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA176_536==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA176_536==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA176_536==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA176_536==AT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA176_536==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA176_536==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA176_536==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA176_536==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA176_536==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA176_536==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA176_536==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA176_536==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA176_536==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA176_536==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA176_536==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA176_536==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA176_536==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA176_536==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA176_536==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA176_536==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA176_536==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA176_536==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA176_536==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA176_536==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA176_536==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA176_536==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA176_536==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA176_536==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA176_536==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA176_536==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA176_536==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA176_536==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA176_536==LW) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA176_536==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA176_536==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA176_536==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA176_536==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA176_536==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA176_536==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA176_536==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA176_536==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA176_536==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA176_536==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA176_536==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA176_536==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA176_536==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA176_536==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA176_536==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA176_536==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA176_536==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA176_536==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA176_536==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA176_536==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        input.seek(index176_536);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA176_595 = input.LA(1);
                        int index176_595 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_595==STRING_LITERAL) ) {s = 1543;}
                        else if ( (LA176_595==QUOTED_STRING_LITERAL) ) {s = 1544;}
                        else if ( (LA176_595==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA176_595==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA176_595==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA176_595==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA176_595==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA176_595==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA176_595==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA176_595==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA176_595==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA176_595==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA176_595==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA176_595==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA176_595==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA176_595==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA176_595==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA176_595==AT) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA176_595==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA176_595==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA176_595==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA176_595==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA176_595==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA176_595==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA176_595==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA176_595==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA176_595==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA176_595==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA176_595==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA176_595==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA176_595==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA176_595==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA176_595==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA176_595==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA176_595==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA176_595==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA176_595==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA176_595==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA176_595==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA176_595==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA176_595==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA176_595==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA176_595==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA176_595==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA176_595==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA176_595==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA176_595==LW) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA176_595==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA176_595==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA176_595==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA176_595==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA176_595==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA176_595==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA176_595==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA176_595==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA176_595==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA176_595==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA176_595==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA176_595==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA176_595==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA176_595==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA176_595==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA176_595==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA176_595==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA176_595==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA176_595==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA176_595==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        input.seek(index176_595);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA176_654 = input.LA(1);
                        int index176_654 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_654==STRING_LITERAL) ) {s = 1610;}
                        else if ( (LA176_654==QUOTED_STRING_LITERAL) ) {s = 1611;}
                        else if ( (LA176_654==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA176_654==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA176_654==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA176_654==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA176_654==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA176_654==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA176_654==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA176_654==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA176_654==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA176_654==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA176_654==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA176_654==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA176_654==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA176_654==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA176_654==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA176_654==AT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA176_654==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA176_654==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA176_654==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA176_654==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA176_654==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA176_654==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA176_654==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA176_654==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA176_654==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA176_654==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA176_654==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA176_654==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA176_654==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA176_654==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA176_654==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA176_654==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA176_654==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA176_654==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA176_654==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA176_654==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA176_654==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA176_654==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA176_654==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA176_654==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA176_654==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA176_654==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA176_654==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA176_654==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA176_654==LW) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA176_654==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA176_654==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA176_654==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA176_654==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA176_654==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA176_654==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA176_654==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA176_654==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA176_654==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA176_654==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA176_654==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA176_654==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA176_654==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA176_654==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA176_654==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA176_654==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA176_654==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA176_654==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA176_654==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA176_654==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        input.seek(index176_654);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA176_713 = input.LA(1);
                        int index176_713 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_713==STRING_LITERAL) ) {s = 1677;}
                        else if ( (LA176_713==QUOTED_STRING_LITERAL) ) {s = 1678;}
                        else if ( (LA176_713==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA176_713==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA176_713==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA176_713==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA176_713==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA176_713==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA176_713==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA176_713==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA176_713==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA176_713==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA176_713==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA176_713==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA176_713==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA176_713==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA176_713==AT) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA176_713==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA176_713==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA176_713==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA176_713==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA176_713==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA176_713==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA176_713==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA176_713==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA176_713==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA176_713==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA176_713==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA176_713==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA176_713==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA176_713==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA176_713==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA176_713==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA176_713==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA176_713==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA176_713==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA176_713==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA176_713==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA176_713==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA176_713==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA176_713==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA176_713==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA176_713==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA176_713==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA176_713==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA176_713==LW) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA176_713==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA176_713==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA176_713==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA176_713==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA176_713==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA176_713==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA176_713==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA176_713==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA176_713==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA176_713==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA176_713==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA176_713==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA176_713==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA176_713==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA176_713==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA176_713==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA176_713==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA176_713==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA176_713==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA176_713==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        input.seek(index176_713);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA176_772 = input.LA(1);
                        int index176_772 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_772==STRING_LITERAL) ) {s = 1743;}
                        else if ( (LA176_772==QUOTED_STRING_LITERAL) ) {s = 1744;}
                        else if ( (LA176_772==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA176_772==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA176_772==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA176_772==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA176_772==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA176_772==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA176_772==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA176_772==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA176_772==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA176_772==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA176_772==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA176_772==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA176_772==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA176_772==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA176_772==AT) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA176_772==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA176_772==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA176_772==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA176_772==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA176_772==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA176_772==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA176_772==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA176_772==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA176_772==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA176_772==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA176_772==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA176_772==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA176_772==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA176_772==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA176_772==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA176_772==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA176_772==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA176_772==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA176_772==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA176_772==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA176_772==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA176_772==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA176_772==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA176_772==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA176_772==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA176_772==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA176_772==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA176_772==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA176_772==LW) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA176_772==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA176_772==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA176_772==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA176_772==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA176_772==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA176_772==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA176_772==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA176_772==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA176_772==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA176_772==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA176_772==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA176_772==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA176_772==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA176_772==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA176_772==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA176_772==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA176_772==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA176_772==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA176_772==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA176_772==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        input.seek(index176_772);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA176_831 = input.LA(1);
                        int index176_831 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_831==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( ((LA176_831>=STRING_LITERAL && LA176_831<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index176_831);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA176_890 = input.LA(1);
                        int index176_890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_890==STRING_LITERAL) ) {s = 1812;}
                        else if ( (LA176_890==QUOTED_STRING_LITERAL) ) {s = 1813;}
                        else if ( (LA176_890==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA176_890==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA176_890==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA176_890==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA176_890==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA176_890==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA176_890==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA176_890==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA176_890==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA176_890==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA176_890==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA176_890==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA176_890==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA176_890==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA176_890==AT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA176_890==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA176_890==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA176_890==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA176_890==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA176_890==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA176_890==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA176_890==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA176_890==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA176_890==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA176_890==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA176_890==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA176_890==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA176_890==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA176_890==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA176_890==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA176_890==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA176_890==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA176_890==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA176_890==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA176_890==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA176_890==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA176_890==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA176_890==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA176_890==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA176_890==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA176_890==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA176_890==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA176_890==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA176_890==LW) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA176_890==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA176_890==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA176_890==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA176_890==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA176_890==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA176_890==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA176_890==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA176_890==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA176_890==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA176_890==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA176_890==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA176_890==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA176_890==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA176_890==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA176_890==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA176_890==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA176_890==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA176_890==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA176_890==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA176_890==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        input.seek(index176_890);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA176_949 = input.LA(1);
                        int index176_949 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_949==STRING_LITERAL) ) {s = 1878;}
                        else if ( (LA176_949==QUOTED_STRING_LITERAL) ) {s = 1879;}
                        else if ( (LA176_949==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA176_949==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA176_949==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA176_949==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA176_949==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA176_949==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA176_949==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA176_949==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA176_949==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA176_949==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA176_949==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA176_949==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA176_949==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA176_949==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA176_949==AT) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA176_949==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA176_949==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA176_949==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA176_949==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA176_949==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA176_949==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA176_949==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA176_949==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA176_949==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA176_949==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA176_949==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA176_949==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA176_949==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA176_949==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA176_949==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA176_949==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA176_949==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA176_949==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA176_949==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA176_949==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA176_949==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA176_949==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA176_949==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA176_949==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA176_949==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA176_949==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA176_949==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA176_949==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA176_949==LW) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA176_949==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA176_949==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA176_949==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA176_949==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA176_949==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA176_949==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA176_949==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA176_949==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA176_949==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA176_949==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA176_949==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA176_949==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA176_949==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA176_949==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA176_949==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA176_949==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA176_949==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA176_949==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA176_949==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA176_949==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        input.seek(index176_949);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA176_1008 = input.LA(1);
                        int index176_1008 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1008==STRING_LITERAL) ) {s = 1944;}
                        else if ( (LA176_1008==QUOTED_STRING_LITERAL) ) {s = 1945;}
                        else if ( (LA176_1008==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA176_1008==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA176_1008==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA176_1008==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA176_1008==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA176_1008==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA176_1008==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA176_1008==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA176_1008==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA176_1008==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA176_1008==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA176_1008==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA176_1008==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA176_1008==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA176_1008==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA176_1008==AT) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA176_1008==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA176_1008==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA176_1008==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA176_1008==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA176_1008==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA176_1008==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA176_1008==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA176_1008==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA176_1008==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA176_1008==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA176_1008==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA176_1008==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA176_1008==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA176_1008==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA176_1008==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA176_1008==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA176_1008==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA176_1008==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA176_1008==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA176_1008==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA176_1008==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA176_1008==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA176_1008==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA176_1008==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA176_1008==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA176_1008==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA176_1008==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA176_1008==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA176_1008==LW) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA176_1008==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA176_1008==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA176_1008==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA176_1008==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA176_1008==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA176_1008==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA176_1008==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA176_1008==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA176_1008==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA176_1008==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA176_1008==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA176_1008==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA176_1008==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA176_1008==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA176_1008==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA176_1008==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA176_1008==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA176_1008==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA176_1008==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA176_1008==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        input.seek(index176_1008);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA176_1067 = input.LA(1);
                        int index176_1067 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1067==SELECT) ) {s = 2011;}
                        else if ( (LA176_1067==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA176_1067==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA176_1067==AT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA176_1067==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA176_1067==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA176_1067==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA176_1067==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA176_1067==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA176_1067==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA176_1067==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA176_1067==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA176_1067==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA176_1067==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA176_1067==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA176_1067==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA176_1067==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA176_1067==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA176_1067==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA176_1067==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA176_1067==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA176_1067==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA176_1067==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA176_1067==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA176_1067==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA176_1067==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA176_1067==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA176_1067==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA176_1067==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA176_1067==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA176_1067==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA176_1067==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA176_1067==LW) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA176_1067==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA176_1067==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA176_1067==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA176_1067==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA176_1067==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA176_1067==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA176_1067==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA176_1067==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA176_1067==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA176_1067==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA176_1067==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA176_1067==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA176_1067==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA176_1067==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        input.seek(index176_1067);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA176_1068 = input.LA(1);
                        int index176_1068 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1068==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA176_1068==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA176_1068==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA176_1068==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA176_1068==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA176_1068==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA176_1068==LT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA176_1068==GT) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA176_1068==LE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA176_1068==GE) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA176_1068==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA176_1068==IS) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA176_1068==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA176_1068==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA176_1068==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA176_1068==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA176_1068==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA176_1068==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA176_1068==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA176_1068==RPAREN) ) {s = 2077;}
                        else if ( (LA176_1068==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA176_1068==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA176_1068==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA176_1068==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA176_1068==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        input.seek(index176_1068);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA176_1069 = input.LA(1);
                        int index176_1069 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1069==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA176_1069==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA176_1069==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA176_1069==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA176_1069==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA176_1069==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA176_1069==LT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA176_1069==GT) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA176_1069==LE) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA176_1069==GE) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA176_1069==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA176_1069==IS) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA176_1069==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA176_1069==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA176_1069==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA176_1069==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA176_1069==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA176_1069==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA176_1069==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA176_1069==RPAREN) ) {s = 2102;}
                        else if ( (LA176_1069==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA176_1069==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA176_1069==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA176_1069==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA176_1069==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        input.seek(index176_1069);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA176_1137 = input.LA(1);
                        int index176_1137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1137==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA176_1137==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA176_1137==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA176_1137==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA176_1137==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA176_1137==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA176_1137==LT) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA176_1137==GT) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA176_1137==LE) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA176_1137==GE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA176_1137==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA176_1137==IS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA176_1137==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA176_1137==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA176_1137==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA176_1137==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA176_1137==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA176_1137==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA176_1137==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA176_1137==RPAREN) ) {s = 2127;}
                        else if ( (LA176_1137==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA176_1137==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA176_1137==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA176_1137==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA176_1137==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        input.seek(index176_1137);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA176_1138 = input.LA(1);
                        int index176_1138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1138==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA176_1138==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA176_1138==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA176_1138==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA176_1138==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA176_1138==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA176_1138==LT) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA176_1138==GT) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA176_1138==LE) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA176_1138==GE) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA176_1138==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA176_1138==IS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA176_1138==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA176_1138==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA176_1138==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA176_1138==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA176_1138==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA176_1138==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA176_1138==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA176_1138==RPAREN) ) {s = 2152;}
                        else if ( (LA176_1138==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA176_1138==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA176_1138==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA176_1138==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA176_1138==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        input.seek(index176_1138);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA176_1205 = input.LA(1);
                        int index176_1205 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1205==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA176_1205==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA176_1205==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA176_1205==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA176_1205==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA176_1205==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA176_1205==LT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA176_1205==GT) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA176_1205==LE) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA176_1205==GE) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA176_1205==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA176_1205==IS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA176_1205==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA176_1205==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA176_1205==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA176_1205==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA176_1205==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA176_1205==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA176_1205==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA176_1205==RPAREN) ) {s = 2177;}
                        else if ( (LA176_1205==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA176_1205==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA176_1205==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA176_1205==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA176_1205==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        input.seek(index176_1205);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA176_1206 = input.LA(1);
                        int index176_1206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1206==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA176_1206==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA176_1206==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA176_1206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA176_1206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA176_1206==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA176_1206==LT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA176_1206==GT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA176_1206==LE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA176_1206==GE) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA176_1206==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA176_1206==IS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA176_1206==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA176_1206==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA176_1206==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA176_1206==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA176_1206==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA176_1206==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA176_1206==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA176_1206==RPAREN) ) {s = 2202;}
                        else if ( (LA176_1206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA176_1206==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA176_1206==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA176_1206==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA176_1206==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        input.seek(index176_1206);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA176_1273 = input.LA(1);
                        int index176_1273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1273==RPAREN) ) {s = 14;}
                        else if ( (LA176_1273==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA176_1273==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA176_1273==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA176_1273==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA176_1273==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA176_1273==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA176_1273==LT) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA176_1273==GT) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA176_1273==LE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA176_1273==GE) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA176_1273==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA176_1273==IS) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA176_1273==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA176_1273==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA176_1273==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA176_1273==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA176_1273==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA176_1273==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA176_1273==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA176_1273==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA176_1273==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA176_1273==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA176_1273==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA176_1273==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA176_1273==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        input.seek(index176_1273);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA176_1274 = input.LA(1);
                        int index176_1274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1274==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA176_1274==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA176_1274==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA176_1274==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA176_1274==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA176_1274==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA176_1274==LT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA176_1274==GT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA176_1274==LE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA176_1274==GE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA176_1274==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA176_1274==IS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA176_1274==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA176_1274==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA176_1274==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA176_1274==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA176_1274==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA176_1274==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA176_1274==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA176_1274==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA176_1274==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA176_1274==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA176_1274==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA176_1274==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA176_1274==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA176_1274==RPAREN) ) {s = 14;}
                        input.seek(index176_1274);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA176_1339 = input.LA(1);
                        int index176_1339 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1339==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA176_1339==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA176_1339==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA176_1339==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA176_1339==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA176_1339==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA176_1339==LT) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA176_1339==GT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA176_1339==LE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA176_1339==GE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA176_1339==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA176_1339==IS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA176_1339==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA176_1339==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA176_1339==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA176_1339==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA176_1339==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA176_1339==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA176_1339==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA176_1339==RPAREN) ) {s = 2279;}
                        else if ( (LA176_1339==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA176_1339==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA176_1339==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA176_1339==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA176_1339==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        input.seek(index176_1339);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA176_1340 = input.LA(1);
                        int index176_1340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1340==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA176_1340==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA176_1340==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA176_1340==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA176_1340==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA176_1340==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA176_1340==LT) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA176_1340==GT) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA176_1340==LE) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA176_1340==GE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA176_1340==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA176_1340==IS) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA176_1340==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA176_1340==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA176_1340==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA176_1340==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA176_1340==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA176_1340==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA176_1340==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA176_1340==RPAREN) ) {s = 2304;}
                        else if ( (LA176_1340==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA176_1340==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA176_1340==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA176_1340==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA176_1340==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        input.seek(index176_1340);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA176_1407 = input.LA(1);
                        int index176_1407 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1407==RPAREN) ) {s = 2310;}
                        else if ( (LA176_1407==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA176_1407==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA176_1407==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA176_1407==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA176_1407==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA176_1407==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA176_1407==LT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA176_1407==GT) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA176_1407==LE) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA176_1407==GE) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA176_1407==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA176_1407==IS) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA176_1407==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA176_1407==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA176_1407==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA176_1407==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA176_1407==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA176_1407==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA176_1407==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA176_1407==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA176_1407==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA176_1407==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA176_1407==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA176_1407==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        input.seek(index176_1407);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA176_1408 = input.LA(1);
                        int index176_1408 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1408==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA176_1408==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA176_1408==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA176_1408==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA176_1408==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA176_1408==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA176_1408==LT) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA176_1408==GT) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA176_1408==LE) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA176_1408==GE) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA176_1408==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA176_1408==IS) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA176_1408==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA176_1408==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA176_1408==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA176_1408==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA176_1408==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA176_1408==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA176_1408==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA176_1408==RPAREN) ) {s = 2354;}
                        else if ( (LA176_1408==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA176_1408==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA176_1408==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA176_1408==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA176_1408==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        input.seek(index176_1408);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA176_1475 = input.LA(1);
                        int index176_1475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1475==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA176_1475==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA176_1475==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA176_1475==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA176_1475==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA176_1475==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA176_1475==LT) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA176_1475==GT) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA176_1475==LE) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA176_1475==GE) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA176_1475==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA176_1475==IS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA176_1475==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA176_1475==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA176_1475==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA176_1475==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA176_1475==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA176_1475==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA176_1475==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA176_1475==RPAREN) ) {s = 2379;}
                        else if ( (LA176_1475==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA176_1475==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA176_1475==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA176_1475==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA176_1475==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        input.seek(index176_1475);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA176_1476 = input.LA(1);
                        int index176_1476 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1476==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA176_1476==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA176_1476==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA176_1476==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA176_1476==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA176_1476==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA176_1476==LT) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA176_1476==GT) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA176_1476==LE) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA176_1476==GE) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA176_1476==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA176_1476==IS) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA176_1476==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA176_1476==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA176_1476==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA176_1476==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA176_1476==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA176_1476==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA176_1476==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA176_1476==RPAREN) ) {s = 2404;}
                        else if ( (LA176_1476==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA176_1476==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA176_1476==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA176_1476==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA176_1476==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        input.seek(index176_1476);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA176_1543 = input.LA(1);
                        int index176_1543 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1543==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA176_1543==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA176_1543==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA176_1543==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA176_1543==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA176_1543==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA176_1543==LT) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA176_1543==GT) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA176_1543==LE) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA176_1543==GE) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA176_1543==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA176_1543==IS) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA176_1543==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA176_1543==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA176_1543==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA176_1543==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA176_1543==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA176_1543==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA176_1543==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA176_1543==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA176_1543==RPAREN) ) {s = 2430;}
                        else if ( (LA176_1543==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA176_1543==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA176_1543==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA176_1543==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA176_1543==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        input.seek(index176_1543);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA176_1544 = input.LA(1);
                        int index176_1544 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1544==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA176_1544==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA176_1544==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA176_1544==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA176_1544==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA176_1544==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA176_1544==LT) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA176_1544==GT) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA176_1544==LE) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA176_1544==GE) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA176_1544==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA176_1544==IS) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA176_1544==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA176_1544==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA176_1544==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA176_1544==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA176_1544==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA176_1544==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA176_1544==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA176_1544==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA176_1544==RPAREN) ) {s = 2456;}
                        else if ( (LA176_1544==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA176_1544==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA176_1544==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA176_1544==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA176_1544==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        input.seek(index176_1544);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA176_1610 = input.LA(1);
                        int index176_1610 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1610==RPAREN) ) {s = 2462;}
                        else if ( (LA176_1610==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA176_1610==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA176_1610==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA176_1610==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA176_1610==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA176_1610==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA176_1610==LT) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA176_1610==GT) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA176_1610==LE) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA176_1610==GE) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA176_1610==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA176_1610==IS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA176_1610==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA176_1610==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA176_1610==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA176_1610==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA176_1610==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA176_1610==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA176_1610==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA176_1610==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA176_1610==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA176_1610==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA176_1610==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA176_1610==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA176_1610==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        input.seek(index176_1610);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA176_1611 = input.LA(1);
                        int index176_1611 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1611==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA176_1611==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA176_1611==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA176_1611==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA176_1611==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA176_1611==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA176_1611==LT) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA176_1611==GT) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA176_1611==LE) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA176_1611==GE) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA176_1611==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA176_1611==IS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA176_1611==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA176_1611==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA176_1611==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA176_1611==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA176_1611==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA176_1611==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA176_1611==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA176_1611==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA176_1611==RPAREN) ) {s = 2508;}
                        else if ( (LA176_1611==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA176_1611==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA176_1611==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA176_1611==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA176_1611==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        input.seek(index176_1611);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA176_1677 = input.LA(1);
                        int index176_1677 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1677==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA176_1677==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA176_1677==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA176_1677==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA176_1677==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA176_1677==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA176_1677==LT) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA176_1677==GT) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA176_1677==LE) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA176_1677==GE) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA176_1677==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA176_1677==IS) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA176_1677==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA176_1677==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA176_1677==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA176_1677==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA176_1677==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA176_1677==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA176_1677==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA176_1677==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA176_1677==RPAREN) ) {s = 2534;}
                        else if ( (LA176_1677==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA176_1677==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA176_1677==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA176_1677==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA176_1677==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        input.seek(index176_1677);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA176_1678 = input.LA(1);
                        int index176_1678 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1678==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA176_1678==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA176_1678==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA176_1678==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA176_1678==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA176_1678==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA176_1678==LT) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA176_1678==GT) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA176_1678==LE) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA176_1678==GE) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA176_1678==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA176_1678==IS) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA176_1678==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA176_1678==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA176_1678==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA176_1678==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA176_1678==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA176_1678==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA176_1678==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA176_1678==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA176_1678==RPAREN) ) {s = 2560;}
                        else if ( (LA176_1678==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA176_1678==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA176_1678==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA176_1678==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA176_1678==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        input.seek(index176_1678);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA176_1743 = input.LA(1);
                        int index176_1743 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1743==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA176_1743==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA176_1743==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA176_1743==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA176_1743==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA176_1743==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA176_1743==LT) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA176_1743==GT) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA176_1743==LE) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA176_1743==GE) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA176_1743==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA176_1743==IS) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA176_1743==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA176_1743==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA176_1743==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA176_1743==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA176_1743==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA176_1743==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA176_1743==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA176_1743==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA176_1743==RPAREN) ) {s = 2586;}
                        else if ( (LA176_1743==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA176_1743==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA176_1743==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA176_1743==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA176_1743==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        input.seek(index176_1743);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA176_1744 = input.LA(1);
                        int index176_1744 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1744==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA176_1744==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA176_1744==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA176_1744==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA176_1744==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA176_1744==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA176_1744==LT) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA176_1744==GT) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA176_1744==LE) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA176_1744==GE) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA176_1744==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA176_1744==IS) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA176_1744==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA176_1744==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA176_1744==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA176_1744==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA176_1744==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA176_1744==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA176_1744==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA176_1744==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA176_1744==RPAREN) ) {s = 2612;}
                        else if ( (LA176_1744==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA176_1744==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA176_1744==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA176_1744==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA176_1744==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        input.seek(index176_1744);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA176_1812 = input.LA(1);
                        int index176_1812 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1812==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA176_1812==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA176_1812==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA176_1812==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA176_1812==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA176_1812==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA176_1812==LT) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA176_1812==GT) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA176_1812==LE) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA176_1812==GE) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA176_1812==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA176_1812==IS) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA176_1812==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA176_1812==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA176_1812==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA176_1812==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA176_1812==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA176_1812==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA176_1812==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA176_1812==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA176_1812==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA176_1812==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA176_1812==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA176_1812==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA176_1812==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA176_1812==RPAREN) ) {s = 14;}
                        input.seek(index176_1812);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA176_1813 = input.LA(1);
                        int index176_1813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1813==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA176_1813==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA176_1813==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA176_1813==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA176_1813==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA176_1813==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA176_1813==LT) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA176_1813==GT) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA176_1813==LE) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA176_1813==GE) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA176_1813==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA176_1813==IS) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA176_1813==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA176_1813==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA176_1813==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA176_1813==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA176_1813==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA176_1813==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA176_1813==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA176_1813==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA176_1813==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA176_1813==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA176_1813==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA176_1813==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA176_1813==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA176_1813==RPAREN) ) {s = 14;}
                        input.seek(index176_1813);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA176_1878 = input.LA(1);
                        int index176_1878 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1878==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA176_1878==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA176_1878==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA176_1878==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA176_1878==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA176_1878==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA176_1878==LT) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA176_1878==GT) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA176_1878==LE) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA176_1878==GE) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA176_1878==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA176_1878==IS) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA176_1878==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA176_1878==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA176_1878==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA176_1878==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA176_1878==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA176_1878==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA176_1878==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA176_1878==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA176_1878==AS) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA176_1878==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA176_1878==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA176_1878==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA176_1878==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA176_1878==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA176_1878==RPAREN) ) {s = 14;}
                        input.seek(index176_1878);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA176_1879 = input.LA(1);
                        int index176_1879 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1879==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA176_1879==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA176_1879==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA176_1879==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA176_1879==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA176_1879==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA176_1879==LT) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA176_1879==GT) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA176_1879==LE) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA176_1879==GE) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA176_1879==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA176_1879==IS) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA176_1879==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA176_1879==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA176_1879==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA176_1879==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA176_1879==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA176_1879==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA176_1879==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA176_1879==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA176_1879==AS) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA176_1879==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA176_1879==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA176_1879==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA176_1879==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA176_1879==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA176_1879==RPAREN) ) {s = 14;}
                        input.seek(index176_1879);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA176_1944 = input.LA(1);
                        int index176_1944 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1944==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA176_1944==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA176_1944==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA176_1944==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA176_1944==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA176_1944==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA176_1944==LT) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA176_1944==GT) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA176_1944==LE) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA176_1944==GE) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA176_1944==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA176_1944==IS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA176_1944==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA176_1944==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA176_1944==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA176_1944==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA176_1944==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA176_1944==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA176_1944==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA176_1944==RPAREN) ) {s = 2743;}
                        else if ( (LA176_1944==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA176_1944==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA176_1944==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA176_1944==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA176_1944==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        input.seek(index176_1944);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA176_1945 = input.LA(1);
                        int index176_1945 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_1945==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA176_1945==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA176_1945==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA176_1945==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA176_1945==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA176_1945==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA176_1945==LT) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA176_1945==GT) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA176_1945==LE) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA176_1945==GE) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA176_1945==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA176_1945==IS) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA176_1945==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA176_1945==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA176_1945==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA176_1945==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA176_1945==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA176_1945==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA176_1945==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA176_1945==RPAREN) ) {s = 2768;}
                        else if ( (LA176_1945==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA176_1945==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA176_1945==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA176_1945==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA176_1945==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        input.seek(index176_1945);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA176_2077 = input.LA(1);
                        int index176_2077 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2077);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA176_2102 = input.LA(1);
                        int index176_2102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2102);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA176_2127 = input.LA(1);
                        int index176_2127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2127);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA176_2152 = input.LA(1);
                        int index176_2152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2152);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA176_2177 = input.LA(1);
                        int index176_2177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2177);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA176_2202 = input.LA(1);
                        int index176_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2202);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA176_2279 = input.LA(1);
                        int index176_2279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2279);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA176_2304 = input.LA(1);
                        int index176_2304 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2304);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA176_2310 = input.LA(1);
                        int index176_2310 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2310);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA176_2354 = input.LA(1);
                        int index176_2354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2354);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA176_2379 = input.LA(1);
                        int index176_2379 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2379);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA176_2404 = input.LA(1);
                        int index176_2404 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2404);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA176_2430 = input.LA(1);
                        int index176_2430 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2430);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA176_2456 = input.LA(1);
                        int index176_2456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2456);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA176_2462 = input.LA(1);
                        int index176_2462 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2462);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA176_2508 = input.LA(1);
                        int index176_2508 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2508);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA176_2534 = input.LA(1);
                        int index176_2534 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2534);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA176_2560 = input.LA(1);
                        int index176_2560 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2560);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA176_2586 = input.LA(1);
                        int index176_2586 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2586);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA176_2612 = input.LA(1);
                        int index176_2612 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2612);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA176_2743 = input.LA(1);
                        int index176_2743 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2743);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA176_2768 = input.LA(1);
                        int index176_2768 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2773;}
                        input.seek(index176_2768);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1662 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L,0x0000000000000100L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1667 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1685 = new BitSet(new long[]{0x0040020008000010L,0x0004010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1691 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1721 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1747 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1751 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x00062900640A0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1811 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x00072900640A0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1923 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0006290064000004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1964 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0007290064020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2096 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0006390064010004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2102 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0006290064000004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2144 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0007390064030004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2150 = new BitSet(new long[]{0x0040020008000010L,0x0004013800000000L,0x0000000000000000L,0x0000000000000000L,0x0007290064020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2196 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2201 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2206 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2211 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2216 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2221 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2226 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_mergeExpr_in_eplExpression2231 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2248 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2251 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2257 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2260 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2264 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2267 = new BitSet(new long[]{0x0104300000010002L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2271 = new BitSet(new long[]{0x0104300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2277 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2280 = new BitSet(new long[]{0x0104300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2287 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2290 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2293 = new BitSet(new long[]{0x0104200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2300 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2303 = new BitSet(new long[]{0x0104000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2310 = new BitSet(new long[]{0x0130800080004000L,0x0000404000220000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2313 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2320 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2323 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2326 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2353 = new BitSet(new long[]{0x0040000008000000L,0x0000010000050000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2362 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2365 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2422 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2426 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2471 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2475 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2494 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2496 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2499 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2501 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2509 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_mergeExpr2546 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeExpr2548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_mergeExpr2550 = new BitSet(new long[]{0x0000000000020000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_mergeExpr2553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_mergeExpr2557 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_mergeExpr2563 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_USING_in_mergeExpr2569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onStreamExpr_in_mergeExpr2571 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_mergeExpr2575 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_mergeExpr2577 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeExpr2582 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeExpr2586 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2628 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2630 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeMatched2632 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatched2636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_mergeMatched2638 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatched2643 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2670 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2672 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2674 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatched2676 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INSERT_in_mergeUnmatched2680 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeUnmatched2683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_mergeUnmatched2685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeUnmatched2687 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeUnmatched2691 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_mergeUnmatched2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2732 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2734 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2740 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2742 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2745 = new BitSet(new long[]{0x0100300400010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2749 = new BitSet(new long[]{0x0100300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2755 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2757 = new BitSet(new long[]{0x0100300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2766 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2768 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2770 = new BitSet(new long[]{0x0100200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2777 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2779 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2786 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2788 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2790 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2866 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2885 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2887 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2890 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2892 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2899 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2952 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2954 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2958 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2960 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2965 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2998 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3051 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3055 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3060 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3102 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3107 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3136 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3167 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3208 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3214 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0001000000260000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3219 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0001000000260000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3224 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0001000000260000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3233 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000060000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3237 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000060000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3241 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000060000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3256 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3275 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3292 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3295 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3384 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0007290065020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3387 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3413 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3463 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3599 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0007290065020004L,0x0000000000000100L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3642 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3670 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3701 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3705 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3712 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000001060000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000001060000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000A0000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_variantList3842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000001020000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3902 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3908 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList3957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_columnList3960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_columnList3962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4000 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4021 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4038 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4041 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4084 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4088 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4092 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4095 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4116 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4130 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4132 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4199 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4202 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4205 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4208 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4225 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4286 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4292 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4298 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4304 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4341 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4391 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4394 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4458 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4496 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4500 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4504 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4508 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4517 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4522 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4533 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4539 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4620 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4675 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4681 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4688 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4693 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4699 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4705 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4711 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4761 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4763 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4768 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4799 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4804 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4831 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4870 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4916 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4920 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4924 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4928 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4932 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000D000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000D000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5213 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5245 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5247 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5276 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5410 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5476 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D4E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5520 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5523 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5525 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5563 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5590 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5675 = new BitSet(new long[]{0x0030800080004002L,0x0000000000220000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5690 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5694 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5698 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5702 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5770 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5776 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5832 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_outputLimit5834 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5996 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6044 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6050 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004020004L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6127 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6131 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6135 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6139 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6143 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6148 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6184 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_whenClause6187 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6189 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_whenClause6192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6205 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_elseClause6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6235 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6238 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6241 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6255 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_caseExpression6257 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6259 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6262 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6300 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6305 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6307 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6339 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6344 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6346 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000182000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6383 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6386 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6389 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000182000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6414 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6430 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6443 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6461 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6475 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6477 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6491 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6505 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6535 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6570 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6575 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6580 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600100000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6708 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6740 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6744 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6748 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6752 = new BitSet(new long[]{0x807B83E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6811 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000007800000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6917 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6956 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6962 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010890000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6987 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7016 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000890000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7221 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7273 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7275 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7332 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7427 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7433 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010004000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7481 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7484 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010004000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060001000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7507 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7510 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7513 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7517 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060001000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7532 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7557 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7561 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7566 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7573 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7736 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7742 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7745 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr7748 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7758 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7766 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7802 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7809 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7814 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000220000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7882 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000739006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7888 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7923 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7927 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7932 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7947 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7951 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7956 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7971 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7983 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7988 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8023 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8027 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8032 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8047 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8051 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8056 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8071 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8075 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8080 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8110 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8115 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8121 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8137 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8143 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8159 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8165 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8181 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8195 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8214 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8232 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8259 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8262 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8285 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8320 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8325 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8358 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8363 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8397 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8474 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_maxFunc8477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8480 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_maxFunc8483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8486 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_maxFunc8489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8535 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8569 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8575 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8613 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8683 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8688 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8695 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8712 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8714 = new BitSet(new long[]{0x807803E80FFC4430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006C060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8762 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8803 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8808 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8810 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8842 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8847 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8849 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8884 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8893 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8960 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8966 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8974 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8980 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9104 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9109 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000090000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom9138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9153 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9159 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000460000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9163 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9279 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D4E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9340 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D4E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9361 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9387 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729007D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9399 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D860004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9422 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9544 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9639 = new BitSet(new long[]{0x803801E80FFC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9642 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9644 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9646 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9650 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9655 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9660 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9719 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9769 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9772 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9824 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9900 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D0E0004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10079 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_expression_in_expressionList10121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10124 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D060004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_expressionList10127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10158 = new BitSet(new long[]{0xB87843E81FFC6430L,0x000D3938007AFFFFL,0x0000000000000000L,0x0000000000000000L,0x000729006D460004L,0x0000000000000100L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10294 = new BitSet(new long[]{0x0600000000000002L,0x00000000E0000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_number_in_rangeOperand10489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10609 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10613 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10615 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000D020004L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000D020004L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10785 = new BitSet(new long[]{0x803801E807FC4420L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001000000020000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008440000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11017 = new BitSet(new long[]{0x803801E807FC4422L,0x000D3800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0001800000020000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000621000C020004L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11550 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11554 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11556 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11613 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11617 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11619 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11676 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11680 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11682 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11744 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11748 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11750 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11812 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11816 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11818 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004000004L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006210004000004L});
    public static final BitSet FOLLOW_number_in_numberconstant12068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10273 = new BitSet(new long[]{0x0000000000000002L});
}
