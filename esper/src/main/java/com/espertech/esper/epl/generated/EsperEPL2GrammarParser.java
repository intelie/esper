  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UPD", "MERGE_INS", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=185;
    public static final int FLOAT_SUFFIX=351;
    public static final int STAR=292;
    public static final int DOT_EXPR=193;
    public static final int NUMERIC_PARAM_LIST=124;
    public static final int MOD=310;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=192;
    public static final int OUTERJOIN_EXPR=167;
    public static final int CREATE_COL_TYPE_LIST=246;
    public static final int BSR=333;
    public static final int MERGE_INS=262;
    public static final int MONTH_PART=198;
    public static final int LIB_FUNCTION=191;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=171;
    public static final int MATCHREC_PATTERN_CONCAT=274;
    public static final int INC=326;
    public static final int LNOT=322;
    public static final int RPAREN=287;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=297;
    public static final int BSR_ASSIGN=334;
    public static final int CAST_EXPR=225;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=166;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=302;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=134;
    public static final int LAST_AGGREG=253;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int FOLLOWED_BY_EXPR=127;
    public static final int FOLLOWED_BY=314;
    public static final int HOUR_PART=201;
    public static final int RBRACK=291;
    public static final int MATCHREC_PATTERN_NESTED=276;
    public static final int MATCH_UNTIL_RANGE_CLOSED=244;
    public static final int GE=306;
    public static final int METHOD_JOIN_EXPR=240;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=133;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=132;
    public static final int MINUS_ASSIGN=327;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=144;
    public static final int NUM_DOUBLE=270;
    public static final int INSERTINTO_STREAM_NAME=213;
    public static final int LCURLY=311;
    public static final int UNARY_MINUS=194;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=211;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=142;
    public static final int WS=343;
    public static final int EMAILAT=342;
    public static final int SUBSELECT_GROUP_EXPR=217;
    public static final int ON_SELECT_INSERT_EXPR=235;
    public static final int YEAR_PART=197;
    public static final int FOLLOWED_BY_ITEM=128;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=317;
    public static final int EXPRCOL=189;
    public static final int SL_COMMENT=344;
    public static final int NULL_TYPE=269;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=242;
    public static final int GT=304;
    public static final int BNOT=323;
    public static final int WHERE_EXPR=153;
    public static final int END=33;
    public static final int LAND=340;
    public static final int INNERJOIN_EXPR=168;
    public static final int NOT_REGEXP=208;
    public static final int MATCH_UNTIL_EXPR=241;
    public static final int EVENT_PROP_EXPR=175;
    public static final int LBRACK=290;
    public static final int MERGE_UPD=261;
    public static final int VIEW_EXPR=150;
    public static final int ANNOTATION=249;
    public static final int LONG_TYPE=264;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=135;
    public static final int MATCHREC_PATTERN=272;
    public static final int ON_MERGE_EXPR=234;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=318;
    public static final int ON_SELECT_EXPR=232;
    public static final int MINUTE_PART=202;
    public static final int PATTERN_NOT_EXPR=131;
    public static final int SQL_NE=301;
    public static final int SUM=18;
    public static final int HexDigit=349;
    public static final int UPDATE_EXPR=255;
    public static final int LPAREN=286;
    public static final int IN_SUBSELECT_EXPR=219;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=278;
    public static final int NOT_IN_RANGE=215;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=203;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int IDENT=285;
    public static final int DATABASE_JOIN_EXPR=152;
    public static final int BXOR=300;
    public static final int PLUS=294;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=257;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=178;
    public static final int CREATE_INDEX_EXPR=226;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=243;
    public static final int CREATE_VARIABLE_EXPR=239;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=279;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=129;
    public static final int RIGHT_OUTERJOIN_EXPR=170;
    public static final int NUMBERSETSTAR=248;
    public static final int LAST_OPERATOR=222;
    public static final int PATTERN_FILTER_EXPR=130;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=316;
    public static final int EVAL_AND_EXPR=156;
    public static final int LEFT_OUTERJOIN_EXPR=169;
    public static final int EPL_EXPR=271;
    public static final int GROUP_BY_EXPR=172;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=176;
    public static final int MINUS=308;
    public static final int SEMI=341;
    public static final int STAR_ASSIGN=329;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=260;
    public static final int FIRST_AGGREG=252;
    public static final int COLON=296;
    public static final int EVAL_EQUALS_GROUP_EXPR=160;
    public static final int BAND_ASSIGN=339;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=186;
    public static final int NOT_IN_SET=205;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=179;
    public static final int SL=335;
    public static final int NOT_IN_SUBSELECT_EXPR=220;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=148;
    public static final int SR=331;
    public static final int RCURLY=312;
    public static final int PLUS_ASSIGN=325;
    public static final int EXISTS_SUBSELECT_EXPR=218;
    public static final int DAY_PART=200;
    public static final int EVENT_FILTER_IN=143;
    public static final int DIV=309;
    public static final int WEEK_PART=199;
    public static final int OBJECT_PARAM_ORDERED_EXPR=126;
    public static final int OctalEscape=348;
    public static final int MILLISECOND_PART=204;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=163;
    public static final int LOR=307;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=212;
    public static final int EXPONENT=350;
    public static final int LT=303;
    public static final int PATTERN_INCL_EXPR=151;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=173;
    public static final int BOOL_TYPE=268;
    public static final int MOD_ASSIGN=330;
    public static final int ANNOTATION_ARRAY=250;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=221;
    public static final int EQUALS=288;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=324;
    public static final int WINDOW_AGGREG=254;
    public static final int SL_ASSIGN=336;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=277;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=233;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=196;
    public static final int CREATE_COL_TYPE=247;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=161;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=265;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=145;
    public static final int ANNOTATION_VALUE=251;
    public static final int SUBSELECT_EXPR=216;
    public static final int CONCAT=190;
    public static final int NUMERIC_PARAM_RANGE=123;
    public static final int CLASS_IDENT=147;
    public static final int MATCHREC_PATTERN_ALTER=275;
    public static final int ON_EXPR=229;
    public static final int CREATE_WINDOW_EXPR=227;
    public static final int PROPERTY_SELECTION_STREAM=137;
    public static final int ON_DELETE_EXPR=231;
    public static final int NUM_LONG=319;
    public static final int ON=41;
    public static final int TIME_PERIOD=195;
    public static final int DOUBLE_TYPE=266;
    public static final int DELETE=81;
    public static final int INT_TYPE=263;
    public static final int MATCHREC_PARTITION=283;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=155;
    public static final int ORDER_ELEMENT_EXPR=174;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=224;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=267;
    public static final int NUM_INT=313;
    public static final int MATCHREC_DEFINE_ITEM=280;
    public static final int ON_SET_EXPR=238;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=259;
    public static final int NUM_FLOAT=320;
    public static final int ON_EXPR_FROM=237;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=346;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=136;
    public static final int WEEKDAY_OPERATOR=223;
    public static final int DEC=328;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=337;
    public static final int NUMERIC_PARAM_FREQUENCY=125;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=184;
    public static final int EVENT_FILTER_PARAM=140;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=181;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=230;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int EVENT_FILTER_RANGE=141;
    public static final int ML_COMMENT=345;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=180;
    public static final int BOR_ASSIGN=338;
    public static final int COMMA=284;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int WHEN_LIMIT_EXPR=187;
    public static final int TIMEPERIOD_LIMIT_EXPR=183;
    public static final int SOME=49;
    public static final int EQUAL=321;
    public static final int BOR=293;
    public static final int MATCHREC_MEASURE_ITEM=282;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int EVENT_FILTER_NOT_BETWEEN=146;
    public static final int IN_RANGE=214;
    public static final int DOT=289;
    public static final int MATCHREC_MEASURES=281;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=138;
    public static final int INSERTINTO_EXPR=188;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=154;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=245;
    public static final int EVAL_EQUALS_EXPR=158;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=207;
    public static final int EVENT_LIMIT_EXPR=182;
    public static final int NOT_BETWEEN=206;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=157;
    public static final int ON_SELECT_INSERT_OUTPUT=236;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=299;
    public static final int MATCHREC_PATTERN_ATOM=273;
    public static final int QUOTED_STRING_LITERAL=298;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=295;
    public static final int OBSERVER_EXPR=149;
    public static final int CREATE_SCHEMA_EXPR_QUAL=258;
    public static final int EVENT_FILTER_IDENT=139;
    public static final int EVENT_PROP_MAPPED=177;
    public static final int UnicodeEscape=347;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=209;
    public static final int FOLLOWMAX_BEGIN=315;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=164;
    public static final int CREATE_WINDOW_SELECT_EXPR=228;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=256;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=165;
    public static final int SR_ASSIGN=332;
    public static final int LE=305;
    public static final int DBFROM_CLAUSE=210;
    public static final int EVAL_IDENT=162;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1727);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1732);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1736); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1750);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1756);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1786);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1790); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1812);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);
                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);
                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||LA4_30==PLUS||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||LA4_30==MINUS||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1820);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1824);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1872);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1880);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1884);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1930);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1933); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1936);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1957);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1960); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1963);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1990);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2031);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2062);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2073);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2086);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2109);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2120);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2133);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2141);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2164);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2167); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2169);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2212);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2215); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2217);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2261);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2266);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2271);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2276);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2281);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2286);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2291);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2294);
                    forExpr57=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;
        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2308); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2311);
                    insertIntoExpr59=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());
                    }
                    break;
            }
            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2317); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2320);
            selectClause61=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2324); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2327);
            fromClause63=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2331);
                    matchRecog64=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2337); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2340);
                    whereClause66=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2347); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2350); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2353);
                    groupByListExpr69=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2360); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2363);
                    havingClause71=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2370); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2373);
                    outputLimit73=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2380); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2383); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2386);
                    orderByListExpr76=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2393); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2396);
                    rowLimit78=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr87 = null;
        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2413);
            onStreamExpr80=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            int alt30=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            case MERGE:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2418);
                    onDeleteExpr81=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2422);
                    onSelectExpr82=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2425);
                            	    onSelectInsertExpr83=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2428);
                                    outputClauseInsert84=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2435);
                    onSetExpr85=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2439);
                    onUpdateExpr86=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2443);
                    onMergeExpr87=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2488);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2492);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2541);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2562);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2565); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2567);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2577);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token AS103=null;
        Token WHERE104=null;
        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem106 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree AS103_tree=null;
        CommonTree WHERE104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            int alt36=2;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==INTO) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    {
                    INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO102);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt37=3;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==IDENT) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    {
                    AS103=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS103);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2641);
                    whereClause105=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());
                    }
                    break;
            }
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);
                if ( (LA39_0==WHEN) ) {
                    alt39=1;
                }
                switch (alt39) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2649);
            	    mergeItem106=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem106.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched107 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched108 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==WHEN) ) {
                int LA40_1 = input.LA(2);
                if ( (LA40_1==MATCHED) ) {
                    alt40=1;
                }
                else if ( (LA40_1==NOT_EXPR) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2683);
                    mergeMatched107=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched107.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2687);
                    mergeUnmatched108=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched108.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token d=null;
        Token WHEN109=null;
        Token MATCHED110=null;
        Token AND_EXPR111=null;
        Token THEN113=null;
        Token SET114=null;
        Token COMMA116=null;
        EsperEPL2GrammarParser.expression_return expression112 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment115 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment117 = null;
        CommonTree i_tree=null;
        CommonTree d_tree=null;
        CommonTree WHEN109_tree=null;
        CommonTree MATCHED110_tree=null;
        CommonTree AND_EXPR111_tree=null;
        CommonTree THEN113_tree=null;
        CommonTree SET114_tree=null;
        CommonTree COMMA116_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            WHEN109=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN109);
            MATCHED110=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED110);
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AND_EXPR) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    AND_EXPR111=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR111);
                    pushFollow(FOLLOW_expression_in_mergeMatched2707);
                    expression112=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression112.getTree());
                    }
                    break;
            }
            THEN113=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatched2711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN113);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==UPDATE) ) {
                alt43=1;
            }
            else if ( (LA43_0==DELETE) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);
                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    i=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatched2724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(i);
                    SET114=(Token)match(input,SET,FOLLOW_SET_in_mergeMatched2726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET114);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2728);
                    onSetAssignment115=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment115.getTree());
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);
                        if ( (LA42_0==COMMA) ) {
                            alt42=1;
                        }
                        switch (alt42) {
                    	case 1 :
                    	    {
                    	    COMMA116=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatched2731); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA116);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2733);
                    	    onSetAssignment117=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment117.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop42;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatched2744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN118=null;
        Token NOT_EXPR119=null;
        Token MATCHED120=null;
        Token AND_EXPR121=null;
        Token THEN123=null;
        Token INSERT124=null;
        Token LPAREN125=null;
        Token RPAREN127=null;
        Token SELECT128=null;
        EsperEPL2GrammarParser.expression_return expression122 = null;
        EsperEPL2GrammarParser.columnList_return columnList126 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;
        CommonTree WHEN118_tree=null;
        CommonTree NOT_EXPR119_tree=null;
        CommonTree MATCHED120_tree=null;
        CommonTree AND_EXPR121_tree=null;
        CommonTree THEN123_tree=null;
        CommonTree INSERT124_tree=null;
        CommonTree LPAREN125_tree=null;
        CommonTree RPAREN127_tree=null;
        CommonTree SELECT128_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            WHEN118=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN118);
            NOT_EXPR119=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR119);
            MATCHED120=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED120);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==AND_EXPR) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    AND_EXPR121=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched2791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR121);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched2793);
                    expression122=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression122.getTree());
                    }
                    break;
            }
            THEN123=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatched2797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN123);
            INSERT124=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeUnmatched2801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT124);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==LPAREN) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    LPAREN125=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeUnmatched2804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN125);
                    pushFollow(FOLLOW_columnList_in_mergeUnmatched2806);
                    columnList126=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList126.getTree());
                    RPAREN127=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeUnmatched2808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN127);
                    }
                    break;
            }
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeUnmatched2812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);
            pushFollow(FOLLOW_selectionList_in_mergeUnmatched2814);
            selectionList129=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT130=null;
        Token SELECT132=null;
        Token DISTINCT133=null;
        Token WHERE136=null;
        Token GROUP138=null;
        Token BY139=null;
        Token HAVING141=null;
        Token ORDER143=null;
        Token BY144=null;
        Token ROW_LIMIT_EXPR146=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr131 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList134 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom135 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr140 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause142 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr145 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit147 = null;
        CommonTree INSERT130_tree=null;
        CommonTree SELECT132_tree=null;
        CommonTree DISTINCT133_tree=null;
        CommonTree WHERE136_tree=null;
        CommonTree GROUP138_tree=null;
        CommonTree BY139_tree=null;
        CommonTree HAVING141_tree=null;
        CommonTree ORDER143_tree=null;
        CommonTree BY144_tree=null;
        CommonTree ROW_LIMIT_EXPR146_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==INSERT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    INSERT130=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT130);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2858);
                    insertIntoExpr131=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr131.getTree());
                    }
                    break;
            }
            SELECT132=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT132);
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==DISTINCT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    DISTINCT133=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT133);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr2869);
            selectionList134=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList134.getTree());
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==FROM) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2873);
                    onExprFrom135=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom135.getTree());
                    }
                    break;
            }
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHERE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2881);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==GROUP) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    GROUP138=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP138);
                    BY139=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY139);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2894);
                    groupByListExpr140=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr140.getTree());
                    }
                    break;
            }
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==HAVING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    HAVING141=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING141);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2903);
                    havingClause142=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause142.getTree());
                    }
                    break;
            }
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==ORDER) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    ORDER143=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER143);
                    BY144=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY144);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2914);
                    orderByListExpr145=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr145.getTree());
                    }
                    break;
            }
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==ROW_LIMIT_EXPR) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR146=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR146);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2923);
                    rowLimit147=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit147.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE148=null;
        Token AS149=null;
        Token SET150=null;
        Token COMMA152=null;
        Token WHERE154=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment151 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment153 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause155 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE148_tree=null;
        CommonTree AS149_tree=null;
        CommonTree SET150_tree=null;
        CommonTree COMMA152_tree=null;
        CommonTree WHERE154_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE148=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE148);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt54=3;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==AS) ) {
                alt54=1;
            }
            else if ( (LA54_0==IDENT) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    {
                    AS149=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS149);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET150=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET150);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3011);
            onSetAssignment151=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment151.getTree());
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);
                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }
                switch (alt55) {
            	case 1 :
            	    {
            	    COMMA152=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3014); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA152);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3016);
            	    onSetAssignment153=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment153.getTree());
            	    }
            	    break;
            	default :
            	    break loop55;
                }
            } while (true);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==WHERE) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    WHERE154=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE154);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3025);
                    whereClause155=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT156=null;
        Token SELECT158=null;
        Token WHERE160=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr157 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList159 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause161 = null;
        CommonTree INSERT156_tree=null;
        CommonTree SELECT158_tree=null;
        CommonTree WHERE160_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT156=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT156);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3078);
            insertIntoExpr157=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr157.getTree());
            SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT158);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3084);
            selectionList159=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList159.getTree());
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==WHERE) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    WHERE160=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE160);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3091);
                    whereClause161=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause161.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT162=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT162_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT162=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT162);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==FIRST) ) {
                alt58=1;
            }
            else if ( (LA58_0==ALL) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);
                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE163=null;
        Token WHERE165=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom164 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause166 = null;
        CommonTree DELETE163_tree=null;
        CommonTree WHERE165_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE163=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE163);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3179);
            onExprFrom164=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom164.getTree());
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==WHERE) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    WHERE165=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE165);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3186);
                    whereClause166=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause166.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET167=null;
        Token COMMA169=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment168 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment170 = null;
        CommonTree SET167_tree=null;
        CommonTree COMMA169_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET167=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET167);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3228);
            onSetAssignment168=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment168.getTree());
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);
                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }
                switch (alt60) {
            	case 1 :
            	    {
            	    COMMA169=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3231); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA169);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3233);
            	    onSetAssignment170=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment170.getTree());
            	    }
            	    break;
            	default :
            	    break loop60;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty171 = null;
        EsperEPL2GrammarParser.expression_return expression173 = null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3258);
            eventProperty171=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty171.getTree());
            EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);
            pushFollow(FOLLOW_expression_in_onSetAssignment3262);
            expression173=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM174=null;
        Token AS175=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM174_tree=null;
        CommonTree AS175_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM174=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM174);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt61=3;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENT) ) {
                alt61=2;
            }
            switch (alt61) {
                case 1 :
                    {
                    AS175=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS175);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE176=null;
        Token WINDOW177=null;
        Token DOT178=null;
        Token DOT180=null;
        Token AS182=null;
        Token LPAREN184=null;
        Token RPAREN186=null;
        Token WHERE187=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression179 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression181 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter183 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList185 = null;
        EsperEPL2GrammarParser.expression_return expression188 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE176_tree=null;
        CommonTree WINDOW177_tree=null;
        CommonTree DOT178_tree=null;
        CommonTree DOT180_tree=null;
        CommonTree AS182_tree=null;
        CommonTree LPAREN184_tree=null;
        CommonTree RPAREN186_tree=null;
        CommonTree WHERE187_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE176=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE176);
            WINDOW177=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW177);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==DOT) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT178);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3343);
                    viewExpression179=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression179.getTree());
                    loop62:
                    do {
                        int alt62=2;
                        int LA62_0 = input.LA(1);
                        if ( (LA62_0==DOT) ) {
                            alt62=1;
                        }
                        switch (alt62) {
                    	case 1 :
                    	    {
                    	    DOT180=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3346); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT180);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3348);
                    	    viewExpression181=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression181.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop62;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt64=3;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==RETAINUNION) ) {
                alt64=1;
            }
            else if ( (LA64_0==RETAININTERSECTION) ) {
                alt64=2;
            }
            switch (alt64) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==AS) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    AS182=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS182);
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==SELECT||LA66_0==IDENT||LA66_0==TICKED_STRING_LITERAL) ) {
                alt66=1;
            }
            else if ( (LA66_0==LPAREN) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);
                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3380);
                    createWindowExprModelAfter183=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter183.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN184);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3397);
                    createColumnList185=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList185.getTree());
                    RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==INSERT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt67=2;
                    int LA67_0 = input.LA(1);
                    if ( (LA67_0==WHERE) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            {
                            WHERE187=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3419); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE187);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3421);
                            expression188=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression188.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT189=null;
        Token FROM191=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList190 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier192 = null;
        CommonTree SELECT189_tree=null;
        CommonTree FROM191_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==SELECT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    SELECT189=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3508); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3511);
                    createSelectionList190=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList190.getTree());
                    FROM191=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3513); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3518);
            classIdentifier192=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier192.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE193=null;
        Token INDEX194=null;
        Token ON195=null;
        Token LPAREN196=null;
        Token RPAREN198=null;
        EsperEPL2GrammarParser.columnList_return columnList197 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE193_tree=null;
        CommonTree INDEX194_tree=null;
        CommonTree ON195_tree=null;
        CommonTree LPAREN196_tree=null;
        CommonTree RPAREN198_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE193=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE193);
            INDEX194=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX194);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON195=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON195);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN196=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN196);
            pushFollow(FOLLOW_columnList_in_createIndexExpr3547);
            columnList197=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList197.getTree());
            RPAREN198=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN198);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE199=null;
        Token VARIABLE200=null;
        Token EQUALS202=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier201 = null;
        EsperEPL2GrammarParser.expression_return expression203 = null;
        CommonTree n_tree=null;
        CommonTree CREATE199_tree=null;
        CommonTree VARIABLE200_tree=null;
        CommonTree EQUALS202_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE199=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE199);
            VARIABLE200=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE200);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3580);
            classIdentifier201=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier201.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==EQUALS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    EQUALS202=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS202);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3589);
                    expression203=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression203.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA205=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement204 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement206 = null;
        CommonTree COMMA205_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3631);
            createColumnListElement204=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement204.getTree());
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);
                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }
                switch (alt71) {
            	case 1 :
            	    {
            	    COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3634); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA205);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3636);
            	    createColumnListElement206=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement206.getTree());
            	    }
            	    break;
            	default :
            	    break loop71;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK209=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy207 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier208 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK209_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3664);
            classIdentifierNonGreedy207=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy207.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3667);
            classIdentifier208=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier208.getTree());
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==LBRACK) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK209=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK209);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA211=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement210 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement212 = null;
        CommonTree COMMA211_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3717);
            createSelectionListElement210=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement210.getTree());
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);
                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }
                switch (alt73) {
            	case 1 :
            	    {
            	    COMMA211=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3720); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA211);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3722);
            	    createSelectionListElement212=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement212.getTree());
            	    }
            	    break;
            	default :
            	    break loop73;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS214=null;
        Token AS216=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty213 = null;
        EsperEPL2GrammarParser.constant_return constant215 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS214_tree=null;
        CommonTree AS216_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt75=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt75=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt75=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3763);
                    eventProperty213=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty213.getTree());
                    int alt74=2;
                    int LA74_0 = input.LA(1);
                    if ( (LA74_0==AS) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            {
                            AS214=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3766); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS214);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3770); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3791);
                    constant215=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant215.getTree());
                    AS216=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS216);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE217=null;
        Token SCHEMA218=null;
        Token AS219=null;
        Token LPAREN221=null;
        Token RPAREN223=null;
        EsperEPL2GrammarParser.variantList_return variantList220 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList222 = null;
        EsperEPL2GrammarParser.columnList_return columnList224 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE217_tree=null;
        CommonTree SCHEMA218_tree=null;
        CommonTree AS219_tree=null;
        CommonTree LPAREN221_tree=null;
        CommonTree RPAREN223_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE217=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE217);
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==IDENT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA218=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA218);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==AS) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    AS219=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS219);
                    }
                    break;
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==IDENT||LA80_0==STAR||LA80_0==TICKED_STRING_LITERAL) ) {
                alt80=1;
            }
            else if ( (LA80_0==LPAREN) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);
                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3848);
                    variantList220=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList220.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN221=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN221);
                    int alt78=2;
                    int LA78_0 = input.LA(1);
                    if ( (LA78_0==IDENT||LA78_0==TICKED_STRING_LITERAL) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3861);
                            createColumnList222=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList222.getTree());
                            }
                            break;
                    }
                    RPAREN223=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN223);
                    int alt79=2;
                    int LA79_0 = input.LA(1);
                    if ( (LA79_0==IDENT) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3869); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3871);
                            columnList224=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList224.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA226=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement225 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement227 = null;
        CommonTree COMMA226_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3960);
            variantListElement225=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement225.getTree());
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3963); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA226);
            	    pushFollow(FOLLOW_variantListElement_in_variantList3965);
            	    variantListElement227=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement227.getTree());
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR228=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier229 = null;
        CommonTree STAR228_tree=null;
        try {
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==STAR) ) {
                alt82=1;
            }
            else if ( (LA82_0==IDENT||LA82_0==TICKED_STRING_LITERAL) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);
                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR228=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR228_tree = (CommonTree)adaptor.create(STAR228);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR228_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3998);
                    classIdentifier229=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier229.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO230=null;
        Token LPAREN232=null;
        Token RPAREN234=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier231 = null;
        EsperEPL2GrammarParser.columnList_return columnList233 = null;
        CommonTree s_tree=null;
        CommonTree INTO230_tree=null;
        CommonTree LPAREN232_tree=null;
        CommonTree RPAREN234_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt83=3;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==ISTREAM) ) {
                alt83=1;
            }
            else if ( (LA83_0==RSTREAM) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO230=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO230);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4035);
            classIdentifier231=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier231.getTree());
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==LPAREN) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    LPAREN232=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN232);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4040);
                    columnList233=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList233.getTree());
                    RPAREN234=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN234);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT235=null;
        Token COMMA236=null;
        Token IDENT237=null;
        CommonTree IDENT235_tree=null;
        CommonTree COMMA236_tree=null;
        CommonTree IDENT237_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT235=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT235);
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA236=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4078); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA236);
            	    IDENT237=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4080); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT237);
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression238 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin239 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList240 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4118);
            streamExpression238=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression238.getTree());
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==EOF||LA86_0==WHERE||(LA86_0>=GROUP && LA86_0<=HAVING)||LA86_0==OUTPUT||LA86_0==ORDER||LA86_0==ROW_LIMIT_EXPR||LA86_0==MATCH_RECOGNIZE||LA86_0==FOR||LA86_0==COMMA) ) {
                alt86=1;
            }
            else if ( ((LA86_0>=INNER && LA86_0<=FULL)) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);
                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4121);
                    regularJoin239=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin239.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4125);
                    outerJoinList240=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList240.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA241=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression242 = null;
        CommonTree COMMA241_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);
                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }
                switch (alt87) {
            	case 1 :
            	    {
            	    COMMA241=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4139); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4142);
            	    streamExpression242=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression242.getTree());
            	    }
            	    break;
            	default :
            	    break loop87;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin243 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin244 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4156);
            outerJoin243=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin243.getTree());
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);
                if ( ((LA88_0>=INNER && LA88_0<=FULL)) ) {
                    alt88=1;
                }
                switch (alt88) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4159);
            	    outerJoin244=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin244.getTree());
            	    }
            	    break;
            	default :
            	    break loop88;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER245=null;
        Token JOIN246=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression247 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent248 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER245_tree=null;
        CommonTree JOIN246_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt91=2;
            int LA91_0 = input.LA(1);
            if ( ((LA91_0>=JOIN && LA91_0<=FULL)) ) {
                alt91=1;
            }
            else if ( (LA91_0==INNER) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);
                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    {
                    int alt90=2;
                    int LA90_0 = input.LA(1);
                    if ( ((LA90_0>=LEFT && LA90_0<=FULL)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            int alt89=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt89=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt89=2;
                                }
                                break;
                            case FULL:
                                {
                                alt89=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 89, 0, input);
                                throw nvae;
                            }
                            switch (alt89) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4202); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4206); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4210); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER245=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4213); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER245);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN246=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN246);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4250);
            streamExpression247=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression247.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4252);
            outerJoinIdent248=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent248.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON249=null;
        Token AND_EXPR251=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair250 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair252 = null;
        CommonTree ON249_tree=null;
        CommonTree AND_EXPR251_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON249=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4317); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4320);
            outerJoinIdentPair250=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair250.getTree());
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);
                if ( (LA92_0==AND_EXPR) ) {
                    alt92=1;
                }
                switch (alt92) {
            	case 1 :
            	    {
            	    AND_EXPR251=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4323); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4326);
            	    outerJoinIdentPair252=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair252.getTree());
            	    }
            	    break;
            	default :
            	    break loop92;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS254=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty253 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty255 = null;
        CommonTree EQUALS254_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4341);
            eventProperty253=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty253.getTree());
            EQUALS254=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4343); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4346);
            eventProperty255=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty255.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression256 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4368);
            evalOrExpression256=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression256.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList257 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt93=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt93=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt93=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt93=3;
                    }
                    break;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==DISTINCT) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4425);
            selectionList257=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList257.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA259=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement258 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement260 = null;
        CommonTree COMMA259_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4456);
            selectionListElement258=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement258.getTree());
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA259=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4459); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4462);
            	    selectionListElement260=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement260.getTree());
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS263=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector261 = null;
        EsperEPL2GrammarParser.expression_return expression262 = null;
        CommonTree s_tree=null;
        CommonTree AS263_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt97=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt97=1;
                }
                break;
            case IDENT:
                {
                int LA97_2 = input.LA(2);
                if ( (LA97_2==DOT) ) {
                    int LA97_69 = input.LA(3);
                    if ( (LA97_69==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt97=2;
                    }
                    else if ( (LA97_69==WINDOW||LA97_69==ESCAPE||LA97_69==EVERY_EXPR||(LA97_69>=SUM && LA97_69<=COUNT)||LA97_69==OUTER||(LA97_69>=JOIN && LA97_69<=FULL)||(LA97_69>=EVENTS && LA97_69<=LAST)||(LA97_69>=UNIDIRECTIONAL && LA97_69<=PREVIOUSTAIL)||LA97_69==PRIOR||(LA97_69>=WEEKDAY && LA97_69<=CAST)||LA97_69==SNAPSHOT||(LA97_69>=VARIABLE && LA97_69<=INDEX)||(LA97_69>=DEFINE && LA97_69<=MATCHES)||LA97_69==WHILE||(LA97_69>=MERGE && LA97_69<=MATCHED)||LA97_69==IDENT||LA97_69==TICKED_STRING_LITERAL) ) {
                        alt97=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 69, input);
                        throw nvae;
                    }
                }
                else if ( (LA97_2==EOF||(LA97_2>=IN_SET && LA97_2<=REGEXP)||(LA97_2>=OR_EXPR && LA97_2<=NOT_EXPR)||(LA97_2>=WHERE && LA97_2<=AS)||LA97_2==WHEN||LA97_2==FROM||LA97_2==IS||(LA97_2>=GROUP && LA97_2<=HAVING)||LA97_2==OUTPUT||LA97_2==INSERT||LA97_2==ORDER||LA97_2==ROW_LIMIT_EXPR||LA97_2==FOR||LA97_2==COMMA||LA97_2==LPAREN||LA97_2==EQUALS||LA97_2==LBRACK||(LA97_2>=STAR && LA97_2<=QUESTION)||(LA97_2>=BAND && LA97_2<=MOD)||LA97_2==ESCAPECHAR) ) {
                    alt97=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4504);
                    streamSelector261=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector261.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4509);
                    expression262=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression262.getTree());
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==AS) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            AS263=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4512); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS263);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4516);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT264=null;
        Token STAR265=null;
        Token AS266=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT264_tree=null;
        CommonTree STAR265_tree=null;
        CommonTree AS266_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT264=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT264);
            STAR265=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR265);
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==AS) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    AS266=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS266);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT271=null;
        Token DOT273=null;
        Token AS275=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression267 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression268 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression269 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression270 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression272 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression274 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT271_tree=null;
        CommonTree DOT273_tree=null;
        CommonTree AS275_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt99=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA99_1 = input.LA(2);
                if ( (LA99_1==EOF||(LA99_1>=WHERE && LA99_1<=AS)||(LA99_1>=INNER && LA99_1<=ON)||(LA99_1>=GROUP && LA99_1<=HAVING)||LA99_1==OUTPUT||LA99_1==ORDER||(LA99_1>=UNIDIRECTIONAL && LA99_1<=RETAININTERSECTION)||LA99_1==ROW_LIMIT_EXPR||LA99_1==MATCH_RECOGNIZE||LA99_1==FOR||(LA99_1>=COMMA && LA99_1<=LPAREN)||(LA99_1>=EQUALS && LA99_1<=LBRACK)) ) {
                    alt99=1;
                }
                else if ( (LA99_1==COLON) ) {
                    alt99=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt99=1;
                }
                break;
            case PATTERN:
                {
                alt99=2;
                }
                break;
            case SQL:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4614);
                    eventFilterExpression267=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression267.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4618);
                    patternInclusionExpression268=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression268.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4622);
                    databaseJoinExpression269=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression269.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4626);
                    methodJoinExpression270=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression270.getTree());
                    }
                    break;
            }
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==DOT) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    {
                    DOT271=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT271);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4635);
                    viewExpression272=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression272.getTree());
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);
                        if ( (LA100_0==DOT) ) {
                            alt100=1;
                        }
                        switch (alt100) {
                    	case 1 :
                    	    {
                    	    DOT273=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4638); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT273);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4640);
                    	    viewExpression274=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression274.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop100;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt102=3;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==AS) ) {
                alt102=1;
            }
            else if ( (LA102_0==IDENT) ) {
                alt102=2;
            }
            switch (alt102) {
                case 1 :
                    {
                    AS275=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS275);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==UNIDIRECTIONAL) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt104=3;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==RETAINUNION) ) {
                alt104=1;
            }
            else if ( (LA104_0==RETAININTERSECTION) ) {
                alt104=2;
            }
            switch (alt104) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR276=null;
        Token LPAREN277=null;
        Token RPAREN279=null;
        EsperEPL2GrammarParser.expressionList_return expressionList278 = null;
        CommonTree i_tree=null;
        CommonTree FOR276_tree=null;
        CommonTree LPAREN277_tree=null;
        CommonTree RPAREN279_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR276=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR276);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==LPAREN) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    LPAREN277=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN277);
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==WINDOW||LA105_0==ESCAPE||(LA105_0>=NOT_EXPR && LA105_0<=EVERY_EXPR)||(LA105_0>=SUM && LA105_0<=COUNT)||LA105_0==CASE||LA105_0==OUTER||(LA105_0>=JOIN && LA105_0<=FULL)||(LA105_0>=EVENTS && LA105_0<=LAST)||(LA105_0>=UNIDIRECTIONAL && LA105_0<=CURRENT_TIMESTAMP)||LA105_0==SNAPSHOT||(LA105_0>=VARIABLE && LA105_0<=INDEX)||(LA105_0>=BOOLEAN_TRUE && LA105_0<=VALUE_NULL)||(LA105_0>=DEFINE && LA105_0<=MATCHES)||LA105_0==WHILE||(LA105_0>=MERGE && LA105_0<=MATCHED)||LA105_0==NUM_DOUBLE||(LA105_0>=IDENT && LA105_0<=LPAREN)||(LA105_0>=PLUS && LA105_0<=QUESTION)||(LA105_0>=STRING_LITERAL && LA105_0<=QUOTED_STRING_LITERAL)||LA105_0==MINUS||LA105_0==LCURLY||LA105_0==NUM_INT||(LA105_0>=TICKED_STRING_LITERAL && LA105_0<=NUM_FLOAT)) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4740);
                            expressionList278=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList278.getTree());
                            }
                            break;
                    }
                    RPAREN279=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN279);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE280=null;
        Token LPAREN281=null;
        Token RPAREN289=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy282 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures283 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection284 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip285 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern286 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval287 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine288 = null;
        CommonTree MATCH_RECOGNIZE280_tree=null;
        CommonTree LPAREN281_tree=null;
        CommonTree RPAREN289_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE280=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE280);
            LPAREN281=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN281);
            int alt107=2;
            int LA107_0 = input.LA(1);
            if ( (LA107_0==PARTITION) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4799);
                    matchRecogPartitionBy282=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy282.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4806);
            matchRecogMeasures283=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures283.getTree());
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==ALL) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4811);
                    matchRecogMatchesSelection284=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection284.getTree());
                    }
                    break;
            }
            int alt109=2;
            int LA109_0 = input.LA(1);
            if ( (LA109_0==AFTER) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4817);
                    matchRecogMatchesAfterSkip285=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip285.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4823);
            matchRecogPattern286=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern286.getTree());
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==IDENT) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4829);
                    matchRecogMatchesInterval287=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval287.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4835);
            matchRecogDefine288=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine288.getTree());
            RPAREN289=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN289);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION290=null;
        Token BY291=null;
        Token COMMA293=null;
        EsperEPL2GrammarParser.expression_return expression292 = null;
        EsperEPL2GrammarParser.expression_return expression294 = null;
        CommonTree PARTITION290_tree=null;
        CommonTree BY291_tree=null;
        CommonTree COMMA293_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION290=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4879); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION290);
            BY291=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY291);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4883);
            expression292=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression292.getTree());
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);
                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }
                switch (alt111) {
            	case 1 :
            	    {
            	    COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4886); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4888);
            	    expression294=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression294.getTree());
            	    }
            	    break;
            	default :
            	    break loop111;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES295=null;
        Token COMMA297=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem296 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem298 = null;
        CommonTree MEASURES295_tree=null;
        CommonTree COMMA297_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES295=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES295);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4919);
            matchRecogMeasureItem296=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem296.getTree());
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);
                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }
                switch (alt112) {
            	case 1 :
            	    {
            	    COMMA297=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA297);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4924);
            	    matchRecogMeasureItem298=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem298.getTree());
            	    }
            	    break;
            	default :
            	    break loop112;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS300=null;
        EsperEPL2GrammarParser.expression_return expression299 = null;
        CommonTree i_tree=null;
        CommonTree AS300_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4949);
            expression299=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression299.getTree());
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==AS) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    AS300=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS300);
                    int alt113=2;
                    int LA113_0 = input.LA(1);
                    if ( (LA113_0==IDENT) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4957); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL301=null;
        Token MATCHES302=null;
        CommonTree ALL301_tree=null;
        CommonTree MATCHES302_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL301=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL301_tree = (CommonTree)adaptor.create(ALL301);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL301_tree, root_0);
            }
            MATCHES302=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4991); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN303=null;
        Token LPAREN304=null;
        Token RPAREN306=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration305 = null;
        CommonTree PATTERN303_tree=null;
        CommonTree LPAREN304_tree=null;
        CommonTree RPAREN306_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN303=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN303);
            LPAREN304=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN304);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5010);
            matchRecogPatternAlteration305=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration305.getTree());
            RPAREN306=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN306);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER307=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER307_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER307=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER307);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5038);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5042);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5046);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5050);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5054);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod308 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5092);
            timePeriod308=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod308.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat309 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat310 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5118);
            matchRecogPatternConcat309=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat309.getTree());
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);
                if ( (LA115_0==BOR) ) {
                    alt115=1;
                }
                switch (alt115) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5123); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5125);
            	    matchRecogPatternConcat310=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat310.getTree());
            	    }
            	    break;
            	default :
            	    break loop115;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary311 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);
                if ( ((LA116_0>=IDENT && LA116_0<=LPAREN)) ) {
                    alt116=1;
                }
                switch (alt116) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5158);
            	    matchRecogPatternUnary311=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary311.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested312 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom313 = null;
        try {
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==LPAREN) ) {
                alt117=1;
            }
            else if ( (LA117_0==IDENT) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);
                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5183);
                    matchRecogPatternNested312=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested312.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5189);
                    matchRecogPatternAtom313=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom313.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN314=null;
        Token RPAREN316=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration315 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN314_tree=null;
        CommonTree RPAREN316_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN314=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN314);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5203);
            matchRecogPatternAlteration315=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration315.getTree());
            RPAREN316=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN316);
            int alt118=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt118=1;
                    }
                    break;
                case PLUS:
                    {
                    alt118=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt118=3;
                    }
                    break;
            }
            switch (alt118) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==STAR||(LA121_0>=PLUS && LA121_0<=QUESTION)) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    int alt119=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt119=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt119=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt119=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 0, input);
                        throw nvae;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5267); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5273); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5279); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( (LA120_0==QUESTION) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5285); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE317=null;
        Token COMMA319=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem318 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem320 = null;
        CommonTree DEFINE317_tree=null;
        CommonTree COMMA319_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE317=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE317);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5331);
            matchRecogDefineItem318=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem318.getTree());
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    alt122=1;
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA319=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5334); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA319);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5336);
            	    matchRecogDefineItem320=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem320.getTree());
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS321=null;
        EsperEPL2GrammarParser.expression_return expression322 = null;
        CommonTree i_tree=null;
        CommonTree AS321_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS321=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS321);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5367);
            expression322=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression322.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN323=null;
        Token LBRACK324=null;
        Token RBRACK326=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression325 = null;
        CommonTree PATTERN323_tree=null;
        CommonTree LBRACK324_tree=null;
        CommonTree RBRACK326_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN323=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN323);
            LBRACK324=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK324);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5396);
            patternExpression325=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression325.getTree());
            RBRACK326=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK326);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL327=null;
        Token COLON328=null;
        Token LBRACK329=null;
        Token METADATASQL330=null;
        Token RBRACK331=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL327_tree=null;
        CommonTree COLON328_tree=null;
        CommonTree LBRACK329_tree=null;
        CommonTree METADATASQL330_tree=null;
        CommonTree RBRACK331_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL327=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL327);
            COLON328=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON328);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK329=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK329);
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==STRING_LITERAL) ) {
                alt123=1;
            }
            else if ( (LA123_0==QUOTED_STRING_LITERAL) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);
                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==METADATASQL) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    {
                    METADATASQL330=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL330);
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==STRING_LITERAL) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==QUOTED_STRING_LITERAL) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);
                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5459); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5465); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK331=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK331);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON332=null;
        Token LPAREN334=null;
        Token RPAREN336=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier333 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList335 = null;
        CommonTree i_tree=null;
        CommonTree COLON332_tree=null;
        CommonTree LPAREN334_tree=null;
        CommonTree RPAREN336_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON332=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON332);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5525);
            classIdentifier333=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier333.getTree());
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==LPAREN) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    {
                    LPAREN334=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN334);
                    int alt126=2;
                    int LA126_0 = input.LA(1);
                    if ( (LA126_0==WINDOW||LA126_0==ESCAPE||(LA126_0>=NOT_EXPR && LA126_0<=EVERY_EXPR)||(LA126_0>=SUM && LA126_0<=COUNT)||LA126_0==CASE||LA126_0==OUTER||(LA126_0>=JOIN && LA126_0<=FULL)||(LA126_0>=EVENTS && LA126_0<=LAST)||(LA126_0>=UNIDIRECTIONAL && LA126_0<=CURRENT_TIMESTAMP)||LA126_0==SNAPSHOT||(LA126_0>=VARIABLE && LA126_0<=INDEX)||(LA126_0>=BOOLEAN_TRUE && LA126_0<=VALUE_NULL)||(LA126_0>=DEFINE && LA126_0<=MATCHES)||LA126_0==WHILE||(LA126_0>=MERGE && LA126_0<=MATCHED)||LA126_0==NUM_DOUBLE||(LA126_0>=IDENT && LA126_0<=LPAREN)||(LA126_0>=PLUS && LA126_0<=QUESTION)||(LA126_0>=STRING_LITERAL && LA126_0<=QUOTED_STRING_LITERAL)||LA126_0==MINUS||LA126_0==LCURLY||LA126_0==NUM_INT||(LA126_0>=TICKED_STRING_LITERAL && LA126_0<=NUM_FLOAT)) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5530);
                            expressionList335=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList335.getTree());
                            }
                            break;
                    }
                    RPAREN336=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN336);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON337=null;
        Token LPAREN338=null;
        Token RPAREN340=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList339 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON337_tree=null;
        CommonTree LPAREN338_tree=null;
        CommonTree RPAREN340_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON337=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON337);
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==IDENT) ) {
                alt128=1;
            }
            else if ( (LA128_0==MERGE) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);
                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN338=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN338);
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==WINDOW||LA129_0==ESCAPE||(LA129_0>=NOT_EXPR && LA129_0<=EVERY_EXPR)||(LA129_0>=SUM && LA129_0<=COUNT)||LA129_0==CASE||LA129_0==OUTER||(LA129_0>=JOIN && LA129_0<=FULL)||(LA129_0>=EVENTS && LA129_0<=LAST)||(LA129_0>=UNIDIRECTIONAL && LA129_0<=CURRENT_TIMESTAMP)||LA129_0==SNAPSHOT||(LA129_0>=VARIABLE && LA129_0<=INDEX)||(LA129_0>=BOOLEAN_TRUE && LA129_0<=VALUE_NULL)||(LA129_0>=DEFINE && LA129_0<=MATCHES)||LA129_0==WHILE||(LA129_0>=MERGE && LA129_0<=MATCHED)||LA129_0==NUM_DOUBLE||(LA129_0>=IDENT && LA129_0<=LPAREN)||LA129_0==LBRACK||LA129_0==STAR||(LA129_0>=PLUS && LA129_0<=QUESTION)||(LA129_0>=STRING_LITERAL && LA129_0<=QUOTED_STRING_LITERAL)||LA129_0==MINUS||LA129_0==LCURLY||LA129_0==NUM_INT||(LA129_0>=TICKED_STRING_LITERAL && LA129_0<=NUM_FLOAT)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5602);
                    expressionWithTimeList339=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList339.getTree());
                    }
                    break;
            }
            RPAREN340=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN340);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA342=null;
        EsperEPL2GrammarParser.expression_return expression341 = null;
        EsperEPL2GrammarParser.expression_return expression343 = null;
        CommonTree COMMA342_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5665);
            expression341=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression341.getTree());
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);
                if ( (LA130_0==COMMA) ) {
                    alt130=1;
                }
                switch (alt130) {
            	case 1 :
            	    {
            	    COMMA342=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5668); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA342);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5670);
            	    expression343=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression343.getTree());
            	    }
            	    break;
            	default :
            	    break loop130;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA345=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement344 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement346 = null;
        CommonTree COMMA345_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5705);
            orderByListElement344=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement344.getTree());
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);
                if ( (LA131_0==COMMA) ) {
                    alt131=1;
                }
                switch (alt131) {
            	case 1 :
            	    {
            	    COMMA345=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5708); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA345);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5710);
            	    orderByListElement346=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement346.getTree());
            	    }
            	    break;
            	default :
            	    break loop131;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression347 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5735);
            expression347=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression347.getTree());
            int alt132=3;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==ASC) ) {
                alt132=1;
            }
            else if ( (LA132_0==DESC) ) {
                alt132=2;
            }
            switch (alt132) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression348 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5782);
            evalOrExpression348=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression348.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN354=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter349 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod350 = null;
        EsperEPL2GrammarParser.number_return number351 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet352 = null;
        EsperEPL2GrammarParser.expression_return expression353 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr355 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN354_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==AFTER) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5820);
                    outputLimitAfter349=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter349.getTree());
                    }
                    break;
            }
            int alt134=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt134=1;
                    }
                    break;
                case FIRST:
                    {
                    alt134=2;
                    }
                    break;
                case LAST:
                    {
                    alt134=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt134=4;
                    }
                    break;
            }
            switch (alt134) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt138=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt138=1;
                }
                break;
            case AT:
                {
                alt138=2;
                }
                break;
            case WHEN:
                {
                alt138=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt138=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);
                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==NUM_INT) ) {
                        int LA136_1 = input.LA(2);
                        if ( (LA136_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==NUM_LONG) ) {
                        int LA136_2 = input.LA(2);
                        if ( (LA136_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==NUM_FLOAT) ) {
                        int LA136_3 = input.LA(2);
                        if ( (LA136_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==NUM_DOUBLE) ) {
                        int LA136_4 = input.LA(2);
                        if ( (LA136_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==IDENT) ) {
                        int LA136_5 = input.LA(2);
                        if ( (LA136_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt136=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);
                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5904);
                            timePeriod350=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod350.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt135=2;
                            int LA135_0 = input.LA(1);
                            if ( (LA135_0==NUM_DOUBLE||LA135_0==NUM_INT||(LA135_0>=NUM_LONG && LA135_0<=NUM_FLOAT)) ) {
                                alt135=1;
                            }
                            else if ( (LA135_0==IDENT) ) {
                                alt135=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 0, input);
                                throw nvae;
                            }
                            switch (alt135) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5915);
                                    number351=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number351.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5921); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5927); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5960);
                    crontabLimitParameterSet352=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet352.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit5979);
                    expression353=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression353.getTree());
                    int alt137=2;
                    int LA137_0 = input.LA(1);
                    if ( (LA137_0==THEN) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            THEN354=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5982); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN354);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5984);
                            onSetExpr355=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr355.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS358=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod356 = null;
        EsperEPL2GrammarParser.number_return number357 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS358_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt139=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA139_1 = input.LA(2);
                if ( (LA139_1==EVENTS) ) {
                    alt139=2;
                }
                else if ( (LA139_1==MIN||(LA139_1>=TIMEPERIOD_YEAR && LA139_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA139_2 = input.LA(2);
                if ( (LA139_2==EVENTS) ) {
                    alt139=2;
                }
                else if ( (LA139_2==MIN||(LA139_2>=TIMEPERIOD_YEAR && LA139_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA139_3 = input.LA(2);
                if ( (LA139_3==EVENTS) ) {
                    alt139=2;
                }
                else if ( (LA139_3==MIN||(LA139_3>=TIMEPERIOD_YEAR && LA139_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA139_4 = input.LA(2);
                if ( (LA139_4==MIN||(LA139_4>=TIMEPERIOD_YEAR && LA139_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else if ( (LA139_4==EVENTS) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt139=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);
                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6137);
                    timePeriod356=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod356.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6141);
                    number357=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number357.getTree());
                    EVENTS358=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS358);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==NUM_DOUBLE||LA140_0==PLUS||LA140_0==MINUS||LA140_0==NUM_INT||(LA140_0>=NUM_LONG && LA140_0<=NUM_FLOAT)) ) {
                alt140=1;
            }
            else if ( (LA140_0==IDENT) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);
                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6189);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==OFFSET||LA143_0==COMMA) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    int alt141=2;
                    int LA141_0 = input.LA(1);
                    if ( (LA141_0==COMMA) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==OFFSET) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);
                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6202); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6208); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt142=2;
                    int LA142_0 = input.LA(1);
                    if ( (LA142_0==NUM_DOUBLE||LA142_0==PLUS||LA142_0==MINUS||LA142_0==NUM_INT||(LA142_0>=NUM_LONG && LA142_0<=NUM_FLOAT)) ) {
                        alt142=1;
                    }
                    else if ( (LA142_0==IDENT) ) {
                        alt142=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 142, 0, input);
                        throw nvae;
                    }
                    switch (alt142) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6214);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6220); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN359=null;
        Token COMMA361=null;
        Token COMMA363=null;
        Token COMMA365=null;
        Token COMMA367=null;
        Token COMMA369=null;
        Token RPAREN371=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime360 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime362 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime364 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime366 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime368 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime370 = null;
        CommonTree LPAREN359_tree=null;
        CommonTree COMMA361_tree=null;
        CommonTree COMMA363_tree=null;
        CommonTree COMMA365_tree=null;
        CommonTree COMMA367_tree=null;
        CommonTree COMMA369_tree=null;
        CommonTree RPAREN371_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN359=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN359);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6274);
            expressionWithTime360=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime360.getTree());
            COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA361);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6278);
            expressionWithTime362=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime362.getTree());
            COMMA363=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA363);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6282);
            expressionWithTime364=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime364.getTree());
            COMMA365=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA365);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6286);
            expressionWithTime366=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime366.getTree());
            COMMA367=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA367);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6290);
            expressionWithTime368=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime368.getTree());
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==COMMA) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    COMMA369=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA369);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6295);
                    expressionWithTime370=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime370.getTree());
                    }
                    break;
            }
            RPAREN371=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN371);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN372=null;
        Token THEN374=null;
        EsperEPL2GrammarParser.expression_return expression373 = null;
        EsperEPL2GrammarParser.expression_return expression375 = null;
        CommonTree WHEN372_tree=null;
        CommonTree THEN374_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN372=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6329); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6332);
            expression373=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());
            THEN374=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6334); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6337);
            expression375=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE376=null;
        EsperEPL2GrammarParser.expression_return expression377 = null;
        CommonTree ELSE376_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE376=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6350); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6353);
            expression377=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression377.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression378 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6366);
            caseExpression378=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression378.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE379=null;
        Token END382=null;
        Token CASE383=null;
        Token END387=null;
        EsperEPL2GrammarParser.whenClause_return whenClause380 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause381 = null;
        EsperEPL2GrammarParser.expression_return expression384 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause385 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause386 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression388 = null;
        CommonTree CASE379_tree=null;
        CommonTree END382_tree=null;
        CommonTree CASE383_tree=null;
        CommonTree END387_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt149=3;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==CASE) ) {
                int LA149_1 = input.LA(2);
                if ( (LA149_1==WINDOW||LA149_1==ESCAPE||(LA149_1>=NOT_EXPR && LA149_1<=EVERY_EXPR)||(LA149_1>=SUM && LA149_1<=COUNT)||LA149_1==CASE||LA149_1==OUTER||(LA149_1>=JOIN && LA149_1<=FULL)||(LA149_1>=EVENTS && LA149_1<=LAST)||(LA149_1>=UNIDIRECTIONAL && LA149_1<=CURRENT_TIMESTAMP)||LA149_1==SNAPSHOT||(LA149_1>=VARIABLE && LA149_1<=INDEX)||(LA149_1>=BOOLEAN_TRUE && LA149_1<=VALUE_NULL)||(LA149_1>=DEFINE && LA149_1<=MATCHES)||LA149_1==WHILE||(LA149_1>=MERGE && LA149_1<=MATCHED)||LA149_1==NUM_DOUBLE||(LA149_1>=IDENT && LA149_1<=LPAREN)||(LA149_1>=PLUS && LA149_1<=QUESTION)||(LA149_1>=STRING_LITERAL && LA149_1<=QUOTED_STRING_LITERAL)||LA149_1==MINUS||LA149_1==LCURLY||LA149_1==NUM_INT||(LA149_1>=TICKED_STRING_LITERAL && LA149_1<=NUM_FLOAT)) ) {
                    alt149=2;
                }
                else if ( (LA149_1==WHEN) ) {
                    alt149=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA149_0==WINDOW||LA149_0==ESCAPE||(LA149_0>=NOT_EXPR && LA149_0<=EVERY_EXPR)||(LA149_0>=SUM && LA149_0<=COUNT)||LA149_0==OUTER||(LA149_0>=JOIN && LA149_0<=FULL)||(LA149_0>=EVENTS && LA149_0<=LAST)||(LA149_0>=UNIDIRECTIONAL && LA149_0<=CURRENT_TIMESTAMP)||LA149_0==SNAPSHOT||(LA149_0>=VARIABLE && LA149_0<=INDEX)||(LA149_0>=BOOLEAN_TRUE && LA149_0<=VALUE_NULL)||(LA149_0>=DEFINE && LA149_0<=MATCHES)||LA149_0==WHILE||(LA149_0>=MERGE && LA149_0<=MATCHED)||LA149_0==NUM_DOUBLE||(LA149_0>=IDENT && LA149_0<=LPAREN)||(LA149_0>=PLUS && LA149_0<=QUESTION)||(LA149_0>=STRING_LITERAL && LA149_0<=QUOTED_STRING_LITERAL)||LA149_0==MINUS||LA149_0==LCURLY||LA149_0==NUM_INT||(LA149_0>=TICKED_STRING_LITERAL && LA149_0<=NUM_FLOAT)) ) {
                alt149=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);
                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE379=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE379_tree = (CommonTree)adaptor.create(CASE379);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE379_tree, root_0);
                    }
                    int cnt145=0;
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);
                        if ( (LA145_0==WHEN) ) {
                            alt145=1;
                        }
                        switch (alt145) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6383);
                    	    whenClause380=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause380.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt145 >= 1 ) break loop145;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(145, input);
                                throw eee;
                        }
                        cnt145++;
                    } while (true);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==ELSE) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6386);
                            elseClause381=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause381.getTree());
                            }
                            break;
                    }
                    END382=(Token)match(input,END,FOLLOW_END_in_caseExpression6389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE383=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE383);
                    pushFollow(FOLLOW_expression_in_caseExpression6402);
                    expression384=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression384.getTree());
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);
                        if ( (LA147_0==WHEN) ) {
                            alt147=1;
                        }
                        switch (alt147) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6404);
                    	    whenClause385=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause385.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);
                    int alt148=2;
                    int LA148_0 = input.LA(1);
                    if ( (LA148_0==ELSE) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6407);
                            elseClause386=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause386.getTree());
                            }
                            break;
                    }
                    END387=(Token)match(input,END,FOLLOW_END_in_caseExpression6410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END387);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6434);
                    evalOrExpression388=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression388.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression389 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression390 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6445);
            evalAndExpression389=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression389.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==OR_EXPR) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6450); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6452);
            	    evalAndExpression390=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression390.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression391 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression392 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6484);
            bitWiseExpression391=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression391.getTree());
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);
                if ( (LA151_0==AND_EXPR) ) {
                    alt151=1;
                }
                switch (alt151) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6489); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6491);
            	    bitWiseExpression392=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression392.getTree());
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND394=null;
        Token BOR395=null;
        Token BXOR396=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression393 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression397 = null;
        CommonTree BAND394_tree=null;
        CommonTree BOR395_tree=null;
        CommonTree BXOR396_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6523);
            negatedExpression393=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression393.getTree());
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==BOR||(LA153_0>=BAND && LA153_0<=BXOR)) ) {
                    alt153=1;
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    int alt152=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt152=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt152=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt152=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 152, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt152) {
            	        case 1 :
            	            {
            	            BAND394=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6528); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND394_tree = (CommonTree)adaptor.create(BAND394);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND394_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR395=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6531); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR395_tree = (CommonTree)adaptor.create(BOR395);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR395_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR396=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6534); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR396_tree = (CommonTree)adaptor.create(BXOR396);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR396_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6538);
            	    negatedExpression397=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression397.getTree());
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR399=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression398 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression400 = null;
        CommonTree NOT_EXPR399_tree=null;
        try {
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==WINDOW||LA154_0==ESCAPE||LA154_0==EVERY_EXPR||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||(LA154_0>=MERGE && LA154_0<=MATCHED)||LA154_0==NUM_DOUBLE||(LA154_0>=IDENT && LA154_0<=LPAREN)||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
                alt154=1;
            }
            else if ( (LA154_0==NOT_EXPR) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);
                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6553);
                    evalEqualsExpression398=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression398.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR399=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR399_tree = (CommonTree)adaptor.create(NOT_EXPR399);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR399_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6562);
                    evalEqualsExpression400=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression400.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR402=null;
        Token LPAREN404=null;
        Token RPAREN406=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression401 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression403 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList405 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression407 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR402_tree=null;
        CommonTree LPAREN404_tree=null;
        CommonTree RPAREN406_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6575);
            evalRelationalExpression401=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression401.getTree());
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);
                if ( (LA160_0==IS||LA160_0==EQUALS||(LA160_0>=SQL_NE && LA160_0<=NOT_EQUAL)) ) {
                    alt160=1;
                }
                switch (alt160) {
            	case 1 :
            	    {
            	    int alt155=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt155=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA155_2 = input.LA(2);
            	        if ( (LA155_2==NOT_EXPR) ) {
            	            alt155=3;
            	        }
            	        else if ( (LA155_2==WINDOW||LA155_2==ESCAPE||LA155_2==EVERY_EXPR||(LA155_2>=SUM && LA155_2<=COUNT)||LA155_2==OUTER||(LA155_2>=JOIN && LA155_2<=FULL)||(LA155_2>=ALL && LA155_2<=SOME)||(LA155_2>=EVENTS && LA155_2<=LAST)||(LA155_2>=UNIDIRECTIONAL && LA155_2<=CURRENT_TIMESTAMP)||LA155_2==SNAPSHOT||(LA155_2>=VARIABLE && LA155_2<=INDEX)||(LA155_2>=BOOLEAN_TRUE && LA155_2<=VALUE_NULL)||(LA155_2>=DEFINE && LA155_2<=MATCHES)||LA155_2==WHILE||(LA155_2>=MERGE && LA155_2<=MATCHED)||LA155_2==NUM_DOUBLE||(LA155_2>=IDENT && LA155_2<=LPAREN)||(LA155_2>=PLUS && LA155_2<=QUESTION)||(LA155_2>=STRING_LITERAL && LA155_2<=QUOTED_STRING_LITERAL)||LA155_2==MINUS||LA155_2==LCURLY||LA155_2==NUM_INT||(LA155_2>=TICKED_STRING_LITERAL && LA155_2<=NUM_FLOAT)) ) {
            	            alt155=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 155, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt155=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt155=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 155, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt155) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6588); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6606); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6620); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR402=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6622); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR402);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6636); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6650); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt159=2;
            	    int LA159_0 = input.LA(1);
            	    if ( (LA159_0==WINDOW||LA159_0==ESCAPE||LA159_0==EVERY_EXPR||(LA159_0>=SUM && LA159_0<=COUNT)||LA159_0==OUTER||(LA159_0>=JOIN && LA159_0<=FULL)||(LA159_0>=EVENTS && LA159_0<=LAST)||(LA159_0>=UNIDIRECTIONAL && LA159_0<=CURRENT_TIMESTAMP)||LA159_0==SNAPSHOT||(LA159_0>=VARIABLE && LA159_0<=INDEX)||(LA159_0>=BOOLEAN_TRUE && LA159_0<=VALUE_NULL)||(LA159_0>=DEFINE && LA159_0<=MATCHES)||LA159_0==WHILE||(LA159_0>=MERGE && LA159_0<=MATCHED)||LA159_0==NUM_DOUBLE||(LA159_0>=IDENT && LA159_0<=LPAREN)||(LA159_0>=PLUS && LA159_0<=QUESTION)||(LA159_0>=STRING_LITERAL && LA159_0<=QUOTED_STRING_LITERAL)||LA159_0==MINUS||LA159_0==LCURLY||LA159_0==NUM_INT||(LA159_0>=TICKED_STRING_LITERAL && LA159_0<=NUM_FLOAT)) ) {
            	        alt159=1;
            	    }
            	    else if ( ((LA159_0>=ALL && LA159_0<=SOME)) ) {
            	        alt159=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 159, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt159) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6680);
            	            evalRelationalExpression403=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression403.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt156=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt156=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt156=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt156=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 156, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt156) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6697); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6703); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6709); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt158=2;
            	            int LA158_0 = input.LA(1);
            	            if ( (LA158_0==LPAREN) ) {
            	                int LA158_1 = input.LA(2);
            	                if ( (LA158_1==SELECT) ) {
            	                    alt158=2;
            	                }
            	                else if ( (LA158_1==WINDOW||LA158_1==ESCAPE||(LA158_1>=NOT_EXPR && LA158_1<=EVERY_EXPR)||(LA158_1>=SUM && LA158_1<=COUNT)||LA158_1==CASE||LA158_1==OUTER||(LA158_1>=JOIN && LA158_1<=FULL)||(LA158_1>=EVENTS && LA158_1<=LAST)||(LA158_1>=UNIDIRECTIONAL && LA158_1<=CURRENT_TIMESTAMP)||LA158_1==SNAPSHOT||(LA158_1>=VARIABLE && LA158_1<=INDEX)||(LA158_1>=BOOLEAN_TRUE && LA158_1<=VALUE_NULL)||(LA158_1>=DEFINE && LA158_1<=MATCHES)||LA158_1==WHILE||(LA158_1>=MERGE && LA158_1<=MATCHED)||LA158_1==NUM_DOUBLE||(LA158_1>=IDENT && LA158_1<=RPAREN)||(LA158_1>=PLUS && LA158_1<=QUESTION)||(LA158_1>=STRING_LITERAL && LA158_1<=QUOTED_STRING_LITERAL)||LA158_1==MINUS||LA158_1==LCURLY||LA158_1==NUM_INT||(LA158_1>=TICKED_STRING_LITERAL && LA158_1<=NUM_FLOAT)) ) {
            	                    alt158=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 158, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 158, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt158) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN404=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6715); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN404);
            	                    int alt157=2;
            	                    int LA157_0 = input.LA(1);
            	                    if ( (LA157_0==WINDOW||LA157_0==ESCAPE||(LA157_0>=NOT_EXPR && LA157_0<=EVERY_EXPR)||(LA157_0>=SUM && LA157_0<=COUNT)||LA157_0==CASE||LA157_0==OUTER||(LA157_0>=JOIN && LA157_0<=FULL)||(LA157_0>=EVENTS && LA157_0<=LAST)||(LA157_0>=UNIDIRECTIONAL && LA157_0<=CURRENT_TIMESTAMP)||LA157_0==SNAPSHOT||(LA157_0>=VARIABLE && LA157_0<=INDEX)||(LA157_0>=BOOLEAN_TRUE && LA157_0<=VALUE_NULL)||(LA157_0>=DEFINE && LA157_0<=MATCHES)||LA157_0==WHILE||(LA157_0>=MERGE && LA157_0<=MATCHED)||LA157_0==NUM_DOUBLE||(LA157_0>=IDENT && LA157_0<=LPAREN)||(LA157_0>=PLUS && LA157_0<=QUESTION)||(LA157_0>=STRING_LITERAL && LA157_0<=QUOTED_STRING_LITERAL)||LA157_0==MINUS||LA157_0==LCURLY||LA157_0==NUM_INT||(LA157_0>=TICKED_STRING_LITERAL && LA157_0<=NUM_FLOAT)) ) {
            	                        alt157=1;
            	                    }
            	                    switch (alt157) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6717);
            	                            expressionList405=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList405.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN406=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6720); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN406);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6725);
            	                    subSelectGroupExpression407=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression407.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN410=null;
        Token RPAREN412=null;
        Token COMMA416=null;
        Token IN_SET418=null;
        Token BETWEEN420=null;
        Token LIKE422=null;
        Token ESCAPE424=null;
        Token REGEXP426=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr408 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr409 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList411 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression413 = null;
        EsperEPL2GrammarParser.expression_return expression414 = null;
        EsperEPL2GrammarParser.expression_return expression415 = null;
        EsperEPL2GrammarParser.expression_return expression417 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery419 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList421 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr423 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant425 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr427 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN410_tree=null;
        CommonTree RPAREN412_tree=null;
        CommonTree COMMA416_tree=null;
        CommonTree IN_SET418_tree=null;
        CommonTree BETWEEN420_tree=null;
        CommonTree LIKE422_tree=null;
        CommonTree ESCAPE424_tree=null;
        CommonTree REGEXP426_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6853);
            concatenationExpr408=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr408.getTree());
            int alt174=2;
            int LA174_0 = input.LA(1);
            if ( (LA174_0==EOF||(LA174_0>=OR_EXPR && LA174_0<=AND_EXPR)||(LA174_0>=WHERE && LA174_0<=AS)||(LA174_0>=ELSE && LA174_0<=FROM)||LA174_0==IS||(LA174_0>=GROUP && LA174_0<=HAVING)||LA174_0==ALL||LA174_0==OUTPUT||LA174_0==INSERT||(LA174_0>=ORDER && LA174_0<=DESC)||LA174_0==PATTERN||(LA174_0>=TIMEPERIOD_SEC && LA174_0<=TIMEPERIOD_SECONDS)||LA174_0==ROW_LIMIT_EXPR||LA174_0==MEASURES||(LA174_0>=AFTER && LA174_0<=FOR)||LA174_0==COMMA||(LA174_0>=RPAREN && LA174_0<=EQUALS)||LA174_0==RBRACK||LA174_0==BOR||LA174_0==COLON||(LA174_0>=BAND && LA174_0<=GE)||LA174_0==RCURLY||LA174_0==FOLLOWMAX_END) ) {
                alt174=1;
            }
            else if ( ((LA174_0>=IN_SET && LA174_0<=REGEXP)||LA174_0==NOT_EXPR) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);
                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    {
                    {
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);
                        if ( ((LA166_0>=LT && LA166_0<=GE)) ) {
                            alt166=1;
                        }
                        switch (alt166) {
                    	case 1 :
                    	    {
                    	    int alt161=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt161=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt161=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt161=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt161=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 161, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt161) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6885); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6889); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6893); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6897); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt165=2;
                    	    int LA165_0 = input.LA(1);
                    	    if ( (LA165_0==WINDOW||LA165_0==ESCAPE||LA165_0==EVERY_EXPR||(LA165_0>=SUM && LA165_0<=COUNT)||LA165_0==OUTER||(LA165_0>=JOIN && LA165_0<=FULL)||(LA165_0>=EVENTS && LA165_0<=LAST)||(LA165_0>=UNIDIRECTIONAL && LA165_0<=CURRENT_TIMESTAMP)||LA165_0==SNAPSHOT||(LA165_0>=VARIABLE && LA165_0<=INDEX)||(LA165_0>=BOOLEAN_TRUE && LA165_0<=VALUE_NULL)||(LA165_0>=DEFINE && LA165_0<=MATCHES)||LA165_0==WHILE||(LA165_0>=MERGE && LA165_0<=MATCHED)||LA165_0==NUM_DOUBLE||(LA165_0>=IDENT && LA165_0<=LPAREN)||(LA165_0>=PLUS && LA165_0<=QUESTION)||(LA165_0>=STRING_LITERAL && LA165_0<=QUOTED_STRING_LITERAL)||LA165_0==MINUS||LA165_0==LCURLY||LA165_0==NUM_INT||(LA165_0>=TICKED_STRING_LITERAL && LA165_0<=NUM_FLOAT)) ) {
                    	        alt165=1;
                    	    }
                    	    else if ( ((LA165_0>=ALL && LA165_0<=SOME)) ) {
                    	        alt165=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 165, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt165) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6921);
                    	            concatenationExpr409=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr409.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt162=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt162=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt162=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt162=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 162, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt162) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6938); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6944); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6950); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt164=2;
                    	            int LA164_0 = input.LA(1);
                    	            if ( (LA164_0==LPAREN) ) {
                    	                int LA164_1 = input.LA(2);
                    	                if ( (LA164_1==SELECT) ) {
                    	                    alt164=2;
                    	                }
                    	                else if ( (LA164_1==WINDOW||LA164_1==ESCAPE||(LA164_1>=NOT_EXPR && LA164_1<=EVERY_EXPR)||(LA164_1>=SUM && LA164_1<=COUNT)||LA164_1==CASE||LA164_1==OUTER||(LA164_1>=JOIN && LA164_1<=FULL)||(LA164_1>=EVENTS && LA164_1<=LAST)||(LA164_1>=UNIDIRECTIONAL && LA164_1<=CURRENT_TIMESTAMP)||LA164_1==SNAPSHOT||(LA164_1>=VARIABLE && LA164_1<=INDEX)||(LA164_1>=BOOLEAN_TRUE && LA164_1<=VALUE_NULL)||(LA164_1>=DEFINE && LA164_1<=MATCHES)||LA164_1==WHILE||(LA164_1>=MERGE && LA164_1<=MATCHED)||LA164_1==NUM_DOUBLE||(LA164_1>=IDENT && LA164_1<=RPAREN)||(LA164_1>=PLUS && LA164_1<=QUESTION)||(LA164_1>=STRING_LITERAL && LA164_1<=QUOTED_STRING_LITERAL)||LA164_1==MINUS||LA164_1==LCURLY||LA164_1==NUM_INT||(LA164_1>=TICKED_STRING_LITERAL && LA164_1<=NUM_FLOAT)) ) {
                    	                    alt164=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 164, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 164, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt164) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN410=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6956); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN410);
                    	                    int alt163=2;
                    	                    int LA163_0 = input.LA(1);
                    	                    if ( (LA163_0==WINDOW||LA163_0==ESCAPE||(LA163_0>=NOT_EXPR && LA163_0<=EVERY_EXPR)||(LA163_0>=SUM && LA163_0<=COUNT)||LA163_0==CASE||LA163_0==OUTER||(LA163_0>=JOIN && LA163_0<=FULL)||(LA163_0>=EVENTS && LA163_0<=LAST)||(LA163_0>=UNIDIRECTIONAL && LA163_0<=CURRENT_TIMESTAMP)||LA163_0==SNAPSHOT||(LA163_0>=VARIABLE && LA163_0<=INDEX)||(LA163_0>=BOOLEAN_TRUE && LA163_0<=VALUE_NULL)||(LA163_0>=DEFINE && LA163_0<=MATCHES)||LA163_0==WHILE||(LA163_0>=MERGE && LA163_0<=MATCHED)||LA163_0==NUM_DOUBLE||(LA163_0>=IDENT && LA163_0<=LPAREN)||(LA163_0>=PLUS && LA163_0<=QUESTION)||(LA163_0>=STRING_LITERAL && LA163_0<=QUOTED_STRING_LITERAL)||LA163_0==MINUS||LA163_0==LCURLY||LA163_0==NUM_INT||(LA163_0>=TICKED_STRING_LITERAL && LA163_0<=NUM_FLOAT)) ) {
                    	                        alt163=1;
                    	                    }
                    	                    switch (alt163) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6958);
                    	                            expressionList411=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList411.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN412=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6961); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN412);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6966);
                    	                    subSelectGroupExpression413=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression413.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop166;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt167=2;
                    int LA167_0 = input.LA(1);
                    if ( (LA167_0==NOT_EXPR) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt173=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA173_1 = input.LA(2);
                        if ( (LA173_1==LPAREN) ) {
                            int LA173_5 = input.LA(3);
                            if ( (LA173_5==SELECT) ) {
                                alt173=2;
                            }
                            else if ( (LA173_5==WINDOW||LA173_5==ESCAPE||(LA173_5>=NOT_EXPR && LA173_5<=EVERY_EXPR)||(LA173_5>=SUM && LA173_5<=COUNT)||LA173_5==CASE||LA173_5==OUTER||(LA173_5>=JOIN && LA173_5<=FULL)||(LA173_5>=EVENTS && LA173_5<=LAST)||(LA173_5>=UNIDIRECTIONAL && LA173_5<=CURRENT_TIMESTAMP)||LA173_5==SNAPSHOT||(LA173_5>=VARIABLE && LA173_5<=INDEX)||(LA173_5>=BOOLEAN_TRUE && LA173_5<=VALUE_NULL)||(LA173_5>=DEFINE && LA173_5<=MATCHES)||LA173_5==WHILE||(LA173_5>=MERGE && LA173_5<=MATCHED)||LA173_5==NUM_DOUBLE||(LA173_5>=IDENT && LA173_5<=LPAREN)||(LA173_5>=PLUS && LA173_5<=QUESTION)||(LA173_5>=STRING_LITERAL && LA173_5<=QUOTED_STRING_LITERAL)||LA173_5==MINUS||LA173_5==LCURLY||LA173_5==NUM_INT||(LA173_5>=TICKED_STRING_LITERAL && LA173_5<=NUM_FLOAT)) ) {
                                alt173=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 173, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA173_1==LBRACK) ) {
                            alt173=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 173, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt173=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt173=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt173=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 173, 0, input);
                        throw nvae;
                    }
                    switch (alt173) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7089); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt168=2;
                            int LA168_0 = input.LA(1);
                            if ( (LA168_0==LPAREN) ) {
                                alt168=1;
                            }
                            else if ( (LA168_0==LBRACK) ) {
                                alt168=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 168, 0, input);
                                throw nvae;
                            }
                            switch (alt168) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7101); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7107); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7110);
                            expression414=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression414.getTree());
                            int alt170=2;
                            int LA170_0 = input.LA(1);
                            if ( (LA170_0==COLON) ) {
                                alt170=1;
                            }
                            else if ( (LA170_0==COMMA||LA170_0==RPAREN||LA170_0==RBRACK) ) {
                                alt170=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 0, input);
                                throw nvae;
                            }
                            switch (alt170) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7132); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7135);
                                    expression415=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression415.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop169:
                                    do {
                                        int alt169=2;
                                        int LA169_0 = input.LA(1);
                                        if ( (LA169_0==COMMA) ) {
                                            alt169=1;
                                        }
                                        switch (alt169) {
                                    	case 1 :
                                    	    {
                                    	    COMMA416=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7161); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA416);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7163);
                                    	    expression417=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression417.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop169;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt171=2;
                            int LA171_0 = input.LA(1);
                            if ( (LA171_0==RPAREN) ) {
                                alt171=1;
                            }
                            else if ( (LA171_0==RBRACK) ) {
                                alt171=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 171, 0, input);
                                throw nvae;
                            }
                            switch (alt171) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7189); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7195); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET418=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7318); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET418);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7320);
                            inSubSelectQuery419=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery419.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN420=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7366); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN420);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7368);
                            betweenList421=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList421.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE422=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7418); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE422);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7420);
                            concatenationExpr423=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr423.getTree());
                            int alt172=2;
                            int LA172_0 = input.LA(1);
                            if ( (LA172_0==ESCAPE) ) {
                                alt172=1;
                            }
                            switch (alt172) {
                                case 1 :
                                    {
                                    ESCAPE424=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7423); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE424);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7425);
                                    stringconstant425=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant425.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP426=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7477); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP426);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7479);
                            concatenationExpr427=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr427.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr428 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7541);
            subQueryExpr428=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr428.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR431=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression429 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression430 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression432 = null;
        CommonTree c_tree=null;
        CommonTree LOR431_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7566);
            additiveExpression429=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression429.getTree());
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==LOR) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7574);
                    additiveExpression430=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression430.getTree());
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);
                        if ( (LA175_0==LOR) ) {
                            alt175=1;
                        }
                        switch (alt175) {
                    	case 1 :
                    	    {
                    	    LOR431=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7578); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR431);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7580);
                    	    additiveExpression432=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression432.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop175;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS434=null;
        Token MINUS435=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression433 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression436 = null;
        CommonTree PLUS434_tree=null;
        CommonTree MINUS435_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7621);
            multiplyExpression433=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression433.getTree());
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);
                if ( (LA178_0==PLUS||LA178_0==MINUS) ) {
                    alt178=1;
                }
                switch (alt178) {
            	case 1 :
            	    {
            	    int alt177=2;
            	    int LA177_0 = input.LA(1);
            	    if ( (LA177_0==PLUS) ) {
            	        alt177=1;
            	    }
            	    else if ( (LA177_0==MINUS) ) {
            	        alt177=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 177, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt177) {
            	        case 1 :
            	            {
            	            PLUS434=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7626); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS434_tree = (CommonTree)adaptor.create(PLUS434);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS434_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS435=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7629); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS435_tree = (CommonTree)adaptor.create(MINUS435);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS435_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7633);
            	    multiplyExpression436=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression436.getTree());
            	    }
            	    break;
            	default :
            	    break loop178;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR438=null;
        Token DIV439=null;
        Token MOD440=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression437 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression441 = null;
        CommonTree STAR438_tree=null;
        CommonTree DIV439_tree=null;
        CommonTree MOD440_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7647);
            unaryExpression437=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression437.getTree());
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);
                if ( (LA180_0==STAR||(LA180_0>=DIV && LA180_0<=MOD)) ) {
                    alt180=1;
                }
                switch (alt180) {
            	case 1 :
            	    {
            	    int alt179=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt179=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt179=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt179=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 179, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt179) {
            	        case 1 :
            	            {
            	            STAR438=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7652); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR438_tree = (CommonTree)adaptor.create(STAR438);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR438_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV439=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7655); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV439_tree = (CommonTree)adaptor.create(DIV439);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV439_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD440=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7658); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD440_tree = (CommonTree)adaptor.create(MOD440);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD440_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7662);
            	    unaryExpression441=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression441.getTree());
            	    }
            	    break;
            	default :
            	    break loop180;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS442=null;
        Token LPAREN446=null;
        Token RPAREN448=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty443 = null;
        EsperEPL2GrammarParser.constant_return constant444 = null;
        EsperEPL2GrammarParser.substitution_return substitution445 = null;
        EsperEPL2GrammarParser.expression_return expression447 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass449 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass450 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction451 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc452 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression453 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression454 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression455 = null;
        CommonTree d_tree=null;
        CommonTree MINUS442_tree=null;
        CommonTree LPAREN446_tree=null;
        CommonTree RPAREN448_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt183=9;
            alt183 = dfa183.predict(input);
            switch (alt183) {
                case 1 :
                    {
                    MINUS442=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS442);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7679);
                    eventProperty443=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty443.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7692);
                    constant444=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant444.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7697);
                    substitution445=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution445.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN446=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN446);
                    pushFollow(FOLLOW_expression_in_unaryExpression7704);
                    expression447=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression447.getTree());
                    RPAREN448=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN448);
                    int alt182=2;
                    int LA182_0 = input.LA(1);
                    if ( (LA182_0==DOT) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7711); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7713);
                            libFunctionNoClass449=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass449.getTree());
                            loop181:
                            do {
                                int alt181=2;
                                int LA181_0 = input.LA(1);
                                if ( (LA181_0==DOT) ) {
                                    alt181=1;
                                }
                                switch (alt181) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7718); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7720);
                            	    libFunctionNoClass450=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass450.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop181;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7757);
                    eventPropertyOrLibFunction451=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction451.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7769);
                    builtinFunc452=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc452.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7775);
                    arrayExpression453=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression453.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7780);
                    subSelectExpression454=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression454.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7785);
                    existsSubSelectExpression455=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression455.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr456 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7802);
            subQueryExpr456=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr456.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr457 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7824);
            subQueryExpr457=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr457.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS458=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr459 = null;
        CommonTree EXISTS458_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS458=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS458);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7848);
            subQueryExpr459=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr459.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN460=null;
        Token SELECT461=null;
        Token DISTINCT462=null;
        Token FROM464=null;
        Token WHERE466=null;
        Token RPAREN468=null;
        EsperEPL2GrammarParser.selectionList_return selectionList463 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr465 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause467 = null;
        CommonTree LPAREN460_tree=null;
        CommonTree SELECT461_tree=null;
        CommonTree DISTINCT462_tree=null;
        CommonTree FROM464_tree=null;
        CommonTree WHERE466_tree=null;
        CommonTree RPAREN468_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN460=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7881); if (state.failed) return retval;
            SELECT461=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7887); if (state.failed) return retval;
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==DISTINCT) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    DISTINCT462=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT462_tree = (CommonTree)adaptor.create(DISTINCT462);
                    adaptor.addChild(root_0, DISTINCT462_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr7893);
            selectionList463=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList463.getTree());
            FROM464=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7900); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7903);
            subSelectFilterExpr465=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr465.getTree());
            int alt185=2;
            int LA185_0 = input.LA(1);
            if ( (LA185_0==WHERE) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    {
                    WHERE466=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7911); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7914);
                    whereClause467=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause467.getTree());
                    }
                    break;
            }
            RPAREN468=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7923); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT470=null;
        Token DOT472=null;
        Token AS474=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression469 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression471 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression473 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT470_tree=null;
        CommonTree DOT472_tree=null;
        CommonTree AS474_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7947);
            eventFilterExpression469=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression469.getTree());
            int alt187=2;
            int LA187_0 = input.LA(1);
            if ( (LA187_0==DOT) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    {
                    DOT470=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT470);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7954);
                    viewExpression471=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression471.getTree());
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);
                        if ( (LA186_0==DOT) ) {
                            alt186=1;
                        }
                        switch (alt186) {
                    	case 1 :
                    	    {
                    	    DOT472=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7957); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT472);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7959);
                    	    viewExpression473=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression473.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop186;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt188=3;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==AS) ) {
                alt188=1;
            }
            else if ( (LA188_0==IDENT) ) {
                alt188=2;
            }
            switch (alt188) {
                case 1 :
                    {
                    AS474=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS474);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt189=3;
            int LA189_0 = input.LA(1);
            if ( (LA189_0==RETAINUNION) ) {
                alt189=1;
            }
            else if ( (LA189_0==RETAININTERSECTION) ) {
                alt189=2;
            }
            switch (alt189) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY475=null;
        Token COMMA477=null;
        Token RCURLY479=null;
        EsperEPL2GrammarParser.expression_return expression476 = null;
        EsperEPL2GrammarParser.expression_return expression478 = null;
        CommonTree LCURLY475_tree=null;
        CommonTree COMMA477_tree=null;
        CommonTree RCURLY479_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY475=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY475);
            int alt191=2;
            int LA191_0 = input.LA(1);
            if ( (LA191_0==WINDOW||LA191_0==ESCAPE||(LA191_0>=NOT_EXPR && LA191_0<=EVERY_EXPR)||(LA191_0>=SUM && LA191_0<=COUNT)||LA191_0==CASE||LA191_0==OUTER||(LA191_0>=JOIN && LA191_0<=FULL)||(LA191_0>=EVENTS && LA191_0<=LAST)||(LA191_0>=UNIDIRECTIONAL && LA191_0<=CURRENT_TIMESTAMP)||LA191_0==SNAPSHOT||(LA191_0>=VARIABLE && LA191_0<=INDEX)||(LA191_0>=BOOLEAN_TRUE && LA191_0<=VALUE_NULL)||(LA191_0>=DEFINE && LA191_0<=MATCHES)||LA191_0==WHILE||(LA191_0>=MERGE && LA191_0<=MATCHED)||LA191_0==NUM_DOUBLE||(LA191_0>=IDENT && LA191_0<=LPAREN)||(LA191_0>=PLUS && LA191_0<=QUESTION)||(LA191_0>=STRING_LITERAL && LA191_0<=QUOTED_STRING_LITERAL)||LA191_0==MINUS||LA191_0==LCURLY||LA191_0==NUM_INT||(LA191_0>=TICKED_STRING_LITERAL && LA191_0<=NUM_FLOAT)) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8030);
                    expression476=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression476.getTree());
                    loop190:
                    do {
                        int alt190=2;
                        int LA190_0 = input.LA(1);
                        if ( (LA190_0==COMMA) ) {
                            alt190=1;
                        }
                        switch (alt190) {
                    	case 1 :
                    	    {
                    	    COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8033); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA477);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8035);
                    	    expression478=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression478.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop190;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY479=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY479);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM480=null;
        Token LPAREN481=null;
        Token ALL482=null;
        Token DISTINCT483=null;
        Token RPAREN485=null;
        Token AVG486=null;
        Token LPAREN487=null;
        Token ALL488=null;
        Token DISTINCT489=null;
        Token RPAREN491=null;
        Token COUNT492=null;
        Token LPAREN493=null;
        Token ALL494=null;
        Token DISTINCT495=null;
        Token STAR497=null;
        Token RPAREN498=null;
        Token MEDIAN499=null;
        Token LPAREN500=null;
        Token ALL501=null;
        Token DISTINCT502=null;
        Token RPAREN504=null;
        Token STDDEV505=null;
        Token LPAREN506=null;
        Token ALL507=null;
        Token DISTINCT508=null;
        Token RPAREN510=null;
        Token AVEDEV511=null;
        Token LPAREN512=null;
        Token ALL513=null;
        Token DISTINCT514=null;
        Token RPAREN516=null;
        Token COALESCE520=null;
        Token LPAREN521=null;
        Token COMMA523=null;
        Token COMMA525=null;
        Token RPAREN527=null;
        Token PREVIOUS528=null;
        Token LPAREN529=null;
        Token COMMA531=null;
        Token RPAREN533=null;
        Token PREVIOUSTAIL534=null;
        Token LPAREN535=null;
        Token COMMA537=null;
        Token RPAREN539=null;
        Token PREVIOUSCOUNT540=null;
        Token LPAREN541=null;
        Token RPAREN543=null;
        Token PREVIOUSWINDOW544=null;
        Token LPAREN545=null;
        Token RPAREN547=null;
        Token PRIOR548=null;
        Token LPAREN549=null;
        Token NUM_INT550=null;
        Token COMMA551=null;
        Token RPAREN553=null;
        Token INSTANCEOF554=null;
        Token LPAREN555=null;
        Token COMMA557=null;
        Token COMMA559=null;
        Token RPAREN561=null;
        Token TYPEOF562=null;
        Token LPAREN563=null;
        Token RPAREN565=null;
        Token CAST566=null;
        Token LPAREN567=null;
        Token COMMA569=null;
        Token AS570=null;
        Token RPAREN572=null;
        Token EXISTS573=null;
        Token LPAREN574=null;
        Token RPAREN576=null;
        Token CURRENT_TIMESTAMP577=null;
        Token LPAREN578=null;
        Token RPAREN579=null;
        EsperEPL2GrammarParser.expression_return expression484 = null;
        EsperEPL2GrammarParser.expression_return expression490 = null;
        EsperEPL2GrammarParser.expression_return expression496 = null;
        EsperEPL2GrammarParser.expression_return expression503 = null;
        EsperEPL2GrammarParser.expression_return expression509 = null;
        EsperEPL2GrammarParser.expression_return expression515 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation517 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation518 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation519 = null;
        EsperEPL2GrammarParser.expression_return expression522 = null;
        EsperEPL2GrammarParser.expression_return expression524 = null;
        EsperEPL2GrammarParser.expression_return expression526 = null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        EsperEPL2GrammarParser.expression_return expression532 = null;
        EsperEPL2GrammarParser.expression_return expression536 = null;
        EsperEPL2GrammarParser.expression_return expression538 = null;
        EsperEPL2GrammarParser.expression_return expression542 = null;
        EsperEPL2GrammarParser.expression_return expression546 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty552 = null;
        EsperEPL2GrammarParser.expression_return expression556 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier558 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier560 = null;
        EsperEPL2GrammarParser.expression_return expression564 = null;
        EsperEPL2GrammarParser.expression_return expression568 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier571 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty575 = null;
        CommonTree SUM480_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree ALL482_tree=null;
        CommonTree DISTINCT483_tree=null;
        CommonTree RPAREN485_tree=null;
        CommonTree AVG486_tree=null;
        CommonTree LPAREN487_tree=null;
        CommonTree ALL488_tree=null;
        CommonTree DISTINCT489_tree=null;
        CommonTree RPAREN491_tree=null;
        CommonTree COUNT492_tree=null;
        CommonTree LPAREN493_tree=null;
        CommonTree ALL494_tree=null;
        CommonTree DISTINCT495_tree=null;
        CommonTree STAR497_tree=null;
        CommonTree RPAREN498_tree=null;
        CommonTree MEDIAN499_tree=null;
        CommonTree LPAREN500_tree=null;
        CommonTree ALL501_tree=null;
        CommonTree DISTINCT502_tree=null;
        CommonTree RPAREN504_tree=null;
        CommonTree STDDEV505_tree=null;
        CommonTree LPAREN506_tree=null;
        CommonTree ALL507_tree=null;
        CommonTree DISTINCT508_tree=null;
        CommonTree RPAREN510_tree=null;
        CommonTree AVEDEV511_tree=null;
        CommonTree LPAREN512_tree=null;
        CommonTree ALL513_tree=null;
        CommonTree DISTINCT514_tree=null;
        CommonTree RPAREN516_tree=null;
        CommonTree COALESCE520_tree=null;
        CommonTree LPAREN521_tree=null;
        CommonTree COMMA523_tree=null;
        CommonTree COMMA525_tree=null;
        CommonTree RPAREN527_tree=null;
        CommonTree PREVIOUS528_tree=null;
        CommonTree LPAREN529_tree=null;
        CommonTree COMMA531_tree=null;
        CommonTree RPAREN533_tree=null;
        CommonTree PREVIOUSTAIL534_tree=null;
        CommonTree LPAREN535_tree=null;
        CommonTree COMMA537_tree=null;
        CommonTree RPAREN539_tree=null;
        CommonTree PREVIOUSCOUNT540_tree=null;
        CommonTree LPAREN541_tree=null;
        CommonTree RPAREN543_tree=null;
        CommonTree PREVIOUSWINDOW544_tree=null;
        CommonTree LPAREN545_tree=null;
        CommonTree RPAREN547_tree=null;
        CommonTree PRIOR548_tree=null;
        CommonTree LPAREN549_tree=null;
        CommonTree NUM_INT550_tree=null;
        CommonTree COMMA551_tree=null;
        CommonTree RPAREN553_tree=null;
        CommonTree INSTANCEOF554_tree=null;
        CommonTree LPAREN555_tree=null;
        CommonTree COMMA557_tree=null;
        CommonTree COMMA559_tree=null;
        CommonTree RPAREN561_tree=null;
        CommonTree TYPEOF562_tree=null;
        CommonTree LPAREN563_tree=null;
        CommonTree RPAREN565_tree=null;
        CommonTree CAST566_tree=null;
        CommonTree LPAREN567_tree=null;
        CommonTree COMMA569_tree=null;
        CommonTree AS570_tree=null;
        CommonTree RPAREN572_tree=null;
        CommonTree EXISTS573_tree=null;
        CommonTree LPAREN574_tree=null;
        CommonTree RPAREN576_tree=null;
        CommonTree CURRENT_TIMESTAMP577_tree=null;
        CommonTree LPAREN578_tree=null;
        CommonTree RPAREN579_tree=null;
        try {
            int alt205=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt205=1;
                }
                break;
            case AVG:
                {
                alt205=2;
                }
                break;
            case COUNT:
                {
                alt205=3;
                }
                break;
            case MEDIAN:
                {
                alt205=4;
                }
                break;
            case STDDEV:
                {
                alt205=5;
                }
                break;
            case AVEDEV:
                {
                alt205=6;
                }
                break;
            case FIRST:
                {
                alt205=7;
                }
                break;
            case LAST:
                {
                alt205=8;
                }
                break;
            case WINDOW:
                {
                alt205=9;
                }
                break;
            case COALESCE:
                {
                alt205=10;
                }
                break;
            case PREVIOUS:
                {
                alt205=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt205=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt205=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt205=14;
                }
                break;
            case PRIOR:
                {
                alt205=15;
                }
                break;
            case INSTANCEOF:
                {
                alt205=16;
                }
                break;
            case TYPEOF:
                {
                alt205=17;
                }
                break;
            case CAST:
                {
                alt205=18;
                }
                break;
            case EXISTS:
                {
                alt205=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt205=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);
                throw nvae;
            }
            switch (alt205) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM480=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM480_tree = (CommonTree)adaptor.create(SUM480);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM480_tree, root_0);
                    }
                    LPAREN481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8068); if (state.failed) return retval;
                    int alt192=3;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==ALL) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==DISTINCT) ) {
                        alt192=2;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            ALL482=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8072); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT483=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8077); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT483_tree = (CommonTree)adaptor.create(DISTINCT483);
                            adaptor.addChild(root_0, DISTINCT483_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8081);
                    expression484=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression484.getTree());
                    RPAREN485=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8083); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG486=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG486_tree = (CommonTree)adaptor.create(AVG486);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG486_tree, root_0);
                    }
                    LPAREN487=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8092); if (state.failed) return retval;
                    int alt193=3;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==ALL) ) {
                        alt193=1;
                    }
                    else if ( (LA193_0==DISTINCT) ) {
                        alt193=2;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            ALL488=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8096); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT489=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8101); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT489_tree = (CommonTree)adaptor.create(DISTINCT489);
                            adaptor.addChild(root_0, DISTINCT489_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8105);
                    expression490=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression490.getTree());
                    RPAREN491=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8107); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT492=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT492_tree = (CommonTree)adaptor.create(COUNT492);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT492_tree, root_0);
                    }
                    LPAREN493=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8116); if (state.failed) return retval;
                    int alt195=2;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==WINDOW||LA195_0==ESCAPE||(LA195_0>=NOT_EXPR && LA195_0<=EVERY_EXPR)||(LA195_0>=SUM && LA195_0<=COUNT)||LA195_0==CASE||LA195_0==OUTER||(LA195_0>=JOIN && LA195_0<=FULL)||(LA195_0>=DISTINCT && LA195_0<=ALL)||(LA195_0>=EVENTS && LA195_0<=LAST)||(LA195_0>=UNIDIRECTIONAL && LA195_0<=CURRENT_TIMESTAMP)||LA195_0==SNAPSHOT||(LA195_0>=VARIABLE && LA195_0<=INDEX)||(LA195_0>=BOOLEAN_TRUE && LA195_0<=VALUE_NULL)||(LA195_0>=DEFINE && LA195_0<=MATCHES)||LA195_0==WHILE||(LA195_0>=MERGE && LA195_0<=MATCHED)||LA195_0==NUM_DOUBLE||(LA195_0>=IDENT && LA195_0<=LPAREN)||(LA195_0>=PLUS && LA195_0<=QUESTION)||(LA195_0>=STRING_LITERAL && LA195_0<=QUOTED_STRING_LITERAL)||LA195_0==MINUS||LA195_0==LCURLY||LA195_0==NUM_INT||(LA195_0>=TICKED_STRING_LITERAL && LA195_0<=NUM_FLOAT)) ) {
                        alt195=1;
                    }
                    else if ( (LA195_0==STAR) ) {
                        alt195=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 0, input);
                        throw nvae;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            {
                            int alt194=3;
                            int LA194_0 = input.LA(1);
                            if ( (LA194_0==ALL) ) {
                                alt194=1;
                            }
                            else if ( (LA194_0==DISTINCT) ) {
                                alt194=2;
                            }
                            switch (alt194) {
                                case 1 :
                                    {
                                    ALL494=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8128); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT495=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8133); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT495_tree = (CommonTree)adaptor.create(DISTINCT495);
                                    adaptor.addChild(root_0, DISTINCT495_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8137);
                            expression496=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression496.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR497=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8148); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN498=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8159); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN499=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN499_tree = (CommonTree)adaptor.create(MEDIAN499);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN499_tree, root_0);
                    }
                    LPAREN500=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8168); if (state.failed) return retval;
                    int alt196=3;
                    int LA196_0 = input.LA(1);
                    if ( (LA196_0==ALL) ) {
                        alt196=1;
                    }
                    else if ( (LA196_0==DISTINCT) ) {
                        alt196=2;
                    }
                    switch (alt196) {
                        case 1 :
                            {
                            ALL501=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8172); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT502=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8177); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT502_tree = (CommonTree)adaptor.create(DISTINCT502);
                            adaptor.addChild(root_0, DISTINCT502_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8181);
                    expression503=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression503.getTree());
                    RPAREN504=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8183); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV505=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV505_tree = (CommonTree)adaptor.create(STDDEV505);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV505_tree, root_0);
                    }
                    LPAREN506=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8192); if (state.failed) return retval;
                    int alt197=3;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==ALL) ) {
                        alt197=1;
                    }
                    else if ( (LA197_0==DISTINCT) ) {
                        alt197=2;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            ALL507=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8196); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT508=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8201); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT508_tree = (CommonTree)adaptor.create(DISTINCT508);
                            adaptor.addChild(root_0, DISTINCT508_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8205);
                    expression509=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression509.getTree());
                    RPAREN510=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8207); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV511=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV511_tree = (CommonTree)adaptor.create(AVEDEV511);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV511_tree, root_0);
                    }
                    LPAREN512=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8216); if (state.failed) return retval;
                    int alt198=3;
                    int LA198_0 = input.LA(1);
                    if ( (LA198_0==ALL) ) {
                        alt198=1;
                    }
                    else if ( (LA198_0==DISTINCT) ) {
                        alt198=2;
                    }
                    switch (alt198) {
                        case 1 :
                            {
                            ALL513=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8220); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT514=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8225); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT514_tree = (CommonTree)adaptor.create(DISTINCT514);
                            adaptor.addChild(root_0, DISTINCT514_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8229);
                    expression515=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression515.getTree());
                    RPAREN516=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8231); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8237);
                    firstAggregation517=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation517.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8242);
                    lastAggregation518=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation518.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8247);
                    windowAggregation519=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation519.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE520=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE520_tree = (CommonTree)adaptor.create(COALESCE520);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE520_tree, root_0);
                    }
                    LPAREN521=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8255); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8258);
                    expression522=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression522.getTree());
                    COMMA523=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8260); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8263);
                    expression524=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression524.getTree());
                    loop199:
                    do {
                        int alt199=2;
                        int LA199_0 = input.LA(1);
                        if ( (LA199_0==COMMA) ) {
                            alt199=1;
                        }
                        switch (alt199) {
                    	case 1 :
                    	    {
                    	    COMMA525=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8266); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8269);
                    	    expression526=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop199;
                        }
                    } while (true);
                    RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8273); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS528=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS528_tree = (CommonTree)adaptor.create(PREVIOUS528);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS528_tree, root_0);
                    }
                    LPAREN529=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8282); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8285);
                    expression530=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression530.getTree());
                    int alt200=2;
                    int LA200_0 = input.LA(1);
                    if ( (LA200_0==COMMA) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            {
                            COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8288); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8291);
                            expression532=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression532.getTree());
                            }
                            break;
                    }
                    RPAREN533=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8295); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL534=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL534_tree = (CommonTree)adaptor.create(PREVIOUSTAIL534);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL534_tree, root_0);
                    }
                    LPAREN535=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8304); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8307);
                    expression536=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
                    int alt201=2;
                    int LA201_0 = input.LA(1);
                    if ( (LA201_0==COMMA) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            {
                            COMMA537=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8310); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8313);
                            expression538=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression538.getTree());
                            }
                            break;
                    }
                    RPAREN539=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8317); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT540=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT540_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT540);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT540_tree, root_0);
                    }
                    LPAREN541=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8326); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8329);
                    expression542=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression542.getTree());
                    RPAREN543=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8331); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW544=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW544_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW544);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW544_tree, root_0);
                    }
                    LPAREN545=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8340); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8343);
                    expression546=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression546.getTree());
                    RPAREN547=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8345); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR548=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR548_tree = (CommonTree)adaptor.create(PRIOR548);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR548_tree, root_0);
                    }
                    LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8354); if (state.failed) return retval;
                    NUM_INT550=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT550_tree = (CommonTree)adaptor.create(NUM_INT550);
                    adaptor.addChild(root_0, NUM_INT550_tree);
                    }
                    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8359); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8362);
                    eventProperty552=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty552.getTree());
                    RPAREN553=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8364); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF554=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF554_tree = (CommonTree)adaptor.create(INSTANCEOF554);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF554_tree, root_0);
                    }
                    LPAREN555=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8377); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8380);
                    expression556=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression556.getTree());
                    COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8382); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8385);
                    classIdentifier558=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier558.getTree());
                    loop202:
                    do {
                        int alt202=2;
                        int LA202_0 = input.LA(1);
                        if ( (LA202_0==COMMA) ) {
                            alt202=1;
                        }
                        switch (alt202) {
                    	case 1 :
                    	    {
                    	    COMMA559=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8388); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8391);
                    	    classIdentifier560=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier560.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop202;
                        }
                    } while (true);
                    RPAREN561=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8395); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF562=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc8401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF562_tree = (CommonTree)adaptor.create(TYPEOF562);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF562_tree, root_0);
                    }
                    LPAREN563=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8404); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8407);
                    expression564=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression564.getTree());
                    RPAREN565=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8409); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST566=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST566_tree = (CommonTree)adaptor.create(CAST566);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST566_tree, root_0);
                    }
                    LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8418); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8421);
                    expression568=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression568.getTree());
                    int alt203=2;
                    int LA203_0 = input.LA(1);
                    if ( (LA203_0==COMMA) ) {
                        alt203=1;
                    }
                    else if ( (LA203_0==AS) ) {
                        alt203=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 0, input);
                        throw nvae;
                    }
                    switch (alt203) {
                        case 1 :
                            {
                            COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8424); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS570=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8429); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8433);
                    classIdentifier571=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier571.getTree());
                    RPAREN572=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8435); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS573=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS573_tree = (CommonTree)adaptor.create(EXISTS573);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS573_tree, root_0);
                    }
                    LPAREN574=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8444); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8447);
                    eventProperty575=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty575.getTree());
                    RPAREN576=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8449); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP577=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP577_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP577);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP577_tree, root_0);
                    }
                    int alt204=2;
                    int LA204_0 = input.LA(1);
                    if ( (LA204_0==LPAREN) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            {
                            LPAREN578=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8459); if (state.failed) return retval;
                            RPAREN579=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8462); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST580=null;
        Token LPAREN581=null;
        Token COMMA583=null;
        Token RPAREN585=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr582 = null;
        EsperEPL2GrammarParser.expression_return expression584 = null;
        CommonTree FIRST580_tree=null;
        CommonTree LPAREN581_tree=null;
        CommonTree COMMA583_tree=null;
        CommonTree RPAREN585_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST580=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST580);
            LPAREN581=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN581);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8481);
            accessAggExpr582=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr582.getTree());
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( (LA206_0==COMMA) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    COMMA583=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA583);
                    pushFollow(FOLLOW_expression_in_firstAggregation8486);
                    expression584=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression584.getTree());
                    }
                    break;
            }
            RPAREN585=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN585);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST586=null;
        Token LPAREN587=null;
        Token COMMA589=null;
        Token RPAREN591=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr588 = null;
        EsperEPL2GrammarParser.expression_return expression590 = null;
        CommonTree LAST586_tree=null;
        CommonTree LPAREN587_tree=null;
        CommonTree COMMA589_tree=null;
        CommonTree RPAREN591_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST586=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST586);
            LPAREN587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN587);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8519);
            accessAggExpr588=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr588.getTree());
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( (LA207_0==COMMA) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    COMMA589=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA589);
                    pushFollow(FOLLOW_expression_in_lastAggregation8524);
                    expression590=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression590.getTree());
                    }
                    break;
            }
            RPAREN591=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN591);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW592=null;
        Token LPAREN593=null;
        Token RPAREN595=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr594 = null;
        CommonTree WINDOW592_tree=null;
        CommonTree LPAREN593_tree=null;
        CommonTree RPAREN595_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW592=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW592);
            LPAREN593=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN593);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8558);
            accessAggExpr594=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr594.getTree());
            RPAREN595=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN595);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector596 = null;
        EsperEPL2GrammarParser.expression_return expression597 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt208=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt208=1;
                }
                break;
            case IDENT:
                {
                int LA208_2 = input.LA(2);
                if ( (LA208_2==DOT) ) {
                    int LA208_69 = input.LA(3);
                    if ( (LA208_69==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt208=2;
                    }
                    else if ( (LA208_69==WINDOW||LA208_69==ESCAPE||LA208_69==EVERY_EXPR||(LA208_69>=SUM && LA208_69<=COUNT)||LA208_69==OUTER||(LA208_69>=JOIN && LA208_69<=FULL)||(LA208_69>=EVENTS && LA208_69<=LAST)||(LA208_69>=UNIDIRECTIONAL && LA208_69<=PREVIOUSTAIL)||LA208_69==PRIOR||(LA208_69>=WEEKDAY && LA208_69<=CAST)||LA208_69==SNAPSHOT||(LA208_69>=VARIABLE && LA208_69<=INDEX)||(LA208_69>=DEFINE && LA208_69<=MATCHES)||LA208_69==WHILE||(LA208_69>=MERGE && LA208_69<=MATCHED)||LA208_69==IDENT||LA208_69==TICKED_STRING_LITERAL) ) {
                        alt208=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA208_2>=IN_SET && LA208_2<=REGEXP)||(LA208_2>=OR_EXPR && LA208_2<=NOT_EXPR)||LA208_2==IS||LA208_2==COMMA||(LA208_2>=LPAREN && LA208_2<=EQUALS)||LA208_2==LBRACK||(LA208_2>=STAR && LA208_2<=QUESTION)||(LA208_2>=BAND && LA208_2<=MOD)||LA208_2==ESCAPECHAR) ) {
                    alt208=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt208=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);
                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8606);
                    propertyStreamSelector596=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector596.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8611);
                    expression597=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression597.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX598=null;
        Token MIN599=null;
        Token LPAREN600=null;
        Token COMMA602=null;
        Token COMMA604=null;
        Token RPAREN606=null;
        EsperEPL2GrammarParser.expression_return expression601 = null;
        EsperEPL2GrammarParser.expression_return expression603 = null;
        EsperEPL2GrammarParser.expression_return expression605 = null;
        CommonTree MAX598_tree=null;
        CommonTree MIN599_tree=null;
        CommonTree LPAREN600_tree=null;
        CommonTree COMMA602_tree=null;
        CommonTree COMMA604_tree=null;
        CommonTree RPAREN606_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==MAX) ) {
                alt209=1;
            }
            else if ( (LA209_0==MIN) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);
                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    {
                    MAX598=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX598_tree = (CommonTree)adaptor.create(MAX598);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX598_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN599=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN599_tree = (CommonTree)adaptor.create(MIN599);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN599_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN600=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8633); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8636);
            expression601=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression601.getTree());
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==COMMA) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    COMMA602=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8639); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8642);
                    expression603=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression603.getTree());
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);
                        if ( (LA210_0==COMMA) ) {
                            alt210=1;
                        }
                        switch (alt210) {
                    	case 1 :
                    	    {
                    	    COMMA604=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8645); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8648);
                    	    expression605=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression605.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop210;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN606=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8655); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty607 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction608 = null;
        try {
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==IDENT) ) {
                int LA212_1 = input.LA(2);
                if ( (LA212_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_288 = input.LA(4);
                        if ( ((LA212_288>=IN_SET && LA212_288<=REGEXP)||(LA212_288>=OR_EXPR && LA212_288<=NOT_EXPR)||LA212_288==IS||LA212_288==COMMA||LA212_288==EQUALS||(LA212_288>=STAR && LA212_288<=PLUS)||(LA212_288>=BAND && LA212_288<=MOD)) ) {
                            alt212=2;
                        }
                        else if ( (LA212_288==RPAREN) ) {
                            int LA212_682 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 682, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 288, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_289 = input.LA(4);
                        if ( (LA212_289==RPAREN) ) {
                            int LA212_688 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 688, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_289>=IN_SET && LA212_289<=REGEXP)||(LA212_289>=OR_EXPR && LA212_289<=NOT_EXPR)||LA212_289==IS||LA212_289==COMMA||LA212_289==EQUALS||(LA212_289>=STAR && LA212_289<=PLUS)||(LA212_289>=BAND && LA212_289<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 289, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 48, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_1==DOT) ) {
                    int LA212_49 = input.LA(3);
                    if ( (LA212_49==IDENT) ) {
                        int LA212_358 = input.LA(4);
                        if ( (LA212_358==LPAREN) ) {
                            int LA212_714 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 714, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_358==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_358==DOT) ) {
                            int LA212_773 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 773, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 358, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_49==TICKED_STRING_LITERAL) ) {
                        int LA212_359 = input.LA(4);
                        if ( (LA212_359==LPAREN) ) {
                            int LA212_774 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 774, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_359==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_359==DOT) ) {
                            int LA212_833 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 833, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 359, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_49==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==MAX) ) {
                        int LA212_366 = input.LA(4);
                        if ( (LA212_366==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==LPAREN) ) {
                            int LA212_836 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 836, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_366==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_366==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 366, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_49==MIN) ) {
                        int LA212_367 = input.LA(4);
                        if ( (LA212_367==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==LPAREN) ) {
                            int LA212_896 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 896, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_367==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_367==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 367, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_49==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_49==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 49, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==TICKED_STRING_LITERAL) ) {
                int LA212_2 = input.LA(2);
                if ( (LA212_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_405 = input.LA(4);
                        if ( ((LA212_405>=IN_SET && LA212_405<=REGEXP)||(LA212_405>=OR_EXPR && LA212_405<=NOT_EXPR)||LA212_405==IS||LA212_405==COMMA||LA212_405==EQUALS||(LA212_405>=STAR && LA212_405<=PLUS)||(LA212_405>=BAND && LA212_405<=MOD)) ) {
                            alt212=2;
                        }
                        else if ( (LA212_405==RPAREN) ) {
                            int LA212_974 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 974, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 405, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_406 = input.LA(4);
                        if ( (LA212_406==RPAREN) ) {
                            int LA212_980 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 980, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_406>=IN_SET && LA212_406<=REGEXP)||(LA212_406>=OR_EXPR && LA212_406<=NOT_EXPR)||LA212_406==IS||LA212_406==COMMA||LA212_406==EQUALS||(LA212_406>=STAR && LA212_406<=PLUS)||(LA212_406>=BAND && LA212_406<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 406, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_2==DOT) ) {
                    int LA212_109 = input.LA(3);
                    if ( (LA212_109==IDENT) ) {
                        int LA212_475 = input.LA(4);
                        if ( (LA212_475==LPAREN) ) {
                            int LA212_1006 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1006, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_475==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_475==DOT) ) {
                            int LA212_1065 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1065, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 475, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_109==TICKED_STRING_LITERAL) ) {
                        int LA212_476 = input.LA(4);
                        if ( (LA212_476==LPAREN) ) {
                            int LA212_1066 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1066, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_476==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_476==DOT) ) {
                            int LA212_1125 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1125, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 476, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_109==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==MAX) ) {
                        int LA212_483 = input.LA(4);
                        if ( (LA212_483==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==LPAREN) ) {
                            int LA212_1128 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1128, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_483==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_483==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 483, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_109==MIN) ) {
                        int LA212_484 = input.LA(4);
                        if ( (LA212_484==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==LPAREN) ) {
                            int LA212_1188 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1188, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_484==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_484==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 484, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_109==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_109==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 109, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MAX) ) {
                int LA212_9 = input.LA(2);
                if ( (LA212_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_522 = input.LA(4);
                        if ( ((LA212_522>=IN_SET && LA212_522<=REGEXP)||(LA212_522>=OR_EXPR && LA212_522<=NOT_EXPR)||LA212_522==IS||LA212_522==COMMA||LA212_522==EQUALS||(LA212_522>=STAR && LA212_522<=PLUS)||(LA212_522>=BAND && LA212_522<=MOD)) ) {
                            alt212=2;
                        }
                        else if ( (LA212_522==RPAREN) ) {
                            int LA212_1266 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1266, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 522, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_523 = input.LA(4);
                        if ( (LA212_523==RPAREN) ) {
                            int LA212_1272 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1272, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_523>=IN_SET && LA212_523<=REGEXP)||(LA212_523>=OR_EXPR && LA212_523<=NOT_EXPR)||LA212_523==IS||LA212_523==COMMA||LA212_523==EQUALS||(LA212_523>=STAR && LA212_523<=PLUS)||(LA212_523>=BAND && LA212_523<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 523, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==MIN) ) {
                int LA212_10 = input.LA(2);
                if ( (LA212_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_592 = input.LA(4);
                        if ( ((LA212_592>=IN_SET && LA212_592<=REGEXP)||(LA212_592>=OR_EXPR && LA212_592<=NOT_EXPR)||LA212_592==IS||LA212_592==COMMA||LA212_592==EQUALS||(LA212_592>=STAR && LA212_592<=PLUS)||(LA212_592>=BAND && LA212_592<=MOD)) ) {
                            alt212=2;
                        }
                        else if ( (LA212_592==RPAREN) ) {
                            int LA212_1318 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1318, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 592, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_593 = input.LA(4);
                        if ( (LA212_593==RPAREN) ) {
                            int LA212_1324 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1324, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_593>=IN_SET && LA212_593<=REGEXP)||(LA212_593>=OR_EXPR && LA212_593<=NOT_EXPR)||LA212_593==IS||LA212_593==COMMA||LA212_593==EQUALS||(LA212_593>=STAR && LA212_593<=PLUS)||(LA212_593>=BAND && LA212_593<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 593, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 230, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);
                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8674);
                    eventProperty607=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty607.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8679);
                    libFunction608=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction608.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT610=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass609 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass611 = null;
        CommonTree DOT610_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8691);
            libFunctionWithClass609=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass609.getTree());
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);
                if ( (LA213_0==DOT) ) {
                    alt213=1;
                }
                switch (alt213) {
            	case 1 :
            	    {
            	    DOT610=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8694); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT610);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8696);
            	    libFunctionNoClass611=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass611.getTree());
            	    }
            	    break;
            	default :
            	    break loop213;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT613=null;
        Token LPAREN615=null;
        Token RPAREN617=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy612 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent614 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs616 = null;
        CommonTree DOT613_tree=null;
        CommonTree LPAREN615_tree=null;
        CommonTree RPAREN617_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==IDENT) ) {
                int LA214_1 = input.LA(2);
                if ( (LA214_1==DOT) ) {
                    alt214=1;
                }
            }
            else if ( (LA214_0==TICKED_STRING_LITERAL) ) {
                int LA214_2 = input.LA(2);
                if ( (LA214_2==DOT) ) {
                    alt214=1;
                }
            }
            switch (alt214) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8726);
                    classIdentifierNonGreedy612=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy612.getTree());
                    DOT613=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT613);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8732);
            funcIdent614=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent614.getTree());
            LPAREN615=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN615);
            int alt215=2;
            int LA215_0 = input.LA(1);
            if ( (LA215_0==WINDOW||LA215_0==ESCAPE||(LA215_0>=NOT_EXPR && LA215_0<=EVERY_EXPR)||(LA215_0>=SUM && LA215_0<=COUNT)||LA215_0==CASE||LA215_0==OUTER||(LA215_0>=JOIN && LA215_0<=FULL)||(LA215_0>=DISTINCT && LA215_0<=ALL)||(LA215_0>=EVENTS && LA215_0<=LAST)||(LA215_0>=UNIDIRECTIONAL && LA215_0<=CURRENT_TIMESTAMP)||LA215_0==SNAPSHOT||(LA215_0>=VARIABLE && LA215_0<=INDEX)||(LA215_0>=BOOLEAN_TRUE && LA215_0<=VALUE_NULL)||(LA215_0>=DEFINE && LA215_0<=MATCHES)||LA215_0==WHILE||(LA215_0>=MERGE && LA215_0<=MATCHED)||LA215_0==NUM_DOUBLE||(LA215_0>=IDENT && LA215_0<=LPAREN)||(LA215_0>=PLUS && LA215_0<=QUESTION)||(LA215_0>=STRING_LITERAL && LA215_0<=QUOTED_STRING_LITERAL)||LA215_0==MINUS||LA215_0==LCURLY||LA215_0==NUM_INT||(LA215_0>=TICKED_STRING_LITERAL && LA215_0<=NUM_FLOAT)) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8737);
                    libFunctionArgs616=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs616.getTree());
                    }
                    break;
            }
            RPAREN617=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN617);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN619=null;
        Token RPAREN621=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent618 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs620 = null;
        CommonTree LPAREN619_tree=null;
        CommonTree RPAREN621_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8770);
            funcIdent618=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent618.getTree());
            LPAREN619=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN619);
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==WINDOW||LA216_0==ESCAPE||(LA216_0>=NOT_EXPR && LA216_0<=EVERY_EXPR)||(LA216_0>=SUM && LA216_0<=COUNT)||LA216_0==CASE||LA216_0==OUTER||(LA216_0>=JOIN && LA216_0<=FULL)||(LA216_0>=DISTINCT && LA216_0<=ALL)||(LA216_0>=EVENTS && LA216_0<=LAST)||(LA216_0>=UNIDIRECTIONAL && LA216_0<=CURRENT_TIMESTAMP)||LA216_0==SNAPSHOT||(LA216_0>=VARIABLE && LA216_0<=INDEX)||(LA216_0>=BOOLEAN_TRUE && LA216_0<=VALUE_NULL)||(LA216_0>=DEFINE && LA216_0<=MATCHES)||LA216_0==WHILE||(LA216_0>=MERGE && LA216_0<=MATCHED)||LA216_0==NUM_DOUBLE||(LA216_0>=IDENT && LA216_0<=LPAREN)||(LA216_0>=PLUS && LA216_0<=QUESTION)||(LA216_0>=STRING_LITERAL && LA216_0<=QUOTED_STRING_LITERAL)||LA216_0==MINUS||LA216_0==LCURLY||LA216_0==NUM_INT||(LA216_0>=TICKED_STRING_LITERAL && LA216_0<=NUM_FLOAT)) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8775);
                    libFunctionArgs620=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs620.getTree());
                    }
                    break;
            }
            RPAREN621=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN621);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent622 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt217=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt217=1;
                }
                break;
            case MAX:
                {
                alt217=2;
                }
                break;
            case MIN:
                {
                alt217=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);
                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8805);
                    escapableIdent622=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent622.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL623=null;
        Token DISTINCT624=null;
        Token COMMA626=null;
        EsperEPL2GrammarParser.expression_return expression625 = null;
        EsperEPL2GrammarParser.expression_return expression627 = null;
        CommonTree ALL623_tree=null;
        CommonTree DISTINCT624_tree=null;
        CommonTree COMMA626_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt218=3;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==ALL) ) {
                alt218=1;
            }
            else if ( (LA218_0==DISTINCT) ) {
                alt218=2;
            }
            switch (alt218) {
                case 1 :
                    {
                    ALL623=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8842); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT624=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT624_tree = (CommonTree)adaptor.create(DISTINCT624);
                    adaptor.addChild(root_0, DISTINCT624_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs8851);
            expression625=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression625.getTree());
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);
                if ( (LA219_0==COMMA) ) {
                    alt219=1;
                }
                switch (alt219) {
            	case 1 :
            	    {
            	    COMMA626=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8854); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8857);
            	    expression627=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression627.getTree());
            	    }
            	    break;
            	default :
            	    break loop219;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR629=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr628 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr630 = null;
        CommonTree AND_EXPR629_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8871);
            concatenationExpr628=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr628.getTree());
            AND_EXPR629=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8873); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8876);
            concatenationExpr630=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr630.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression631 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression8904);
            followedByExpression631=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression631.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression632 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat633 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8923);
            orExpression632=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression632.getTree());
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);
                if ( ((LA220_0>=FOLLOWED_BY && LA220_0<=FOLLOWMAX_BEGIN)) ) {
                    alt220=1;
                }
                switch (alt220) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression8926);
            	    followedByRepeat633=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat633.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop220;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END635=null;
        EsperEPL2GrammarParser.expression_return expression634 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression636 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END635_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt221=2;
            int LA221_0 = input.LA(1);
            if ( (LA221_0==FOLLOWED_BY) ) {
                alt221=1;
            }
            else if ( (LA221_0==FOLLOWMAX_BEGIN) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);
                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat8979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat8986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat8988);
                    expression634=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression634.getTree());
                    FOLLOWMAX_END635=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat8990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END635);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat8994);
            orExpression636=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression636.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression637 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression638 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression9023);
            andExpression637=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression637.getTree());
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);
                if ( (LA222_0==OR_EXPR) ) {
                    alt222=1;
                }
                switch (alt222) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression9028); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression9030);
            	    andExpression638=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression638.getTree());
            	    }
            	    break;
            	default :
            	    break loop222;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression639 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression640 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression9062);
            matchUntilExpression639=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression639.getTree());
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);
                if ( (LA223_0==AND_EXPR) ) {
                    alt223=1;
                }
                switch (alt223) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression9067); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression9069);
            	    matchUntilExpression640=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression640.getTree());
            	    }
            	    break;
            	default :
            	    break loop223;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression641 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression642 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==LBRACK) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression9104);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9108);
            qualifyExpression641=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression641.getTree());
            int alt225=2;
            int LA225_0 = input.LA(1);
            if ( (LA225_0==UNTIL) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression9113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9115);
                    qualifyExpression642=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression642.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList643 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix644 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( ((LA228_0>=NOT_EXPR && LA228_0<=EVERY_DISTINCT_EXPR)) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    int alt226=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt226=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt226=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt226=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 226, 0, input);
                        throw nvae;
                    }
                    switch (alt226) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9180); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9192); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9194);
                            distinctExpressionList643=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList643.getTree());
                            }
                            break;
                    }
                    int alt227=2;
                    int LA227_0 = input.LA(1);
                    if ( (LA227_0==LBRACK) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9200);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9209);
            guardPostFix644=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix644.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN645=null;
        Token COMMA647=null;
        Token RPAREN649=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom646 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom648 = null;
        CommonTree LPAREN645_tree=null;
        CommonTree COMMA647_tree=null;
        CommonTree RPAREN649_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN645=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN645);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9326);
            distinctExpressionAtom646=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom646.getTree());
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);
                if ( (LA229_0==COMMA) ) {
                    alt229=1;
                }
                switch (alt229) {
            	case 1 :
            	    {
            	    COMMA647=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9329); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA647);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9331);
            	    distinctExpressionAtom648=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom648.getTree());
            	    }
            	    break;
            	default :
            	    break loop229;
                }
            } while (true);
            RPAREN649=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN649);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime650 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom9358);
            expressionWithTime650=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime650.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN653=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression651 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression652 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression654 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression655 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN653_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt230=2;
            int LA230_0 = input.LA(1);
            if ( (LA230_0==IDENT||LA230_0==TICKED_STRING_LITERAL) ) {
                alt230=1;
            }
            else if ( (LA230_0==LPAREN) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);
                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9373);
                    atomicExpression651=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression651.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9381);
                    patternExpression652=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression652.getTree());
                    RPAREN653=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN653);
                    }
                    break;
            }
            int alt231=3;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==WHERE) ) {
                alt231=1;
            }
            else if ( (LA231_0==WHILE) ) {
                alt231=2;
            }
            switch (alt231) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9392);
                    guardWhereExpression654=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression654.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9402);
                    guardWhileExpression655=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression655.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression656 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression657 = null;
        try {
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==IDENT) ) {
                int LA232_1 = input.LA(2);
                if ( (LA232_1==COLON) ) {
                    alt232=1;
                }
                else if ( (LA232_1==EOF||(LA232_1>=OR_EXPR && LA232_1<=AND_EXPR)||LA232_1==WHERE||LA232_1==UNTIL||LA232_1==WHILE||(LA232_1>=LPAREN && LA232_1<=RBRACK)||(LA232_1>=FOLLOWED_BY && LA232_1<=FOLLOWMAX_BEGIN)) ) {
                    alt232=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 232, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA232_0==TICKED_STRING_LITERAL) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);
                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9464);
                    observerExpression656=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression656.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9468);
                    patternFilterExpression657=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression657.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON658=null;
        Token LPAREN659=null;
        Token RPAREN661=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList660 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON658_tree=null;
        CommonTree LPAREN659_tree=null;
        CommonTree RPAREN661_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON658=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON658);
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==IDENT) ) {
                alt233=1;
            }
            else if ( (LA233_0==AT) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);
                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN659=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN659);
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==WINDOW||LA234_0==ESCAPE||(LA234_0>=NOT_EXPR && LA234_0<=EVERY_EXPR)||(LA234_0>=SUM && LA234_0<=COUNT)||LA234_0==CASE||LA234_0==OUTER||(LA234_0>=JOIN && LA234_0<=FULL)||(LA234_0>=EVENTS && LA234_0<=LAST)||(LA234_0>=UNIDIRECTIONAL && LA234_0<=CURRENT_TIMESTAMP)||LA234_0==SNAPSHOT||(LA234_0>=VARIABLE && LA234_0<=INDEX)||(LA234_0>=BOOLEAN_TRUE && LA234_0<=VALUE_NULL)||(LA234_0>=DEFINE && LA234_0<=MATCHES)||LA234_0==WHILE||(LA234_0>=MERGE && LA234_0<=MATCHED)||LA234_0==NUM_DOUBLE||(LA234_0>=IDENT && LA234_0<=LPAREN)||LA234_0==LBRACK||LA234_0==STAR||(LA234_0>=PLUS && LA234_0<=QUESTION)||(LA234_0>=STRING_LITERAL && LA234_0<=QUOTED_STRING_LITERAL)||LA234_0==MINUS||LA234_0==LCURLY||LA234_0==NUM_INT||(LA234_0>=TICKED_STRING_LITERAL && LA234_0<=NUM_FLOAT)) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9501);
                    expressionWithTimeList660=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList660.getTree());
                    }
                    break;
            }
            RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN661);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT662=null;
        Token COLON663=null;
        Token IDENT664=null;
        Token LPAREN665=null;
        Token RPAREN667=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList666 = null;
        CommonTree IDENT662_tree=null;
        CommonTree COLON663_tree=null;
        CommonTree IDENT664_tree=null;
        CommonTree LPAREN665_tree=null;
        CommonTree RPAREN667_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT662=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT662_tree = (CommonTree)adaptor.create(IDENT662);
            adaptor.addChild(root_0, IDENT662_tree);
            }
            COLON663=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9555); if (state.failed) return retval;
            IDENT664=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT664_tree = (CommonTree)adaptor.create(IDENT664);
            adaptor.addChild(root_0, IDENT664_tree);
            }
            LPAREN665=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9560); if (state.failed) return retval;
            int alt235=2;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==WINDOW||LA235_0==ESCAPE||(LA235_0>=NOT_EXPR && LA235_0<=EVERY_EXPR)||(LA235_0>=SUM && LA235_0<=COUNT)||LA235_0==CASE||LA235_0==OUTER||(LA235_0>=JOIN && LA235_0<=FULL)||(LA235_0>=EVENTS && LA235_0<=LAST)||(LA235_0>=UNIDIRECTIONAL && LA235_0<=CURRENT_TIMESTAMP)||LA235_0==SNAPSHOT||(LA235_0>=VARIABLE && LA235_0<=INDEX)||(LA235_0>=BOOLEAN_TRUE && LA235_0<=VALUE_NULL)||(LA235_0>=DEFINE && LA235_0<=MATCHES)||LA235_0==WHILE||(LA235_0>=MERGE && LA235_0<=MATCHED)||LA235_0==NUM_DOUBLE||(LA235_0>=IDENT && LA235_0<=LPAREN)||LA235_0==LBRACK||LA235_0==STAR||(LA235_0>=PLUS && LA235_0<=QUESTION)||(LA235_0>=STRING_LITERAL && LA235_0<=QUOTED_STRING_LITERAL)||LA235_0==MINUS||LA235_0==LCURLY||LA235_0==NUM_INT||(LA235_0>=TICKED_STRING_LITERAL && LA235_0<=NUM_FLOAT)) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9564);
                    expressionWithTimeList666=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList666.getTree());
                    }
                    break;
            }
            RPAREN667=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9568); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN668=null;
        Token RPAREN670=null;
        EsperEPL2GrammarParser.expression_return expression669 = null;
        CommonTree LPAREN668_tree=null;
        CommonTree RPAREN670_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN668=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9581); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9584);
            expression669=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression669.getTree());
            RPAREN670=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9586); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK671=null;
        Token RBRACK675=null;
        EsperEPL2GrammarParser.expression_return expression672 = null;
        EsperEPL2GrammarParser.expression_return expression673 = null;
        EsperEPL2GrammarParser.expression_return expression674 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK671_tree=null;
        CommonTree RBRACK675_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK671=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK671);
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==WINDOW||LA238_0==ESCAPE||(LA238_0>=NOT_EXPR && LA238_0<=EVERY_EXPR)||(LA238_0>=SUM && LA238_0<=COUNT)||LA238_0==CASE||LA238_0==OUTER||(LA238_0>=JOIN && LA238_0<=FULL)||(LA238_0>=EVENTS && LA238_0<=LAST)||(LA238_0>=UNIDIRECTIONAL && LA238_0<=CURRENT_TIMESTAMP)||LA238_0==SNAPSHOT||(LA238_0>=VARIABLE && LA238_0<=INDEX)||(LA238_0>=BOOLEAN_TRUE && LA238_0<=VALUE_NULL)||(LA238_0>=DEFINE && LA238_0<=MATCHES)||LA238_0==WHILE||(LA238_0>=MERGE && LA238_0<=MATCHED)||LA238_0==NUM_DOUBLE||(LA238_0>=IDENT && LA238_0<=LPAREN)||(LA238_0>=PLUS && LA238_0<=QUESTION)||(LA238_0>=STRING_LITERAL && LA238_0<=QUOTED_STRING_LITERAL)||LA238_0==MINUS||LA238_0==LCURLY||LA238_0==NUM_INT||(LA238_0>=TICKED_STRING_LITERAL && LA238_0<=NUM_FLOAT)) ) {
                alt238=1;
            }
            else if ( (LA238_0==COLON) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);
                throw nvae;
            }
            switch (alt238) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9614);
                    expression672=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression672.getTree());
                    int alt237=2;
                    int LA237_0 = input.LA(1);
                    if ( (LA237_0==COLON) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9619); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt236=2;
                            int LA236_0 = input.LA(1);
                            if ( (LA236_0==WINDOW||LA236_0==ESCAPE||(LA236_0>=NOT_EXPR && LA236_0<=EVERY_EXPR)||(LA236_0>=SUM && LA236_0<=COUNT)||LA236_0==CASE||LA236_0==OUTER||(LA236_0>=JOIN && LA236_0<=FULL)||(LA236_0>=EVENTS && LA236_0<=LAST)||(LA236_0>=UNIDIRECTIONAL && LA236_0<=CURRENT_TIMESTAMP)||LA236_0==SNAPSHOT||(LA236_0>=VARIABLE && LA236_0<=INDEX)||(LA236_0>=BOOLEAN_TRUE && LA236_0<=VALUE_NULL)||(LA236_0>=DEFINE && LA236_0<=MATCHES)||LA236_0==WHILE||(LA236_0>=MERGE && LA236_0<=MATCHED)||LA236_0==NUM_DOUBLE||(LA236_0>=IDENT && LA236_0<=LPAREN)||(LA236_0>=PLUS && LA236_0<=QUESTION)||(LA236_0>=STRING_LITERAL && LA236_0<=QUOTED_STRING_LITERAL)||LA236_0==MINUS||LA236_0==LCURLY||LA236_0==NUM_INT||(LA236_0>=TICKED_STRING_LITERAL && LA236_0<=NUM_FLOAT)) ) {
                                alt236=1;
                            }
                            switch (alt236) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9622);
                                    expression673=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression673.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9644);
                    expression674=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression674.getTree());
                    }
                    break;
            }
            RBRACK675=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK675);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS676=null;
        Token LPAREN678=null;
        Token RPAREN680=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier677 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList679 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression681 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS676_tree=null;
        CommonTree LPAREN678_tree=null;
        CommonTree RPAREN680_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt239=2;
            int LA239_0 = input.LA(1);
            if ( (LA239_0==IDENT) ) {
                int LA239_1 = input.LA(2);
                if ( (LA239_1==EQUALS) ) {
                    alt239=1;
                }
            }
            switch (alt239) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS676=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS676);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9753);
            classIdentifier677=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier677.getTree());
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==LPAREN) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    LPAREN678=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN678);
                    int alt240=2;
                    int LA240_0 = input.LA(1);
                    if ( (LA240_0==WINDOW||LA240_0==ESCAPE||(LA240_0>=NOT_EXPR && LA240_0<=EVERY_EXPR)||(LA240_0>=SUM && LA240_0<=COUNT)||LA240_0==CASE||LA240_0==OUTER||(LA240_0>=JOIN && LA240_0<=FULL)||(LA240_0>=EVENTS && LA240_0<=LAST)||(LA240_0>=UNIDIRECTIONAL && LA240_0<=CURRENT_TIMESTAMP)||LA240_0==SNAPSHOT||(LA240_0>=VARIABLE && LA240_0<=INDEX)||(LA240_0>=BOOLEAN_TRUE && LA240_0<=VALUE_NULL)||(LA240_0>=DEFINE && LA240_0<=MATCHES)||LA240_0==WHILE||(LA240_0>=MERGE && LA240_0<=MATCHED)||LA240_0==NUM_DOUBLE||(LA240_0>=IDENT && LA240_0<=LPAREN)||(LA240_0>=PLUS && LA240_0<=QUESTION)||(LA240_0>=STRING_LITERAL && LA240_0<=QUOTED_STRING_LITERAL)||LA240_0==MINUS||LA240_0==LCURLY||LA240_0==NUM_INT||(LA240_0>=TICKED_STRING_LITERAL && LA240_0<=NUM_FLOAT)) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9766);
                            expressionList679=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList679.getTree());
                            }
                            break;
                    }
                    RPAREN680=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN680);
                    }
                    break;
            }
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==LBRACK) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9781);
                    propertyExpression681=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression681.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic682 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic683 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9826);
            propertyExpressionAtomic682=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic682.getTree());
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);
                if ( (LA243_0==LBRACK) ) {
                    alt243=1;
                }
                switch (alt243) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9829);
            	    propertyExpressionAtomic683=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic683.getTree());
            	    }
            	    break;
            	default :
            	    break loop243;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK684=null;
        Token SELECT685=null;
        Token FROM687=null;
        Token AS689=null;
        Token IDENT690=null;
        Token WHERE691=null;
        Token RBRACK693=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList686 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty688 = null;
        EsperEPL2GrammarParser.expression_return expression692 = null;
        CommonTree LBRACK684_tree=null;
        CommonTree SELECT685_tree=null;
        CommonTree FROM687_tree=null;
        CommonTree AS689_tree=null;
        CommonTree IDENT690_tree=null;
        CommonTree WHERE691_tree=null;
        CommonTree RBRACK693_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK684=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK684);
            int alt244=2;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==SELECT) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    SELECT685=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT685);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9864);
                    propertySelectionList686=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList686.getTree());
                    FROM687=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM687);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9870);
            eventProperty688=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty688.getTree());
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==AS) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    AS689=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS689);
                    IDENT690=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT690);
                    }
                    break;
            }
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==WHERE) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    WHERE691=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE691);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9882);
                    expression692=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression692.getTree());
                    }
                    break;
            }
            RBRACK693=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK693);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA695=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement694 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement696 = null;
        CommonTree COMMA695_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9936);
            propertySelectionListElement694=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement694.getTree());
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);
                if ( (LA247_0==COMMA) ) {
                    alt247=1;
                }
                switch (alt247) {
            	case 1 :
            	    {
            	    COMMA695=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9939); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9942);
            	    propertySelectionListElement696=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement696.getTree());
            	    }
            	    break;
            	default :
            	    break loop247;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS699=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector697 = null;
        EsperEPL2GrammarParser.expression_return expression698 = null;
        CommonTree s_tree=null;
        CommonTree AS699_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt249=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt249=1;
                }
                break;
            case IDENT:
                {
                int LA249_2 = input.LA(2);
                if ( (LA249_2==DOT) ) {
                    int LA249_69 = input.LA(3);
                    if ( (LA249_69==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt249=2;
                    }
                    else if ( (LA249_69==WINDOW||LA249_69==ESCAPE||LA249_69==EVERY_EXPR||(LA249_69>=SUM && LA249_69<=COUNT)||LA249_69==OUTER||(LA249_69>=JOIN && LA249_69<=FULL)||(LA249_69>=EVENTS && LA249_69<=LAST)||(LA249_69>=UNIDIRECTIONAL && LA249_69<=PREVIOUSTAIL)||LA249_69==PRIOR||(LA249_69>=WEEKDAY && LA249_69<=CAST)||LA249_69==SNAPSHOT||(LA249_69>=VARIABLE && LA249_69<=INDEX)||(LA249_69>=DEFINE && LA249_69<=MATCHES)||LA249_69==WHILE||(LA249_69>=MERGE && LA249_69<=MATCHED)||LA249_69==IDENT||LA249_69==TICKED_STRING_LITERAL) ) {
                        alt249=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA249_2>=IN_SET && LA249_2<=REGEXP)||(LA249_2>=OR_EXPR && LA249_2<=NOT_EXPR)||LA249_2==AS||LA249_2==FROM||LA249_2==IS||LA249_2==COMMA||LA249_2==LPAREN||LA249_2==EQUALS||LA249_2==LBRACK||(LA249_2>=STAR && LA249_2<=QUESTION)||(LA249_2>=BAND && LA249_2<=MOD)||LA249_2==ESCAPECHAR) ) {
                    alt249=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt249=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);
                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9984);
                    propertyStreamSelector697=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector697.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9989);
                    expression698=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression698.getTree());
                    int alt248=2;
                    int LA248_0 = input.LA(1);
                    if ( (LA248_0==AS) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            AS699=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9992); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS699);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9996);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT700=null;
        Token STAR701=null;
        Token AS702=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT700_tree=null;
        CommonTree STAR701_tree=null;
        CommonTree AS702_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT700=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector10042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT700);
            STAR701=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector10044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR701);
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==AS) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    AS702=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector10047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS702);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS703=null;
        Token LPAREN705=null;
        Token RPAREN707=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier704 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList706 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression708 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS703_tree=null;
        CommonTree LPAREN705_tree=null;
        CommonTree RPAREN707_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt251=2;
            int LA251_0 = input.LA(1);
            if ( (LA251_0==IDENT) ) {
                int LA251_1 = input.LA(2);
                if ( (LA251_1==EQUALS) ) {
                    alt251=1;
                }
            }
            switch (alt251) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression10098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS703=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression10100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS703);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression10109);
            classIdentifier704=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier704.getTree());
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==LPAREN) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    LPAREN705=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression10120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN705);
                    int alt252=2;
                    int LA252_0 = input.LA(1);
                    if ( (LA252_0==WINDOW||LA252_0==ESCAPE||(LA252_0>=NOT_EXPR && LA252_0<=EVERY_EXPR)||(LA252_0>=SUM && LA252_0<=COUNT)||LA252_0==CASE||LA252_0==OUTER||(LA252_0>=JOIN && LA252_0<=FULL)||(LA252_0>=EVENTS && LA252_0<=LAST)||(LA252_0>=UNIDIRECTIONAL && LA252_0<=CURRENT_TIMESTAMP)||LA252_0==SNAPSHOT||(LA252_0>=VARIABLE && LA252_0<=INDEX)||(LA252_0>=BOOLEAN_TRUE && LA252_0<=VALUE_NULL)||(LA252_0>=DEFINE && LA252_0<=MATCHES)||LA252_0==WHILE||(LA252_0>=MERGE && LA252_0<=MATCHED)||LA252_0==NUM_DOUBLE||(LA252_0>=IDENT && LA252_0<=LPAREN)||(LA252_0>=PLUS && LA252_0<=QUESTION)||(LA252_0>=STRING_LITERAL && LA252_0<=QUOTED_STRING_LITERAL)||LA252_0==MINUS||LA252_0==LCURLY||LA252_0==NUM_INT||(LA252_0>=TICKED_STRING_LITERAL && LA252_0<=NUM_FLOAT)) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression10122);
                            expressionList706=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList706.getTree());
                            }
                            break;
                    }
                    RPAREN707=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression10125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN707);
                    }
                    break;
            }
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( (LA254_0==LBRACK) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression10137);
                    propertyExpression708=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression708.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT709=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT709_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10192);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);
                if ( (LA255_0==DOT) ) {
                    int LA255_21 = input.LA(2);
                    if ( (LA255_21==IDENT) ) {
                        int LA255_46 = input.LA(3);
                        if ( (LA255_46==EOF||LA255_46==CREATE||(LA255_46>=OR_EXPR && LA255_46<=AS)||LA255_46==SELECT||(LA255_46>=INNER && LA255_46<=ON)||(LA255_46>=GROUP && LA255_46<=HAVING)||LA255_46==OUTPUT||LA255_46==INSERT||LA255_46==ORDER||(LA255_46>=UNIDIRECTIONAL && LA255_46<=RETAININTERSECTION)||LA255_46==DELETE||LA255_46==SET||LA255_46==UNTIL||LA255_46==ROW_LIMIT_EXPR||(LA255_46>=UPDATE && LA255_46<=MATCH_RECOGNIZE)||(LA255_46>=FOR && LA255_46<=WHILE)||LA255_46==MERGE||(LA255_46>=COMMA && LA255_46<=RPAREN)||(LA255_46>=DOT && LA255_46<=RBRACK)||LA255_46==RCURLY||(LA255_46>=FOLLOWED_BY && LA255_46<=FOLLOWMAX_BEGIN)||LA255_46==TICKED_STRING_LITERAL||LA255_46==EMAILAT) ) {
                            alt255=1;
                        }
                    }
                    else if ( (LA255_21==TICKED_STRING_LITERAL) ) {
                        alt255=1;
                    }
                }
                switch (alt255) {
            	case 1 :
            	    {
            	    DOT709=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10211); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT709);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10215);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop255;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT710=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT710_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10260);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);
                if ( (LA256_0==IDENT||LA256_0==TICKED_STRING_LITERAL) ) {
                    alt256=2;
                }
                else if ( (LA256_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA256_4 = input.LA(3);
                        if ( (LA256_4==LPAREN) ) {
                            alt256=2;
                        }
                        else if ( (LA256_4==IDENT||LA256_4==DOT||LA256_4==TICKED_STRING_LITERAL) ) {
                            alt256=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA256_5 = input.LA(3);
                        if ( (LA256_5==LPAREN) ) {
                            alt256=2;
                        }
                        else if ( (LA256_5==IDENT||LA256_5==DOT||LA256_5==TICKED_STRING_LITERAL) ) {
                            alt256=1;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt256=2;
                        }
                        break;
                    }
                }
                switch (alt256) {
            	case 1 :
            	    {
            	    DOT710=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10295); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT710);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10299);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop256;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA712=null;
        EsperEPL2GrammarParser.expression_return expression711 = null;
        EsperEPL2GrammarParser.expression_return expression713 = null;
        CommonTree COMMA712_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10341);
            expression711=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression711.getTree());
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);
                if ( (LA257_0==COMMA) ) {
                    alt257=1;
                }
                switch (alt257) {
            	case 1 :
            	    {
            	    COMMA712=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10344); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10347);
            	    expression713=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression713.getTree());
            	    }
            	    break;
            	default :
            	    break loop257;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA715=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime714 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime716 = null;
        CommonTree COMMA715_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10375);
            expressionWithTime714=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime714.getTree());
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);
                if ( (LA258_0==COMMA) ) {
                    alt258=1;
                }
                switch (alt258) {
            	case 1 :
            	    {
            	    COMMA715=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10378); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10381);
            	    expressionWithTime716=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime716.getTree());
            	    }
            	    break;
            	default :
            	    break loop258;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand717 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand718 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod719 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable720 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand721 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand722 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator723 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator724 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList725 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar726 = null;
        try {
            int alt259=10;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==LAST) ) {
                int LA259_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt259=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt259=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==LW) ) {
                int LA259_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt259=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt259=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==NUM_INT) ) {
                int LA259_3 = input.LA(2);
                if ( (LA259_3==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt259=5;
                }
                else if ( (LA259_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt259=8;
                }
                else if ( (LA259_3==TIMEPERIOD_SECONDS) ) {
                    int LA259_153 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 153, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_3==TIMEPERIOD_SECOND) ) {
                    int LA259_154 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 154, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_3==TIMEPERIOD_SEC) ) {
                    int LA259_155 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 155, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt259=7;
                }
                else if ( (LA259_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==NUM_LONG) ) {
                int LA259_4 = input.LA(2);
                if ( (LA259_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt259=5;
                }
                else if ( (LA259_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==TIMEPERIOD_SECONDS) ) {
                    int LA259_219 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 219, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_4==TIMEPERIOD_SECOND) ) {
                    int LA259_220 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 220, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_4==TIMEPERIOD_SEC) ) {
                    int LA259_221 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 221, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt259=8;
                }
                else if ( (LA259_4==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt259=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==NUM_FLOAT) ) {
                int LA259_5 = input.LA(2);
                if ( (LA259_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt259=5;
                }
                else if ( (LA259_5==TIMEPERIOD_SECONDS) ) {
                    int LA259_245 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 245, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_5==TIMEPERIOD_SECOND) ) {
                    int LA259_246 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 246, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_5==TIMEPERIOD_SEC) ) {
                    int LA259_247 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 247, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_5==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_5==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt259=7;
                }
                else if ( (LA259_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt259=8;
                }
                else if ( (LA259_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==NUM_DOUBLE) ) {
                int LA259_6 = input.LA(2);
                if ( (LA259_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==TIMEPERIOD_SECONDS) ) {
                    int LA259_315 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 315, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_6==TIMEPERIOD_SECOND) ) {
                    int LA259_316 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 316, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_6==TIMEPERIOD_SEC) ) {
                    int LA259_317 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 317, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt259=8;
                }
                else if ( (LA259_6==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt259=7;
                }
                else if ( (LA259_6==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt259=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==IDENT) ) {
                int LA259_7 = input.LA(2);
                if ( (LA259_7==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_SECONDS) ) {
                    int LA259_349 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 349, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_7==TIMEPERIOD_SECOND) ) {
                    int LA259_350 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 350, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_7==TIMEPERIOD_SEC) ) {
                    int LA259_351 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 351, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_7==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt259=8;
                }
                else if ( (LA259_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt259=5;
                }
                else if ( (LA259_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt259=7;
                }
                else if ( (LA259_7==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_7==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==QUESTION) ) {
                int LA259_8 = input.LA(2);
                if ( (LA259_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt259=7;
                }
                else if ( (LA259_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt259=5;
                }
                else if ( (LA259_8==TIMEPERIOD_SECONDS) ) {
                    int LA259_404 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 404, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_8==TIMEPERIOD_SECOND) ) {
                    int LA259_405 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 405, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_8==TIMEPERIOD_SEC) ) {
                    int LA259_406 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt259=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt259=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 259, 406, input);
                        throw nvae;
                    }
                }
                else if ( (LA259_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt259=4;
                }
                else if ( (LA259_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt259=8;
                }
                else if ( (LA259_8==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else if ( (LA259_8==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt259=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==TYPEOF) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt259=4;
            }
            else if ( (LA259_0==STAR) ) {
                int LA259_68 = input.LA(2);
                if ( (LA259_68==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt259=6;
                }
                else if ( (LA259_68==COMMA||LA259_68==RPAREN) ) {
                    alt259=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 68, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt259=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);
                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10407);
                    lastOperand717=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand717.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10418);
                    lastWeekdayOperand718=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand718.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10429);
                    timePeriod719=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod719.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10440);
                    expressionQualifyable720=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable720.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10451);
                    rangeOperand721=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand721.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10463);
                    frequencyOperand722=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand722.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10474);
                    lastOperator723=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator723.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10486);
                    weekDayOperator724=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator724.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10498);
                    numericParameterList725=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList725.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10503);
                    numberSetStar726=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar726.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression727 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10514);
            expression727=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression727.getTree());
            int alt260=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt260=1;
                    }
                    break;
                case DESC:
                    {
                    alt260=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt260=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt260=5;
                    }
                    break;
            }
            switch (alt260) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR728=null;
        CommonTree STAR728_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR728=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR728);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW729=null;
        CommonTree LW729_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW729=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW729_tree = (CommonTree)adaptor.create(LW729);
            root_0 = (CommonTree)adaptor.becomeRoot(LW729_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST730=null;
        CommonTree LAST730_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST730=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST730_tree = (CommonTree)adaptor.create(LAST730);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST730_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR731=null;
        Token DIV732=null;
        EsperEPL2GrammarParser.number_return number733 = null;
        EsperEPL2GrammarParser.substitution_return substitution734 = null;
        CommonTree i_tree=null;
        CommonTree STAR731_tree=null;
        CommonTree DIV732_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR731=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR731);
            DIV732=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV732);
            int alt261=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt261=1;
                }
                break;
            case IDENT:
                {
                alt261=2;
                }
                break;
            case QUESTION:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10642);
                    number733=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number733.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10648);
                    substitution734=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution734.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON737=null;
        EsperEPL2GrammarParser.number_return number735 = null;
        EsperEPL2GrammarParser.substitution_return substitution736 = null;
        EsperEPL2GrammarParser.number_return number738 = null;
        EsperEPL2GrammarParser.substitution_return substitution739 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON737_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt262=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt262=1;
                }
                break;
            case IDENT:
                {
                alt262=2;
                }
                break;
            case QUESTION:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);
                throw nvae;
            }
            switch (alt262) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10697);
                    number735=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number735.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10703);
                    substitution736=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution736.getTree());
                    }
                    break;
            }
            COLON737=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON737);
            int alt263=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt263=1;
                }
                break;
            case IDENT:
                {
                alt263=2;
                }
                break;
            case QUESTION:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);
                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10709);
                    number738=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number738.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10715);
                    substitution739=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution739.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST742=null;
        EsperEPL2GrammarParser.number_return number740 = null;
        EsperEPL2GrammarParser.substitution_return substitution741 = null;
        CommonTree i_tree=null;
        CommonTree LAST742_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt264=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt264=1;
                }
                break;
            case IDENT:
                {
                alt264=2;
                }
                break;
            case QUESTION:
                {
                alt264=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);
                throw nvae;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10829);
                    number740=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number740.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10835);
                    substitution741=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution741.getTree());
                    }
                    break;
            }
            LAST742=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST742);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY745=null;
        EsperEPL2GrammarParser.number_return number743 = null;
        EsperEPL2GrammarParser.substitution_return substitution744 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY745_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt265=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt265=1;
                }
                break;
            case IDENT:
                {
                alt265=2;
                }
                break;
            case QUESTION:
                {
                alt265=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);
                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10886);
                    number743=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number743.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10892);
                    substitution744=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution744.getTree());
                    }
                    break;
            }
            WEEKDAY745=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY745);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK746=null;
        Token COMMA748=null;
        Token RBRACK750=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter747 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter749 = null;
        CommonTree LBRACK746_tree=null;
        CommonTree COMMA748_tree=null;
        CommonTree RBRACK750_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK746=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK746);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10944);
            numericListParameter747=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter747.getTree());
            loop266:
            do {
                int alt266=2;
                int LA266_0 = input.LA(1);
                if ( (LA266_0==COMMA) ) {
                    alt266=1;
                }
                switch (alt266) {
            	case 1 :
            	    {
            	    COMMA748=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10947); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA748);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10949);
            	    numericListParameter749=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter749.getTree());
            	    }
            	    break;
            	default :
            	    break loop266;
                }
            } while (true);
            RBRACK750=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK750);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand751 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand752 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant753 = null;
        try {
            int alt267=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA267_1 = input.LA(2);
                if ( (LA267_1==COMMA||LA267_1==RBRACK) ) {
                    alt267=3;
                }
                else if ( (LA267_1==COLON) ) {
                    alt267=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA267_2 = input.LA(2);
                if ( (LA267_2==COLON) ) {
                    alt267=1;
                }
                else if ( (LA267_2==COMMA||LA267_2==RBRACK) ) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA267_3 = input.LA(2);
                if ( (LA267_3==COMMA||LA267_3==RBRACK) ) {
                    alt267=3;
                }
                else if ( (LA267_3==COLON) ) {
                    alt267=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA267_4 = input.LA(2);
                if ( (LA267_4==COLON) ) {
                    alt267=1;
                }
                else if ( (LA267_4==COMMA||LA267_4==RBRACK) ) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt267=1;
                }
                break;
            case STAR:
                {
                alt267=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt267=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);
                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10975);
                    rangeOperand751=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand751.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10981);
                    frequencyOperand752=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand752.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10986);
                    numberconstant753=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant753.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT755=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic754 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic756 = null;
        CommonTree DOT755_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11002);
            eventPropertyAtomic754=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic754.getTree());
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);
                if ( (LA268_0==DOT) ) {
                    alt268=1;
                }
                switch (alt268) {
            	case 1 :
            	    {
            	    DOT755=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty11005); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT755);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11007);
            	    eventPropertyAtomic756=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic756.getTree());
            	    }
            	    break;
            	default :
            	    break loop268;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK758=null;
        Token RPAREN759=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent757 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK758_tree=null;
        CommonTree RPAREN759_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11033);
            eventPropertyIdent757=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent757.getTree());
            int alt272=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt272=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt272=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt272=3;
                    }
                    break;
            }
            switch (alt272) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic11042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic11046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK758=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic11048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK758);
                    int alt269=2;
                    int LA269_0 = input.LA(1);
                    if ( (LA269_0==QUESTION) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11053); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic11067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt270=2;
                    int LA270_0 = input.LA(1);
                    if ( (LA270_0==STRING_LITERAL) ) {
                        alt270=1;
                    }
                    else if ( (LA270_0==QUOTED_STRING_LITERAL) ) {
                        alt270=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 270, 0, input);
                        throw nvae;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11072); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11078); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN759=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic11081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN759);
                    int alt271=2;
                    int LA271_0 = input.LA(1);
                    if ( (LA271_0==QUESTION) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11086); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR760=null;
        Token DOT761=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR760_tree=null;
        CommonTree DOT761_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11223);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);
                if ( (LA274_0==ESCAPECHAR) ) {
                    alt274=1;
                }
                switch (alt274) {
            	case 1 :
            	    {
            	    ESCAPECHAR760=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11235); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR760);
            	    DOT761=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11237); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT761);
            	    int alt273=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt273=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA273_5 = input.LA(2);
            	            if ( (LA273_5==EOF||(LA273_5>=IN_SET && LA273_5<=NOT_EXPR)||(LA273_5>=WHERE && LA273_5<=AS)||(LA273_5>=ELSE && LA273_5<=FROM)||(LA273_5>=INNER && LA273_5<=FULL)||LA273_5==IS||(LA273_5>=GROUP && LA273_5<=HAVING)||LA273_5==ALL||LA273_5==OUTPUT||LA273_5==INSERT||(LA273_5>=ORDER && LA273_5<=DESC)||LA273_5==PATTERN||(LA273_5>=TIMEPERIOD_SEC && LA273_5<=TIMEPERIOD_SECONDS)||LA273_5==ROW_LIMIT_EXPR||(LA273_5>=MATCH_RECOGNIZE && LA273_5<=MEASURES)||(LA273_5>=AFTER && LA273_5<=FOR)||LA273_5==COMMA||(LA273_5>=LPAREN && LA273_5<=COLON)||(LA273_5>=BAND && LA273_5<=MOD)||LA273_5==RCURLY||(LA273_5>=FOLLOWMAX_END && LA273_5<=ESCAPECHAR)) ) {
            	                alt273=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA273_25 = input.LA(2);
            	            if ( (LA273_25==LPAREN) ) {
            	                int LA273_176 = input.LA(3);
            	                if ( ((LA273_176>=STRING_LITERAL && LA273_176<=QUOTED_STRING_LITERAL)) ) {
            	                    alt273=1;
            	                }
            	            }
            	            else if ( (LA273_25==EOF||(LA273_25>=IN_SET && LA273_25<=NOT_EXPR)||(LA273_25>=WHERE && LA273_25<=AS)||(LA273_25>=ELSE && LA273_25<=FROM)||(LA273_25>=INNER && LA273_25<=FULL)||LA273_25==IS||(LA273_25>=GROUP && LA273_25<=HAVING)||LA273_25==ALL||LA273_25==OUTPUT||LA273_25==INSERT||(LA273_25>=ORDER && LA273_25<=DESC)||LA273_25==PATTERN||(LA273_25>=TIMEPERIOD_SEC && LA273_25<=TIMEPERIOD_SECONDS)||LA273_25==ROW_LIMIT_EXPR||(LA273_25>=MATCH_RECOGNIZE && LA273_25<=MEASURES)||(LA273_25>=AFTER && LA273_25<=FOR)||LA273_25==COMMA||(LA273_25>=RPAREN && LA273_25<=COLON)||(LA273_25>=BAND && LA273_25<=MOD)||LA273_25==RCURLY||(LA273_25>=FOLLOWMAX_END && LA273_25<=ESCAPECHAR)) ) {
            	                alt273=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA273_40 = input.LA(2);
            	            if ( (LA273_40==EOF||(LA273_40>=IN_SET && LA273_40<=NOT_EXPR)||(LA273_40>=WHERE && LA273_40<=AS)||(LA273_40>=ELSE && LA273_40<=FROM)||(LA273_40>=INNER && LA273_40<=FULL)||LA273_40==IS||(LA273_40>=GROUP && LA273_40<=HAVING)||LA273_40==ALL||LA273_40==OUTPUT||LA273_40==INSERT||(LA273_40>=ORDER && LA273_40<=DESC)||LA273_40==PATTERN||(LA273_40>=TIMEPERIOD_SEC && LA273_40<=TIMEPERIOD_SECONDS)||LA273_40==ROW_LIMIT_EXPR||(LA273_40>=MATCH_RECOGNIZE && LA273_40<=MEASURES)||(LA273_40>=AFTER && LA273_40<=FOR)||LA273_40==COMMA||(LA273_40>=LPAREN && LA273_40<=COLON)||(LA273_40>=BAND && LA273_40<=MOD)||LA273_40==RCURLY||(LA273_40>=FOLLOWMAX_END && LA273_40<=ESCAPECHAR)) ) {
            	                alt273=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA273_41 = input.LA(2);
            	            if ( (LA273_41==EOF||(LA273_41>=IN_SET && LA273_41<=NOT_EXPR)||(LA273_41>=WHERE && LA273_41<=AS)||(LA273_41>=ELSE && LA273_41<=FROM)||(LA273_41>=INNER && LA273_41<=FULL)||LA273_41==IS||(LA273_41>=GROUP && LA273_41<=HAVING)||LA273_41==ALL||LA273_41==OUTPUT||LA273_41==INSERT||(LA273_41>=ORDER && LA273_41<=DESC)||LA273_41==PATTERN||(LA273_41>=TIMEPERIOD_SEC && LA273_41<=TIMEPERIOD_SECONDS)||LA273_41==ROW_LIMIT_EXPR||(LA273_41>=MATCH_RECOGNIZE && LA273_41<=MEASURES)||(LA273_41>=AFTER && LA273_41<=FOR)||LA273_41==COMMA||(LA273_41>=LPAREN && LA273_41<=COLON)||(LA273_41>=BAND && LA273_41<=MOD)||LA273_41==RCURLY||(LA273_41>=FOLLOWMAX_END && LA273_41<=ESCAPECHAR)) ) {
            	                alt273=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA273_43 = input.LA(2);
            	            if ( (LA273_43==EOF||(LA273_43>=IN_SET && LA273_43<=NOT_EXPR)||(LA273_43>=WHERE && LA273_43<=AS)||(LA273_43>=ELSE && LA273_43<=FROM)||(LA273_43>=INNER && LA273_43<=FULL)||LA273_43==IS||(LA273_43>=GROUP && LA273_43<=HAVING)||LA273_43==ALL||LA273_43==OUTPUT||LA273_43==INSERT||(LA273_43>=ORDER && LA273_43<=DESC)||LA273_43==PATTERN||(LA273_43>=TIMEPERIOD_SEC && LA273_43<=TIMEPERIOD_SECONDS)||LA273_43==ROW_LIMIT_EXPR||(LA273_43>=MATCH_RECOGNIZE && LA273_43<=MEASURES)||(LA273_43>=AFTER && LA273_43<=FOR)||LA273_43==COMMA||(LA273_43>=LPAREN && LA273_43<=COLON)||(LA273_43>=BAND && LA273_43<=MOD)||LA273_43==RCURLY||(LA273_43>=FOLLOWMAX_END && LA273_43<=ESCAPECHAR)) ) {
            	                alt273=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA273_44 = input.LA(2);
            	            if ( (LA273_44==PATTERN) ) {
            	                int LA273_445 = input.LA(3);
            	                if ( (LA273_445==LPAREN) ) {
            	                    alt273=1;
            	                }
            	            }
            	            else if ( (LA273_44==EOF||(LA273_44>=IN_SET && LA273_44<=NOT_EXPR)||(LA273_44>=WHERE && LA273_44<=AS)||(LA273_44>=ELSE && LA273_44<=FROM)||(LA273_44>=INNER && LA273_44<=FULL)||LA273_44==IS||(LA273_44>=GROUP && LA273_44<=HAVING)||LA273_44==ALL||LA273_44==OUTPUT||LA273_44==INSERT||(LA273_44>=ORDER && LA273_44<=DESC)||(LA273_44>=TIMEPERIOD_SEC && LA273_44<=TIMEPERIOD_SECONDS)||LA273_44==ROW_LIMIT_EXPR||(LA273_44>=MATCH_RECOGNIZE && LA273_44<=MEASURES)||(LA273_44>=AFTER && LA273_44<=FOR)||LA273_44==COMMA||(LA273_44>=LPAREN && LA273_44<=COLON)||(LA273_44>=BAND && LA273_44<=MOD)||LA273_44==RCURLY||(LA273_44>=FOLLOWMAX_END && LA273_44<=ESCAPECHAR)) ) {
            	                alt273=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt273) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11241);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop274;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT762=null;
        Token COUNT763=null;
        Token ESCAPE764=null;
        Token EVERY_EXPR765=null;
        Token SUM766=null;
        Token AVG767=null;
        Token MAX768=null;
        Token MIN769=null;
        Token COALESCE770=null;
        Token MEDIAN771=null;
        Token STDDEV772=null;
        Token AVEDEV773=null;
        Token EVENTS774=null;
        Token FIRST775=null;
        Token LAST776=null;
        Token WHILE777=null;
        Token MERGE778=null;
        Token MATCHED779=null;
        Token UNIDIRECTIONAL780=null;
        Token RETAINUNION781=null;
        Token RETAININTERSECTION782=null;
        Token UNTIL783=null;
        Token PATTERN784=null;
        Token SQL785=null;
        Token METADATASQL786=null;
        Token PREVIOUS787=null;
        Token PREVIOUSTAIL788=null;
        Token PRIOR789=null;
        Token WEEKDAY790=null;
        Token LW791=null;
        Token INSTANCEOF792=null;
        Token TYPEOF793=null;
        Token CAST794=null;
        Token SNAPSHOT795=null;
        Token VARIABLE796=null;
        Token INDEX797=null;
        Token WINDOW798=null;
        Token LEFT799=null;
        Token RIGHT800=null;
        Token OUTER801=null;
        Token FULL802=null;
        Token JOIN803=null;
        Token DEFINE804=null;
        Token PARTITION805=null;
        Token MATCHES806=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT762_tree=null;
        CommonTree COUNT763_tree=null;
        CommonTree ESCAPE764_tree=null;
        CommonTree EVERY_EXPR765_tree=null;
        CommonTree SUM766_tree=null;
        CommonTree AVG767_tree=null;
        CommonTree MAX768_tree=null;
        CommonTree MIN769_tree=null;
        CommonTree COALESCE770_tree=null;
        CommonTree MEDIAN771_tree=null;
        CommonTree STDDEV772_tree=null;
        CommonTree AVEDEV773_tree=null;
        CommonTree EVENTS774_tree=null;
        CommonTree FIRST775_tree=null;
        CommonTree LAST776_tree=null;
        CommonTree WHILE777_tree=null;
        CommonTree MERGE778_tree=null;
        CommonTree MATCHED779_tree=null;
        CommonTree UNIDIRECTIONAL780_tree=null;
        CommonTree RETAINUNION781_tree=null;
        CommonTree RETAININTERSECTION782_tree=null;
        CommonTree UNTIL783_tree=null;
        CommonTree PATTERN784_tree=null;
        CommonTree SQL785_tree=null;
        CommonTree METADATASQL786_tree=null;
        CommonTree PREVIOUS787_tree=null;
        CommonTree PREVIOUSTAIL788_tree=null;
        CommonTree PRIOR789_tree=null;
        CommonTree WEEKDAY790_tree=null;
        CommonTree LW791_tree=null;
        CommonTree INSTANCEOF792_tree=null;
        CommonTree TYPEOF793_tree=null;
        CommonTree CAST794_tree=null;
        CommonTree SNAPSHOT795_tree=null;
        CommonTree VARIABLE796_tree=null;
        CommonTree INDEX797_tree=null;
        CommonTree WINDOW798_tree=null;
        CommonTree LEFT799_tree=null;
        CommonTree RIGHT800_tree=null;
        CommonTree OUTER801_tree=null;
        CommonTree FULL802_tree=null;
        CommonTree JOIN803_tree=null;
        CommonTree DEFINE804_tree=null;
        CommonTree PARTITION805_tree=null;
        CommonTree MATCHES806_tree=null;
        try {
            int alt275=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt275=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt275=2;
                }
                break;
            case AT:
                {
                alt275=3;
                }
                break;
            case COUNT:
                {
                alt275=4;
                }
                break;
            case ESCAPE:
                {
                alt275=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt275=6;
                }
                break;
            case SUM:
                {
                alt275=7;
                }
                break;
            case AVG:
                {
                alt275=8;
                }
                break;
            case MAX:
                {
                alt275=9;
                }
                break;
            case MIN:
                {
                alt275=10;
                }
                break;
            case COALESCE:
                {
                alt275=11;
                }
                break;
            case MEDIAN:
                {
                alt275=12;
                }
                break;
            case STDDEV:
                {
                alt275=13;
                }
                break;
            case AVEDEV:
                {
                alt275=14;
                }
                break;
            case EVENTS:
                {
                alt275=15;
                }
                break;
            case FIRST:
                {
                alt275=16;
                }
                break;
            case LAST:
                {
                alt275=17;
                }
                break;
            case WHILE:
                {
                alt275=18;
                }
                break;
            case MERGE:
                {
                alt275=19;
                }
                break;
            case MATCHED:
                {
                alt275=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt275=21;
                }
                break;
            case RETAINUNION:
                {
                alt275=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt275=23;
                }
                break;
            case UNTIL:
                {
                alt275=24;
                }
                break;
            case PATTERN:
                {
                alt275=25;
                }
                break;
            case SQL:
                {
                alt275=26;
                }
                break;
            case METADATASQL:
                {
                alt275=27;
                }
                break;
            case PREVIOUS:
                {
                alt275=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt275=29;
                }
                break;
            case PRIOR:
                {
                alt275=30;
                }
                break;
            case WEEKDAY:
                {
                alt275=31;
                }
                break;
            case LW:
                {
                alt275=32;
                }
                break;
            case INSTANCEOF:
                {
                alt275=33;
                }
                break;
            case TYPEOF:
                {
                alt275=34;
                }
                break;
            case CAST:
                {
                alt275=35;
                }
                break;
            case SNAPSHOT:
                {
                alt275=36;
                }
                break;
            case VARIABLE:
                {
                alt275=37;
                }
                break;
            case INDEX:
                {
                alt275=38;
                }
                break;
            case WINDOW:
                {
                alt275=39;
                }
                break;
            case LEFT:
                {
                alt275=40;
                }
                break;
            case RIGHT:
                {
                alt275=41;
                }
                break;
            case OUTER:
                {
                alt275=42;
                }
                break;
            case FULL:
                {
                alt275=43;
                }
                break;
            case JOIN:
                {
                alt275=44;
                }
                break;
            case DEFINE:
                {
                alt275=45;
                }
                break;
            case PARTITION:
                {
                alt275=46;
                }
                break;
            case MATCHES:
                {
                alt275=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);
                throw nvae;
            }
            switch (alt275) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT762=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT762_tree = (CommonTree)adaptor.create(AT762);
                    adaptor.addChild(root_0, AT762_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT763=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT763_tree = (CommonTree)adaptor.create(COUNT763);
                    adaptor.addChild(root_0, COUNT763_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE764=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE764_tree = (CommonTree)adaptor.create(ESCAPE764);
                    adaptor.addChild(root_0, ESCAPE764_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR765=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR765_tree = (CommonTree)adaptor.create(EVERY_EXPR765);
                    adaptor.addChild(root_0, EVERY_EXPR765_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM766=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM766_tree = (CommonTree)adaptor.create(SUM766);
                    adaptor.addChild(root_0, SUM766_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG767=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG767_tree = (CommonTree)adaptor.create(AVG767);
                    adaptor.addChild(root_0, AVG767_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX768=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX768_tree = (CommonTree)adaptor.create(MAX768);
                    adaptor.addChild(root_0, MAX768_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN769=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11349); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN769_tree = (CommonTree)adaptor.create(MIN769);
                    adaptor.addChild(root_0, MIN769_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE770=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE770_tree = (CommonTree)adaptor.create(COALESCE770);
                    adaptor.addChild(root_0, COALESCE770_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN771=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN771_tree = (CommonTree)adaptor.create(MEDIAN771);
                    adaptor.addChild(root_0, MEDIAN771_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV772=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV772_tree = (CommonTree)adaptor.create(STDDEV772);
                    adaptor.addChild(root_0, STDDEV772_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV773=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV773_tree = (CommonTree)adaptor.create(AVEDEV773);
                    adaptor.addChild(root_0, AVEDEV773_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS774=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS774_tree = (CommonTree)adaptor.create(EVENTS774);
                    adaptor.addChild(root_0, EVENTS774_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST775=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST775_tree = (CommonTree)adaptor.create(FIRST775);
                    adaptor.addChild(root_0, FIRST775_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST776=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST776_tree = (CommonTree)adaptor.create(LAST776);
                    adaptor.addChild(root_0, LAST776_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE777=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE777_tree = (CommonTree)adaptor.create(WHILE777);
                    adaptor.addChild(root_0, WHILE777_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE778=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE778_tree = (CommonTree)adaptor.create(MERGE778);
                    adaptor.addChild(root_0, MERGE778_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED779=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED779_tree = (CommonTree)adaptor.create(MATCHED779);
                    adaptor.addChild(root_0, MATCHED779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL780=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL780_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL780);
                    adaptor.addChild(root_0, UNIDIRECTIONAL780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION781=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION781_tree = (CommonTree)adaptor.create(RETAINUNION781);
                    adaptor.addChild(root_0, RETAINUNION781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION782=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION782_tree = (CommonTree)adaptor.create(RETAININTERSECTION782);
                    adaptor.addChild(root_0, RETAININTERSECTION782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL783=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL783_tree = (CommonTree)adaptor.create(UNTIL783);
                    adaptor.addChild(root_0, UNTIL783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN784=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN784_tree = (CommonTree)adaptor.create(PATTERN784);
                    adaptor.addChild(root_0, PATTERN784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL785=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL785_tree = (CommonTree)adaptor.create(SQL785);
                    adaptor.addChild(root_0, SQL785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL786=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL786_tree = (CommonTree)adaptor.create(METADATASQL786);
                    adaptor.addChild(root_0, METADATASQL786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS787=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS787_tree = (CommonTree)adaptor.create(PREVIOUS787);
                    adaptor.addChild(root_0, PREVIOUS787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL788=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL788_tree = (CommonTree)adaptor.create(PREVIOUSTAIL788);
                    adaptor.addChild(root_0, PREVIOUSTAIL788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR789=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR789_tree = (CommonTree)adaptor.create(PRIOR789);
                    adaptor.addChild(root_0, PRIOR789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY790=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY790_tree = (CommonTree)adaptor.create(WEEKDAY790);
                    adaptor.addChild(root_0, WEEKDAY790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW791=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW791_tree = (CommonTree)adaptor.create(LW791);
                    adaptor.addChild(root_0, LW791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF792=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF792_tree = (CommonTree)adaptor.create(INSTANCEOF792);
                    adaptor.addChild(root_0, INSTANCEOF792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF793=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent11517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF793_tree = (CommonTree)adaptor.create(TYPEOF793);
                    adaptor.addChild(root_0, TYPEOF793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST794=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST794_tree = (CommonTree)adaptor.create(CAST794);
                    adaptor.addChild(root_0, CAST794_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT795=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT795_tree = (CommonTree)adaptor.create(SNAPSHOT795);
                    adaptor.addChild(root_0, SNAPSHOT795_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE796=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE796_tree = (CommonTree)adaptor.create(VARIABLE796);
                    adaptor.addChild(root_0, VARIABLE796_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX797=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX797_tree = (CommonTree)adaptor.create(INDEX797);
                    adaptor.addChild(root_0, INDEX797_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW798=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW798_tree = (CommonTree)adaptor.create(WINDOW798);
                    adaptor.addChild(root_0, WINDOW798_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT799=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT799_tree = (CommonTree)adaptor.create(LEFT799);
                    adaptor.addChild(root_0, LEFT799_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT800=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT800_tree = (CommonTree)adaptor.create(RIGHT800);
                    adaptor.addChild(root_0, RIGHT800_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER801=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER801_tree = (CommonTree)adaptor.create(OUTER801);
                    adaptor.addChild(root_0, OUTER801_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL802=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL802_tree = (CommonTree)adaptor.create(FULL802);
                    adaptor.addChild(root_0, FULL802_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN803=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN803_tree = (CommonTree)adaptor.create(JOIN803);
                    adaptor.addChild(root_0, JOIN803_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE804=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE804_tree = (CommonTree)adaptor.create(DEFINE804);
                    adaptor.addChild(root_0, DEFINE804_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION805=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION805_tree = (CommonTree)adaptor.create(PARTITION805);
                    adaptor.addChild(root_0, PARTITION805_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES806=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES806_tree = (CommonTree)adaptor.create(MATCHES806);
                    adaptor.addChild(root_0, MATCHES806_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt276=2;
            int LA276_0 = input.LA(1);
            if ( (LA276_0==IDENT) ) {
                alt276=1;
            }
            else if ( (LA276_0==TICKED_STRING_LITERAL) ) {
                alt276=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);
                throw nvae;
            }
            switch (alt276) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT807=null;
        CommonTree t_tree=null;
        CommonTree IDENT807_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt277=2;
            int LA277_0 = input.LA(1);
            if ( (LA277_0==IDENT) ) {
                alt277=1;
            }
            else if ( (LA277_0==TICKED_STRING_LITERAL) ) {
                alt277=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);
                throw nvae;
            }
            switch (alt277) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT807=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT807_tree = (CommonTree)adaptor.create(IDENT807);
                    adaptor.addChild(root_0, IDENT807_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart808 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart809 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart810 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart811 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart812 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart813 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart814 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart815 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart816 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart817 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart818 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart819 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart820 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart821 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart822 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart823 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart824 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart825 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart826 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart827 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart828 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart829 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart830 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart831 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart832 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart833 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart834 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart835 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart836 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart837 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart838 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart839 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart840 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart841 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart842 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart843 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt306=8;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt306=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt306=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt306=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt306=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt306=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt306=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt306=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt306=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt306=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt306=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt306=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt306=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt306=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt306=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt306=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt306=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt306=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt306=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt306=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt306=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt306=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt306=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt306=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt306=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt306=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt306=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt306=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt306=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt306=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt306=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt306=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt306=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt306=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt306=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt306=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt306=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt306=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt306=4;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt306=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt306=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt306=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt306=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt306=2;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt306=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt306=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt306=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt306=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt306=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);
                throw nvae;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod11689);
                    yearPart808=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart808.getTree());
                    int alt278=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA278_1 = input.LA(2);
                            if ( ((LA278_1>=TIMEPERIOD_MONTH && LA278_1<=TIMEPERIOD_MONTHS)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA278_2 = input.LA(2);
                            if ( ((LA278_2>=TIMEPERIOD_MONTH && LA278_2<=TIMEPERIOD_MONTHS)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA278_3 = input.LA(2);
                            if ( ((LA278_3>=TIMEPERIOD_MONTH && LA278_3<=TIMEPERIOD_MONTHS)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA278_4 = input.LA(2);
                            if ( ((LA278_4>=TIMEPERIOD_MONTH && LA278_4<=TIMEPERIOD_MONTHS)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA278_5 = input.LA(2);
                            if ( ((LA278_5>=TIMEPERIOD_MONTH && LA278_5<=TIMEPERIOD_MONTHS)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA278_6 = input.LA(2);
                            if ( ((LA278_6>=TIMEPERIOD_MONTH && LA278_6<=TIMEPERIOD_MONTHS)) ) {
                                alt278=1;
                            }
                            }
                            break;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod11691);
                            monthPart809=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart809.getTree());
                            }
                            break;
                    }
                    int alt279=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA279_1 = input.LA(2);
                            if ( ((LA279_1>=TIMEPERIOD_WEEK && LA279_1<=TIMEPERIOD_WEEKS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA279_2 = input.LA(2);
                            if ( ((LA279_2>=TIMEPERIOD_WEEK && LA279_2<=TIMEPERIOD_WEEKS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA279_3 = input.LA(2);
                            if ( ((LA279_3>=TIMEPERIOD_WEEK && LA279_3<=TIMEPERIOD_WEEKS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA279_4 = input.LA(2);
                            if ( ((LA279_4>=TIMEPERIOD_WEEK && LA279_4<=TIMEPERIOD_WEEKS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA279_5 = input.LA(2);
                            if ( ((LA279_5>=TIMEPERIOD_WEEK && LA279_5<=TIMEPERIOD_WEEKS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA279_6 = input.LA(2);
                            if ( ((LA279_6>=TIMEPERIOD_WEEK && LA279_6<=TIMEPERIOD_WEEKS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod11694);
                            weekPart810=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart810.getTree());
                            }
                            break;
                    }
                    int alt280=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA280_1 = input.LA(2);
                            if ( ((LA280_1>=TIMEPERIOD_DAY && LA280_1<=TIMEPERIOD_DAYS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA280_2 = input.LA(2);
                            if ( ((LA280_2>=TIMEPERIOD_DAY && LA280_2<=TIMEPERIOD_DAYS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA280_3 = input.LA(2);
                            if ( ((LA280_3>=TIMEPERIOD_DAY && LA280_3<=TIMEPERIOD_DAYS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA280_4 = input.LA(2);
                            if ( ((LA280_4>=TIMEPERIOD_DAY && LA280_4<=TIMEPERIOD_DAYS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA280_5 = input.LA(2);
                            if ( ((LA280_5>=TIMEPERIOD_DAY && LA280_5<=TIMEPERIOD_DAYS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA280_6 = input.LA(2);
                            if ( ((LA280_6>=TIMEPERIOD_DAY && LA280_6<=TIMEPERIOD_DAYS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11697);
                            dayPart811=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart811.getTree());
                            }
                            break;
                    }
                    int alt281=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA281_1 = input.LA(2);
                            if ( ((LA281_1>=TIMEPERIOD_HOUR && LA281_1<=TIMEPERIOD_HOURS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA281_2 = input.LA(2);
                            if ( ((LA281_2>=TIMEPERIOD_HOUR && LA281_2<=TIMEPERIOD_HOURS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA281_3 = input.LA(2);
                            if ( ((LA281_3>=TIMEPERIOD_HOUR && LA281_3<=TIMEPERIOD_HOURS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA281_4 = input.LA(2);
                            if ( ((LA281_4>=TIMEPERIOD_HOUR && LA281_4<=TIMEPERIOD_HOURS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA281_5 = input.LA(2);
                            if ( ((LA281_5>=TIMEPERIOD_HOUR && LA281_5<=TIMEPERIOD_HOURS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA281_6 = input.LA(2);
                            if ( ((LA281_6>=TIMEPERIOD_HOUR && LA281_6<=TIMEPERIOD_HOURS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11700);
                            hourPart812=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart812.getTree());
                            }
                            break;
                    }
                    int alt282=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA282_1 = input.LA(2);
                            if ( (LA282_1==MIN||(LA282_1>=TIMEPERIOD_MINUTE && LA282_1<=TIMEPERIOD_MINUTES)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA282_2 = input.LA(2);
                            if ( (LA282_2==MIN||(LA282_2>=TIMEPERIOD_MINUTE && LA282_2<=TIMEPERIOD_MINUTES)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA282_3 = input.LA(2);
                            if ( (LA282_3==MIN||(LA282_3>=TIMEPERIOD_MINUTE && LA282_3<=TIMEPERIOD_MINUTES)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA282_4 = input.LA(2);
                            if ( (LA282_4==MIN||(LA282_4>=TIMEPERIOD_MINUTE && LA282_4<=TIMEPERIOD_MINUTES)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA282_5 = input.LA(2);
                            if ( (LA282_5==MIN||(LA282_5>=TIMEPERIOD_MINUTE && LA282_5<=TIMEPERIOD_MINUTES)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA282_6 = input.LA(2);
                            if ( (LA282_6==MIN||(LA282_6>=TIMEPERIOD_MINUTE && LA282_6<=TIMEPERIOD_MINUTES)) ) {
                                alt282=1;
                            }
                            }
                            break;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11703);
                            minutePart813=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart813.getTree());
                            }
                            break;
                    }
                    int alt283=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA283_1 = input.LA(2);
                            if ( ((LA283_1>=TIMEPERIOD_SEC && LA283_1<=TIMEPERIOD_SECONDS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA283_2 = input.LA(2);
                            if ( ((LA283_2>=TIMEPERIOD_SEC && LA283_2<=TIMEPERIOD_SECONDS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA283_3 = input.LA(2);
                            if ( ((LA283_3>=TIMEPERIOD_SEC && LA283_3<=TIMEPERIOD_SECONDS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA283_4 = input.LA(2);
                            if ( ((LA283_4>=TIMEPERIOD_SEC && LA283_4<=TIMEPERIOD_SECONDS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA283_5 = input.LA(2);
                            if ( ((LA283_5>=TIMEPERIOD_SEC && LA283_5<=TIMEPERIOD_SECONDS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA283_6 = input.LA(2);
                            if ( ((LA283_6>=TIMEPERIOD_SEC && LA283_6<=TIMEPERIOD_SECONDS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11706);
                            secondPart814=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart814.getTree());
                            }
                            break;
                    }
                    int alt284=2;
                    int LA284_0 = input.LA(1);
                    if ( (LA284_0==NUM_DOUBLE||LA284_0==IDENT||LA284_0==QUESTION||LA284_0==NUM_INT||(LA284_0>=NUM_LONG && LA284_0<=NUM_FLOAT)) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11709);
                            millisecondPart815=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart815.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod11715);
                    monthPart816=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart816.getTree());
                    int alt285=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA285_1 = input.LA(2);
                            if ( ((LA285_1>=TIMEPERIOD_WEEK && LA285_1<=TIMEPERIOD_WEEKS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA285_2 = input.LA(2);
                            if ( ((LA285_2>=TIMEPERIOD_WEEK && LA285_2<=TIMEPERIOD_WEEKS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA285_3 = input.LA(2);
                            if ( ((LA285_3>=TIMEPERIOD_WEEK && LA285_3<=TIMEPERIOD_WEEKS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA285_4 = input.LA(2);
                            if ( ((LA285_4>=TIMEPERIOD_WEEK && LA285_4<=TIMEPERIOD_WEEKS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA285_5 = input.LA(2);
                            if ( ((LA285_5>=TIMEPERIOD_WEEK && LA285_5<=TIMEPERIOD_WEEKS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA285_6 = input.LA(2);
                            if ( ((LA285_6>=TIMEPERIOD_WEEK && LA285_6<=TIMEPERIOD_WEEKS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod11717);
                            weekPart817=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart817.getTree());
                            }
                            break;
                    }
                    int alt286=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA286_1 = input.LA(2);
                            if ( ((LA286_1>=TIMEPERIOD_DAY && LA286_1<=TIMEPERIOD_DAYS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA286_2 = input.LA(2);
                            if ( ((LA286_2>=TIMEPERIOD_DAY && LA286_2<=TIMEPERIOD_DAYS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA286_3 = input.LA(2);
                            if ( ((LA286_3>=TIMEPERIOD_DAY && LA286_3<=TIMEPERIOD_DAYS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA286_4 = input.LA(2);
                            if ( ((LA286_4>=TIMEPERIOD_DAY && LA286_4<=TIMEPERIOD_DAYS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA286_5 = input.LA(2);
                            if ( ((LA286_5>=TIMEPERIOD_DAY && LA286_5<=TIMEPERIOD_DAYS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA286_6 = input.LA(2);
                            if ( ((LA286_6>=TIMEPERIOD_DAY && LA286_6<=TIMEPERIOD_DAYS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11720);
                            dayPart818=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart818.getTree());
                            }
                            break;
                    }
                    int alt287=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA287_1 = input.LA(2);
                            if ( ((LA287_1>=TIMEPERIOD_HOUR && LA287_1<=TIMEPERIOD_HOURS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA287_2 = input.LA(2);
                            if ( ((LA287_2>=TIMEPERIOD_HOUR && LA287_2<=TIMEPERIOD_HOURS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA287_3 = input.LA(2);
                            if ( ((LA287_3>=TIMEPERIOD_HOUR && LA287_3<=TIMEPERIOD_HOURS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA287_4 = input.LA(2);
                            if ( ((LA287_4>=TIMEPERIOD_HOUR && LA287_4<=TIMEPERIOD_HOURS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA287_5 = input.LA(2);
                            if ( ((LA287_5>=TIMEPERIOD_HOUR && LA287_5<=TIMEPERIOD_HOURS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA287_6 = input.LA(2);
                            if ( ((LA287_6>=TIMEPERIOD_HOUR && LA287_6<=TIMEPERIOD_HOURS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11723);
                            hourPart819=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart819.getTree());
                            }
                            break;
                    }
                    int alt288=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA288_1 = input.LA(2);
                            if ( (LA288_1==MIN||(LA288_1>=TIMEPERIOD_MINUTE && LA288_1<=TIMEPERIOD_MINUTES)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA288_2 = input.LA(2);
                            if ( (LA288_2==MIN||(LA288_2>=TIMEPERIOD_MINUTE && LA288_2<=TIMEPERIOD_MINUTES)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA288_3 = input.LA(2);
                            if ( (LA288_3==MIN||(LA288_3>=TIMEPERIOD_MINUTE && LA288_3<=TIMEPERIOD_MINUTES)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA288_4 = input.LA(2);
                            if ( (LA288_4==MIN||(LA288_4>=TIMEPERIOD_MINUTE && LA288_4<=TIMEPERIOD_MINUTES)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA288_5 = input.LA(2);
                            if ( (LA288_5==MIN||(LA288_5>=TIMEPERIOD_MINUTE && LA288_5<=TIMEPERIOD_MINUTES)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA288_6 = input.LA(2);
                            if ( (LA288_6==MIN||(LA288_6>=TIMEPERIOD_MINUTE && LA288_6<=TIMEPERIOD_MINUTES)) ) {
                                alt288=1;
                            }
                            }
                            break;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11726);
                            minutePart820=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart820.getTree());
                            }
                            break;
                    }
                    int alt289=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA289_1 = input.LA(2);
                            if ( ((LA289_1>=TIMEPERIOD_SEC && LA289_1<=TIMEPERIOD_SECONDS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA289_2 = input.LA(2);
                            if ( ((LA289_2>=TIMEPERIOD_SEC && LA289_2<=TIMEPERIOD_SECONDS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA289_3 = input.LA(2);
                            if ( ((LA289_3>=TIMEPERIOD_SEC && LA289_3<=TIMEPERIOD_SECONDS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA289_4 = input.LA(2);
                            if ( ((LA289_4>=TIMEPERIOD_SEC && LA289_4<=TIMEPERIOD_SECONDS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA289_5 = input.LA(2);
                            if ( ((LA289_5>=TIMEPERIOD_SEC && LA289_5<=TIMEPERIOD_SECONDS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA289_6 = input.LA(2);
                            if ( ((LA289_6>=TIMEPERIOD_SEC && LA289_6<=TIMEPERIOD_SECONDS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11729);
                            secondPart821=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart821.getTree());
                            }
                            break;
                    }
                    int alt290=2;
                    int LA290_0 = input.LA(1);
                    if ( (LA290_0==NUM_DOUBLE||LA290_0==IDENT||LA290_0==QUESTION||LA290_0==NUM_INT||(LA290_0>=NUM_LONG && LA290_0<=NUM_FLOAT)) ) {
                        alt290=1;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11732);
                            millisecondPart822=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart822.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod11738);
                    weekPart823=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart823.getTree());
                    int alt291=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA291_1 = input.LA(2);
                            if ( ((LA291_1>=TIMEPERIOD_DAY && LA291_1<=TIMEPERIOD_DAYS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA291_2 = input.LA(2);
                            if ( ((LA291_2>=TIMEPERIOD_DAY && LA291_2<=TIMEPERIOD_DAYS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA291_3 = input.LA(2);
                            if ( ((LA291_3>=TIMEPERIOD_DAY && LA291_3<=TIMEPERIOD_DAYS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA291_4 = input.LA(2);
                            if ( ((LA291_4>=TIMEPERIOD_DAY && LA291_4<=TIMEPERIOD_DAYS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA291_5 = input.LA(2);
                            if ( ((LA291_5>=TIMEPERIOD_DAY && LA291_5<=TIMEPERIOD_DAYS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA291_6 = input.LA(2);
                            if ( ((LA291_6>=TIMEPERIOD_DAY && LA291_6<=TIMEPERIOD_DAYS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11740);
                            dayPart824=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart824.getTree());
                            }
                            break;
                    }
                    int alt292=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA292_1 = input.LA(2);
                            if ( ((LA292_1>=TIMEPERIOD_HOUR && LA292_1<=TIMEPERIOD_HOURS)) ) {
                                alt292=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA292_2 = input.LA(2);
                            if ( ((LA292_2>=TIMEPERIOD_HOUR && LA292_2<=TIMEPERIOD_HOURS)) ) {
                                alt292=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA292_3 = input.LA(2);
                            if ( ((LA292_3>=TIMEPERIOD_HOUR && LA292_3<=TIMEPERIOD_HOURS)) ) {
                                alt292=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA292_4 = input.LA(2);
                            if ( ((LA292_4>=TIMEPERIOD_HOUR && LA292_4<=TIMEPERIOD_HOURS)) ) {
                                alt292=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA292_5 = input.LA(2);
                            if ( ((LA292_5>=TIMEPERIOD_HOUR && LA292_5<=TIMEPERIOD_HOURS)) ) {
                                alt292=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA292_6 = input.LA(2);
                            if ( ((LA292_6>=TIMEPERIOD_HOUR && LA292_6<=TIMEPERIOD_HOURS)) ) {
                                alt292=1;
                            }
                            }
                            break;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11743);
                            hourPart825=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart825.getTree());
                            }
                            break;
                    }
                    int alt293=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA293_1 = input.LA(2);
                            if ( (LA293_1==MIN||(LA293_1>=TIMEPERIOD_MINUTE && LA293_1<=TIMEPERIOD_MINUTES)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA293_2 = input.LA(2);
                            if ( (LA293_2==MIN||(LA293_2>=TIMEPERIOD_MINUTE && LA293_2<=TIMEPERIOD_MINUTES)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA293_3 = input.LA(2);
                            if ( (LA293_3==MIN||(LA293_3>=TIMEPERIOD_MINUTE && LA293_3<=TIMEPERIOD_MINUTES)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA293_4 = input.LA(2);
                            if ( (LA293_4==MIN||(LA293_4>=TIMEPERIOD_MINUTE && LA293_4<=TIMEPERIOD_MINUTES)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA293_5 = input.LA(2);
                            if ( (LA293_5==MIN||(LA293_5>=TIMEPERIOD_MINUTE && LA293_5<=TIMEPERIOD_MINUTES)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA293_6 = input.LA(2);
                            if ( (LA293_6==MIN||(LA293_6>=TIMEPERIOD_MINUTE && LA293_6<=TIMEPERIOD_MINUTES)) ) {
                                alt293=1;
                            }
                            }
                            break;
                    }
                    switch (alt293) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11746);
                            minutePart826=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart826.getTree());
                            }
                            break;
                    }
                    int alt294=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA294_1 = input.LA(2);
                            if ( ((LA294_1>=TIMEPERIOD_SEC && LA294_1<=TIMEPERIOD_SECONDS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA294_2 = input.LA(2);
                            if ( ((LA294_2>=TIMEPERIOD_SEC && LA294_2<=TIMEPERIOD_SECONDS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA294_3 = input.LA(2);
                            if ( ((LA294_3>=TIMEPERIOD_SEC && LA294_3<=TIMEPERIOD_SECONDS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA294_4 = input.LA(2);
                            if ( ((LA294_4>=TIMEPERIOD_SEC && LA294_4<=TIMEPERIOD_SECONDS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA294_5 = input.LA(2);
                            if ( ((LA294_5>=TIMEPERIOD_SEC && LA294_5<=TIMEPERIOD_SECONDS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA294_6 = input.LA(2);
                            if ( ((LA294_6>=TIMEPERIOD_SEC && LA294_6<=TIMEPERIOD_SECONDS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11749);
                            secondPart827=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart827.getTree());
                            }
                            break;
                    }
                    int alt295=2;
                    int LA295_0 = input.LA(1);
                    if ( (LA295_0==NUM_DOUBLE||LA295_0==IDENT||LA295_0==QUESTION||LA295_0==NUM_INT||(LA295_0>=NUM_LONG && LA295_0<=NUM_FLOAT)) ) {
                        alt295=1;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11752);
                            millisecondPart828=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart828.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11758);
                    dayPart829=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart829.getTree());
                    int alt296=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA296_1 = input.LA(2);
                            if ( ((LA296_1>=TIMEPERIOD_HOUR && LA296_1<=TIMEPERIOD_HOURS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA296_2 = input.LA(2);
                            if ( ((LA296_2>=TIMEPERIOD_HOUR && LA296_2<=TIMEPERIOD_HOURS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA296_3 = input.LA(2);
                            if ( ((LA296_3>=TIMEPERIOD_HOUR && LA296_3<=TIMEPERIOD_HOURS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA296_4 = input.LA(2);
                            if ( ((LA296_4>=TIMEPERIOD_HOUR && LA296_4<=TIMEPERIOD_HOURS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA296_5 = input.LA(2);
                            if ( ((LA296_5>=TIMEPERIOD_HOUR && LA296_5<=TIMEPERIOD_HOURS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA296_6 = input.LA(2);
                            if ( ((LA296_6>=TIMEPERIOD_HOUR && LA296_6<=TIMEPERIOD_HOURS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11760);
                            hourPart830=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart830.getTree());
                            }
                            break;
                    }
                    int alt297=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA297_1 = input.LA(2);
                            if ( (LA297_1==MIN||(LA297_1>=TIMEPERIOD_MINUTE && LA297_1<=TIMEPERIOD_MINUTES)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA297_2 = input.LA(2);
                            if ( (LA297_2==MIN||(LA297_2>=TIMEPERIOD_MINUTE && LA297_2<=TIMEPERIOD_MINUTES)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA297_3 = input.LA(2);
                            if ( (LA297_3==MIN||(LA297_3>=TIMEPERIOD_MINUTE && LA297_3<=TIMEPERIOD_MINUTES)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA297_4 = input.LA(2);
                            if ( (LA297_4==MIN||(LA297_4>=TIMEPERIOD_MINUTE && LA297_4<=TIMEPERIOD_MINUTES)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA297_5 = input.LA(2);
                            if ( (LA297_5==MIN||(LA297_5>=TIMEPERIOD_MINUTE && LA297_5<=TIMEPERIOD_MINUTES)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA297_6 = input.LA(2);
                            if ( (LA297_6==MIN||(LA297_6>=TIMEPERIOD_MINUTE && LA297_6<=TIMEPERIOD_MINUTES)) ) {
                                alt297=1;
                            }
                            }
                            break;
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11763);
                            minutePart831=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart831.getTree());
                            }
                            break;
                    }
                    int alt298=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA298_1 = input.LA(2);
                            if ( ((LA298_1>=TIMEPERIOD_SEC && LA298_1<=TIMEPERIOD_SECONDS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA298_2 = input.LA(2);
                            if ( ((LA298_2>=TIMEPERIOD_SEC && LA298_2<=TIMEPERIOD_SECONDS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA298_3 = input.LA(2);
                            if ( ((LA298_3>=TIMEPERIOD_SEC && LA298_3<=TIMEPERIOD_SECONDS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA298_4 = input.LA(2);
                            if ( ((LA298_4>=TIMEPERIOD_SEC && LA298_4<=TIMEPERIOD_SECONDS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA298_5 = input.LA(2);
                            if ( ((LA298_5>=TIMEPERIOD_SEC && LA298_5<=TIMEPERIOD_SECONDS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA298_6 = input.LA(2);
                            if ( ((LA298_6>=TIMEPERIOD_SEC && LA298_6<=TIMEPERIOD_SECONDS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11766);
                            secondPart832=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart832.getTree());
                            }
                            break;
                    }
                    int alt299=2;
                    int LA299_0 = input.LA(1);
                    if ( (LA299_0==NUM_DOUBLE||LA299_0==IDENT||LA299_0==QUESTION||LA299_0==NUM_INT||(LA299_0>=NUM_LONG && LA299_0<=NUM_FLOAT)) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11769);
                            millisecondPart833=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart833.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11775);
                    hourPart834=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart834.getTree());
                    int alt300=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA300_1 = input.LA(2);
                            if ( (LA300_1==MIN||(LA300_1>=TIMEPERIOD_MINUTE && LA300_1<=TIMEPERIOD_MINUTES)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA300_2 = input.LA(2);
                            if ( (LA300_2==MIN||(LA300_2>=TIMEPERIOD_MINUTE && LA300_2<=TIMEPERIOD_MINUTES)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA300_3 = input.LA(2);
                            if ( (LA300_3==MIN||(LA300_3>=TIMEPERIOD_MINUTE && LA300_3<=TIMEPERIOD_MINUTES)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA300_4 = input.LA(2);
                            if ( (LA300_4==MIN||(LA300_4>=TIMEPERIOD_MINUTE && LA300_4<=TIMEPERIOD_MINUTES)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA300_5 = input.LA(2);
                            if ( (LA300_5==MIN||(LA300_5>=TIMEPERIOD_MINUTE && LA300_5<=TIMEPERIOD_MINUTES)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA300_6 = input.LA(2);
                            if ( (LA300_6==MIN||(LA300_6>=TIMEPERIOD_MINUTE && LA300_6<=TIMEPERIOD_MINUTES)) ) {
                                alt300=1;
                            }
                            }
                            break;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11777);
                            minutePart835=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart835.getTree());
                            }
                            break;
                    }
                    int alt301=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA301_1 = input.LA(2);
                            if ( ((LA301_1>=TIMEPERIOD_SEC && LA301_1<=TIMEPERIOD_SECONDS)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA301_2 = input.LA(2);
                            if ( ((LA301_2>=TIMEPERIOD_SEC && LA301_2<=TIMEPERIOD_SECONDS)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA301_3 = input.LA(2);
                            if ( ((LA301_3>=TIMEPERIOD_SEC && LA301_3<=TIMEPERIOD_SECONDS)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA301_4 = input.LA(2);
                            if ( ((LA301_4>=TIMEPERIOD_SEC && LA301_4<=TIMEPERIOD_SECONDS)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA301_5 = input.LA(2);
                            if ( ((LA301_5>=TIMEPERIOD_SEC && LA301_5<=TIMEPERIOD_SECONDS)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA301_6 = input.LA(2);
                            if ( ((LA301_6>=TIMEPERIOD_SEC && LA301_6<=TIMEPERIOD_SECONDS)) ) {
                                alt301=1;
                            }
                            }
                            break;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11780);
                            secondPart836=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart836.getTree());
                            }
                            break;
                    }
                    int alt302=2;
                    int LA302_0 = input.LA(1);
                    if ( (LA302_0==NUM_DOUBLE||LA302_0==IDENT||LA302_0==QUESTION||LA302_0==NUM_INT||(LA302_0>=NUM_LONG && LA302_0<=NUM_FLOAT)) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11783);
                            millisecondPart837=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart837.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11789);
                    minutePart838=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart838.getTree());
                    int alt303=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA303_1 = input.LA(2);
                            if ( ((LA303_1>=TIMEPERIOD_SEC && LA303_1<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA303_2 = input.LA(2);
                            if ( ((LA303_2>=TIMEPERIOD_SEC && LA303_2<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA303_3 = input.LA(2);
                            if ( ((LA303_3>=TIMEPERIOD_SEC && LA303_3<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA303_4 = input.LA(2);
                            if ( ((LA303_4>=TIMEPERIOD_SEC && LA303_4<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA303_5 = input.LA(2);
                            if ( ((LA303_5>=TIMEPERIOD_SEC && LA303_5<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA303_6 = input.LA(2);
                            if ( ((LA303_6>=TIMEPERIOD_SEC && LA303_6<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11791);
                            secondPart839=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart839.getTree());
                            }
                            break;
                    }
                    int alt304=2;
                    int LA304_0 = input.LA(1);
                    if ( (LA304_0==NUM_DOUBLE||LA304_0==IDENT||LA304_0==QUESTION||LA304_0==NUM_INT||(LA304_0>=NUM_LONG && LA304_0<=NUM_FLOAT)) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11794);
                            millisecondPart840=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart840.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11800);
                    secondPart841=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart841.getTree());
                    int alt305=2;
                    int LA305_0 = input.LA(1);
                    if ( (LA305_0==NUM_DOUBLE||LA305_0==IDENT||LA305_0==QUESTION||LA305_0==NUM_INT||(LA305_0>=NUM_LONG && LA305_0<=NUM_FLOAT)) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11802);
                            millisecondPart842=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart842.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11808);
                    millisecondPart843=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart843.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS846=null;
        Token TIMEPERIOD_YEAR847=null;
        EsperEPL2GrammarParser.number_return number844 = null;
        EsperEPL2GrammarParser.substitution_return substitution845 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS846_tree=null;
        CommonTree TIMEPERIOD_YEAR847_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt307=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt307=1;
                }
                break;
            case IDENT:
                {
                alt307=2;
                }
                break;
            case QUESTION:
                {
                alt307=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);
                throw nvae;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_yearPart11855);
                    number844=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number844.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart11859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart11861);
                    substitution845=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution845.getTree());
                    }
                    break;
            }
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==TIMEPERIOD_YEARS) ) {
                alt308=1;
            }
            else if ( (LA308_0==TIMEPERIOD_YEAR) ) {
                alt308=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);
                throw nvae;
            }
            switch (alt308) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS846=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart11865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS846);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR847=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart11869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR847);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS850=null;
        Token TIMEPERIOD_MONTH851=null;
        EsperEPL2GrammarParser.number_return number848 = null;
        EsperEPL2GrammarParser.substitution_return substitution849 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS850_tree=null;
        CommonTree TIMEPERIOD_MONTH851_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt309=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt309=1;
                }
                break;
            case IDENT:
                {
                alt309=2;
                }
                break;
            case QUESTION:
                {
                alt309=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 309, 0, input);
                throw nvae;
            }
            switch (alt309) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_monthPart11917);
                    number848=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number848.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart11921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart11923);
                    substitution849=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution849.getTree());
                    }
                    break;
            }
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==TIMEPERIOD_MONTHS) ) {
                alt310=1;
            }
            else if ( (LA310_0==TIMEPERIOD_MONTH) ) {
                alt310=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);
                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS850=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart11927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS850);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH851=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart11931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH851);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS854=null;
        Token TIMEPERIOD_WEEK855=null;
        EsperEPL2GrammarParser.number_return number852 = null;
        EsperEPL2GrammarParser.substitution_return substitution853 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS854_tree=null;
        CommonTree TIMEPERIOD_WEEK855_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt311=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt311=1;
                }
                break;
            case IDENT:
                {
                alt311=2;
                }
                break;
            case QUESTION:
                {
                alt311=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 311, 0, input);
                throw nvae;
            }
            switch (alt311) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekPart11979);
                    number852=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number852.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart11983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart11985);
                    substitution853=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution853.getTree());
                    }
                    break;
            }
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==TIMEPERIOD_WEEKS) ) {
                alt312=1;
            }
            else if ( (LA312_0==TIMEPERIOD_WEEK) ) {
                alt312=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);
                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS854=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart11989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS854);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK855=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart11993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK855);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS858=null;
        Token TIMEPERIOD_DAY859=null;
        EsperEPL2GrammarParser.number_return number856 = null;
        EsperEPL2GrammarParser.substitution_return substitution857 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS858_tree=null;
        CommonTree TIMEPERIOD_DAY859_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt313=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt313=1;
                }
                break;
            case IDENT:
                {
                alt313=2;
                }
                break;
            case QUESTION:
                {
                alt313=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);
                throw nvae;
            }
            switch (alt313) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart12041);
                    number856=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number856.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart12045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart12047);
                    substitution857=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution857.getTree());
                    }
                    break;
            }
            int alt314=2;
            int LA314_0 = input.LA(1);
            if ( (LA314_0==TIMEPERIOD_DAYS) ) {
                alt314=1;
            }
            else if ( (LA314_0==TIMEPERIOD_DAY) ) {
                alt314=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);
                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS858=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart12051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS858);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY859=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart12055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY859);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS862=null;
        Token TIMEPERIOD_HOUR863=null;
        EsperEPL2GrammarParser.number_return number860 = null;
        EsperEPL2GrammarParser.substitution_return substitution861 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS862_tree=null;
        CommonTree TIMEPERIOD_HOUR863_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt315=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt315=1;
                }
                break;
            case IDENT:
                {
                alt315=2;
                }
                break;
            case QUESTION:
                {
                alt315=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);
                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart12104);
                    number860=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number860.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart12108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart12110);
                    substitution861=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution861.getTree());
                    }
                    break;
            }
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==TIMEPERIOD_HOURS) ) {
                alt316=1;
            }
            else if ( (LA316_0==TIMEPERIOD_HOUR) ) {
                alt316=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);
                throw nvae;
            }
            switch (alt316) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS862=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart12114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS862);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR863=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart12118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR863);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES866=null;
        Token TIMEPERIOD_MINUTE867=null;
        Token MIN868=null;
        EsperEPL2GrammarParser.number_return number864 = null;
        EsperEPL2GrammarParser.substitution_return substitution865 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES866_tree=null;
        CommonTree TIMEPERIOD_MINUTE867_tree=null;
        CommonTree MIN868_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt317=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt317=1;
                }
                break;
            case IDENT:
                {
                alt317=2;
                }
                break;
            case QUESTION:
                {
                alt317=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 317, 0, input);
                throw nvae;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart12167);
                    number864=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number864.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart12171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart12173);
                    substitution865=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution865.getTree());
                    }
                    break;
            }
            int alt318=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt318=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt318=2;
                }
                break;
            case MIN:
                {
                alt318=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES866=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES866);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE867=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE867);
                    }
                    break;
                case 3 :
                    {
                    MIN868=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart12185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN868);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS871=null;
        Token TIMEPERIOD_SECOND872=null;
        Token TIMEPERIOD_SEC873=null;
        EsperEPL2GrammarParser.number_return number869 = null;
        EsperEPL2GrammarParser.substitution_return substitution870 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS871_tree=null;
        CommonTree TIMEPERIOD_SECOND872_tree=null;
        CommonTree TIMEPERIOD_SEC873_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt319=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt319=1;
                }
                break;
            case IDENT:
                {
                alt319=2;
                }
                break;
            case QUESTION:
                {
                alt319=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart12235);
                    number869=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number869.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart12239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart12241);
                    substitution870=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution870.getTree());
                    }
                    break;
            }
            int alt320=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt320=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt320=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt320=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS871=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS871);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND872=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart12249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND872);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC873=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart12253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC873);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS876=null;
        Token TIMEPERIOD_MILLISECOND877=null;
        Token TIMEPERIOD_MILLISEC878=null;
        EsperEPL2GrammarParser.number_return number874 = null;
        EsperEPL2GrammarParser.substitution_return substitution875 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS876_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND877_tree=null;
        CommonTree TIMEPERIOD_MILLISEC878_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt321=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt321=1;
                }
                break;
            case IDENT:
                {
                alt321=2;
                }
                break;
            case QUESTION:
                {
                alt321=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);
                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart12303);
                    number874=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number874.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart12307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart12309);
                    substitution875=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution875.getTree());
                    }
                    break;
            }
            int alt322=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt322=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt322=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt322=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 322, 0, input);
                throw nvae;
            }
            switch (alt322) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS876=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS876);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND877=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND877);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC878=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC878);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt323=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt323=1;
                }
                break;
            case NUM_LONG:
                {
                alt323=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt323=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt323=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);
                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number12376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number12393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number12410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number12427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution12448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant879 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant880 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt324=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt324=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt324=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt324=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt324=4;
                }
                break;
            case VALUE_NULL:
                {
                alt324=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);
                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant12467);
                    numberconstant879=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant879.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant12474);
                    stringconstant880=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant880.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant12487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number881 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt325=3;
            int LA325_0 = input.LA(1);
            if ( (LA325_0==MINUS) ) {
                alt325=1;
            }
            else if ( (LA325_0==PLUS) ) {
                alt325=2;
            }
            switch (alt325) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12559);
            number881=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number881.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number881!=null?((CommonTree)number881.tree):null).getType(), "-" + (number881!=null?input.toString(number881.start,number881.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt326=2;
            int LA326_0 = input.LA(1);
            if ( (LA326_0==STRING_LITERAL) ) {
                alt326=1;
            }
            else if ( (LA326_0==QUOTED_STRING_LITERAL) ) {
                alt326=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);
                throw nvae;
            }
            switch (alt326) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4499);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5899);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7763);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8601);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8669);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9979);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10402);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10413);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10424);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10435);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10446);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10458);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10469);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10480);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10493);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA183 dfa183 = new DFA183(this);
    static final String DFA183_eotS =
        "\u0ba8\uffff";
    static final String DFA183_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0b73\uffff";
    static final String DFA183_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\12\uffff\1\u011e\171\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u0129\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\2\6\115\uffff\2\6\103\uffff\2\6\72\uffff"+
        "\2\6\112\uffff\2\6\72\uffff\2\6\114\uffff\2\6\72\uffff\2\6\102\uffff"+
        "\2\6\111\uffff\2\6\101\uffff\2\6\104\uffff\2\6\72\uffff\2\6\101"+
        "\uffff\2\6\101\uffff\2\6\162\uffff\1\0\30\uffff\1\0\30\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1"+
        "\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\115\uffff\1\0\53\uffff\1\0\73\uffff"+
        "\1\0\53\uffff\1\0\5\uffff";
    static final String DFA183_maxS =
        "\2\u0140\13\uffff\1\u0140\3\uffff\1\u013d\2\uffff\2\u013d\2\uffff"+
        "\4\u013d\1\uffff\2\u013d\12\uffff\3\u013d\2\uffff\3\u013d\3\uffff"+
        "\1\u013d\12\uffff\1\u011e\171\uffff\1\u0140\73\uffff\1\u0140\73"+
        "\uffff\1\u0140\73\uffff\1\u0140\73\uffff\1\u0140\73\uffff\1\u0140"+
        "\73\uffff\1\u0140\73\uffff\1\u0140\73\uffff\1\u0140\73\uffff\1\u0140"+
        "\73\uffff\1\u0140\73\uffff\1\u0139\73\uffff\1\u0140\73\uffff\1\u0140"+
        "\73\uffff\1\u0140\73\uffff\1\u0140\73\uffff\1\u013e\2\u0136\115"+
        "\uffff\2\u0136\103\uffff\2\u0136\72\uffff\2\u0136\112\uffff\2\u0136"+
        "\72\uffff\2\u0136\114\uffff\2\u0136\72\uffff\2\u0136\102\uffff\2"+
        "\u0136\111\uffff\2\u0136\101\uffff\2\u0136\104\uffff\2\u0136\72"+
        "\uffff\2\u0136\101\uffff\2\u0136\101\uffff\2\u0136\162\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1"+
        "\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\115\uffff"+
        "\1\0\53\uffff\1\0\73\uffff\1\0\53\uffff\1\0\5\uffff";
    static final String DFA183_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\56\uffff\2\6\1\uffff\1\6"+
        "\1\7\4\uffff\1\1\56\uffff\1\10\1\4\u0405\uffff\115\6\2\uffff\103"+
        "\6\2\uffff\72\6\2\uffff\112\6\2\uffff\72\6\2\uffff\114\6\2\uffff"+
        "\72\6\2\uffff\102\6\2\uffff\111\6\2\uffff\101\6\2\uffff\73\6\2\uffff"+
        "\7\6\2\uffff\72\6\2\uffff\101\6\2\uffff\101\6\2\uffff\102\6\1\11"+
        "\57\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff"+
        "\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\30\6\1\uffff"+
        "\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\53\6\1\uffff\5\6\1\uffff\32\6\1\uffff\32\6\1\uffff\53\6\1\uffff"+
        "\5\6";
    static final String DFA183_specialS =
        "\1\0\u00b8\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\1\22\1\23\115\uffff"+
        "\1\24\1\25\103\uffff\1\26\1\27\72\uffff\1\30\1\31\112\uffff\1\32"+
        "\1\33\72\uffff\1\34\1\35\114\uffff\1\36\1\37\72\uffff\1\40\1\41"+
        "\102\uffff\1\42\1\43\111\uffff\1\44\1\45\101\uffff\1\46\1\47\104"+
        "\uffff\1\50\1\51\72\uffff\1\52\1\53\101\uffff\1\54\1\55\101\uffff"+
        "\1\56\1\57\162\uffff\1\60\30\uffff\1\61\30\uffff\1\62\30\uffff\1"+
        "\63\30\uffff\1\64\30\uffff\1\65\114\uffff\1\66\30\uffff\1\67\30"+
        "\uffff\1\70\30\uffff\1\71\30\uffff\1\72\30\uffff\1\73\30\uffff\1"+
        "\74\31\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff\1\100\31"+
        "\uffff\1\101\31\uffff\1\102\31\uffff\1\103\115\uffff\1\104\53\uffff"+
        "\1\105\73\uffff\1\106\53\uffff\1\107\5\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\75\1\76\1\53\1\77\2\16"+
            "\1\56\1\57\1\60\1\100\1\uffff\1\16\1\uffff\4\16\22\uffff\3\2"+
            "\5\uffff\3\16\2\uffff\1\16\1\uffff\2\16\u0093\uffff\1\2\16\uffff"+
            "\1\16\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff"+
            "\1\101\1\uffff\1\2\4\uffff\1\16\2\2",
            "\1\106\4\uffff\1\106\3\uffff\1\106\3\uffff\11\106\10\uffff"+
            "\1\106\1\uffff\4\106\12\uffff\3\106\11\uffff\10\106\2\uffff"+
            "\1\106\1\uffff\5\106\2\uffff\1\106\1\uffff\4\106\32\uffff\3"+
            "\106\2\uffff\1\106\1\uffff\2\106\u0093\uffff\1\2\16\uffff\1"+
            "\106\33\uffff\1\2\4\uffff\1\106\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\4\uffff\1\166\2\uffff\2\166\3\uffff\11\166\1\165\1"+
            "\166\6\uffff\1\166\1\uffff\4\166\12\uffff\3\166\11\uffff\22"+
            "\166\1\uffff\1\166\1\uffff\4\166\22\uffff\3\166\5\uffff\3\166"+
            "\2\uffff\1\166\1\uffff\2\166\u0093\uffff\1\166\16\uffff\2\166"+
            "\7\uffff\2\166\1\uffff\2\166\11\uffff\1\166\2\uffff\1\166\1"+
            "\uffff\1\166\4\uffff\3\166",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u00b9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u00f5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u0131\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u016d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u01a9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u01e5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u0221\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u025d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u0299\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u02d5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u0311\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u034d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u0389\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u03c5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u0401\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a5"+
            "\uffff\1\16\1\uffff\1\u043d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0479",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b0\4\uffff\1\u048e\2\uffff\1\u04be\1\u048f\3\uffff\1"+
            "\u0490\1\u0491\1\u0492\1\u0493\1\u0494\1\u0495\1\u0496\1\u0497"+
            "\1\u048d\1\uffff\1\u047e\6\uffff\1\u04b3\1\uffff\1\u04b5\1\u04b1"+
            "\1\u04b2\1\u04b4\5\uffff\1\u047d\1\u047c\3\uffff\1\u0498\1\u0499"+
            "\1\u049a\11\uffff\1\u049e\1\u049f\1\u04a0\1\u04a2\1\u04a3\1"+
            "\u04a4\1\u04a5\1\u04a6\1\u04b9\1\u04ba\1\u04a7\1\u04bb\1\u04a8"+
            "\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04bc\1\uffff\1\u04ad\1\uffff"+
            "\1\u04ae\1\u04a1\1\u048c\1\u04af\22\uffff\1\u0485\1\u0486\1"+
            "\u0487\5\uffff\1\u04b6\1\u04b7\1\u04b8\2\uffff\1\u049b\1\uffff"+
            "\1\u049c\1\u049d\u0093\uffff\1\u0484\16\uffff\1\u048a\1\u0489"+
            "\5\uffff\1\u04bf\1\uffff\1\u0480\1\u0488\1\uffff\1\u047a\1\u047b"+
            "\11\uffff\1\u047f\2\uffff\1\u04bd\1\uffff\1\u0481\4\uffff\1"+
            "\u048b\1\u0482\1\u0483",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f6\4\uffff\1\u04d4\2\uffff\1\u0504\1\u04d5\3\uffff\1"+
            "\u04d6\1\u04d7\1\u04d8\1\u04d9\1\u04da\1\u04db\1\u04dc\1\u04dd"+
            "\1\u04d3\1\uffff\1\u04c2\6\uffff\1\u04f9\1\uffff\1\u04fb\1\u04f7"+
            "\1\u04f8\1\u04fa\5\uffff\1\u04c1\1\u04c0\3\uffff\1\u04de\1\u04df"+
            "\1\u04e0\11\uffff\1\u04e4\1\u04e5\1\u04e6\1\u04e8\1\u04e9\1"+
            "\u04ea\1\u04eb\1\u04ec\1\u04ff\1\u0500\1\u04ed\1\u0501\1\u04ee"+
            "\1\u04ef\1\u04f0\1\u04f1\1\u04f2\1\u0502\1\uffff\1\u04f3\1\uffff"+
            "\1\u04f4\1\u04e7\1\u04d2\1\u04f5\22\uffff\1\u04cb\1\u04cc\1"+
            "\u04cd\5\uffff\1\u04fc\1\u04fd\1\u04fe\2\uffff\1\u04e1\1\uffff"+
            "\1\u04e2\1\u04e3\u0093\uffff\1\u04c8\16\uffff\1\u04d0\1\u04cf"+
            "\7\uffff\1\u04c4\1\u04ce\1\uffff\1\u04c9\1\u04ca\11\uffff\1"+
            "\u04c3\2\uffff\1\u0503\1\uffff\1\u04c5\4\uffff\1\u04d1\1\u04c6"+
            "\1\u04c7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053b\4\uffff\1\u0519\2\uffff\1\u0549\1\u051a\3\uffff\1"+
            "\u051b\1\u051c\1\u051d\1\u051e\1\u051f\1\u0520\1\u0521\1\u0522"+
            "\1\u0518\1\uffff\1\u0507\6\uffff\1\u053e\1\uffff\1\u0540\1\u053c"+
            "\1\u053d\1\u053f\5\uffff\1\u0506\1\u0505\3\uffff\1\u0523\1\u0524"+
            "\1\u0525\11\uffff\1\u0529\1\u052a\1\u052b\1\u052d\1\u052e\1"+
            "\u052f\1\u0530\1\u0531\1\u0544\1\u0545\1\u0532\1\u0546\1\u0533"+
            "\1\u0534\1\u0535\1\u0536\1\u0537\1\u0547\1\uffff\1\u0538\1\uffff"+
            "\1\u0539\1\u052c\1\u0517\1\u053a\22\uffff\1\u0510\1\u0511\1"+
            "\u0512\5\uffff\1\u0541\1\u0542\1\u0543\2\uffff\1\u0526\1\uffff"+
            "\1\u0527\1\u0528\u0093\uffff\1\u050d\16\uffff\1\u0515\1\u0514"+
            "\7\uffff\1\u0509\1\u0513\1\uffff\1\u050e\1\u050f\11\uffff\1"+
            "\u0508\2\uffff\1\u0548\1\uffff\1\u050a\4\uffff\1\u0516\1\u050b"+
            "\1\u050c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u057e\4\uffff\1\u055c\2\uffff\1\u058c\1\u055d\3\uffff\1"+
            "\u055e\1\u055f\1\u0560\1\u0561\1\u0562\1\u0563\1\u0564\1\u0565"+
            "\1\u055b\1\uffff\1\u054c\6\uffff\1\u0581\1\uffff\1\u0583\1\u057f"+
            "\1\u0580\1\u0582\12\uffff\1\u0566\1\u0567\1\u0568\11\uffff\1"+
            "\u056c\1\u056d\1\u056e\1\u0570\1\u0571\1\u0572\1\u0573\1\u0574"+
            "\1\u0587\1\u0588\1\u0575\1\u0589\1\u0576\1\u0577\1\u0578\1\u0579"+
            "\1\u057a\1\u058a\1\uffff\1\u057b\1\uffff\1\u057c\1\u056f\1\u055a"+
            "\1\u057d\22\uffff\1\u0553\1\u0554\1\u0555\5\uffff\1\u0584\1"+
            "\u0585\1\u0586\2\uffff\1\u0569\1\uffff\1\u056a\1\u056b\u0093"+
            "\uffff\1\u0552\16\uffff\1\u0558\1\u0557\7\uffff\1\u054e\1\u0556"+
            "\1\uffff\1\u054a\1\u054b\11\uffff\1\u054d\2\uffff\1\u058b\1"+
            "\uffff\1\u054f\4\uffff\1\u0559\1\u0550\1\u0551",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05c3\4\uffff\1\u05a1\2\uffff\1\u05d1\1\u05a2\3\uffff\1"+
            "\u05a3\1\u05a4\1\u05a5\1\u05a6\1\u05a7\1\u05a8\1\u05a9\1\u05aa"+
            "\1\u05a0\1\uffff\1\u058f\6\uffff\1\u05c6\1\uffff\1\u05c8\1\u05c4"+
            "\1\u05c5\1\u05c7\5\uffff\1\u058e\1\u058d\3\uffff\1\u05ab\1\u05ac"+
            "\1\u05ad\11\uffff\1\u05b1\1\u05b2\1\u05b3\1\u05b5\1\u05b6\1"+
            "\u05b7\1\u05b8\1\u05b9\1\u05cc\1\u05cd\1\u05ba\1\u05ce\1\u05bb"+
            "\1\u05bc\1\u05bd\1\u05be\1\u05bf\1\u05cf\1\uffff\1\u05c0\1\uffff"+
            "\1\u05c1\1\u05b4\1\u059f\1\u05c2\22\uffff\1\u0598\1\u0599\1"+
            "\u059a\5\uffff\1\u05c9\1\u05ca\1\u05cb\2\uffff\1\u05ae\1\uffff"+
            "\1\u05af\1\u05b0\u0093\uffff\1\u0595\16\uffff\1\u059d\1\u059c"+
            "\7\uffff\1\u0591\1\u059b\1\uffff\1\u0596\1\u0597\11\uffff\1"+
            "\u0590\2\uffff\1\u05d0\1\uffff\1\u0592\4\uffff\1\u059e\1\u0593"+
            "\1\u0594",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0608\4\uffff\1\u05e6\2\uffff\1\u0616\1\u05e7\3\uffff\1"+
            "\u05e8\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed\1\u05ee\1\u05ef"+
            "\1\u05e5\1\uffff\1\u05d6\6\uffff\1\u060b\1\uffff\1\u060d\1\u0609"+
            "\1\u060a\1\u060c\5\uffff\1\u05d5\1\u05d4\3\uffff\1\u05f0\1\u05f1"+
            "\1\u05f2\11\uffff\1\u05f6\1\u05f7\1\u05f8\1\u05fa\1\u05fb\1"+
            "\u05fc\1\u05fd\1\u05fe\1\u0611\1\u0612\1\u05ff\1\u0613\1\u0600"+
            "\1\u0601\1\u0602\1\u0603\1\u0604\1\u0614\1\uffff\1\u0605\1\uffff"+
            "\1\u0606\1\u05f9\1\u05e4\1\u0607\22\uffff\1\u05dd\1\u05de\1"+
            "\u05df\5\uffff\1\u060e\1\u060f\1\u0610\2\uffff\1\u05f3\1\uffff"+
            "\1\u05f4\1\u05f5\u0093\uffff\1\u05dc\16\uffff\1\u05e2\1\u05e1"+
            "\7\uffff\1\u05d8\1\u05e0\1\uffff\1\u05d2\1\u05d3\11\uffff\1"+
            "\u05d7\2\uffff\1\u0615\1\uffff\1\u05d9\4\uffff\1\u05e3\1\u05da"+
            "\1\u05db",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u064d\4\uffff\1\u062b\2\uffff\1\u065b\1\u062c\3\uffff\1"+
            "\u062d\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632\1\u0633\1\u0634"+
            "\1\u062a\1\uffff\1\u0619\6\uffff\1\u0650\1\uffff\1\u0652\1\u064e"+
            "\1\u064f\1\u0651\5\uffff\1\u0618\1\u0617\3\uffff\1\u0635\1\u0636"+
            "\1\u0637\11\uffff\1\u063b\1\u063c\1\u063d\1\u063f\1\u0640\1"+
            "\u0641\1\u0642\1\u0643\1\u0656\1\u0657\1\u0644\1\u0658\1\u0645"+
            "\1\u0646\1\u0647\1\u0648\1\u0649\1\u0659\1\uffff\1\u064a\1\uffff"+
            "\1\u064b\1\u063e\1\u0629\1\u064c\22\uffff\1\u0622\1\u0623\1"+
            "\u0624\5\uffff\1\u0653\1\u0654\1\u0655\2\uffff\1\u0638\1\uffff"+
            "\1\u0639\1\u063a\u0093\uffff\1\u061f\16\uffff\1\u0627\1\u0626"+
            "\7\uffff\1\u061b\1\u0625\1\uffff\1\u0620\1\u0621\11\uffff\1"+
            "\u061a\2\uffff\1\u065a\1\uffff\1\u061c\4\uffff\1\u0628\1\u061d"+
            "\1\u061e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0691\4\uffff\1\u066f\2\uffff\1\u069f\1\u0670\3\uffff\1"+
            "\u0671\1\u0672\1\u0673\1\u0674\1\u0675\1\u0676\1\u0677\1\u0678"+
            "\1\u066e\1\uffff\1\u0660\6\uffff\1\u0694\1\uffff\1\u0696\1\u0692"+
            "\1\u0693\1\u0695\12\uffff\1\u0679\1\u067a\1\u067b\11\uffff\1"+
            "\u067f\1\u0680\1\u0681\1\u0683\1\u0684\1\u0685\1\u0686\1\u0687"+
            "\1\u069a\1\u069b\1\u0688\1\u069c\1\u0689\1\u068a\1\u068b\1\u068c"+
            "\1\u068d\1\u069d\1\uffff\1\u068e\1\uffff\1\u068f\1\u0682\1\u066d"+
            "\1\u0690\22\uffff\1\u0667\1\u0668\1\u0669\5\uffff\1\u0697\1"+
            "\u0698\1\u0699\2\uffff\1\u067c\1\uffff\1\u067d\1\u067e\u0093"+
            "\uffff\1\u0666\16\uffff\1\u065f\1\u066b\5\uffff\1\u065e\1\uffff"+
            "\1\u0662\1\u066a\1\uffff\1\u065c\1\u065d\11\uffff\1\u0661\2"+
            "\uffff\1\u069e\1\uffff\1\u0663\4\uffff\1\u066c\1\u0664\1\u0665",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06d5\4\uffff\1\u06b3\2\uffff\1\u06e3\1\u06b4\3\uffff\1"+
            "\u06b5\1\u06b6\1\u06b7\1\u06b8\1\u06b9\1\u06ba\1\u06bb\1\u06bc"+
            "\1\u06b2\1\uffff\1\u06a4\6\uffff\1\u06d8\1\uffff\1\u06da\1\u06d6"+
            "\1\u06d7\1\u06d9\12\uffff\1\u06bd\1\u06be\1\u06bf\11\uffff\1"+
            "\u06c3\1\u06c4\1\u06c5\1\u06c7\1\u06c8\1\u06c9\1\u06ca\1\u06cb"+
            "\1\u06de\1\u06df\1\u06cc\1\u06e0\1\u06cd\1\u06ce\1\u06cf\1\u06d0"+
            "\1\u06d1\1\u06e1\1\uffff\1\u06d2\1\uffff\1\u06d3\1\u06c6\1\u06b1"+
            "\1\u06d4\22\uffff\1\u06ab\1\u06ac\1\u06ad\5\uffff\1\u06db\1"+
            "\u06dc\1\u06dd\2\uffff\1\u06c0\1\uffff\1\u06c1\1\u06c2\u0093"+
            "\uffff\1\u06aa\16\uffff\1\u06a3\1\u06af\5\uffff\1\u06a2\1\uffff"+
            "\1\u06a6\1\u06ae\1\uffff\1\u06a0\1\u06a1\11\uffff\1\u06a5\2"+
            "\uffff\1\u06e2\1\uffff\1\u06a7\4\uffff\1\u06b0\1\u06a8\1\u06a9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0718\4\uffff\1\u06f6\2\uffff\1\u0726\1\u06f7\3\uffff\1"+
            "\u06f8\1\u06f9\1\u06fa\1\u06fb\1\u06fc\1\u06fd\1\u06fe\1\u06ff"+
            "\1\u06f5\1\uffff\1\u06e4\6\uffff\1\u071b\1\uffff\1\u071d\1\u0719"+
            "\1\u071a\1\u071c\12\uffff\1\u0700\1\u0701\1\u0702\11\uffff\1"+
            "\u0706\1\u0707\1\u0708\1\u070a\1\u070b\1\u070c\1\u070d\1\u070e"+
            "\1\u0721\1\u0722\1\u070f\1\u0723\1\u0710\1\u0711\1\u0712\1\u0713"+
            "\1\u0714\1\u0724\1\uffff\1\u0715\1\uffff\1\u0716\1\u0709\1\u06f4"+
            "\1\u0717\22\uffff\1\u06ed\1\u06ee\1\u06ef\5\uffff\1\u071e\1"+
            "\u071f\1\u0720\2\uffff\1\u0703\1\uffff\1\u0704\1\u0705\u0093"+
            "\uffff\1\u06ea\16\uffff\1\u06f2\1\u06f1\7\uffff\1\u06e6\1\u06f0"+
            "\1\uffff\1\u06eb\1\u06ec\11\uffff\1\u06e5\2\uffff\1\u0725\1"+
            "\uffff\1\u06e7\4\uffff\1\u06f3\1\u06e8\1\u06e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u075b\4\uffff\1\u0739\2\uffff\1\u0769\1\u073a\3\uffff\1"+
            "\u073b\1\u073c\1\u073d\1\u073e\1\u073f\1\u0740\1\u0741\1\u0742"+
            "\1\u0738\1\uffff\1\u0727\6\uffff\1\u075e\1\uffff\1\u0760\1\u075c"+
            "\1\u075d\1\u075f\12\uffff\1\u0743\1\u0744\1\u0745\11\uffff\1"+
            "\u0749\1\u074a\1\u074b\1\u074d\1\u074e\1\u074f\1\u0750\1\u0751"+
            "\1\u0764\1\u0765\1\u0752\1\u0766\1\u0753\1\u0754\1\u0755\1\u0756"+
            "\1\u0757\1\u0767\1\uffff\1\u0758\1\uffff\1\u0759\1\u074c\1\u0737"+
            "\1\u075a\22\uffff\1\u0730\1\u0731\1\u0732\5\uffff\1\u0761\1"+
            "\u0762\1\u0763\2\uffff\1\u0746\1\uffff\1\u0747\1\u0748\u0093"+
            "\uffff\1\u072d\16\uffff\1\u0735\1\u0734\7\uffff\1\u0729\1\u0733"+
            "\1\uffff\1\u072e\1\u072f\11\uffff\1\u0728\2\uffff\1\u0768\1"+
            "\uffff\1\u072a\4\uffff\1\u0736\1\u072b\1\u072c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u076a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a1\4\uffff\1\u077f\2\uffff\1\u07af\1\u0780\3\uffff\1"+
            "\u0781\1\u0782\1\u0783\1\u0784\1\u0785\1\u0786\1\u0787\1\u0788"+
            "\1\u077e\1\uffff\1\u076d\6\uffff\1\u07a4\1\uffff\1\u07a6\1\u07a2"+
            "\1\u07a3\1\u07a5\12\uffff\1\u0789\1\u078a\1\u078b\11\uffff\1"+
            "\u078f\1\u0790\1\u0791\1\u0793\1\u0794\1\u0795\1\u0796\1\u0797"+
            "\1\u07aa\1\u07ab\1\u0798\1\u07ac\1\u0799\1\u079a\1\u079b\1\u079c"+
            "\1\u079d\1\u07ad\1\uffff\1\u079e\1\uffff\1\u079f\1\u0792\1\u077d"+
            "\1\u07a0\22\uffff\1\u0776\1\u0777\1\u0778\5\uffff\1\u07a7\1"+
            "\u07a8\1\u07a9\2\uffff\1\u078c\1\uffff\1\u078d\1\u078e\u0093"+
            "\uffff\1\u0773\16\uffff\1\u077b\1\u077a\7\uffff\1\u076f\1\u0779"+
            "\1\uffff\1\u0774\1\u0775\11\uffff\1\u076e\2\uffff\1\u07ae\1"+
            "\uffff\1\u0770\4\uffff\1\u077c\1\u0771\1\u0772",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07e4\4\uffff\1\u07c2\2\uffff\1\u07f2\1\u07c3\3\uffff\1"+
            "\u07c4\1\u07c5\1\u07c6\1\u07c7\1\u07c8\1\u07c9\1\u07ca\1\u07cb"+
            "\1\u07c1\1\uffff\1\u07b2\6\uffff\1\u07e7\1\uffff\1\u07e9\1\u07e5"+
            "\1\u07e6\1\u07e8\12\uffff\1\u07cc\1\u07cd\1\u07ce\11\uffff\1"+
            "\u07d2\1\u07d3\1\u07d4\1\u07d6\1\u07d7\1\u07d8\1\u07d9\1\u07da"+
            "\1\u07ed\1\u07ee\1\u07db\1\u07ef\1\u07dc\1\u07dd\1\u07de\1\u07df"+
            "\1\u07e0\1\u07f0\1\uffff\1\u07e1\1\uffff\1\u07e2\1\u07d5\1\u07c0"+
            "\1\u07e3\22\uffff\1\u07b9\1\u07ba\1\u07bb\5\uffff\1\u07ea\1"+
            "\u07eb\1\u07ec\2\uffff\1\u07cf\1\uffff\1\u07d0\1\u07d1\u0093"+
            "\uffff\1\u07b8\16\uffff\1\u07be\1\u07bd\7\uffff\1\u07b4\1\u07bc"+
            "\1\uffff\1\u07b0\1\u07b1\11\uffff\1\u07b3\2\uffff\1\u07f1\1"+
            "\uffff\1\u07b5\4\uffff\1\u07bf\1\u07b6\1\u07b7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0827\4\uffff\1\u0805\2\uffff\1\u0835\1\u0806\3\uffff\1"+
            "\u0807\1\u0808\1\u0809\1\u080a\1\u080b\1\u080c\1\u080d\1\u080e"+
            "\1\u0804\1\uffff\1\u07f5\6\uffff\1\u082a\1\uffff\1\u082c\1\u0828"+
            "\1\u0829\1\u082b\12\uffff\1\u080f\1\u0810\1\u0811\11\uffff\1"+
            "\u0815\1\u0816\1\u0817\1\u0819\1\u081a\1\u081b\1\u081c\1\u081d"+
            "\1\u0830\1\u0831\1\u081e\1\u0832\1\u081f\1\u0820\1\u0821\1\u0822"+
            "\1\u0823\1\u0833\1\uffff\1\u0824\1\uffff\1\u0825\1\u0818\1\u0803"+
            "\1\u0826\22\uffff\1\u07fc\1\u07fd\1\u07fe\5\uffff\1\u082d\1"+
            "\u082e\1\u082f\2\uffff\1\u0812\1\uffff\1\u0813\1\u0814\u0093"+
            "\uffff\1\u07fb\16\uffff\1\u0801\1\u0800\7\uffff\1\u07f7\1\u07ff"+
            "\1\uffff\1\u07f3\1\u07f4\11\uffff\1\u07f6\2\uffff\1\u0834\1"+
            "\uffff\1\u07f8\4\uffff\1\u0802\1\u07f9\1\u07fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u086b\4\uffff\1\u0849\2\uffff\1\u0879\1\u084a\3\uffff\1"+
            "\u084b\1\u084c\1\u084d\1\u084e\1\u084f\1\u0850\1\u0851\1\u0852"+
            "\1\u0848\1\uffff\1\u083a\6\uffff\1\u086e\1\uffff\1\u0870\1\u086c"+
            "\1\u086d\1\u086f\12\uffff\1\u0853\1\u0854\1\u0855\11\uffff\1"+
            "\u0859\1\u085a\1\u085b\1\u085d\1\u085e\1\u085f\1\u0860\1\u0861"+
            "\1\u0874\1\u0875\1\u0862\1\u0876\1\u0863\1\u0864\1\u0865\1\u0866"+
            "\1\u0867\1\u0877\1\uffff\1\u0868\1\uffff\1\u0869\1\u085c\1\u0847"+
            "\1\u086a\22\uffff\1\u0841\1\u0842\1\u0843\5\uffff\1\u0871\1"+
            "\u0872\1\u0873\2\uffff\1\u0856\1\uffff\1\u0857\1\u0858\u0093"+
            "\uffff\1\u0840\16\uffff\1\u0839\1\u0845\5\uffff\1\u0838\1\uffff"+
            "\1\u083c\1\u0844\1\uffff\1\u0836\1\u0837\11\uffff\1\u083b\2"+
            "\uffff\1\u0878\1\uffff\1\u083d\4\uffff\1\u0846\1\u083e\1\u083f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08a1\4\uffff\1\u087f\3\uffff\1\u0880\3\uffff\1\u0881\1"+
            "\u0882\1\u0883\1\u0884\1\u0885\1\u0886\1\u0887\1\u0888\1\u087e"+
            "\1\u087a\7\uffff\1\u08a4\1\uffff\1\u08a6\1\u08a2\1\u08a3\1\u08a5"+
            "\12\uffff\1\u0889\1\u088a\1\u088b\11\uffff\1\u088f\1\u0890\1"+
            "\u0891\1\u0893\1\u0894\1\u0895\1\u0896\1\u0897\2\uffff\1\u0898"+
            "\1\uffff\1\u0899\1\u089a\1\u089b\1\u089c\1\u089d\2\uffff\1\u089e"+
            "\1\uffff\1\u089f\1\u0892\1\u087d\1\u08a0\32\uffff\1\u08a7\1"+
            "\u08a8\1\u08a9\2\uffff\1\u088c\1\uffff\1\u088d\1\u088e\u00a2"+
            "\uffff\1\u087b\40\uffff\1\u087c",
            "\1\u08bf\1\u08c0\1\u08c1\1\u08c2\1\uffff\1\u08bd\1\u08bc\1"+
            "\u08be\34\uffff\1\u08b6\u00f4\uffff\1\u08aa\1\u08b5\3\uffff"+
            "\1\u08ab\1\u08ba\1\u08ae\4\uffff\1\u08b9\1\u08bb\1\u08b7\1\u08b8"+
            "\1\u08b1\1\u08b2\1\u08b3\1\u08b4\1\u08b0\1\u08af\1\u08ac\1\u08ad",
            "\1\u08d8\1\u08d9\1\u08da\1\u08db\1\uffff\1\u08d6\1\u08d5\1"+
            "\u08d7\34\uffff\1\u08cf\u00f4\uffff\1\u08c3\1\u08ce\3\uffff"+
            "\1\u08c4\1\u08d3\1\u08c7\4\uffff\1\u08d2\1\u08d4\1\u08d0\1\u08d1"+
            "\1\u08ca\1\u08cb\1\u08cc\1\u08cd\1\u08c9\1\u08c8\1\u08c5\1\u08c6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08f1\1\u08f2\1\u08f3\1\u08f4\1\uffff\1\u08ef\1\u08ee\1"+
            "\u08f0\34\uffff\1\u08e8\u00f4\uffff\1\u08dc\1\u08e7\3\uffff"+
            "\1\u08dd\1\u08ec\1\u08e0\4\uffff\1\u08eb\1\u08ed\1\u08e9\1\u08ea"+
            "\1\u08e3\1\u08e4\1\u08e5\1\u08e6\1\u08e2\1\u08e1\1\u08de\1\u08df",
            "\1\u090a\1\u090b\1\u090c\1\u090d\1\uffff\1\u0908\1\u0907\1"+
            "\u0909\34\uffff\1\u0901\u00f4\uffff\1\u08f5\1\u0900\3\uffff"+
            "\1\u08f6\1\u0905\1\u08f9\4\uffff\1\u0904\1\u0906\1\u0902\1\u0903"+
            "\1\u08fc\1\u08fd\1\u08fe\1\u08ff\1\u08fb\1\u08fa\1\u08f7\1\u08f8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0923\1\u0924\1\u0925\1\u0926\1\uffff\1\u0921\1\u0920\1"+
            "\u0922\34\uffff\1\u091a\u00f4\uffff\1\u090e\1\u0919\3\uffff"+
            "\1\u090f\1\u091e\1\u0912\4\uffff\1\u091d\1\u091f\1\u091b\1\u091c"+
            "\1\u0915\1\u0916\1\u0917\1\u0918\1\u0914\1\u0913\1\u0910\1\u0911",
            "\1\u093c\1\u093d\1\u093e\1\u093f\1\uffff\1\u093a\1\u0939\1"+
            "\u093b\34\uffff\1\u0933\u00f4\uffff\1\u0927\1\u0932\3\uffff"+
            "\1\u0928\1\u0937\1\u092b\4\uffff\1\u0936\1\u0938\1\u0934\1\u0935"+
            "\1\u092e\1\u092f\1\u0930\1\u0931\1\u092d\1\u092c\1\u0929\1\u092a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0956\1\u0957\1\u0958\1\u0959\1\uffff\1\u0953\1\u0952\1"+
            "\u0955\34\uffff\1\u094c\u00f1\uffff\1\u0954\2\uffff\1\16\1\u094b"+
            "\3\uffff\1\u0941\1\u0950\1\u0944\4\uffff\1\u094f\1\u0951\1\u094d"+
            "\1\u094e\1\u0947\1\u0948\1\u0949\1\u094a\1\u0946\1\u0945\1\u0942"+
            "\1\u0943",
            "\1\u0970\1\u0971\1\u0972\1\u0973\1\uffff\1\u096d\1\u096c\1"+
            "\u096f\34\uffff\1\u0966\u00f1\uffff\1\u096e\2\uffff\1\16\1\u0965"+
            "\3\uffff\1\u095b\1\u096a\1\u095e\4\uffff\1\u0969\1\u096b\1\u0967"+
            "\1\u0968\1\u0961\1\u0962\1\u0963\1\u0964\1\u0960\1\u095f\1\u095c"+
            "\1\u095d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0989\1\u098a\1\u098b\1\u098c\1\uffff\1\u0987\1\u0986\1"+
            "\u0988\34\uffff\1\u0980\u00f4\uffff\1\u0974\1\u097f\3\uffff"+
            "\1\u0975\1\u0984\1\u0978\4\uffff\1\u0983\1\u0985\1\u0981\1\u0982"+
            "\1\u097b\1\u097c\1\u097d\1\u097e\1\u097a\1\u0979\1\u0976\1\u0977",
            "\1\u09a2\1\u09a3\1\u09a4\1\u09a5\1\uffff\1\u09a0\1\u099f\1"+
            "\u09a1\34\uffff\1\u0999\u00f4\uffff\1\u098d\1\u0998\3\uffff"+
            "\1\u098e\1\u099d\1\u0991\4\uffff\1\u099c\1\u099e\1\u099a\1\u099b"+
            "\1\u0994\1\u0995\1\u0996\1\u0997\1\u0993\1\u0992\1\u098f\1\u0990",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09bb\1\u09bc\1\u09bd\1\u09be\1\uffff\1\u09b9\1\u09b8\1"+
            "\u09ba\34\uffff\1\u09b2\u00f4\uffff\1\u09a6\1\u09b1\3\uffff"+
            "\1\u09a7\1\u09b6\1\u09aa\4\uffff\1\u09b5\1\u09b7\1\u09b3\1\u09b4"+
            "\1\u09ad\1\u09ae\1\u09af\1\u09b0\1\u09ac\1\u09ab\1\u09a8\1\u09a9",
            "\1\u09d4\1\u09d5\1\u09d6\1\u09d7\1\uffff\1\u09d2\1\u09d1\1"+
            "\u09d3\34\uffff\1\u09cb\u00f4\uffff\1\u09bf\1\u09ca\3\uffff"+
            "\1\u09c0\1\u09cf\1\u09c3\4\uffff\1\u09ce\1\u09d0\1\u09cc\1\u09cd"+
            "\1\u09c6\1\u09c7\1\u09c8\1\u09c9\1\u09c5\1\u09c4\1\u09c1\1\u09c2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09ed\1\u09ee\1\u09ef\1\u09f0\1\uffff\1\u09eb\1\u09ea\1"+
            "\u09ec\34\uffff\1\u09e4\u00f4\uffff\1\u09d8\1\u09e3\3\uffff"+
            "\1\u09d9\1\u09e8\1\u09dc\4\uffff\1\u09e7\1\u09e9\1\u09e5\1\u09e6"+
            "\1\u09df\1\u09e0\1\u09e1\1\u09e2\1\u09de\1\u09dd\1\u09da\1\u09db",
            "\1\u0a06\1\u0a07\1\u0a08\1\u0a09\1\uffff\1\u0a04\1\u0a03\1"+
            "\u0a05\34\uffff\1\u09fd\u00f4\uffff\1\u09f1\1\u09fc\3\uffff"+
            "\1\u09f2\1\u0a01\1\u09f5\4\uffff\1\u0a00\1\u0a02\1\u09fe\1\u09ff"+
            "\1\u09f8\1\u09f9\1\u09fa\1\u09fb\1\u09f7\1\u09f6\1\u09f3\1\u09f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a20\1\u0a21\1\u0a22\1\u0a23\1\uffff\1\u0a1d\1\u0a1c\1"+
            "\u0a1f\34\uffff\1\u0a16\u00f1\uffff\1\u0a1e\2\uffff\1\u0a0a"+
            "\1\u0a15\3\uffff\1\u0a0b\1\u0a1a\1\u0a0e\4\uffff\1\u0a19\1\u0a1b"+
            "\1\u0a17\1\u0a18\1\u0a11\1\u0a12\1\u0a13\1\u0a14\1\u0a10\1\u0a0f"+
            "\1\u0a0c\1\u0a0d",
            "\1\u0a3a\1\u0a3b\1\u0a3c\1\u0a3d\1\uffff\1\u0a37\1\u0a36\1"+
            "\u0a39\34\uffff\1\u0a30\u00f1\uffff\1\u0a38\2\uffff\1\u0a24"+
            "\1\u0a2f\3\uffff\1\u0a25\1\u0a34\1\u0a28\4\uffff\1\u0a33\1\u0a35"+
            "\1\u0a31\1\u0a32\1\u0a2b\1\u0a2c\1\u0a2d\1\u0a2e\1\u0a2a\1\u0a29"+
            "\1\u0a26\1\u0a27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a54\1\u0a55\1\u0a56\1\u0a57\1\uffff\1\u0a51\1\u0a50\1"+
            "\u0a53\34\uffff\1\u0a4a\u00f1\uffff\1\u0a52\2\uffff\1\u0a3e"+
            "\1\u0a49\3\uffff\1\u0a3f\1\u0a4e\1\u0a42\4\uffff\1\u0a4d\1\u0a4f"+
            "\1\u0a4b\1\u0a4c\1\u0a45\1\u0a46\1\u0a47\1\u0a48\1\u0a44\1\u0a43"+
            "\1\u0a40\1\u0a41",
            "\1\u0a6e\1\u0a6f\1\u0a70\1\u0a71\1\uffff\1\u0a6b\1\u0a6a\1"+
            "\u0a6d\34\uffff\1\u0a64\u00f1\uffff\1\u0a6c\2\uffff\1\u0a58"+
            "\1\u0a63\3\uffff\1\u0a59\1\u0a68\1\u0a5c\4\uffff\1\u0a67\1\u0a69"+
            "\1\u0a65\1\u0a66\1\u0a5f\1\u0a60\1\u0a61\1\u0a62\1\u0a5e\1\u0a5d"+
            "\1\u0a5a\1\u0a5b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a88\1\u0a89\1\u0a8a\1\u0a8b\1\uffff\1\u0a85\1\u0a84\1"+
            "\u0a87\34\uffff\1\u0a7e\u00f1\uffff\1\u0a86\2\uffff\1\u0a72"+
            "\1\u0a7d\3\uffff\1\u0a73\1\u0a82\1\u0a76\4\uffff\1\u0a81\1\u0a83"+
            "\1\u0a7f\1\u0a80\1\u0a79\1\u0a7a\1\u0a7b\1\u0a7c\1\u0a78\1\u0a77"+
            "\1\u0a74\1\u0a75",
            "\1\u0aa2\1\u0aa3\1\u0aa4\1\u0aa5\1\uffff\1\u0a9f\1\u0a9e\1"+
            "\u0aa1\34\uffff\1\u0a98\u00f1\uffff\1\u0aa0\2\uffff\1\u0a8c"+
            "\1\u0a97\3\uffff\1\u0a8d\1\u0a9c\1\u0a90\4\uffff\1\u0a9b\1\u0a9d"+
            "\1\u0a99\1\u0a9a\1\u0a93\1\u0a94\1\u0a95\1\u0a96\1\u0a92\1\u0a91"+
            "\1\u0a8e\1\u0a8f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0abc\1\u0abd\1\u0abe\1\u0abf\1\uffff\1\u0ab9\1\u0ab8\1"+
            "\u0abb\34\uffff\1\u0ab2\u00f1\uffff\1\u0aba\2\uffff\1\u0aa6"+
            "\1\u0ab1\3\uffff\1\u0aa7\1\u0ab6\1\u0aaa\4\uffff\1\u0ab5\1\u0ab7"+
            "\1\u0ab3\1\u0ab4\1\u0aad\1\u0aae\1\u0aaf\1\u0ab0\1\u0aac\1\u0aab"+
            "\1\u0aa8\1\u0aa9",
            "\1\u0ad6\1\u0ad7\1\u0ad8\1\u0ad9\1\uffff\1\u0ad3\1\u0ad2\1"+
            "\u0ad5\34\uffff\1\u0acc\u00f1\uffff\1\u0ad4\2\uffff\1\u0ac0"+
            "\1\u0acb\3\uffff\1\u0ac1\1\u0ad0\1\u0ac4\4\uffff\1\u0acf\1\u0ad1"+
            "\1\u0acd\1\u0ace\1\u0ac7\1\u0ac8\1\u0ac9\1\u0aca\1\u0ac6\1\u0ac5"+
            "\1\u0ac2\1\u0ac3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0af0\1\u0af1\1\u0af2\1\u0af3\1\uffff\1\u0aed\1\u0aec\1"+
            "\u0aef\34\uffff\1\u0ae6\u00f1\uffff\1\u0aee\2\uffff\1\16\1\u0ae5"+
            "\3\uffff\1\u0adb\1\u0aea\1\u0ade\4\uffff\1\u0ae9\1\u0aeb\1\u0ae7"+
            "\1\u0ae8\1\u0ae1\1\u0ae2\1\u0ae3\1\u0ae4\1\u0ae0\1\u0adf\1\u0adc"+
            "\1\u0add",
            "\1\u0b0a\1\u0b0b\1\u0b0c\1\u0b0d\1\uffff\1\u0b07\1\u0b06\1"+
            "\u0b09\34\uffff\1\u0b00\u00f1\uffff\1\u0b08\2\uffff\1\16\1\u0aff"+
            "\3\uffff\1\u0af5\1\u0b04\1\u0af8\4\uffff\1\u0b03\1\u0b05\1\u0b01"+
            "\1\u0b02\1\u0afb\1\u0afc\1\u0afd\1\u0afe\1\u0afa\1\u0af9\1\u0af6"+
            "\1\u0af7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b23\1\u0b24\1\u0b25\1\u0b26\1\uffff\1\u0b21\1\u0b20\1"+
            "\u0b22\34\uffff\1\u0b1a\u00f4\uffff\1\u0b0e\1\u0b19\3\uffff"+
            "\1\u0b0f\1\u0b1e\1\u0b12\4\uffff\1\u0b1d\1\u0b1f\1\u0b1b\1\u0b1c"+
            "\1\u0b15\1\u0b16\1\u0b17\1\u0b18\1\u0b14\1\u0b13\1\u0b10\1\u0b11",
            "\1\u0b3c\1\u0b3d\1\u0b3e\1\u0b3f\1\uffff\1\u0b39\1\u0b38\1"+
            "\u0b3b\34\uffff\1\u0b32\u00f4\uffff\1\u0b3a\1\u0b31\3\uffff"+
            "\1\u0b27\1\u0b36\1\u0b2a\4\uffff\1\u0b35\1\u0b37\1\u0b33\1\u0b34"+
            "\1\u0b2d\1\u0b2e\1\u0b2f\1\u0b30\1\u0b2c\1\u0b2b\1\u0b28\1\u0b29",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b57\1\u0b58\1\u0b59\1\u0b5a\1\uffff\1\u0b53\1\u0b52\1"+
            "\u0b56\3\uffff\1\u0b55\30\uffff\1\u0b4c\u00f1\uffff\1\u0b54"+
            "\2\uffff\1\16\1\u0b4b\3\uffff\1\u0b41\1\u0b50\1\u0b44\4\uffff"+
            "\1\u0b4f\1\u0b51\1\u0b4d\1\u0b4e\1\u0b47\1\u0b48\1\u0b49\1\u0b4a"+
            "\1\u0b46\1\u0b45\1\u0b42\1\u0b43",
            "\1\u0b72\1\u0b73\1\u0b74\1\u0b75\1\uffff\1\u0b6e\1\u0b6d\1"+
            "\u0b71\3\uffff\1\u0b70\30\uffff\1\u0b67\u00f1\uffff\1\u0b6f"+
            "\2\uffff\1\16\1\u0b66\3\uffff\1\u0b5c\1\u0b6b\1\u0b5f\4\uffff"+
            "\1\u0b6a\1\u0b6c\1\u0b68\1\u0b69\1\u0b62\1\u0b63\1\u0b64\1\u0b65"+
            "\1\u0b61\1\u0b60\1\u0b5d\1\u0b5e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b8b\1\u0b8c\1\u0b8d\1\u0b8e\1\uffff\1\u0b89\1\u0b88\1"+
            "\u0b8a\34\uffff\1\u0b82\u00f4\uffff\1\u0b76\1\u0b81\3\uffff"+
            "\1\u0b77\1\u0b86\1\u0b7a\4\uffff\1\u0b85\1\u0b87\1\u0b83\1\u0b84"+
            "\1\u0b7d\1\u0b7e\1\u0b7f\1\u0b80\1\u0b7c\1\u0b7b\1\u0b78\1\u0b79",
            "\1\u0ba4\1\u0ba5\1\u0ba6\1\u0ba7\1\uffff\1\u0ba1\1\u0ba0\1"+
            "\u0ba3\34\uffff\1\u0b9a\u00f4\uffff\1\u0ba2\1\u0b99\3\uffff"+
            "\1\u0b8f\1\u0b9e\1\u0b92\4\uffff\1\u0b9d\1\u0b9f\1\u0b9b\1\u0b9c"+
            "\1\u0b95\1\u0b96\1\u0b97\1\u0b98\1\u0b94\1\u0b93\1\u0b90\1\u0b91",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;
    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }
    class DFA183 extends DFA {
        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "1251:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA183_0 = input.LA(1);
                        int index183_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_0==MINUS) ) {s = 1;}
                        else if ( ((LA183_0>=BOOLEAN_TRUE && LA183_0<=VALUE_NULL)||LA183_0==NUM_DOUBLE||LA183_0==PLUS||(LA183_0>=STRING_LITERAL && LA183_0<=QUOTED_STRING_LITERAL)||LA183_0==NUM_INT||(LA183_0>=NUM_LONG && LA183_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA183_0==QUESTION) ) {s = 12;}
                        else if ( (LA183_0==LPAREN) ) {s = 13;}
                        else if ( (LA183_0==ESCAPE||LA183_0==EVERY_EXPR||(LA183_0>=MAX && LA183_0<=MIN)||LA183_0==OUTER||(LA183_0>=JOIN && LA183_0<=FULL)||LA183_0==EVENTS||(LA183_0>=UNIDIRECTIONAL && LA183_0<=METADATASQL)||(LA183_0>=WEEKDAY && LA183_0<=LW)||LA183_0==SNAPSHOT||(LA183_0>=VARIABLE && LA183_0<=INDEX)||(LA183_0>=DEFINE && LA183_0<=MATCHES)||LA183_0==WHILE||(LA183_0>=MERGE && LA183_0<=MATCHED)||LA183_0==IDENT||LA183_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA183_0==COUNT) ) {s = 17;}
                        else if ( (LA183_0==SUM) ) {s = 20;}
                        else if ( (LA183_0==AVG) ) {s = 21;}
                        else if ( (LA183_0==COALESCE) ) {s = 24;}
                        else if ( (LA183_0==MEDIAN) ) {s = 25;}
                        else if ( (LA183_0==STDDEV) ) {s = 26;}
                        else if ( (LA183_0==AVEDEV) ) {s = 27;}
                        else if ( (LA183_0==FIRST) ) {s = 29;}
                        else if ( (LA183_0==LAST) ) {s = 30;}
                        else if ( (LA183_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA183_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA183_0==PRIOR) ) {s = 43;}
                        else if ( (LA183_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA183_0==TYPEOF) ) {s = 47;}
                        else if ( (LA183_0==CAST) ) {s = 48;}
                        else if ( (LA183_0==WINDOW) ) {s = 52;}
                        else if ( (LA183_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA183_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA183_0==EXISTS) ) {s = 63;}
                        else if ( (LA183_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA183_0==LCURLY) ) {s = 65;}
                        input.seek(index183_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA183_185 = input.LA(1);
                        int index183_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_185==STRING_LITERAL) ) {s = 1146;}
                        else if ( (LA183_185==QUOTED_STRING_LITERAL) ) {s = 1147;}
                        else if ( (LA183_185==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA183_185==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA183_185==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA183_185==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA183_185==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA183_185==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA183_185==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA183_185==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA183_185==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA183_185==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA183_185==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA183_185==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA183_185==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA183_185==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA183_185==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA183_185==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA183_185==AT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA183_185==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA183_185==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA183_185==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA183_185==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA183_185==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA183_185==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA183_185==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA183_185==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA183_185==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA183_185==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA183_185==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA183_185==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA183_185==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA183_185==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA183_185==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA183_185==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA183_185==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA183_185==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA183_185==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA183_185==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA183_185==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA183_185==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA183_185==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA183_185==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA183_185==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA183_185==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA183_185==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA183_185==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA183_185==LW) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA183_185==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA183_185==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA183_185==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA183_185==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA183_185==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA183_185==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA183_185==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA183_185==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA183_185==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA183_185==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA183_185==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA183_185==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA183_185==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA183_185==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA183_185==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA183_185==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA183_185==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA183_185==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA183_185==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA183_185==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA183_185==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA183_185==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        input.seek(index183_185);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA183_245 = input.LA(1);
                        int index183_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_245==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA183_245==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA183_245==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA183_245==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA183_245==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA183_245==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA183_245==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA183_245==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA183_245==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA183_245==STRING_LITERAL) ) {s = 1225;}
                        else if ( (LA183_245==QUOTED_STRING_LITERAL) ) {s = 1226;}
                        else if ( (LA183_245==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA183_245==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA183_245==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA183_245==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA183_245==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA183_245==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA183_245==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA183_245==AT) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA183_245==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA183_245==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA183_245==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA183_245==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA183_245==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA183_245==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA183_245==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA183_245==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA183_245==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA183_245==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA183_245==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA183_245==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA183_245==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA183_245==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA183_245==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA183_245==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA183_245==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA183_245==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA183_245==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA183_245==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA183_245==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA183_245==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA183_245==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA183_245==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA183_245==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA183_245==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA183_245==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA183_245==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA183_245==LW) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA183_245==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA183_245==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA183_245==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA183_245==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA183_245==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA183_245==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA183_245==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA183_245==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA183_245==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA183_245==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA183_245==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA183_245==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA183_245==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA183_245==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA183_245==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA183_245==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA183_245==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA183_245==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA183_245==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA183_245==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA183_245==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        input.seek(index183_245);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA183_305 = input.LA(1);
                        int index183_305 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_305==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA183_305==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA183_305==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA183_305==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA183_305==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA183_305==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA183_305==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA183_305==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA183_305==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA183_305==STRING_LITERAL) ) {s = 1294;}
                        else if ( (LA183_305==QUOTED_STRING_LITERAL) ) {s = 1295;}
                        else if ( (LA183_305==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA183_305==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA183_305==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA183_305==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA183_305==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA183_305==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA183_305==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA183_305==AT) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA183_305==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA183_305==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA183_305==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA183_305==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA183_305==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA183_305==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA183_305==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA183_305==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA183_305==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA183_305==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA183_305==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA183_305==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA183_305==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA183_305==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA183_305==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA183_305==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA183_305==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA183_305==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA183_305==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA183_305==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA183_305==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA183_305==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA183_305==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA183_305==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA183_305==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA183_305==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA183_305==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA183_305==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA183_305==LW) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA183_305==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA183_305==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA183_305==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA183_305==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA183_305==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA183_305==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA183_305==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA183_305==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA183_305==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA183_305==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA183_305==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA183_305==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA183_305==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA183_305==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA183_305==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA183_305==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA183_305==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA183_305==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA183_305==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA183_305==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA183_305==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        input.seek(index183_305);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA183_365 = input.LA(1);
                        int index183_365 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_365==STRING_LITERAL) ) {s = 1354;}
                        else if ( (LA183_365==QUOTED_STRING_LITERAL) ) {s = 1355;}
                        else if ( (LA183_365==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA183_365==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA183_365==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA183_365==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA183_365==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA183_365==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA183_365==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA183_365==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA183_365==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA183_365==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA183_365==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA183_365==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA183_365==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA183_365==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA183_365==AT) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA183_365==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA183_365==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA183_365==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA183_365==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA183_365==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA183_365==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA183_365==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA183_365==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA183_365==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA183_365==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA183_365==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA183_365==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA183_365==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA183_365==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA183_365==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA183_365==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA183_365==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA183_365==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA183_365==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA183_365==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA183_365==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA183_365==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA183_365==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA183_365==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA183_365==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA183_365==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA183_365==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA183_365==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA183_365==LW) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA183_365==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA183_365==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA183_365==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA183_365==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA183_365==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA183_365==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA183_365==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA183_365==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA183_365==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA183_365==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA183_365==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA183_365==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA183_365==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA183_365==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA183_365==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA183_365==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA183_365==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA183_365==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA183_365==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA183_365==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA183_365==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        input.seek(index183_365);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA183_425 = input.LA(1);
                        int index183_425 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_425==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA183_425==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA183_425==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA183_425==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA183_425==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA183_425==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA183_425==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA183_425==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA183_425==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA183_425==STRING_LITERAL) ) {s = 1430;}
                        else if ( (LA183_425==QUOTED_STRING_LITERAL) ) {s = 1431;}
                        else if ( (LA183_425==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA183_425==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA183_425==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA183_425==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA183_425==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA183_425==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA183_425==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA183_425==AT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA183_425==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA183_425==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA183_425==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA183_425==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA183_425==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA183_425==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA183_425==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA183_425==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA183_425==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA183_425==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA183_425==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA183_425==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA183_425==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA183_425==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA183_425==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA183_425==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA183_425==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA183_425==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA183_425==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA183_425==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA183_425==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA183_425==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA183_425==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA183_425==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA183_425==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA183_425==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA183_425==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA183_425==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA183_425==LW) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA183_425==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA183_425==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA183_425==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA183_425==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA183_425==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA183_425==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA183_425==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA183_425==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA183_425==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA183_425==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA183_425==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA183_425==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA183_425==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA183_425==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA183_425==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA183_425==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA183_425==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA183_425==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA183_425==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA183_425==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA183_425==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        input.seek(index183_425);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA183_485 = input.LA(1);
                        int index183_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_485==STRING_LITERAL) ) {s = 1490;}
                        else if ( (LA183_485==QUOTED_STRING_LITERAL) ) {s = 1491;}
                        else if ( (LA183_485==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA183_485==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA183_485==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA183_485==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA183_485==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA183_485==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA183_485==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA183_485==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA183_485==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA183_485==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA183_485==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA183_485==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA183_485==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA183_485==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA183_485==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA183_485==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA183_485==AT) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA183_485==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA183_485==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA183_485==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA183_485==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA183_485==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA183_485==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA183_485==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA183_485==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA183_485==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA183_485==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA183_485==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA183_485==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA183_485==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA183_485==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA183_485==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA183_485==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA183_485==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA183_485==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA183_485==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA183_485==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA183_485==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA183_485==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA183_485==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA183_485==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA183_485==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA183_485==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA183_485==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA183_485==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA183_485==LW) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA183_485==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA183_485==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA183_485==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA183_485==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA183_485==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA183_485==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA183_485==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA183_485==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA183_485==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA183_485==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA183_485==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA183_485==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA183_485==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA183_485==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA183_485==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA183_485==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA183_485==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA183_485==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA183_485==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA183_485==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA183_485==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        input.seek(index183_485);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA183_545 = input.LA(1);
                        int index183_545 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_545==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA183_545==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA183_545==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA183_545==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA183_545==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA183_545==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA183_545==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA183_545==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA183_545==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA183_545==STRING_LITERAL) ) {s = 1568;}
                        else if ( (LA183_545==QUOTED_STRING_LITERAL) ) {s = 1569;}
                        else if ( (LA183_545==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA183_545==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA183_545==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA183_545==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA183_545==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA183_545==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA183_545==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA183_545==AT) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA183_545==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA183_545==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA183_545==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA183_545==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA183_545==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA183_545==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA183_545==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA183_545==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA183_545==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA183_545==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA183_545==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA183_545==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA183_545==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA183_545==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA183_545==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA183_545==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA183_545==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA183_545==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA183_545==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA183_545==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA183_545==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA183_545==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA183_545==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA183_545==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA183_545==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA183_545==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA183_545==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA183_545==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA183_545==LW) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA183_545==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA183_545==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA183_545==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA183_545==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA183_545==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA183_545==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA183_545==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA183_545==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA183_545==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA183_545==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA183_545==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA183_545==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA183_545==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA183_545==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA183_545==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA183_545==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA183_545==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA183_545==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA183_545==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA183_545==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA183_545==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        input.seek(index183_545);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA183_605 = input.LA(1);
                        int index183_605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_605==STRING_LITERAL) ) {s = 1628;}
                        else if ( (LA183_605==QUOTED_STRING_LITERAL) ) {s = 1629;}
                        else if ( (LA183_605==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA183_605==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA183_605==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA183_605==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA183_605==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA183_605==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA183_605==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA183_605==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA183_605==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA183_605==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA183_605==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA183_605==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA183_605==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA183_605==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA183_605==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA183_605==AT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA183_605==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA183_605==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA183_605==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA183_605==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA183_605==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA183_605==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA183_605==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA183_605==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA183_605==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA183_605==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA183_605==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA183_605==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA183_605==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA183_605==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA183_605==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA183_605==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA183_605==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA183_605==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA183_605==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA183_605==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA183_605==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA183_605==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA183_605==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA183_605==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA183_605==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA183_605==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA183_605==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA183_605==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA183_605==LW) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA183_605==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA183_605==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA183_605==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA183_605==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA183_605==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA183_605==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA183_605==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA183_605==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA183_605==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA183_605==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA183_605==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA183_605==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA183_605==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA183_605==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA183_605==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA183_605==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA183_605==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA183_605==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA183_605==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA183_605==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA183_605==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        input.seek(index183_605);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA183_665 = input.LA(1);
                        int index183_665 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_665==STRING_LITERAL) ) {s = 1696;}
                        else if ( (LA183_665==QUOTED_STRING_LITERAL) ) {s = 1697;}
                        else if ( (LA183_665==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA183_665==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA183_665==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA183_665==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA183_665==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA183_665==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA183_665==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA183_665==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA183_665==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA183_665==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA183_665==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA183_665==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA183_665==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA183_665==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA183_665==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA183_665==AT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA183_665==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA183_665==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA183_665==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA183_665==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA183_665==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA183_665==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA183_665==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA183_665==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA183_665==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA183_665==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA183_665==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA183_665==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA183_665==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA183_665==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA183_665==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA183_665==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA183_665==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA183_665==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA183_665==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA183_665==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA183_665==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA183_665==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA183_665==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA183_665==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA183_665==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA183_665==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA183_665==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA183_665==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA183_665==LW) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA183_665==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA183_665==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA183_665==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA183_665==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA183_665==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA183_665==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA183_665==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA183_665==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA183_665==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA183_665==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA183_665==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA183_665==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA183_665==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA183_665==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA183_665==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA183_665==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA183_665==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA183_665==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA183_665==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA183_665==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA183_665==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        input.seek(index183_665);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA183_725 = input.LA(1);
                        int index183_725 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_725==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA183_725==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA183_725==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA183_725==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA183_725==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA183_725==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA183_725==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA183_725==STRING_LITERAL) ) {s = 1771;}
                        else if ( (LA183_725==QUOTED_STRING_LITERAL) ) {s = 1772;}
                        else if ( (LA183_725==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA183_725==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA183_725==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA183_725==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA183_725==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA183_725==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA183_725==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA183_725==AT) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA183_725==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA183_725==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA183_725==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA183_725==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA183_725==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA183_725==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA183_725==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA183_725==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA183_725==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA183_725==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA183_725==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA183_725==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA183_725==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA183_725==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA183_725==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA183_725==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA183_725==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA183_725==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA183_725==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA183_725==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA183_725==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA183_725==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA183_725==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA183_725==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA183_725==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA183_725==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA183_725==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA183_725==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA183_725==LW) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA183_725==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA183_725==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA183_725==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA183_725==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA183_725==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA183_725==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA183_725==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA183_725==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA183_725==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA183_725==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA183_725==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA183_725==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA183_725==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA183_725==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA183_725==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA183_725==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA183_725==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA183_725==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA183_725==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA183_725==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA183_725==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        input.seek(index183_725);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA183_785 = input.LA(1);
                        int index183_785 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_785==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA183_785==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA183_785==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA183_785==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA183_785==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA183_785==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA183_785==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA183_785==STRING_LITERAL) ) {s = 1838;}
                        else if ( (LA183_785==QUOTED_STRING_LITERAL) ) {s = 1839;}
                        else if ( (LA183_785==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA183_785==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA183_785==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA183_785==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA183_785==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA183_785==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA183_785==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA183_785==AT) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA183_785==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA183_785==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA183_785==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA183_785==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA183_785==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA183_785==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA183_785==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA183_785==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA183_785==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA183_785==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA183_785==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA183_785==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA183_785==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA183_785==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA183_785==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA183_785==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA183_785==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA183_785==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA183_785==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA183_785==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA183_785==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA183_785==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA183_785==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA183_785==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA183_785==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA183_785==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA183_785==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA183_785==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA183_785==LW) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA183_785==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA183_785==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA183_785==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA183_785==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA183_785==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA183_785==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA183_785==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA183_785==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA183_785==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA183_785==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA183_785==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA183_785==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA183_785==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA183_785==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA183_785==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA183_785==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA183_785==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA183_785==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA183_785==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA183_785==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA183_785==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        input.seek(index183_785);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA183_845 = input.LA(1);
                        int index183_845 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_845==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( ((LA183_845>=STRING_LITERAL && LA183_845<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index183_845);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA183_905 = input.LA(1);
                        int index183_905 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_905==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA183_905==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA183_905==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA183_905==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA183_905==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA183_905==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA183_905==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA183_905==STRING_LITERAL) ) {s = 1908;}
                        else if ( (LA183_905==QUOTED_STRING_LITERAL) ) {s = 1909;}
                        else if ( (LA183_905==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA183_905==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA183_905==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA183_905==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA183_905==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA183_905==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA183_905==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA183_905==AT) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA183_905==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA183_905==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA183_905==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA183_905==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA183_905==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA183_905==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA183_905==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA183_905==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA183_905==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA183_905==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA183_905==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA183_905==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA183_905==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA183_905==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA183_905==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA183_905==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA183_905==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA183_905==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA183_905==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA183_905==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA183_905==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA183_905==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA183_905==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA183_905==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA183_905==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA183_905==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA183_905==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA183_905==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA183_905==LW) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA183_905==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA183_905==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA183_905==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA183_905==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA183_905==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA183_905==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA183_905==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA183_905==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA183_905==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA183_905==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA183_905==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA183_905==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA183_905==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA183_905==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA183_905==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA183_905==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA183_905==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA183_905==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA183_905==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA183_905==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA183_905==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        input.seek(index183_905);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA183_965 = input.LA(1);
                        int index183_965 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_965==STRING_LITERAL) ) {s = 1968;}
                        else if ( (LA183_965==QUOTED_STRING_LITERAL) ) {s = 1969;}
                        else if ( (LA183_965==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA183_965==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA183_965==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA183_965==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA183_965==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA183_965==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA183_965==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA183_965==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA183_965==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA183_965==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA183_965==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA183_965==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA183_965==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA183_965==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA183_965==AT) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA183_965==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA183_965==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA183_965==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA183_965==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA183_965==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA183_965==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA183_965==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA183_965==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA183_965==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA183_965==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA183_965==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA183_965==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA183_965==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA183_965==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA183_965==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA183_965==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA183_965==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA183_965==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA183_965==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA183_965==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA183_965==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA183_965==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA183_965==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA183_965==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA183_965==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA183_965==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA183_965==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA183_965==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA183_965==LW) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA183_965==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA183_965==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA183_965==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA183_965==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA183_965==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA183_965==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA183_965==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA183_965==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA183_965==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA183_965==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA183_965==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA183_965==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA183_965==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA183_965==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA183_965==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA183_965==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA183_965==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA183_965==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA183_965==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA183_965==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA183_965==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        input.seek(index183_965);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA183_1025 = input.LA(1);
                        int index183_1025 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1025==STRING_LITERAL) ) {s = 2035;}
                        else if ( (LA183_1025==QUOTED_STRING_LITERAL) ) {s = 2036;}
                        else if ( (LA183_1025==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA183_1025==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA183_1025==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA183_1025==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA183_1025==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA183_1025==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA183_1025==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA183_1025==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA183_1025==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA183_1025==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA183_1025==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA183_1025==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA183_1025==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA183_1025==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA183_1025==AT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA183_1025==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA183_1025==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA183_1025==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA183_1025==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA183_1025==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA183_1025==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA183_1025==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA183_1025==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA183_1025==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA183_1025==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA183_1025==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA183_1025==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA183_1025==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA183_1025==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA183_1025==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA183_1025==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA183_1025==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA183_1025==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA183_1025==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA183_1025==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA183_1025==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA183_1025==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA183_1025==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA183_1025==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA183_1025==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA183_1025==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA183_1025==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA183_1025==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA183_1025==LW) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA183_1025==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA183_1025==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA183_1025==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA183_1025==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA183_1025==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA183_1025==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA183_1025==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA183_1025==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA183_1025==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA183_1025==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA183_1025==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA183_1025==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA183_1025==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA183_1025==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA183_1025==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA183_1025==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA183_1025==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA183_1025==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA183_1025==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA183_1025==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA183_1025==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        input.seek(index183_1025);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA183_1085 = input.LA(1);
                        int index183_1085 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1085==STRING_LITERAL) ) {s = 2102;}
                        else if ( (LA183_1085==QUOTED_STRING_LITERAL) ) {s = 2103;}
                        else if ( (LA183_1085==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA183_1085==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA183_1085==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA183_1085==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA183_1085==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA183_1085==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA183_1085==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA183_1085==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA183_1085==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA183_1085==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA183_1085==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA183_1085==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA183_1085==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA183_1085==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA183_1085==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA183_1085==AT) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA183_1085==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA183_1085==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA183_1085==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA183_1085==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA183_1085==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA183_1085==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA183_1085==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA183_1085==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA183_1085==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA183_1085==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA183_1085==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA183_1085==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA183_1085==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA183_1085==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA183_1085==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA183_1085==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA183_1085==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA183_1085==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA183_1085==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA183_1085==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA183_1085==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA183_1085==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA183_1085==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA183_1085==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA183_1085==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA183_1085==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA183_1085==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA183_1085==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA183_1085==LW) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA183_1085==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA183_1085==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA183_1085==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA183_1085==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA183_1085==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA183_1085==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA183_1085==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA183_1085==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA183_1085==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA183_1085==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA183_1085==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA183_1085==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA183_1085==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA183_1085==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA183_1085==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA183_1085==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA183_1085==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA183_1085==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA183_1085==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA183_1085==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA183_1085==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        input.seek(index183_1085);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA183_1145 = input.LA(1);
                        int index183_1145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1145==SELECT) ) {s = 2170;}
                        else if ( (LA183_1145==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA183_1145==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA183_1145==AT) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA183_1145==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA183_1145==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA183_1145==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA183_1145==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA183_1145==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA183_1145==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA183_1145==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA183_1145==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA183_1145==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA183_1145==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA183_1145==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA183_1145==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA183_1145==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA183_1145==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA183_1145==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA183_1145==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA183_1145==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA183_1145==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA183_1145==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA183_1145==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA183_1145==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA183_1145==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA183_1145==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA183_1145==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA183_1145==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA183_1145==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA183_1145==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA183_1145==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA183_1145==LW) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA183_1145==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA183_1145==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA183_1145==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA183_1145==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA183_1145==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA183_1145==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA183_1145==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA183_1145==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA183_1145==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA183_1145==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA183_1145==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA183_1145==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA183_1145==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA183_1145==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA183_1145==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        input.seek(index183_1145);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA183_1146 = input.LA(1);
                        int index183_1146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1146==RPAREN) ) {s = 2218;}
                        else if ( (LA183_1146==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA183_1146==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA183_1146==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA183_1146==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA183_1146==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA183_1146==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA183_1146==LT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA183_1146==GT) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA183_1146==LE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA183_1146==GE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA183_1146==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA183_1146==IS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA183_1146==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA183_1146==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA183_1146==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA183_1146==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA183_1146==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA183_1146==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA183_1146==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA183_1146==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA183_1146==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA183_1146==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA183_1146==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA183_1146==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        input.seek(index183_1146);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA183_1147 = input.LA(1);
                        int index183_1147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1147==RPAREN) ) {s = 2243;}
                        else if ( (LA183_1147==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA183_1147==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA183_1147==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA183_1147==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA183_1147==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA183_1147==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA183_1147==LT) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA183_1147==GT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA183_1147==LE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA183_1147==GE) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA183_1147==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA183_1147==IS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA183_1147==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA183_1147==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA183_1147==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA183_1147==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA183_1147==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA183_1147==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA183_1147==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA183_1147==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA183_1147==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA183_1147==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA183_1147==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA183_1147==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        input.seek(index183_1147);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA183_1225 = input.LA(1);
                        int index183_1225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1225==RPAREN) ) {s = 2268;}
                        else if ( (LA183_1225==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA183_1225==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA183_1225==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA183_1225==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA183_1225==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA183_1225==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA183_1225==LT) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA183_1225==GT) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA183_1225==LE) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA183_1225==GE) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA183_1225==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA183_1225==IS) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA183_1225==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA183_1225==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA183_1225==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA183_1225==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA183_1225==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA183_1225==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA183_1225==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA183_1225==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA183_1225==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA183_1225==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA183_1225==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA183_1225==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        input.seek(index183_1225);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA183_1226 = input.LA(1);
                        int index183_1226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1226==RPAREN) ) {s = 2293;}
                        else if ( (LA183_1226==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA183_1226==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA183_1226==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA183_1226==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA183_1226==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA183_1226==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA183_1226==LT) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA183_1226==GT) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA183_1226==LE) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA183_1226==GE) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA183_1226==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA183_1226==IS) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA183_1226==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA183_1226==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA183_1226==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA183_1226==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA183_1226==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA183_1226==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA183_1226==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA183_1226==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA183_1226==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA183_1226==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA183_1226==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA183_1226==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        input.seek(index183_1226);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA183_1294 = input.LA(1);
                        int index183_1294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1294==RPAREN) ) {s = 2318;}
                        else if ( (LA183_1294==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA183_1294==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA183_1294==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA183_1294==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA183_1294==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA183_1294==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA183_1294==LT) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA183_1294==GT) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA183_1294==LE) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA183_1294==GE) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA183_1294==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA183_1294==IS) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA183_1294==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA183_1294==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA183_1294==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA183_1294==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA183_1294==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA183_1294==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA183_1294==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA183_1294==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA183_1294==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA183_1294==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA183_1294==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA183_1294==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        input.seek(index183_1294);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA183_1295 = input.LA(1);
                        int index183_1295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1295==RPAREN) ) {s = 2343;}
                        else if ( (LA183_1295==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA183_1295==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA183_1295==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA183_1295==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA183_1295==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA183_1295==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA183_1295==LT) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA183_1295==GT) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA183_1295==LE) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA183_1295==GE) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA183_1295==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA183_1295==IS) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA183_1295==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA183_1295==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA183_1295==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA183_1295==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA183_1295==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA183_1295==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA183_1295==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA183_1295==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA183_1295==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA183_1295==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA183_1295==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA183_1295==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        input.seek(index183_1295);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA183_1354 = input.LA(1);
                        int index183_1354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1354==RPAREN) ) {s = 14;}
                        else if ( (LA183_1354==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA183_1354==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA183_1354==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA183_1354==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA183_1354==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA183_1354==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA183_1354==LT) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA183_1354==GT) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA183_1354==LE) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA183_1354==GE) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA183_1354==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA183_1354==IS) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA183_1354==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA183_1354==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA183_1354==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA183_1354==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA183_1354==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA183_1354==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA183_1354==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA183_1354==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA183_1354==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA183_1354==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA183_1354==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA183_1354==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA183_1354==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        input.seek(index183_1354);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA183_1355 = input.LA(1);
                        int index183_1355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1355==RPAREN) ) {s = 14;}
                        else if ( (LA183_1355==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA183_1355==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA183_1355==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA183_1355==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA183_1355==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA183_1355==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA183_1355==LT) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA183_1355==GT) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA183_1355==LE) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA183_1355==GE) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA183_1355==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA183_1355==IS) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA183_1355==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA183_1355==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA183_1355==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA183_1355==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA183_1355==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA183_1355==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA183_1355==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA183_1355==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA183_1355==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA183_1355==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA183_1355==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA183_1355==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA183_1355==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        input.seek(index183_1355);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA183_1430 = input.LA(1);
                        int index183_1430 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1430==RPAREN) ) {s = 2420;}
                        else if ( (LA183_1430==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA183_1430==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA183_1430==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA183_1430==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA183_1430==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA183_1430==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA183_1430==LT) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA183_1430==GT) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA183_1430==LE) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA183_1430==GE) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA183_1430==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA183_1430==IS) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA183_1430==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA183_1430==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA183_1430==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA183_1430==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA183_1430==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA183_1430==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA183_1430==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA183_1430==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA183_1430==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA183_1430==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA183_1430==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA183_1430==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        input.seek(index183_1430);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA183_1431 = input.LA(1);
                        int index183_1431 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1431==RPAREN) ) {s = 2445;}
                        else if ( (LA183_1431==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA183_1431==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA183_1431==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA183_1431==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA183_1431==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA183_1431==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA183_1431==LT) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA183_1431==GT) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA183_1431==LE) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA183_1431==GE) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA183_1431==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA183_1431==IS) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA183_1431==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA183_1431==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA183_1431==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA183_1431==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA183_1431==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA183_1431==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA183_1431==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA183_1431==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA183_1431==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA183_1431==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA183_1431==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA183_1431==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        input.seek(index183_1431);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA183_1490 = input.LA(1);
                        int index183_1490 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1490==RPAREN) ) {s = 2470;}
                        else if ( (LA183_1490==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA183_1490==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA183_1490==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA183_1490==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA183_1490==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA183_1490==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA183_1490==LT) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA183_1490==GT) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA183_1490==LE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA183_1490==GE) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA183_1490==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA183_1490==IS) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA183_1490==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA183_1490==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA183_1490==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA183_1490==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA183_1490==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA183_1490==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA183_1490==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA183_1490==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA183_1490==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA183_1490==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA183_1490==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA183_1490==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        input.seek(index183_1490);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA183_1491 = input.LA(1);
                        int index183_1491 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1491==RPAREN) ) {s = 2495;}
                        else if ( (LA183_1491==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA183_1491==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA183_1491==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA183_1491==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA183_1491==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA183_1491==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA183_1491==LT) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA183_1491==GT) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA183_1491==LE) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA183_1491==GE) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA183_1491==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA183_1491==IS) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA183_1491==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA183_1491==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA183_1491==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA183_1491==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA183_1491==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA183_1491==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA183_1491==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA183_1491==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA183_1491==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA183_1491==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA183_1491==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA183_1491==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        input.seek(index183_1491);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA183_1568 = input.LA(1);
                        int index183_1568 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1568==RPAREN) ) {s = 2520;}
                        else if ( (LA183_1568==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA183_1568==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA183_1568==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA183_1568==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA183_1568==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA183_1568==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA183_1568==LT) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA183_1568==GT) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA183_1568==LE) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA183_1568==GE) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA183_1568==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA183_1568==IS) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA183_1568==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA183_1568==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA183_1568==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA183_1568==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA183_1568==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA183_1568==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA183_1568==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA183_1568==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA183_1568==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA183_1568==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA183_1568==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA183_1568==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        input.seek(index183_1568);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA183_1569 = input.LA(1);
                        int index183_1569 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1569==RPAREN) ) {s = 2545;}
                        else if ( (LA183_1569==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA183_1569==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA183_1569==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA183_1569==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA183_1569==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA183_1569==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA183_1569==LT) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA183_1569==GT) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA183_1569==LE) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA183_1569==GE) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA183_1569==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA183_1569==IS) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA183_1569==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA183_1569==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA183_1569==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA183_1569==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA183_1569==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA183_1569==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA183_1569==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA183_1569==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA183_1569==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA183_1569==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA183_1569==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA183_1569==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        input.seek(index183_1569);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA183_1628 = input.LA(1);
                        int index183_1628 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1628==RPAREN) ) {s = 2570;}
                        else if ( (LA183_1628==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA183_1628==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA183_1628==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA183_1628==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA183_1628==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA183_1628==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA183_1628==LT) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA183_1628==GT) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA183_1628==LE) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA183_1628==GE) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA183_1628==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA183_1628==IS) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA183_1628==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA183_1628==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA183_1628==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA183_1628==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA183_1628==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA183_1628==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA183_1628==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA183_1628==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA183_1628==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA183_1628==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA183_1628==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA183_1628==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA183_1628==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        input.seek(index183_1628);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA183_1629 = input.LA(1);
                        int index183_1629 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1629==RPAREN) ) {s = 2596;}
                        else if ( (LA183_1629==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA183_1629==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA183_1629==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA183_1629==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA183_1629==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA183_1629==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA183_1629==LT) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA183_1629==GT) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA183_1629==LE) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA183_1629==GE) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA183_1629==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA183_1629==IS) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA183_1629==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA183_1629==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA183_1629==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA183_1629==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA183_1629==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA183_1629==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA183_1629==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA183_1629==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA183_1629==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA183_1629==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA183_1629==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA183_1629==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA183_1629==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        input.seek(index183_1629);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA183_1696 = input.LA(1);
                        int index183_1696 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1696==RPAREN) ) {s = 2622;}
                        else if ( (LA183_1696==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA183_1696==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA183_1696==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA183_1696==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA183_1696==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA183_1696==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA183_1696==LT) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA183_1696==GT) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA183_1696==LE) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA183_1696==GE) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA183_1696==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA183_1696==IS) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA183_1696==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA183_1696==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA183_1696==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA183_1696==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA183_1696==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA183_1696==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA183_1696==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA183_1696==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA183_1696==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA183_1696==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA183_1696==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA183_1696==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA183_1696==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        input.seek(index183_1696);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA183_1697 = input.LA(1);
                        int index183_1697 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1697==RPAREN) ) {s = 2648;}
                        else if ( (LA183_1697==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA183_1697==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA183_1697==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA183_1697==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA183_1697==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA183_1697==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA183_1697==LT) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA183_1697==GT) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA183_1697==LE) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA183_1697==GE) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA183_1697==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA183_1697==IS) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA183_1697==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA183_1697==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA183_1697==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA183_1697==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA183_1697==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA183_1697==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA183_1697==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA183_1697==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA183_1697==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA183_1697==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA183_1697==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA183_1697==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA183_1697==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        input.seek(index183_1697);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA183_1771 = input.LA(1);
                        int index183_1771 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1771==RPAREN) ) {s = 2674;}
                        else if ( (LA183_1771==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA183_1771==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA183_1771==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA183_1771==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA183_1771==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA183_1771==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA183_1771==LT) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA183_1771==GT) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA183_1771==LE) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA183_1771==GE) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA183_1771==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA183_1771==IS) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA183_1771==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA183_1771==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA183_1771==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA183_1771==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA183_1771==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA183_1771==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA183_1771==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA183_1771==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA183_1771==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA183_1771==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA183_1771==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA183_1771==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA183_1771==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        input.seek(index183_1771);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA183_1772 = input.LA(1);
                        int index183_1772 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1772==RPAREN) ) {s = 2700;}
                        else if ( (LA183_1772==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA183_1772==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA183_1772==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA183_1772==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA183_1772==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA183_1772==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA183_1772==LT) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA183_1772==GT) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA183_1772==LE) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA183_1772==GE) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA183_1772==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA183_1772==IS) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA183_1772==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA183_1772==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA183_1772==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA183_1772==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA183_1772==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA183_1772==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA183_1772==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA183_1772==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA183_1772==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA183_1772==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA183_1772==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA183_1772==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA183_1772==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        input.seek(index183_1772);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA183_1838 = input.LA(1);
                        int index183_1838 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1838==RPAREN) ) {s = 2726;}
                        else if ( (LA183_1838==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA183_1838==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA183_1838==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA183_1838==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA183_1838==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA183_1838==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA183_1838==LT) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA183_1838==GT) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA183_1838==LE) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA183_1838==GE) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA183_1838==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA183_1838==IS) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA183_1838==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA183_1838==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA183_1838==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA183_1838==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA183_1838==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA183_1838==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA183_1838==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA183_1838==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA183_1838==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA183_1838==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA183_1838==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA183_1838==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA183_1838==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        input.seek(index183_1838);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA183_1839 = input.LA(1);
                        int index183_1839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1839==RPAREN) ) {s = 2752;}
                        else if ( (LA183_1839==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA183_1839==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA183_1839==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA183_1839==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA183_1839==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA183_1839==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA183_1839==LT) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA183_1839==GT) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA183_1839==LE) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA183_1839==GE) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA183_1839==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA183_1839==IS) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA183_1839==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA183_1839==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA183_1839==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA183_1839==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA183_1839==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA183_1839==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA183_1839==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA183_1839==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA183_1839==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA183_1839==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA183_1839==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA183_1839==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA183_1839==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        input.seek(index183_1839);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA183_1908 = input.LA(1);
                        int index183_1908 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1908==RPAREN) ) {s = 14;}
                        else if ( (LA183_1908==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA183_1908==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA183_1908==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA183_1908==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA183_1908==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA183_1908==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA183_1908==LT) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA183_1908==GT) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA183_1908==LE) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA183_1908==GE) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA183_1908==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA183_1908==IS) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA183_1908==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA183_1908==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA183_1908==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA183_1908==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA183_1908==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA183_1908==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA183_1908==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA183_1908==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA183_1908==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA183_1908==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA183_1908==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA183_1908==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA183_1908==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        input.seek(index183_1908);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA183_1909 = input.LA(1);
                        int index183_1909 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1909==RPAREN) ) {s = 14;}
                        else if ( (LA183_1909==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA183_1909==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA183_1909==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA183_1909==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA183_1909==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA183_1909==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA183_1909==LT) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA183_1909==GT) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA183_1909==LE) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA183_1909==GE) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA183_1909==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA183_1909==IS) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA183_1909==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA183_1909==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA183_1909==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA183_1909==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA183_1909==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA183_1909==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA183_1909==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA183_1909==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA183_1909==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA183_1909==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA183_1909==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA183_1909==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA183_1909==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        input.seek(index183_1909);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA183_1968 = input.LA(1);
                        int index183_1968 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1968==RPAREN) ) {s = 2830;}
                        else if ( (LA183_1968==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA183_1968==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA183_1968==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA183_1968==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA183_1968==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA183_1968==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA183_1968==LT) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA183_1968==GT) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA183_1968==LE) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA183_1968==GE) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA183_1968==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA183_1968==IS) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA183_1968==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA183_1968==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA183_1968==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA183_1968==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA183_1968==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA183_1968==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA183_1968==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA183_1968==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA183_1968==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA183_1968==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA183_1968==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA183_1968==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        input.seek(index183_1968);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA183_1969 = input.LA(1);
                        int index183_1969 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1969==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA183_1969==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA183_1969==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA183_1969==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA183_1969==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA183_1969==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA183_1969==LT) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA183_1969==GT) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA183_1969==LE) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA183_1969==GE) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA183_1969==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA183_1969==IS) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA183_1969==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA183_1969==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA183_1969==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA183_1969==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA183_1969==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA183_1969==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA183_1969==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA183_1969==RPAREN) ) {s = 2874;}
                        else if ( (LA183_1969==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA183_1969==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA183_1969==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA183_1969==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA183_1969==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        input.seek(index183_1969);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA183_2035 = input.LA(1);
                        int index183_2035 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2035==RPAREN) ) {s = 14;}
                        else if ( (LA183_2035==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA183_2035==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA183_2035==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA183_2035==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA183_2035==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA183_2035==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA183_2035==LT) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA183_2035==GT) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA183_2035==LE) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA183_2035==GE) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA183_2035==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA183_2035==IS) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA183_2035==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA183_2035==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA183_2035==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA183_2035==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA183_2035==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA183_2035==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA183_2035==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA183_2035==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA183_2035==AS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA183_2035==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA183_2035==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA183_2035==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA183_2035==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA183_2035==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        input.seek(index183_2035);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA183_2036 = input.LA(1);
                        int index183_2036 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2036==RPAREN) ) {s = 14;}
                        else if ( (LA183_2036==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA183_2036==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA183_2036==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA183_2036==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA183_2036==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA183_2036==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA183_2036==LT) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA183_2036==GT) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA183_2036==LE) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA183_2036==GE) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA183_2036==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA183_2036==IS) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA183_2036==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA183_2036==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA183_2036==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA183_2036==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA183_2036==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA183_2036==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA183_2036==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA183_2036==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA183_2036==AS) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA183_2036==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA183_2036==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA183_2036==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA183_2036==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA183_2036==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        input.seek(index183_2036);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA183_2102 = input.LA(1);
                        int index183_2102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2102==RPAREN) ) {s = 2934;}
                        else if ( (LA183_2102==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA183_2102==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA183_2102==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA183_2102==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA183_2102==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA183_2102==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA183_2102==LT) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA183_2102==GT) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA183_2102==LE) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA183_2102==GE) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA183_2102==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA183_2102==IS) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA183_2102==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA183_2102==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA183_2102==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA183_2102==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA183_2102==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA183_2102==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA183_2102==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA183_2102==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA183_2102==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA183_2102==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA183_2102==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA183_2102==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        input.seek(index183_2102);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA183_2103 = input.LA(1);
                        int index183_2103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2103==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA183_2103==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA183_2103==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA183_2103==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA183_2103==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA183_2103==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA183_2103==LT) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA183_2103==GT) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA183_2103==LE) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA183_2103==GE) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA183_2103==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA183_2103==IS) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA183_2103==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA183_2103==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA183_2103==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA183_2103==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA183_2103==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA183_2103==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA183_2103==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA183_2103==RPAREN) ) {s = 2978;}
                        else if ( (LA183_2103==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA183_2103==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA183_2103==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA183_2103==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA183_2103==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        input.seek(index183_2103);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA183_2218 = input.LA(1);
                        int index183_2218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2218);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA183_2243 = input.LA(1);
                        int index183_2243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2243);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA183_2268 = input.LA(1);
                        int index183_2268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2268);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA183_2293 = input.LA(1);
                        int index183_2293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2293);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA183_2318 = input.LA(1);
                        int index183_2318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2318);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA183_2343 = input.LA(1);
                        int index183_2343 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2343);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA183_2420 = input.LA(1);
                        int index183_2420 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2420);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA183_2445 = input.LA(1);
                        int index183_2445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2445);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA183_2470 = input.LA(1);
                        int index183_2470 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2470);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA183_2495 = input.LA(1);
                        int index183_2495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2495);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA183_2520 = input.LA(1);
                        int index183_2520 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2520);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA183_2545 = input.LA(1);
                        int index183_2545 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2545);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA183_2570 = input.LA(1);
                        int index183_2570 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2570);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA183_2596 = input.LA(1);
                        int index183_2596 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2596);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA183_2622 = input.LA(1);
                        int index183_2622 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2622);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA183_2648 = input.LA(1);
                        int index183_2648 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2648);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA183_2674 = input.LA(1);
                        int index183_2674 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2674);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA183_2700 = input.LA(1);
                        int index183_2700 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2700);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA183_2726 = input.LA(1);
                        int index183_2726 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2726);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA183_2752 = input.LA(1);
                        int index183_2752 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2752);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA183_2830 = input.LA(1);
                        int index183_2830 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2830);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA183_2874 = input.LA(1);
                        int index183_2874 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2874);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA183_2934 = input.LA(1);
                        int index183_2934 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2934);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA183_2978 = input.LA(1);
                        int index183_2978 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index183_2978);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1727 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1732 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1750 = new BitSet(new long[]{0x0040020008000010L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1756 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1786 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1816 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x82900640A0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1876 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0xC2900640A0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1963 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1988 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8290064000004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2029 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0xC290064020004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2161 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8390064010004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2167 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8290064000004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2209 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0xC390064030004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2215 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0xC290064020004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2261 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2266 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2271 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2276 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2281 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2286 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2291 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2308 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2311 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2317 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2320 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2324 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2327 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2331 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2337 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2340 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2347 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2350 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2353 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2360 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2363 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2370 = new BitSet(new long[]{0x0130800080004000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2373 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2380 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2383 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2386 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8210004020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2413 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2422 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2425 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2488 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2492 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2537 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2541 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2560 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2562 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2565 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2567 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2575 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2612 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2619 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2626 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2632 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2639 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2641 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2649 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2700 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2702 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2705 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2707 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeMatched2711 = new BitSet(new long[]{0x0000000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatched2724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatched2726 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatched2731 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatched2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2784 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2786 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2788 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched2791 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched2793 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatched2797 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INSERT_in_mergeUnmatched2801 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeUnmatched2804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_columnList_in_mergeUnmatched2806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeUnmatched2808 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeUnmatched2812 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_mergeUnmatched2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2856 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2858 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2864 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2866 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2869 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2873 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2879 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2881 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2890 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2892 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2894 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2901 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2903 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2910 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2912 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2914 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8210004020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2990 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3009 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3011 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3014 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3016 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3023 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3076 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3078 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3082 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3084 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3089 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3122 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3175 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3179 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3184 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3226 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3231 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3260 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3291 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3332 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3338 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4000000260000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3343 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4000000260000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3348 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4000000260000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3357 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000060000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3361 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000060000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3365 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000060000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3380 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3399 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3416 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3419 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3508 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0xC290065020004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3511 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3537 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3587 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3667 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3720 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0xC290065020004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3763 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3791 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3822 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3826 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3833 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001060000000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001060000000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x40000000A0000000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList3963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001020000000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4023 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4029 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4118 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4139 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4156 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4159 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4202 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4206 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4210 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4213 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4234 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4248 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4250 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4317 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4320 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4323 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4326 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4343 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4404 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4410 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4416 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4422 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4459 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4509 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4512 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4576 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4614 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4618 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4622 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4626 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4635 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4640 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4651 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4657 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4738 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4793 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4799 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4806 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4811 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4817 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4823 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4829 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4879 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4881 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4883 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4886 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4917 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4922 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4949 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4988 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5034 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5038 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5042 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5046 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5050 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000D000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000D000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5363 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5365 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5394 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5525 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5528 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5588 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5600 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D4E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5668 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5708 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5735 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5820 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5835 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5839 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5843 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5847 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5915 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5921 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5977 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_outputLimit5979 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6141 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6189 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6195 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8210004020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8210004020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6272 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6276 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6280 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6284 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6288 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6293 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6329 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_whenClause6332 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6334 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_whenClause6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6350 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_elseClause6353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6380 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6383 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6386 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6400 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_caseExpression6402 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6404 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6407 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6445 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6450 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6452 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6484 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6489 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6491 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000182000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6528 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6531 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6534 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000182000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6559 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6575 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6588 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6606 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6620 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6622 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6636 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6650 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6680 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6715 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6720 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6725 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6853 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6885 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6889 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6893 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6897 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6956 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7062 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7101 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7107 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010890000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7132 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000880000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7161 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000890000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7366 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7418 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7420 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7477 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7572 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7578 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010004000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7626 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7629 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010004000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060001000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7652 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7655 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7658 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060001000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7677 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7702 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7711 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7718 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7881 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7887 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7890 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr7893 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7903 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7911 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7947 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7954 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7959 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000220000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8027 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC39006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8033 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8068 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8072 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8077 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8092 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8096 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8101 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8116 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8128 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8133 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8168 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8172 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8177 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8192 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8196 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8201 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8216 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8220 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8225 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8255 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8260 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8266 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8282 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8288 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8304 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8310 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8326 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8340 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8359 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8377 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc8401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8404 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8418 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8421 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8444 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8479 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8484 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8517 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8522 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8556 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8633 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc8636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8639 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc8642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8645 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc8648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8694 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8728 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8734 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8772 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8842 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8847 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8854 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8871 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8873 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006C060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression8926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat8979 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat8986 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat8988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat8990 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat8994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9023 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression9028 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9030 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9062 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression9067 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9069 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression9104 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression9113 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9180 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9186 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9194 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9200 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9324 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9329 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000090000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom9358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9373 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9379 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000460000000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9383 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9499 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D4E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9560 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D4E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9581 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9607 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29007D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9619 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D860004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9642 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9764 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9859 = new BitSet(new long[]{0x803801E80FFC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9862 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9864 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9866 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9870 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9875 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9880 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9939 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9989 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9992 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector10042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector10044 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector10047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression10098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression10100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression10109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression10120 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D0E0004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression10125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10344 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D060004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_expressionList10347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10378 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0xC29006D460004000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10514 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_rangeOperand10709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10829 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10833 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10835 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000D020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000810000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000D020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000810000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty11005 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008440000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic11042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic11046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic11048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic11067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic11081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11237 = new BitSet(new long[]{0x803801E807FC4422L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x6000000020000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent11517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod11689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod11691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod11715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x821000C020004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_yearPart11855 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart11859 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart11861 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart11865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart11869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_monthPart11917 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart11921 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart11923 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart11927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart11931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekPart11979 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart11983 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart11985 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart11989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart11993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart12041 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart12045 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart12047 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart12051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart12055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart12104 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart12108 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart12110 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart12114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart12118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart12167 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart12171 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart12173 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart12185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart12235 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart12239 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart12241 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart12249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart12253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart12303 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart12307 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart12309 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number12376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number12393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number12410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number12427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution12448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant12467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant12474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant12487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8210004000004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8210004000004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_numberconstant12559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10493 = new BitSet(new long[]{0x0000000000000002L});
}
