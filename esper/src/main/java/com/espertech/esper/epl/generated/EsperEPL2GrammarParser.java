  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UPD", "MERGE_INS", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=178;
    public static final int FLOAT_SUFFIX=339;
    public static final int STAR=282;
    public static final int DOT_EXPR=186;
    public static final int NUMERIC_PARAM_LIST=118;
    public static final int MOD=300;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=160;
    public static final int LIB_FUNC_CHAIN=185;
    public static final int CREATE_COL_TYPE_LIST=236;
    public static final int BSR=321;
    public static final int MERGE_INS=252;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=184;
    public static final int TIMEPERIOD_MILLISECONDS=99;
    public static final int FULL_OUTERJOIN_EXPR=164;
    public static final int MATCHREC_PATTERN_CONCAT=264;
    public static final int INC=314;
    public static final int LNOT=310;
    public static final int RPAREN=277;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=287;
    public static final int BSR_ASSIGN=322;
    public static final int CAST_EXPR=215;
    public static final int MATCHES=110;
    public static final int USING=114;
    public static final int STREAM_EXPR=159;
    public static final int TIMEPERIOD_SECONDS=96;
    public static final int NOT_EQUAL=292;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=127;
    public static final int LAST_AGGREG=243;
    public static final int REGEXP=9;
    public static final int MATCHED=116;
    public static final int FOLLOWED_BY_EXPR=121;
    public static final int FOLLOWED_BY=304;
    public static final int HOUR_PART=191;
    public static final int RBRACK=281;
    public static final int MATCHREC_PATTERN_NESTED=266;
    public static final int MATCH_UNTIL_RANGE_CLOSED=234;
    public static final int GE=296;
    public static final int METHOD_JOIN_EXPR=230;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=126;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=125;
    public static final int MINUS_ASSIGN=315;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=137;
    public static final int NUM_DOUBLE=260;
    public static final int INSERTINTO_STREAM_NAME=203;
    public static final int LCURLY=301;
    public static final int TIMEPERIOD_MILLISEC=97;
    public static final int UNARY_MINUS=187;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=201;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=135;
    public static final int WS=331;
    public static final int EMAILAT=330;
    public static final int SUBSELECT_GROUP_EXPR=207;
    public static final int ON_SELECT_INSERT_EXPR=225;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=305;
    public static final int EXPRCOL=182;
    public static final int SL_COMMENT=332;
    public static final int NULL_TYPE=259;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=232;
    public static final int GT=294;
    public static final int BNOT=311;
    public static final int WHERE_EXPR=146;
    public static final int END=33;
    public static final int LAND=328;
    public static final int INNERJOIN_EXPR=161;
    public static final int NOT_REGEXP=198;
    public static final int MATCH_UNTIL_EXPR=231;
    public static final int EVENT_PROP_EXPR=168;
    public static final int LBRACK=280;
    public static final int MERGE_UPD=251;
    public static final int VIEW_EXPR=143;
    public static final int ANNOTATION=239;
    public static final int LONG_TYPE=254;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=128;
    public static final int MATCHREC_PATTERN=262;
    public static final int ON_MERGE_EXPR=224;
    public static final int TIMEPERIOD_SEC=94;
    public static final int TICKED_STRING_LITERAL=306;
    public static final int ON_SELECT_EXPR=222;
    public static final int MINUTE_PART=192;
    public static final int PATTERN_NOT_EXPR=124;
    public static final int SQL_NE=291;
    public static final int SUM=18;
    public static final int HexDigit=337;
    public static final int UPDATE_EXPR=245;
    public static final int LPAREN=276;
    public static final int IN_SUBSELECT_EXPR=209;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=100;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=268;
    public static final int NOT_IN_RANGE=205;
    public static final int OFFSET=104;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=193;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=106;
    public static final int IDENT=275;
    public static final int DATABASE_JOIN_EXPR=145;
    public static final int BXOR=290;
    public static final int PLUS=284;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=88;
    public static final int CREATE_SCHEMA_EXPR=247;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=171;
    public static final int CREATE_INDEX_EXPR=216;
    public static final int TIMEPERIOD_MILLISECOND=98;
    public static final int EVAL_NOTEQUALS_EXPR=152;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=233;
    public static final int CREATE_VARIABLE_EXPR=229;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=269;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=122;
    public static final int RIGHT_OUTERJOIN_EXPR=163;
    public static final int NUMBERSETSTAR=238;
    public static final int LAST_OPERATOR=212;
    public static final int PATTERN_FILTER_EXPR=123;
    public static final int MERGE=115;
    public static final int EVAL_AND_EXPR=149;
    public static final int LEFT_OUTERJOIN_EXPR=162;
    public static final int EPL_EXPR=261;
    public static final int GROUP_BY_EXPR=165;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=169;
    public static final int MINUS=298;
    public static final int SEMI=329;
    public static final int STAR_ASSIGN=317;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=250;
    public static final int FIRST_AGGREG=242;
    public static final int COLON=286;
    public static final int EVAL_EQUALS_GROUP_EXPR=153;
    public static final int BAND_ASSIGN=327;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=179;
    public static final int NOT_IN_SET=195;
    public static final int VALUE_NULL=102;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=172;
    public static final int SL=323;
    public static final int NOT_IN_SUBSELECT_EXPR=210;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=141;
    public static final int SR=319;
    public static final int RCURLY=302;
    public static final int PLUS_ASSIGN=313;
    public static final int EXISTS_SUBSELECT_EXPR=208;
    public static final int DAY_PART=190;
    public static final int EVENT_FILTER_IN=136;
    public static final int DIV=299;
    public static final int OBJECT_PARAM_ORDERED_EXPR=120;
    public static final int OctalEscape=336;
    public static final int MILLISECOND_PART=194;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=103;
    public static final int SELECTION_EXPR=156;
    public static final int LOR=297;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=202;
    public static final int EXPONENT=338;
    public static final int LT=293;
    public static final int PATTERN_INCL_EXPR=144;
    public static final int WHILE=113;
    public static final int ORDER_BY_EXPR=166;
    public static final int BOOL_TYPE=258;
    public static final int MOD_ASSIGN=318;
    public static final int ANNOTATION_ARRAY=240;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=211;
    public static final int EQUALS=278;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=312;
    public static final int WINDOW_AGGREG=244;
    public static final int SL_ASSIGN=324;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=267;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=223;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=189;
    public static final int CREATE_COL_TYPE=237;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=101;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=154;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=255;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=95;
    public static final int EVENT_FILTER_BETWEEN=138;
    public static final int ANNOTATION_VALUE=241;
    public static final int SUBSELECT_EXPR=206;
    public static final int NUMERIC_PARAM_RANGE=117;
    public static final int CONCAT=183;
    public static final int CLASS_IDENT=140;
    public static final int MATCHREC_PATTERN_ALTER=265;
    public static final int ON_EXPR=219;
    public static final int CREATE_WINDOW_EXPR=217;
    public static final int PROPERTY_SELECTION_STREAM=130;
    public static final int ON_DELETE_EXPR=221;
    public static final int NUM_LONG=307;
    public static final int ON=41;
    public static final int TIME_PERIOD=188;
    public static final int DOUBLE_TYPE=256;
    public static final int DELETE=81;
    public static final int INT_TYPE=253;
    public static final int MATCHREC_PARTITION=273;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=148;
    public static final int ORDER_ELEMENT_EXPR=167;
    public static final int TIMEPERIOD_HOURS=91;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=214;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=257;
    public static final int NUM_INT=303;
    public static final int MATCHREC_DEFINE_ITEM=270;
    public static final int ON_SET_EXPR=228;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=249;
    public static final int NUM_FLOAT=308;
    public static final int ON_EXPR_FROM=227;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=334;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=129;
    public static final int WEEKDAY_OPERATOR=213;
    public static final int DEC=316;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=325;
    public static final int NUMERIC_PARAM_FREQUENCY=119;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=177;
    public static final int EVENT_FILTER_PARAM=133;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=174;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=105;
    public static final int FOR=112;
    public static final int ON_STREAM=220;
    public static final int DEFINE=108;
    public static final int TIMEPERIOD_DAYS=89;
    public static final int EVENT_FILTER_RANGE=134;
    public static final int ML_COMMENT=333;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=173;
    public static final int BOR_ASSIGN=326;
    public static final int COMMA=274;
    public static final int IS=42;
    public static final int PARTITION=109;
    public static final int WHEN_LIMIT_EXPR=180;
    public static final int TIMEPERIOD_LIMIT_EXPR=176;
    public static final int SOME=49;
    public static final int EQUAL=309;
    public static final int BOR=283;
    public static final int MATCHREC_MEASURE_ITEM=272;
    public static final int TIMEPERIOD_HOUR=90;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=139;
    public static final int IN_RANGE=204;
    public static final int DOT=279;
    public static final int MATCHREC_MEASURES=271;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=131;
    public static final int INSERTINTO_EXPR=181;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=147;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=235;
    public static final int EVAL_EQUALS_EXPR=151;
    public static final int TIMEPERIOD_MINUTES=93;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=197;
    public static final int EVENT_LIMIT_EXPR=175;
    public static final int NOT_BETWEEN=196;
    public static final int TIMEPERIOD_MINUTE=92;
    public static final int EVAL_OR_EXPR=150;
    public static final int ON_SELECT_INSERT_OUTPUT=226;
    public static final int MEASURES=107;
    public static final int AFTER=111;
    public static final int BAND=289;
    public static final int MATCHREC_PATTERN_ATOM=263;
    public static final int QUOTED_STRING_LITERAL=288;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=285;
    public static final int OBSERVER_EXPR=142;
    public static final int CREATE_SCHEMA_EXPR_QUAL=248;
    public static final int EVENT_FILTER_IDENT=132;
    public static final int EVENT_PROP_MAPPED=170;
    public static final int UnicodeEscape=335;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=199;
    public static final int SELECTION_ELEMENT_EXPR=157;
    public static final int CREATE_WINDOW_SELECT_EXPR=218;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=246;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=158;
    public static final int SR_ASSIGN=320;
    public static final int LE=295;
    public static final int DBFROM_CLAUSE=200;
    public static final int EVAL_IDENT=155;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1672);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1677);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1681); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1695);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1701);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1731);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1735); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1757);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);
                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);
                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1765);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1769);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1817);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1825);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1829);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1875);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1878); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1881);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1902);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1905); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1908);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1935);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1976);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2007);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2018);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2031);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2054);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2065);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2078);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2086);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2109);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2112); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2114);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2157);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2160); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2162);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2206);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2211);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2216);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2221);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2226);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2231);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2236);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2239);
                    forExpr57=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;
        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2253); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2256);
                    insertIntoExpr59=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());
                    }
                    break;
            }
            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2262); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2265);
            selectClause61=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2269); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2272);
            fromClause63=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2276);
                    matchRecog64=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2282); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2285);
                    whereClause66=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2292); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2295); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2298);
                    groupByListExpr69=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2305); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2308);
                    havingClause71=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2315); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2318);
                    outputLimit73=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2325); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2328); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2331);
                    orderByListExpr76=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2338); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2341);
                    rowLimit78=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr87 = null;
        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2358);
            onStreamExpr80=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            int alt30=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            case MERGE:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2363);
                    onDeleteExpr81=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2367);
                    onSelectExpr82=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2370);
                            	    onSelectInsertExpr83=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2373);
                                    outputClauseInsert84=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2380);
                    onSetExpr85=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2384);
                    onUpdateExpr86=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2388);
                    onMergeExpr87=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2433);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2437);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2441); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2486);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2507);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2510); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2512);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2522);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token AS103=null;
        Token WHERE104=null;
        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem106 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree AS103_tree=null;
        CommonTree WHERE104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            int alt36=2;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==INTO) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    {
                    INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO102);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt37=3;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==IDENT) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    {
                    AS103=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS103);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2586);
                    whereClause105=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());
                    }
                    break;
            }
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);
                if ( (LA39_0==WHEN) ) {
                    alt39=1;
                }
                switch (alt39) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2594);
            	    mergeItem106=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem106.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched107 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched108 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==WHEN) ) {
                int LA40_1 = input.LA(2);
                if ( (LA40_1==MATCHED) ) {
                    alt40=1;
                }
                else if ( (LA40_1==NOT_EXPR) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2628);
                    mergeMatched107=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched107.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2632);
                    mergeUnmatched108=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched108.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token d=null;
        Token WHEN109=null;
        Token MATCHED110=null;
        Token AND_EXPR111=null;
        Token THEN113=null;
        Token SET114=null;
        Token COMMA116=null;
        EsperEPL2GrammarParser.expression_return expression112 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment115 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment117 = null;
        CommonTree i_tree=null;
        CommonTree d_tree=null;
        CommonTree WHEN109_tree=null;
        CommonTree MATCHED110_tree=null;
        CommonTree AND_EXPR111_tree=null;
        CommonTree THEN113_tree=null;
        CommonTree SET114_tree=null;
        CommonTree COMMA116_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            WHEN109=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN109);
            MATCHED110=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED110);
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AND_EXPR) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    AND_EXPR111=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR111);
                    pushFollow(FOLLOW_expression_in_mergeMatched2652);
                    expression112=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression112.getTree());
                    }
                    break;
            }
            THEN113=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatched2656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN113);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==UPDATE) ) {
                alt43=1;
            }
            else if ( (LA43_0==DELETE) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);
                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    i=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatched2669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(i);
                    SET114=(Token)match(input,SET,FOLLOW_SET_in_mergeMatched2671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET114);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2673);
                    onSetAssignment115=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment115.getTree());
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);
                        if ( (LA42_0==COMMA) ) {
                            alt42=1;
                        }
                        switch (alt42) {
                    	case 1 :
                    	    {
                    	    COMMA116=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatched2676); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA116);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2678);
                    	    onSetAssignment117=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment117.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop42;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatched2689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN118=null;
        Token NOT_EXPR119=null;
        Token MATCHED120=null;
        Token AND_EXPR121=null;
        Token THEN123=null;
        Token INSERT124=null;
        Token LPAREN125=null;
        Token RPAREN127=null;
        Token SELECT128=null;
        EsperEPL2GrammarParser.expression_return expression122 = null;
        EsperEPL2GrammarParser.columnList_return columnList126 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;
        CommonTree WHEN118_tree=null;
        CommonTree NOT_EXPR119_tree=null;
        CommonTree MATCHED120_tree=null;
        CommonTree AND_EXPR121_tree=null;
        CommonTree THEN123_tree=null;
        CommonTree INSERT124_tree=null;
        CommonTree LPAREN125_tree=null;
        CommonTree RPAREN127_tree=null;
        CommonTree SELECT128_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            WHEN118=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN118);
            NOT_EXPR119=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR119);
            MATCHED120=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED120);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==AND_EXPR) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    AND_EXPR121=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched2736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR121);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched2738);
                    expression122=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression122.getTree());
                    }
                    break;
            }
            THEN123=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatched2742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN123);
            INSERT124=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeUnmatched2746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT124);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==LPAREN) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    LPAREN125=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeUnmatched2749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN125);
                    pushFollow(FOLLOW_columnList_in_mergeUnmatched2751);
                    columnList126=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList126.getTree());
                    RPAREN127=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeUnmatched2753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN127);
                    }
                    break;
            }
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeUnmatched2757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);
            pushFollow(FOLLOW_selectionList_in_mergeUnmatched2759);
            selectionList129=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT130=null;
        Token SELECT132=null;
        Token DISTINCT133=null;
        Token WHERE136=null;
        Token GROUP138=null;
        Token BY139=null;
        Token HAVING141=null;
        Token ORDER143=null;
        Token BY144=null;
        Token ROW_LIMIT_EXPR146=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr131 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList134 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom135 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr140 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause142 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr145 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit147 = null;
        CommonTree INSERT130_tree=null;
        CommonTree SELECT132_tree=null;
        CommonTree DISTINCT133_tree=null;
        CommonTree WHERE136_tree=null;
        CommonTree GROUP138_tree=null;
        CommonTree BY139_tree=null;
        CommonTree HAVING141_tree=null;
        CommonTree ORDER143_tree=null;
        CommonTree BY144_tree=null;
        CommonTree ROW_LIMIT_EXPR146_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==INSERT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    INSERT130=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT130);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2803);
                    insertIntoExpr131=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr131.getTree());
                    }
                    break;
            }
            SELECT132=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT132);
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==DISTINCT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    DISTINCT133=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT133);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr2814);
            selectionList134=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList134.getTree());
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==FROM) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2818);
                    onExprFrom135=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom135.getTree());
                    }
                    break;
            }
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHERE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2826);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==GROUP) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    GROUP138=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP138);
                    BY139=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY139);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2839);
                    groupByListExpr140=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr140.getTree());
                    }
                    break;
            }
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==HAVING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    HAVING141=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING141);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2848);
                    havingClause142=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause142.getTree());
                    }
                    break;
            }
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==ORDER) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    ORDER143=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER143);
                    BY144=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY144);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2859);
                    orderByListExpr145=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr145.getTree());
                    }
                    break;
            }
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==ROW_LIMIT_EXPR) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR146=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR146);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2868);
                    rowLimit147=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit147.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE148=null;
        Token AS149=null;
        Token SET150=null;
        Token COMMA152=null;
        Token WHERE154=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment151 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment153 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause155 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE148_tree=null;
        CommonTree AS149_tree=null;
        CommonTree SET150_tree=null;
        CommonTree COMMA152_tree=null;
        CommonTree WHERE154_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE148=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE148);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt54=3;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==AS) ) {
                alt54=1;
            }
            else if ( (LA54_0==IDENT) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    {
                    AS149=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS149);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET150=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET150);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2956);
            onSetAssignment151=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment151.getTree());
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);
                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }
                switch (alt55) {
            	case 1 :
            	    {
            	    COMMA152=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2959); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA152);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2961);
            	    onSetAssignment153=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment153.getTree());
            	    }
            	    break;
            	default :
            	    break loop55;
                }
            } while (true);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==WHERE) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    WHERE154=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE154);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2970);
                    whereClause155=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT156=null;
        Token SELECT158=null;
        Token WHERE160=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr157 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList159 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause161 = null;
        CommonTree INSERT156_tree=null;
        CommonTree SELECT158_tree=null;
        CommonTree WHERE160_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT156=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT156);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3023);
            insertIntoExpr157=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr157.getTree());
            SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT158);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3029);
            selectionList159=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList159.getTree());
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==WHERE) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    WHERE160=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE160);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3036);
                    whereClause161=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause161.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT162=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT162_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT162=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT162);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==FIRST) ) {
                alt58=1;
            }
            else if ( (LA58_0==ALL) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);
                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE163=null;
        Token WHERE165=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom164 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause166 = null;
        CommonTree DELETE163_tree=null;
        CommonTree WHERE165_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE163=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE163);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3124);
            onExprFrom164=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom164.getTree());
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==WHERE) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    WHERE165=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE165);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3131);
                    whereClause166=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause166.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET167=null;
        Token COMMA169=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment168 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment170 = null;
        CommonTree SET167_tree=null;
        CommonTree COMMA169_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET167=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET167);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3173);
            onSetAssignment168=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment168.getTree());
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);
                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }
                switch (alt60) {
            	case 1 :
            	    {
            	    COMMA169=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3176); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA169);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3178);
            	    onSetAssignment170=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment170.getTree());
            	    }
            	    break;
            	default :
            	    break loop60;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty171 = null;
        EsperEPL2GrammarParser.expression_return expression173 = null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3203);
            eventProperty171=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty171.getTree());
            EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);
            pushFollow(FOLLOW_expression_in_onSetAssignment3207);
            expression173=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM174=null;
        Token AS175=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM174_tree=null;
        CommonTree AS175_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM174=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM174);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt61=3;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENT) ) {
                alt61=2;
            }
            switch (alt61) {
                case 1 :
                    {
                    AS175=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS175);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE176=null;
        Token WINDOW177=null;
        Token DOT178=null;
        Token DOT180=null;
        Token AS182=null;
        Token LPAREN184=null;
        Token RPAREN186=null;
        Token WHERE187=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression179 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression181 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter183 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList185 = null;
        EsperEPL2GrammarParser.expression_return expression188 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE176_tree=null;
        CommonTree WINDOW177_tree=null;
        CommonTree DOT178_tree=null;
        CommonTree DOT180_tree=null;
        CommonTree AS182_tree=null;
        CommonTree LPAREN184_tree=null;
        CommonTree RPAREN186_tree=null;
        CommonTree WHERE187_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE176=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE176);
            WINDOW177=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW177);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==DOT) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT178);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3288);
                    viewExpression179=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression179.getTree());
                    loop62:
                    do {
                        int alt62=2;
                        int LA62_0 = input.LA(1);
                        if ( (LA62_0==DOT) ) {
                            alt62=1;
                        }
                        switch (alt62) {
                    	case 1 :
                    	    {
                    	    DOT180=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3291); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT180);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3293);
                    	    viewExpression181=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression181.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop62;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt64=3;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==RETAINUNION) ) {
                alt64=1;
            }
            else if ( (LA64_0==RETAININTERSECTION) ) {
                alt64=2;
            }
            switch (alt64) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==AS) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    AS182=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS182);
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==SELECT||LA66_0==IDENT||LA66_0==TICKED_STRING_LITERAL) ) {
                alt66=1;
            }
            else if ( (LA66_0==LPAREN) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);
                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3325);
                    createWindowExprModelAfter183=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter183.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN184);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3342);
                    createColumnList185=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList185.getTree());
                    RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==INSERT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt67=2;
                    int LA67_0 = input.LA(1);
                    if ( (LA67_0==WHERE) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            {
                            WHERE187=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3364); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE187);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3366);
                            expression188=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression188.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT189=null;
        Token FROM191=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList190 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier192 = null;
        CommonTree SELECT189_tree=null;
        CommonTree FROM191_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==SELECT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    SELECT189=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3453); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3456);
                    createSelectionList190=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList190.getTree());
                    FROM191=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3458); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3463);
            classIdentifier192=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier192.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE193=null;
        Token INDEX194=null;
        Token ON195=null;
        Token LPAREN196=null;
        Token RPAREN198=null;
        EsperEPL2GrammarParser.columnList_return columnList197 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE193_tree=null;
        CommonTree INDEX194_tree=null;
        CommonTree ON195_tree=null;
        CommonTree LPAREN196_tree=null;
        CommonTree RPAREN198_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE193=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE193);
            INDEX194=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX194);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON195=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON195);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN196=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN196);
            pushFollow(FOLLOW_columnList_in_createIndexExpr3492);
            columnList197=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList197.getTree());
            RPAREN198=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN198);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE199=null;
        Token VARIABLE200=null;
        Token EQUALS202=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier201 = null;
        EsperEPL2GrammarParser.expression_return expression203 = null;
        CommonTree n_tree=null;
        CommonTree CREATE199_tree=null;
        CommonTree VARIABLE200_tree=null;
        CommonTree EQUALS202_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE199=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE199);
            VARIABLE200=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE200);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3525);
            classIdentifier201=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier201.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==EQUALS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    EQUALS202=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS202);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3534);
                    expression203=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression203.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA205=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement204 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement206 = null;
        CommonTree COMMA205_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3576);
            createColumnListElement204=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement204.getTree());
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);
                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }
                switch (alt71) {
            	case 1 :
            	    {
            	    COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3579); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA205);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3581);
            	    createColumnListElement206=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement206.getTree());
            	    }
            	    break;
            	default :
            	    break loop71;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token b=null;
        Token RBRACK208=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier207 = null;
        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK208_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3614);
            classIdentifier207=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier207.getTree());
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==LBRACK) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK208=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK208);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA210=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement209 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement211 = null;
        CommonTree COMMA210_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3665);
            createSelectionListElement209=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement209.getTree());
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);
                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }
                switch (alt73) {
            	case 1 :
            	    {
            	    COMMA210=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3668); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA210);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3670);
            	    createSelectionListElement211=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement211.getTree());
            	    }
            	    break;
            	default :
            	    break loop73;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS213=null;
        Token AS215=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty212 = null;
        EsperEPL2GrammarParser.constant_return constant214 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS213_tree=null;
        CommonTree AS215_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt75=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt75=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt75=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3711);
                    eventProperty212=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty212.getTree());
                    int alt74=2;
                    int LA74_0 = input.LA(1);
                    if ( (LA74_0==AS) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            {
                            AS213=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3714); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS213);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3718); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3739);
                    constant214=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant214.getTree());
                    AS215=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS215);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE216=null;
        Token SCHEMA217=null;
        Token AS218=null;
        Token LPAREN220=null;
        Token RPAREN222=null;
        EsperEPL2GrammarParser.variantList_return variantList219 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList221 = null;
        EsperEPL2GrammarParser.columnList_return columnList223 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree SCHEMA217_tree=null;
        CommonTree AS218_tree=null;
        CommonTree LPAREN220_tree=null;
        CommonTree RPAREN222_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==IDENT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA217=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA217);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==AS) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    AS218=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS218);
                    }
                    break;
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==IDENT||LA80_0==STAR||LA80_0==TICKED_STRING_LITERAL) ) {
                alt80=1;
            }
            else if ( (LA80_0==LPAREN) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);
                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3796);
                    variantList219=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList219.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN220=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN220);
                    int alt78=2;
                    int LA78_0 = input.LA(1);
                    if ( (LA78_0==IDENT) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3809);
                            createColumnList221=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList221.getTree());
                            }
                            break;
                    }
                    RPAREN222=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN222);
                    int alt79=2;
                    int LA79_0 = input.LA(1);
                    if ( (LA79_0==IDENT) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3819);
                            columnList223=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList223.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA225=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement224 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement226 = null;
        CommonTree COMMA225_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3908);
            variantListElement224=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement224.getTree());
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA225=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3911); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA225);
            	    pushFollow(FOLLOW_variantListElement_in_variantList3913);
            	    variantListElement226=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement226.getTree());
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR227=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier228 = null;
        CommonTree STAR227_tree=null;
        try {
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==STAR) ) {
                alt82=1;
            }
            else if ( (LA82_0==IDENT||LA82_0==TICKED_STRING_LITERAL) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);
                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR227=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR227_tree = (CommonTree)adaptor.create(STAR227);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR227_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3946);
                    classIdentifier228=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier228.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token INTO229=null;
        Token LPAREN230=null;
        Token RPAREN232=null;
        EsperEPL2GrammarParser.columnList_return columnList231 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO229_tree=null;
        CommonTree LPAREN230_tree=null;
        CommonTree RPAREN232_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt83=3;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==ISTREAM) ) {
                alt83=1;
            }
            else if ( (LA83_0==RSTREAM) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO229=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO229);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==LPAREN) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    LPAREN230=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN230);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3990);
                    columnList231=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList231.getTree());
                    RPAREN232=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN232);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT233=null;
        Token COMMA234=null;
        Token IDENT235=null;
        CommonTree IDENT233_tree=null;
        CommonTree COMMA234_tree=null;
        CommonTree IDENT235_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT233=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT233);
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA234=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4029); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA234);
            	    IDENT235=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4031); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT235);
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression236 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin237 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList238 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4069);
            streamExpression236=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression236.getTree());
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==EOF||LA86_0==WHERE||(LA86_0>=GROUP && LA86_0<=HAVING)||LA86_0==OUTPUT||LA86_0==ORDER||LA86_0==ROW_LIMIT_EXPR||LA86_0==MATCH_RECOGNIZE||LA86_0==FOR||LA86_0==COMMA) ) {
                alt86=1;
            }
            else if ( ((LA86_0>=INNER && LA86_0<=FULL)) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);
                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4072);
                    regularJoin237=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin237.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4076);
                    outerJoinList238=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList238.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA239=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression240 = null;
        CommonTree COMMA239_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);
                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }
                switch (alt87) {
            	case 1 :
            	    {
            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4090); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4093);
            	    streamExpression240=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression240.getTree());
            	    }
            	    break;
            	default :
            	    break loop87;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin241 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin242 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4107);
            outerJoin241=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin241.getTree());
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);
                if ( ((LA88_0>=INNER && LA88_0<=FULL)) ) {
                    alt88=1;
                }
                switch (alt88) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4110);
            	    outerJoin242=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin242.getTree());
            	    }
            	    break;
            	default :
            	    break loop88;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER243=null;
        Token JOIN244=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression245 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent246 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER243_tree=null;
        CommonTree JOIN244_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt91=2;
            int LA91_0 = input.LA(1);
            if ( ((LA91_0>=JOIN && LA91_0<=FULL)) ) {
                alt91=1;
            }
            else if ( (LA91_0==INNER) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);
                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    {
                    int alt90=2;
                    int LA90_0 = input.LA(1);
                    if ( ((LA90_0>=LEFT && LA90_0<=FULL)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            int alt89=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt89=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt89=2;
                                }
                                break;
                            case FULL:
                                {
                                alt89=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 89, 0, input);
                                throw nvae;
                            }
                            switch (alt89) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4153); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4157); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4161); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER243=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER243);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN244=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN244);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4201);
            streamExpression245=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression245.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4203);
            outerJoinIdent246=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent246.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON247=null;
        Token AND_EXPR249=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair248 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair250 = null;
        CommonTree ON247_tree=null;
        CommonTree AND_EXPR249_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON247=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4268); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4271);
            outerJoinIdentPair248=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair248.getTree());
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);
                if ( (LA92_0==AND_EXPR) ) {
                    alt92=1;
                }
                switch (alt92) {
            	case 1 :
            	    {
            	    AND_EXPR249=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4274); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4277);
            	    outerJoinIdentPair250=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair250.getTree());
            	    }
            	    break;
            	default :
            	    break loop92;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS252=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty251 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty253 = null;
        CommonTree EQUALS252_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4292);
            eventProperty251=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty251.getTree());
            EQUALS252=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4294); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4297);
            eventProperty253=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty253.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression254 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4319);
            evalOrExpression254=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression254.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList255 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt93=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt93=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt93=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt93=3;
                    }
                    break;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==DISTINCT) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4376);
            selectionList255=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList255.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA257=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement256 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement258 = null;
        CommonTree COMMA257_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4407);
            selectionListElement256=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement256.getTree());
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA257=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4410); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4413);
            	    selectionListElement258=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement258.getTree());
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS261=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector259 = null;
        EsperEPL2GrammarParser.expression_return expression260 = null;
        CommonTree s_tree=null;
        CommonTree AS261_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt97=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt97=1;
                }
                break;
            case IDENT:
                {
                int LA97_2 = input.LA(2);
                if ( (LA97_2==DOT) ) {
                    int LA97_69 = input.LA(3);
                    if ( (LA97_69==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt97=2;
                    }
                    else if ( (LA97_69==WINDOW||LA97_69==ESCAPE||LA97_69==EVERY_EXPR||(LA97_69>=SUM && LA97_69<=COUNT)||LA97_69==OUTER||(LA97_69>=JOIN && LA97_69<=FULL)||(LA97_69>=EVENTS && LA97_69<=LAST)||(LA97_69>=UNIDIRECTIONAL && LA97_69<=PREVIOUSTAIL)||LA97_69==PRIOR||(LA97_69>=WEEKDAY && LA97_69<=CAST)||LA97_69==SNAPSHOT||(LA97_69>=VARIABLE && LA97_69<=INDEX)||(LA97_69>=DEFINE && LA97_69<=MATCHES)||LA97_69==WHILE||(LA97_69>=MERGE && LA97_69<=MATCHED)||LA97_69==IDENT||LA97_69==TICKED_STRING_LITERAL) ) {
                        alt97=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 69, input);
                        throw nvae;
                    }
                }
                else if ( (LA97_2==EOF||(LA97_2>=IN_SET && LA97_2<=REGEXP)||(LA97_2>=OR_EXPR && LA97_2<=NOT_EXPR)||(LA97_2>=WHERE && LA97_2<=AS)||LA97_2==WHEN||LA97_2==FROM||LA97_2==IS||(LA97_2>=GROUP && LA97_2<=HAVING)||LA97_2==OUTPUT||LA97_2==INSERT||LA97_2==ORDER||LA97_2==ROW_LIMIT_EXPR||LA97_2==FOR||LA97_2==COMMA||LA97_2==LPAREN||LA97_2==EQUALS||LA97_2==LBRACK||(LA97_2>=STAR && LA97_2<=QUESTION)||(LA97_2>=BAND && LA97_2<=MOD)||LA97_2==ESCAPECHAR) ) {
                    alt97=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4455);
                    streamSelector259=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector259.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4460);
                    expression260=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression260.getTree());
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==AS) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            AS261=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4463); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS261);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4467);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT262=null;
        Token STAR263=null;
        Token AS264=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT262_tree=null;
        CommonTree STAR263_tree=null;
        CommonTree AS264_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT262=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT262);
            STAR263=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR263);
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==AS) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    AS264=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS264);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT269=null;
        Token DOT271=null;
        Token AS273=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression265 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression266 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression267 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression268 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression270 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression272 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT269_tree=null;
        CommonTree DOT271_tree=null;
        CommonTree AS273_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt99=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA99_1 = input.LA(2);
                if ( (LA99_1==EOF||(LA99_1>=WHERE && LA99_1<=AS)||(LA99_1>=INNER && LA99_1<=ON)||(LA99_1>=GROUP && LA99_1<=HAVING)||LA99_1==OUTPUT||LA99_1==ORDER||(LA99_1>=UNIDIRECTIONAL && LA99_1<=RETAININTERSECTION)||LA99_1==ROW_LIMIT_EXPR||LA99_1==MATCH_RECOGNIZE||LA99_1==FOR||(LA99_1>=COMMA && LA99_1<=LPAREN)||(LA99_1>=EQUALS && LA99_1<=LBRACK)) ) {
                    alt99=1;
                }
                else if ( (LA99_1==COLON) ) {
                    alt99=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt99=1;
                }
                break;
            case PATTERN:
                {
                alt99=2;
                }
                break;
            case SQL:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4565);
                    eventFilterExpression265=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression265.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4569);
                    patternInclusionExpression266=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression266.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4573);
                    databaseJoinExpression267=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression267.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4577);
                    methodJoinExpression268=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression268.getTree());
                    }
                    break;
            }
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==DOT) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    {
                    DOT269=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT269);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4586);
                    viewExpression270=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression270.getTree());
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);
                        if ( (LA100_0==DOT) ) {
                            alt100=1;
                        }
                        switch (alt100) {
                    	case 1 :
                    	    {
                    	    DOT271=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4589); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT271);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4591);
                    	    viewExpression272=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression272.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop100;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt102=3;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==AS) ) {
                alt102=1;
            }
            else if ( (LA102_0==IDENT) ) {
                alt102=2;
            }
            switch (alt102) {
                case 1 :
                    {
                    AS273=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS273);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==UNIDIRECTIONAL) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt104=3;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==RETAINUNION) ) {
                alt104=1;
            }
            else if ( (LA104_0==RETAININTERSECTION) ) {
                alt104=2;
            }
            switch (alt104) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR274=null;
        Token LPAREN275=null;
        Token RPAREN277=null;
        EsperEPL2GrammarParser.expressionList_return expressionList276 = null;
        CommonTree i_tree=null;
        CommonTree FOR274_tree=null;
        CommonTree LPAREN275_tree=null;
        CommonTree RPAREN277_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR274=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR274);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==LPAREN) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    LPAREN275=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN275);
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==WINDOW||LA105_0==ESCAPE||(LA105_0>=NOT_EXPR && LA105_0<=EVERY_EXPR)||(LA105_0>=SUM && LA105_0<=COUNT)||LA105_0==CASE||LA105_0==OUTER||(LA105_0>=JOIN && LA105_0<=FULL)||(LA105_0>=EVENTS && LA105_0<=LAST)||(LA105_0>=UNIDIRECTIONAL && LA105_0<=CURRENT_TIMESTAMP)||LA105_0==SNAPSHOT||(LA105_0>=VARIABLE && LA105_0<=INDEX)||(LA105_0>=BOOLEAN_TRUE && LA105_0<=VALUE_NULL)||(LA105_0>=DEFINE && LA105_0<=MATCHES)||LA105_0==WHILE||(LA105_0>=MERGE && LA105_0<=MATCHED)||LA105_0==NUM_DOUBLE||(LA105_0>=IDENT && LA105_0<=LPAREN)||(LA105_0>=PLUS && LA105_0<=QUESTION)||(LA105_0>=STRING_LITERAL && LA105_0<=QUOTED_STRING_LITERAL)||LA105_0==MINUS||LA105_0==LCURLY||LA105_0==NUM_INT||(LA105_0>=TICKED_STRING_LITERAL && LA105_0<=NUM_FLOAT)) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4691);
                            expressionList276=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList276.getTree());
                            }
                            break;
                    }
                    RPAREN277=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN277);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE278=null;
        Token LPAREN279=null;
        Token RPAREN287=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy280 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures281 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection282 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip283 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern284 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval285 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine286 = null;
        CommonTree MATCH_RECOGNIZE278_tree=null;
        CommonTree LPAREN279_tree=null;
        CommonTree RPAREN287_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE278=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE278);
            LPAREN279=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN279);
            int alt107=2;
            int LA107_0 = input.LA(1);
            if ( (LA107_0==PARTITION) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4750);
                    matchRecogPartitionBy280=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy280.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4757);
            matchRecogMeasures281=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures281.getTree());
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==ALL) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4762);
                    matchRecogMatchesSelection282=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection282.getTree());
                    }
                    break;
            }
            int alt109=2;
            int LA109_0 = input.LA(1);
            if ( (LA109_0==AFTER) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4768);
                    matchRecogMatchesAfterSkip283=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip283.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4774);
            matchRecogPattern284=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern284.getTree());
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==IDENT) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4780);
                    matchRecogMatchesInterval285=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval285.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4786);
            matchRecogDefine286=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine286.getTree());
            RPAREN287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN287);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION288=null;
        Token BY289=null;
        Token COMMA291=null;
        EsperEPL2GrammarParser.expression_return expression290 = null;
        EsperEPL2GrammarParser.expression_return expression292 = null;
        CommonTree PARTITION288_tree=null;
        CommonTree BY289_tree=null;
        CommonTree COMMA291_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION288=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION288);
            BY289=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY289);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4834);
            expression290=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);
                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }
                switch (alt111) {
            	case 1 :
            	    {
            	    COMMA291=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4837); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA291);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4839);
            	    expression292=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression292.getTree());
            	    }
            	    break;
            	default :
            	    break loop111;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES293=null;
        Token COMMA295=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem294 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem296 = null;
        CommonTree MEASURES293_tree=null;
        CommonTree COMMA295_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES293=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES293);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4870);
            matchRecogMeasureItem294=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem294.getTree());
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);
                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }
                switch (alt112) {
            	case 1 :
            	    {
            	    COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4873); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA295);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4875);
            	    matchRecogMeasureItem296=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem296.getTree());
            	    }
            	    break;
            	default :
            	    break loop112;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS298=null;
        EsperEPL2GrammarParser.expression_return expression297 = null;
        CommonTree i_tree=null;
        CommonTree AS298_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4900);
            expression297=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression297.getTree());
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==AS) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    AS298=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS298);
                    int alt113=2;
                    int LA113_0 = input.LA(1);
                    if ( (LA113_0==IDENT) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4908); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL299=null;
        Token MATCHES300=null;
        CommonTree ALL299_tree=null;
        CommonTree MATCHES300_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL299=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL299_tree = (CommonTree)adaptor.create(ALL299);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL299_tree, root_0);
            }
            MATCHES300=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4942); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN301=null;
        Token LPAREN302=null;
        Token RPAREN304=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration303 = null;
        CommonTree PATTERN301_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree RPAREN304_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN301=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN301);
            LPAREN302=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN302);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4961);
            matchRecogPatternAlteration303=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration303.getTree());
            RPAREN304=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN304);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER305=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER305_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER305=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER305);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4989);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4993);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4997);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5001);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5005);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod306 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5043);
            timePeriod306=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod306.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat307 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat308 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5069);
            matchRecogPatternConcat307=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat307.getTree());
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);
                if ( (LA115_0==BOR) ) {
                    alt115=1;
                }
                switch (alt115) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5074); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5076);
            	    matchRecogPatternConcat308=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat308.getTree());
            	    }
            	    break;
            	default :
            	    break loop115;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary309 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);
                if ( ((LA116_0>=IDENT && LA116_0<=LPAREN)) ) {
                    alt116=1;
                }
                switch (alt116) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5109);
            	    matchRecogPatternUnary309=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary309.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested310 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom311 = null;
        try {
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==LPAREN) ) {
                alt117=1;
            }
            else if ( (LA117_0==IDENT) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);
                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5134);
                    matchRecogPatternNested310=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested310.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5140);
                    matchRecogPatternAtom311=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom311.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN312=null;
        Token RPAREN314=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration313 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN312_tree=null;
        CommonTree RPAREN314_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN312=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN312);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5154);
            matchRecogPatternAlteration313=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration313.getTree());
            RPAREN314=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN314);
            int alt118=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt118=1;
                    }
                    break;
                case PLUS:
                    {
                    alt118=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt118=3;
                    }
                    break;
            }
            switch (alt118) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==STAR||(LA121_0>=PLUS && LA121_0<=QUESTION)) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    int alt119=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt119=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt119=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt119=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 0, input);
                        throw nvae;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5218); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5230); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( (LA120_0==QUESTION) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5236); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE315=null;
        Token COMMA317=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem316 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem318 = null;
        CommonTree DEFINE315_tree=null;
        CommonTree COMMA317_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE315=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE315);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5282);
            matchRecogDefineItem316=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem316.getTree());
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    alt122=1;
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA317=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA317);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5287);
            	    matchRecogDefineItem318=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem318.getTree());
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS319=null;
        EsperEPL2GrammarParser.expression_return expression320 = null;
        CommonTree i_tree=null;
        CommonTree AS319_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS319=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS319);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5318);
            expression320=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression320.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN321=null;
        Token LBRACK322=null;
        Token RBRACK324=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression323 = null;
        CommonTree PATTERN321_tree=null;
        CommonTree LBRACK322_tree=null;
        CommonTree RBRACK324_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN321=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN321);
            LBRACK322=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK322);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5347);
            patternExpression323=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression323.getTree());
            RBRACK324=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK324);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL325=null;
        Token COLON326=null;
        Token LBRACK327=null;
        Token METADATASQL328=null;
        Token RBRACK329=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL325_tree=null;
        CommonTree COLON326_tree=null;
        CommonTree LBRACK327_tree=null;
        CommonTree METADATASQL328_tree=null;
        CommonTree RBRACK329_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL325=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL325);
            COLON326=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON326);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK327=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK327);
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==STRING_LITERAL) ) {
                alt123=1;
            }
            else if ( (LA123_0==QUOTED_STRING_LITERAL) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);
                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==METADATASQL) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    {
                    METADATASQL328=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL328);
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==STRING_LITERAL) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==QUOTED_STRING_LITERAL) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);
                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5416); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK329=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK329);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON330=null;
        Token LPAREN332=null;
        Token RPAREN334=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier331 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList333 = null;
        CommonTree i_tree=null;
        CommonTree COLON330_tree=null;
        CommonTree LPAREN332_tree=null;
        CommonTree RPAREN334_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON330=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON330);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5476);
            classIdentifier331=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier331.getTree());
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==LPAREN) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    {
                    LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN332);
                    int alt126=2;
                    int LA126_0 = input.LA(1);
                    if ( (LA126_0==WINDOW||LA126_0==ESCAPE||(LA126_0>=NOT_EXPR && LA126_0<=EVERY_EXPR)||(LA126_0>=SUM && LA126_0<=COUNT)||LA126_0==CASE||LA126_0==OUTER||(LA126_0>=JOIN && LA126_0<=FULL)||(LA126_0>=EVENTS && LA126_0<=LAST)||(LA126_0>=UNIDIRECTIONAL && LA126_0<=CURRENT_TIMESTAMP)||LA126_0==SNAPSHOT||(LA126_0>=VARIABLE && LA126_0<=INDEX)||(LA126_0>=BOOLEAN_TRUE && LA126_0<=VALUE_NULL)||(LA126_0>=DEFINE && LA126_0<=MATCHES)||LA126_0==WHILE||(LA126_0>=MERGE && LA126_0<=MATCHED)||LA126_0==NUM_DOUBLE||(LA126_0>=IDENT && LA126_0<=LPAREN)||(LA126_0>=PLUS && LA126_0<=QUESTION)||(LA126_0>=STRING_LITERAL && LA126_0<=QUOTED_STRING_LITERAL)||LA126_0==MINUS||LA126_0==LCURLY||LA126_0==NUM_INT||(LA126_0>=TICKED_STRING_LITERAL && LA126_0<=NUM_FLOAT)) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5481);
                            expressionList333=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList333.getTree());
                            }
                            break;
                    }
                    RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON335=null;
        Token LPAREN336=null;
        Token RPAREN338=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList337 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON335_tree=null;
        CommonTree LPAREN336_tree=null;
        CommonTree RPAREN338_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON335=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON335);
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==IDENT) ) {
                alt128=1;
            }
            else if ( (LA128_0==MERGE) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);
                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN336=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN336);
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==WINDOW||LA129_0==ESCAPE||(LA129_0>=NOT_EXPR && LA129_0<=EVERY_EXPR)||(LA129_0>=SUM && LA129_0<=COUNT)||LA129_0==CASE||LA129_0==OUTER||(LA129_0>=JOIN && LA129_0<=FULL)||(LA129_0>=EVENTS && LA129_0<=LAST)||(LA129_0>=UNIDIRECTIONAL && LA129_0<=CURRENT_TIMESTAMP)||LA129_0==SNAPSHOT||(LA129_0>=VARIABLE && LA129_0<=INDEX)||(LA129_0>=BOOLEAN_TRUE && LA129_0<=VALUE_NULL)||(LA129_0>=DEFINE && LA129_0<=MATCHES)||LA129_0==WHILE||(LA129_0>=MERGE && LA129_0<=MATCHED)||LA129_0==NUM_DOUBLE||(LA129_0>=IDENT && LA129_0<=LPAREN)||LA129_0==LBRACK||LA129_0==STAR||(LA129_0>=PLUS && LA129_0<=QUESTION)||(LA129_0>=STRING_LITERAL && LA129_0<=QUOTED_STRING_LITERAL)||LA129_0==MINUS||LA129_0==LCURLY||LA129_0==NUM_INT||(LA129_0>=TICKED_STRING_LITERAL && LA129_0<=NUM_FLOAT)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5553);
                    expressionWithTimeList337=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList337.getTree());
                    }
                    break;
            }
            RPAREN338=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN338);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA340=null;
        EsperEPL2GrammarParser.expression_return expression339 = null;
        EsperEPL2GrammarParser.expression_return expression341 = null;
        CommonTree COMMA340_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5616);
            expression339=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression339.getTree());
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);
                if ( (LA130_0==COMMA) ) {
                    alt130=1;
                }
                switch (alt130) {
            	case 1 :
            	    {
            	    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5619); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA340);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5621);
            	    expression341=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression341.getTree());
            	    }
            	    break;
            	default :
            	    break loop130;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA343=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement342 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement344 = null;
        CommonTree COMMA343_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5656);
            orderByListElement342=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement342.getTree());
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);
                if ( (LA131_0==COMMA) ) {
                    alt131=1;
                }
                switch (alt131) {
            	case 1 :
            	    {
            	    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5659); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA343);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5661);
            	    orderByListElement344=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement344.getTree());
            	    }
            	    break;
            	default :
            	    break loop131;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression345 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5686);
            expression345=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression345.getTree());
            int alt132=3;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==ASC) ) {
                alt132=1;
            }
            else if ( (LA132_0==DESC) ) {
                alt132=2;
            }
            switch (alt132) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression346 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5733);
            evalOrExpression346=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression346.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN352=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter347 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod348 = null;
        EsperEPL2GrammarParser.number_return number349 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet350 = null;
        EsperEPL2GrammarParser.expression_return expression351 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr353 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN352_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==AFTER) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5771);
                    outputLimitAfter347=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter347.getTree());
                    }
                    break;
            }
            int alt134=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt134=1;
                    }
                    break;
                case FIRST:
                    {
                    alt134=2;
                    }
                    break;
                case LAST:
                    {
                    alt134=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt134=4;
                    }
                    break;
            }
            switch (alt134) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt138=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt138=1;
                }
                break;
            case AT:
                {
                alt138=2;
                }
                break;
            case WHEN:
                {
                alt138=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt138=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);
                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==NUM_INT) ) {
                        int LA136_1 = input.LA(2);
                        if ( (LA136_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==NUM_LONG) ) {
                        int LA136_2 = input.LA(2);
                        if ( (LA136_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==NUM_FLOAT) ) {
                        int LA136_3 = input.LA(2);
                        if ( (LA136_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_3==EVENTS) ) {
                            alt136=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==NUM_DOUBLE) ) {
                        int LA136_4 = input.LA(2);
                        if ( (LA136_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_4==EVENTS) ) {
                            alt136=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==IDENT) ) {
                        int LA136_5 = input.LA(2);
                        if ( (LA136_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==EVENTS) ) {
                            alt136=2;
                        }
                        else if ( (LA136_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else if ( (LA136_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA136_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt136=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);
                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5855);
                            timePeriod348=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod348.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt135=2;
                            int LA135_0 = input.LA(1);
                            if ( (LA135_0==NUM_DOUBLE||LA135_0==NUM_INT||(LA135_0>=NUM_LONG && LA135_0<=NUM_FLOAT)) ) {
                                alt135=1;
                            }
                            else if ( (LA135_0==IDENT) ) {
                                alt135=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 0, input);
                                throw nvae;
                            }
                            switch (alt135) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5866);
                                    number349=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number349.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5872); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5878); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5911);
                    crontabLimitParameterSet350=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet350.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit5930);
                    expression351=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression351.getTree());
                    int alt137=2;
                    int LA137_0 = input.LA(1);
                    if ( (LA137_0==THEN) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            THEN352=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5933); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN352);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5935);
                            onSetExpr353=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr353.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS356=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod354 = null;
        EsperEPL2GrammarParser.number_return number355 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS356_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt139=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA139_1 = input.LA(2);
                if ( (LA139_1==MIN||(LA139_1>=TIMEPERIOD_DAY && LA139_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else if ( (LA139_1==EVENTS) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA139_2 = input.LA(2);
                if ( (LA139_2==MIN||(LA139_2>=TIMEPERIOD_DAY && LA139_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else if ( (LA139_2==EVENTS) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA139_3 = input.LA(2);
                if ( (LA139_3==MIN||(LA139_3>=TIMEPERIOD_DAY && LA139_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else if ( (LA139_3==EVENTS) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA139_4 = input.LA(2);
                if ( (LA139_4==EVENTS) ) {
                    alt139=2;
                }
                else if ( (LA139_4==MIN||(LA139_4>=TIMEPERIOD_DAY && LA139_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt139=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt139=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);
                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6088);
                    timePeriod354=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod354.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6092);
                    number355=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number355.getTree());
                    EVENTS356=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS356);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==NUM_DOUBLE||LA140_0==PLUS||LA140_0==MINUS||LA140_0==NUM_INT||(LA140_0>=NUM_LONG && LA140_0<=NUM_FLOAT)) ) {
                alt140=1;
            }
            else if ( (LA140_0==IDENT) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);
                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6140);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==OFFSET||LA143_0==COMMA) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    int alt141=2;
                    int LA141_0 = input.LA(1);
                    if ( (LA141_0==COMMA) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==OFFSET) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);
                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6153); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6159); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt142=2;
                    int LA142_0 = input.LA(1);
                    if ( (LA142_0==NUM_DOUBLE||LA142_0==PLUS||LA142_0==MINUS||LA142_0==NUM_INT||(LA142_0>=NUM_LONG && LA142_0<=NUM_FLOAT)) ) {
                        alt142=1;
                    }
                    else if ( (LA142_0==IDENT) ) {
                        alt142=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 142, 0, input);
                        throw nvae;
                    }
                    switch (alt142) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6165);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6171); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN357=null;
        Token COMMA359=null;
        Token COMMA361=null;
        Token COMMA363=null;
        Token COMMA365=null;
        Token COMMA367=null;
        Token RPAREN369=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime358 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime360 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime362 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime364 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime366 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime368 = null;
        CommonTree LPAREN357_tree=null;
        CommonTree COMMA359_tree=null;
        CommonTree COMMA361_tree=null;
        CommonTree COMMA363_tree=null;
        CommonTree COMMA365_tree=null;
        CommonTree COMMA367_tree=null;
        CommonTree RPAREN369_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN357=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN357);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6225);
            expressionWithTime358=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime358.getTree());
            COMMA359=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA359);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6229);
            expressionWithTime360=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime360.getTree());
            COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA361);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6233);
            expressionWithTime362=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime362.getTree());
            COMMA363=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA363);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6237);
            expressionWithTime364=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime364.getTree());
            COMMA365=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA365);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6241);
            expressionWithTime366=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime366.getTree());
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==COMMA) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    COMMA367=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA367);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6246);
                    expressionWithTime368=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime368.getTree());
                    }
                    break;
            }
            RPAREN369=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN369);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN370=null;
        Token THEN372=null;
        EsperEPL2GrammarParser.expression_return expression371 = null;
        EsperEPL2GrammarParser.expression_return expression373 = null;
        CommonTree WHEN370_tree=null;
        CommonTree THEN372_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN370=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6280); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6283);
            expression371=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression371.getTree());
            THEN372=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6285); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6288);
            expression373=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE374=null;
        EsperEPL2GrammarParser.expression_return expression375 = null;
        CommonTree ELSE374_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE374=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6301); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6304);
            expression375=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression376 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6317);
            caseExpression376=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression376.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE377=null;
        Token END380=null;
        Token CASE381=null;
        Token END385=null;
        EsperEPL2GrammarParser.whenClause_return whenClause378 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause379 = null;
        EsperEPL2GrammarParser.expression_return expression382 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause383 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause384 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression386 = null;
        CommonTree CASE377_tree=null;
        CommonTree END380_tree=null;
        CommonTree CASE381_tree=null;
        CommonTree END385_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt149=3;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==CASE) ) {
                int LA149_1 = input.LA(2);
                if ( (LA149_1==WHEN) ) {
                    alt149=1;
                }
                else if ( (LA149_1==WINDOW||LA149_1==ESCAPE||(LA149_1>=NOT_EXPR && LA149_1<=EVERY_EXPR)||(LA149_1>=SUM && LA149_1<=COUNT)||LA149_1==CASE||LA149_1==OUTER||(LA149_1>=JOIN && LA149_1<=FULL)||(LA149_1>=EVENTS && LA149_1<=LAST)||(LA149_1>=UNIDIRECTIONAL && LA149_1<=CURRENT_TIMESTAMP)||LA149_1==SNAPSHOT||(LA149_1>=VARIABLE && LA149_1<=INDEX)||(LA149_1>=BOOLEAN_TRUE && LA149_1<=VALUE_NULL)||(LA149_1>=DEFINE && LA149_1<=MATCHES)||LA149_1==WHILE||(LA149_1>=MERGE && LA149_1<=MATCHED)||LA149_1==NUM_DOUBLE||(LA149_1>=IDENT && LA149_1<=LPAREN)||(LA149_1>=PLUS && LA149_1<=QUESTION)||(LA149_1>=STRING_LITERAL && LA149_1<=QUOTED_STRING_LITERAL)||LA149_1==MINUS||LA149_1==LCURLY||LA149_1==NUM_INT||(LA149_1>=TICKED_STRING_LITERAL && LA149_1<=NUM_FLOAT)) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA149_0==WINDOW||LA149_0==ESCAPE||(LA149_0>=NOT_EXPR && LA149_0<=EVERY_EXPR)||(LA149_0>=SUM && LA149_0<=COUNT)||LA149_0==OUTER||(LA149_0>=JOIN && LA149_0<=FULL)||(LA149_0>=EVENTS && LA149_0<=LAST)||(LA149_0>=UNIDIRECTIONAL && LA149_0<=CURRENT_TIMESTAMP)||LA149_0==SNAPSHOT||(LA149_0>=VARIABLE && LA149_0<=INDEX)||(LA149_0>=BOOLEAN_TRUE && LA149_0<=VALUE_NULL)||(LA149_0>=DEFINE && LA149_0<=MATCHES)||LA149_0==WHILE||(LA149_0>=MERGE && LA149_0<=MATCHED)||LA149_0==NUM_DOUBLE||(LA149_0>=IDENT && LA149_0<=LPAREN)||(LA149_0>=PLUS && LA149_0<=QUESTION)||(LA149_0>=STRING_LITERAL && LA149_0<=QUOTED_STRING_LITERAL)||LA149_0==MINUS||LA149_0==LCURLY||LA149_0==NUM_INT||(LA149_0>=TICKED_STRING_LITERAL && LA149_0<=NUM_FLOAT)) ) {
                alt149=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);
                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE377=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE377_tree = (CommonTree)adaptor.create(CASE377);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE377_tree, root_0);
                    }
                    int cnt145=0;
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);
                        if ( (LA145_0==WHEN) ) {
                            alt145=1;
                        }
                        switch (alt145) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6334);
                    	    whenClause378=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause378.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt145 >= 1 ) break loop145;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(145, input);
                                throw eee;
                        }
                        cnt145++;
                    } while (true);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==ELSE) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6337);
                            elseClause379=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause379.getTree());
                            }
                            break;
                    }
                    END380=(Token)match(input,END,FOLLOW_END_in_caseExpression6340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE381=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE381);
                    pushFollow(FOLLOW_expression_in_caseExpression6353);
                    expression382=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);
                        if ( (LA147_0==WHEN) ) {
                            alt147=1;
                        }
                        switch (alt147) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6355);
                    	    whenClause383=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause383.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);
                    int alt148=2;
                    int LA148_0 = input.LA(1);
                    if ( (LA148_0==ELSE) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6358);
                            elseClause384=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause384.getTree());
                            }
                            break;
                    }
                    END385=(Token)match(input,END,FOLLOW_END_in_caseExpression6361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END385);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6385);
                    evalOrExpression386=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression386.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression387 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression388 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6396);
            evalAndExpression387=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression387.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==OR_EXPR) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6401); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6403);
            	    evalAndExpression388=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression388.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression389 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression390 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6435);
            bitWiseExpression389=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression389.getTree());
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);
                if ( (LA151_0==AND_EXPR) ) {
                    alt151=1;
                }
                switch (alt151) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6440); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6442);
            	    bitWiseExpression390=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression390.getTree());
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND392=null;
        Token BOR393=null;
        Token BXOR394=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression391 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression395 = null;
        CommonTree BAND392_tree=null;
        CommonTree BOR393_tree=null;
        CommonTree BXOR394_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6474);
            negatedExpression391=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression391.getTree());
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==BOR||(LA153_0>=BAND && LA153_0<=BXOR)) ) {
                    alt153=1;
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    int alt152=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt152=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt152=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt152=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 152, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt152) {
            	        case 1 :
            	            {
            	            BAND392=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6479); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND392_tree = (CommonTree)adaptor.create(BAND392);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND392_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR393=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6482); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR393_tree = (CommonTree)adaptor.create(BOR393);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR393_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR394=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6485); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR394_tree = (CommonTree)adaptor.create(BXOR394);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR394_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6489);
            	    negatedExpression395=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression395.getTree());
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR397=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression396 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression398 = null;
        CommonTree NOT_EXPR397_tree=null;
        try {
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==WINDOW||LA154_0==ESCAPE||LA154_0==EVERY_EXPR||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||(LA154_0>=MERGE && LA154_0<=MATCHED)||LA154_0==NUM_DOUBLE||(LA154_0>=IDENT && LA154_0<=LPAREN)||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
                alt154=1;
            }
            else if ( (LA154_0==NOT_EXPR) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);
                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6504);
                    evalEqualsExpression396=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression396.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR397=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR397_tree = (CommonTree)adaptor.create(NOT_EXPR397);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR397_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6513);
                    evalEqualsExpression398=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression398.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR400=null;
        Token LPAREN402=null;
        Token RPAREN404=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression399 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression401 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList403 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression405 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR400_tree=null;
        CommonTree LPAREN402_tree=null;
        CommonTree RPAREN404_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6526);
            evalRelationalExpression399=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression399.getTree());
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);
                if ( (LA160_0==IS||LA160_0==EQUALS||(LA160_0>=SQL_NE && LA160_0<=NOT_EQUAL)) ) {
                    alt160=1;
                }
                switch (alt160) {
            	case 1 :
            	    {
            	    int alt155=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt155=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA155_2 = input.LA(2);
            	        if ( (LA155_2==NOT_EXPR) ) {
            	            alt155=3;
            	        }
            	        else if ( (LA155_2==WINDOW||LA155_2==ESCAPE||LA155_2==EVERY_EXPR||(LA155_2>=SUM && LA155_2<=COUNT)||LA155_2==OUTER||(LA155_2>=JOIN && LA155_2<=FULL)||(LA155_2>=ALL && LA155_2<=SOME)||(LA155_2>=EVENTS && LA155_2<=LAST)||(LA155_2>=UNIDIRECTIONAL && LA155_2<=CURRENT_TIMESTAMP)||LA155_2==SNAPSHOT||(LA155_2>=VARIABLE && LA155_2<=INDEX)||(LA155_2>=BOOLEAN_TRUE && LA155_2<=VALUE_NULL)||(LA155_2>=DEFINE && LA155_2<=MATCHES)||LA155_2==WHILE||(LA155_2>=MERGE && LA155_2<=MATCHED)||LA155_2==NUM_DOUBLE||(LA155_2>=IDENT && LA155_2<=LPAREN)||(LA155_2>=PLUS && LA155_2<=QUESTION)||(LA155_2>=STRING_LITERAL && LA155_2<=QUOTED_STRING_LITERAL)||LA155_2==MINUS||LA155_2==LCURLY||LA155_2==NUM_INT||(LA155_2>=TICKED_STRING_LITERAL && LA155_2<=NUM_FLOAT)) ) {
            	            alt155=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 155, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt155=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt155=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 155, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt155) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6539); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6557); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6571); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR400=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6573); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR400);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6587); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6601); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt159=2;
            	    int LA159_0 = input.LA(1);
            	    if ( (LA159_0==WINDOW||LA159_0==ESCAPE||LA159_0==EVERY_EXPR||(LA159_0>=SUM && LA159_0<=COUNT)||LA159_0==OUTER||(LA159_0>=JOIN && LA159_0<=FULL)||(LA159_0>=EVENTS && LA159_0<=LAST)||(LA159_0>=UNIDIRECTIONAL && LA159_0<=CURRENT_TIMESTAMP)||LA159_0==SNAPSHOT||(LA159_0>=VARIABLE && LA159_0<=INDEX)||(LA159_0>=BOOLEAN_TRUE && LA159_0<=VALUE_NULL)||(LA159_0>=DEFINE && LA159_0<=MATCHES)||LA159_0==WHILE||(LA159_0>=MERGE && LA159_0<=MATCHED)||LA159_0==NUM_DOUBLE||(LA159_0>=IDENT && LA159_0<=LPAREN)||(LA159_0>=PLUS && LA159_0<=QUESTION)||(LA159_0>=STRING_LITERAL && LA159_0<=QUOTED_STRING_LITERAL)||LA159_0==MINUS||LA159_0==LCURLY||LA159_0==NUM_INT||(LA159_0>=TICKED_STRING_LITERAL && LA159_0<=NUM_FLOAT)) ) {
            	        alt159=1;
            	    }
            	    else if ( ((LA159_0>=ALL && LA159_0<=SOME)) ) {
            	        alt159=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 159, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt159) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6631);
            	            evalRelationalExpression401=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression401.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt156=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt156=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt156=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt156=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 156, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt156) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6648); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6654); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6660); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt158=2;
            	            int LA158_0 = input.LA(1);
            	            if ( (LA158_0==LPAREN) ) {
            	                int LA158_1 = input.LA(2);
            	                if ( (LA158_1==SELECT) ) {
            	                    alt158=2;
            	                }
            	                else if ( (LA158_1==WINDOW||LA158_1==ESCAPE||(LA158_1>=NOT_EXPR && LA158_1<=EVERY_EXPR)||(LA158_1>=SUM && LA158_1<=COUNT)||LA158_1==CASE||LA158_1==OUTER||(LA158_1>=JOIN && LA158_1<=FULL)||(LA158_1>=EVENTS && LA158_1<=LAST)||(LA158_1>=UNIDIRECTIONAL && LA158_1<=CURRENT_TIMESTAMP)||LA158_1==SNAPSHOT||(LA158_1>=VARIABLE && LA158_1<=INDEX)||(LA158_1>=BOOLEAN_TRUE && LA158_1<=VALUE_NULL)||(LA158_1>=DEFINE && LA158_1<=MATCHES)||LA158_1==WHILE||(LA158_1>=MERGE && LA158_1<=MATCHED)||LA158_1==NUM_DOUBLE||(LA158_1>=IDENT && LA158_1<=RPAREN)||(LA158_1>=PLUS && LA158_1<=QUESTION)||(LA158_1>=STRING_LITERAL && LA158_1<=QUOTED_STRING_LITERAL)||LA158_1==MINUS||LA158_1==LCURLY||LA158_1==NUM_INT||(LA158_1>=TICKED_STRING_LITERAL && LA158_1<=NUM_FLOAT)) ) {
            	                    alt158=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 158, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 158, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt158) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN402=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6666); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN402);
            	                    int alt157=2;
            	                    int LA157_0 = input.LA(1);
            	                    if ( (LA157_0==WINDOW||LA157_0==ESCAPE||(LA157_0>=NOT_EXPR && LA157_0<=EVERY_EXPR)||(LA157_0>=SUM && LA157_0<=COUNT)||LA157_0==CASE||LA157_0==OUTER||(LA157_0>=JOIN && LA157_0<=FULL)||(LA157_0>=EVENTS && LA157_0<=LAST)||(LA157_0>=UNIDIRECTIONAL && LA157_0<=CURRENT_TIMESTAMP)||LA157_0==SNAPSHOT||(LA157_0>=VARIABLE && LA157_0<=INDEX)||(LA157_0>=BOOLEAN_TRUE && LA157_0<=VALUE_NULL)||(LA157_0>=DEFINE && LA157_0<=MATCHES)||LA157_0==WHILE||(LA157_0>=MERGE && LA157_0<=MATCHED)||LA157_0==NUM_DOUBLE||(LA157_0>=IDENT && LA157_0<=LPAREN)||(LA157_0>=PLUS && LA157_0<=QUESTION)||(LA157_0>=STRING_LITERAL && LA157_0<=QUOTED_STRING_LITERAL)||LA157_0==MINUS||LA157_0==LCURLY||LA157_0==NUM_INT||(LA157_0>=TICKED_STRING_LITERAL && LA157_0<=NUM_FLOAT)) ) {
            	                        alt157=1;
            	                    }
            	                    switch (alt157) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6668);
            	                            expressionList403=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList403.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN404=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6671); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN404);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6676);
            	                    subSelectGroupExpression405=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression405.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN408=null;
        Token RPAREN410=null;
        Token COMMA414=null;
        Token IN_SET416=null;
        Token BETWEEN418=null;
        Token LIKE420=null;
        Token ESCAPE422=null;
        Token REGEXP424=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr406 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr407 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList409 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression411 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        EsperEPL2GrammarParser.expression_return expression413 = null;
        EsperEPL2GrammarParser.expression_return expression415 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery417 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList419 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr421 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant423 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr425 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN408_tree=null;
        CommonTree RPAREN410_tree=null;
        CommonTree COMMA414_tree=null;
        CommonTree IN_SET416_tree=null;
        CommonTree BETWEEN418_tree=null;
        CommonTree LIKE420_tree=null;
        CommonTree ESCAPE422_tree=null;
        CommonTree REGEXP424_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6804);
            concatenationExpr406=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr406.getTree());
            int alt174=2;
            int LA174_0 = input.LA(1);
            if ( (LA174_0==EOF||(LA174_0>=OR_EXPR && LA174_0<=AND_EXPR)||(LA174_0>=WHERE && LA174_0<=AS)||(LA174_0>=ELSE && LA174_0<=FROM)||LA174_0==IS||(LA174_0>=GROUP && LA174_0<=HAVING)||LA174_0==ALL||LA174_0==OUTPUT||LA174_0==INSERT||(LA174_0>=ORDER && LA174_0<=DESC)||LA174_0==PATTERN||(LA174_0>=TIMEPERIOD_SEC && LA174_0<=TIMEPERIOD_SECONDS)||LA174_0==ROW_LIMIT_EXPR||LA174_0==MEASURES||(LA174_0>=AFTER && LA174_0<=FOR)||LA174_0==COMMA||(LA174_0>=RPAREN && LA174_0<=EQUALS)||LA174_0==RBRACK||LA174_0==BOR||LA174_0==COLON||(LA174_0>=BAND && LA174_0<=GE)||LA174_0==RCURLY) ) {
                alt174=1;
            }
            else if ( ((LA174_0>=IN_SET && LA174_0<=REGEXP)||LA174_0==NOT_EXPR) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);
                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    {
                    {
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);
                        if ( ((LA166_0>=LT && LA166_0<=GE)) ) {
                            alt166=1;
                        }
                        switch (alt166) {
                    	case 1 :
                    	    {
                    	    int alt161=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt161=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt161=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt161=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt161=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 161, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt161) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6836); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6840); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6844); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6848); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt165=2;
                    	    int LA165_0 = input.LA(1);
                    	    if ( (LA165_0==WINDOW||LA165_0==ESCAPE||LA165_0==EVERY_EXPR||(LA165_0>=SUM && LA165_0<=COUNT)||LA165_0==OUTER||(LA165_0>=JOIN && LA165_0<=FULL)||(LA165_0>=EVENTS && LA165_0<=LAST)||(LA165_0>=UNIDIRECTIONAL && LA165_0<=CURRENT_TIMESTAMP)||LA165_0==SNAPSHOT||(LA165_0>=VARIABLE && LA165_0<=INDEX)||(LA165_0>=BOOLEAN_TRUE && LA165_0<=VALUE_NULL)||(LA165_0>=DEFINE && LA165_0<=MATCHES)||LA165_0==WHILE||(LA165_0>=MERGE && LA165_0<=MATCHED)||LA165_0==NUM_DOUBLE||(LA165_0>=IDENT && LA165_0<=LPAREN)||(LA165_0>=PLUS && LA165_0<=QUESTION)||(LA165_0>=STRING_LITERAL && LA165_0<=QUOTED_STRING_LITERAL)||LA165_0==MINUS||LA165_0==LCURLY||LA165_0==NUM_INT||(LA165_0>=TICKED_STRING_LITERAL && LA165_0<=NUM_FLOAT)) ) {
                    	        alt165=1;
                    	    }
                    	    else if ( ((LA165_0>=ALL && LA165_0<=SOME)) ) {
                    	        alt165=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 165, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt165) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6872);
                    	            concatenationExpr407=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr407.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt162=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt162=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt162=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt162=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 162, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt162) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6889); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6895); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6901); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt164=2;
                    	            int LA164_0 = input.LA(1);
                    	            if ( (LA164_0==LPAREN) ) {
                    	                int LA164_1 = input.LA(2);
                    	                if ( (LA164_1==SELECT) ) {
                    	                    alt164=2;
                    	                }
                    	                else if ( (LA164_1==WINDOW||LA164_1==ESCAPE||(LA164_1>=NOT_EXPR && LA164_1<=EVERY_EXPR)||(LA164_1>=SUM && LA164_1<=COUNT)||LA164_1==CASE||LA164_1==OUTER||(LA164_1>=JOIN && LA164_1<=FULL)||(LA164_1>=EVENTS && LA164_1<=LAST)||(LA164_1>=UNIDIRECTIONAL && LA164_1<=CURRENT_TIMESTAMP)||LA164_1==SNAPSHOT||(LA164_1>=VARIABLE && LA164_1<=INDEX)||(LA164_1>=BOOLEAN_TRUE && LA164_1<=VALUE_NULL)||(LA164_1>=DEFINE && LA164_1<=MATCHES)||LA164_1==WHILE||(LA164_1>=MERGE && LA164_1<=MATCHED)||LA164_1==NUM_DOUBLE||(LA164_1>=IDENT && LA164_1<=RPAREN)||(LA164_1>=PLUS && LA164_1<=QUESTION)||(LA164_1>=STRING_LITERAL && LA164_1<=QUOTED_STRING_LITERAL)||LA164_1==MINUS||LA164_1==LCURLY||LA164_1==NUM_INT||(LA164_1>=TICKED_STRING_LITERAL && LA164_1<=NUM_FLOAT)) ) {
                    	                    alt164=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 164, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 164, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt164) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN408=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6907); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN408);
                    	                    int alt163=2;
                    	                    int LA163_0 = input.LA(1);
                    	                    if ( (LA163_0==WINDOW||LA163_0==ESCAPE||(LA163_0>=NOT_EXPR && LA163_0<=EVERY_EXPR)||(LA163_0>=SUM && LA163_0<=COUNT)||LA163_0==CASE||LA163_0==OUTER||(LA163_0>=JOIN && LA163_0<=FULL)||(LA163_0>=EVENTS && LA163_0<=LAST)||(LA163_0>=UNIDIRECTIONAL && LA163_0<=CURRENT_TIMESTAMP)||LA163_0==SNAPSHOT||(LA163_0>=VARIABLE && LA163_0<=INDEX)||(LA163_0>=BOOLEAN_TRUE && LA163_0<=VALUE_NULL)||(LA163_0>=DEFINE && LA163_0<=MATCHES)||LA163_0==WHILE||(LA163_0>=MERGE && LA163_0<=MATCHED)||LA163_0==NUM_DOUBLE||(LA163_0>=IDENT && LA163_0<=LPAREN)||(LA163_0>=PLUS && LA163_0<=QUESTION)||(LA163_0>=STRING_LITERAL && LA163_0<=QUOTED_STRING_LITERAL)||LA163_0==MINUS||LA163_0==LCURLY||LA163_0==NUM_INT||(LA163_0>=TICKED_STRING_LITERAL && LA163_0<=NUM_FLOAT)) ) {
                    	                        alt163=1;
                    	                    }
                    	                    switch (alt163) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6909);
                    	                            expressionList409=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList409.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN410=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6912); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN410);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6917);
                    	                    subSelectGroupExpression411=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression411.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop166;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt167=2;
                    int LA167_0 = input.LA(1);
                    if ( (LA167_0==NOT_EXPR) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7013); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt173=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA173_1 = input.LA(2);
                        if ( (LA173_1==LPAREN) ) {
                            int LA173_5 = input.LA(3);
                            if ( (LA173_5==SELECT) ) {
                                alt173=2;
                            }
                            else if ( (LA173_5==WINDOW||LA173_5==ESCAPE||(LA173_5>=NOT_EXPR && LA173_5<=EVERY_EXPR)||(LA173_5>=SUM && LA173_5<=COUNT)||LA173_5==CASE||LA173_5==OUTER||(LA173_5>=JOIN && LA173_5<=FULL)||(LA173_5>=EVENTS && LA173_5<=LAST)||(LA173_5>=UNIDIRECTIONAL && LA173_5<=CURRENT_TIMESTAMP)||LA173_5==SNAPSHOT||(LA173_5>=VARIABLE && LA173_5<=INDEX)||(LA173_5>=BOOLEAN_TRUE && LA173_5<=VALUE_NULL)||(LA173_5>=DEFINE && LA173_5<=MATCHES)||LA173_5==WHILE||(LA173_5>=MERGE && LA173_5<=MATCHED)||LA173_5==NUM_DOUBLE||(LA173_5>=IDENT && LA173_5<=LPAREN)||(LA173_5>=PLUS && LA173_5<=QUESTION)||(LA173_5>=STRING_LITERAL && LA173_5<=QUOTED_STRING_LITERAL)||LA173_5==MINUS||LA173_5==LCURLY||LA173_5==NUM_INT||(LA173_5>=TICKED_STRING_LITERAL && LA173_5<=NUM_FLOAT)) ) {
                                alt173=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 173, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA173_1==LBRACK) ) {
                            alt173=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 173, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt173=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt173=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt173=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 173, 0, input);
                        throw nvae;
                    }
                    switch (alt173) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7040); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt168=2;
                            int LA168_0 = input.LA(1);
                            if ( (LA168_0==LPAREN) ) {
                                alt168=1;
                            }
                            else if ( (LA168_0==LBRACK) ) {
                                alt168=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 168, 0, input);
                                throw nvae;
                            }
                            switch (alt168) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7052); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7058); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7061);
                            expression412=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                            int alt170=2;
                            int LA170_0 = input.LA(1);
                            if ( (LA170_0==COLON) ) {
                                alt170=1;
                            }
                            else if ( (LA170_0==COMMA||LA170_0==RPAREN||LA170_0==RBRACK) ) {
                                alt170=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 0, input);
                                throw nvae;
                            }
                            switch (alt170) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7083); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7086);
                                    expression413=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression413.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop169:
                                    do {
                                        int alt169=2;
                                        int LA169_0 = input.LA(1);
                                        if ( (LA169_0==COMMA) ) {
                                            alt169=1;
                                        }
                                        switch (alt169) {
                                    	case 1 :
                                    	    {
                                    	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7112); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA414);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7114);
                                    	    expression415=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression415.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop169;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt171=2;
                            int LA171_0 = input.LA(1);
                            if ( (LA171_0==RPAREN) ) {
                                alt171=1;
                            }
                            else if ( (LA171_0==RBRACK) ) {
                                alt171=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 171, 0, input);
                                throw nvae;
                            }
                            switch (alt171) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7140); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7146); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET416=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7269); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET416);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7271);
                            inSubSelectQuery417=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery417.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN418=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7317); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN418);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7319);
                            betweenList419=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList419.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE420=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7369); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE420);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7371);
                            concatenationExpr421=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr421.getTree());
                            int alt172=2;
                            int LA172_0 = input.LA(1);
                            if ( (LA172_0==ESCAPE) ) {
                                alt172=1;
                            }
                            switch (alt172) {
                                case 1 :
                                    {
                                    ESCAPE422=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7374); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE422);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7376);
                                    stringconstant423=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant423.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP424=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7428); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP424);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7430);
                            concatenationExpr425=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr425.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr426 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7492);
            subQueryExpr426=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr426.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR429=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression427 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression428 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression430 = null;
        CommonTree c_tree=null;
        CommonTree LOR429_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7517);
            additiveExpression427=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression427.getTree());
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==LOR) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7525);
                    additiveExpression428=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression428.getTree());
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);
                        if ( (LA175_0==LOR) ) {
                            alt175=1;
                        }
                        switch (alt175) {
                    	case 1 :
                    	    {
                    	    LOR429=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7529); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR429);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7531);
                    	    additiveExpression430=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression430.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop175;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS432=null;
        Token MINUS433=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression431 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression434 = null;
        CommonTree PLUS432_tree=null;
        CommonTree MINUS433_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7572);
            multiplyExpression431=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression431.getTree());
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);
                if ( (LA178_0==PLUS||LA178_0==MINUS) ) {
                    alt178=1;
                }
                switch (alt178) {
            	case 1 :
            	    {
            	    int alt177=2;
            	    int LA177_0 = input.LA(1);
            	    if ( (LA177_0==PLUS) ) {
            	        alt177=1;
            	    }
            	    else if ( (LA177_0==MINUS) ) {
            	        alt177=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 177, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt177) {
            	        case 1 :
            	            {
            	            PLUS432=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7577); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS432_tree = (CommonTree)adaptor.create(PLUS432);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS432_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS433=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7580); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS433_tree = (CommonTree)adaptor.create(MINUS433);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS433_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7584);
            	    multiplyExpression434=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression434.getTree());
            	    }
            	    break;
            	default :
            	    break loop178;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR436=null;
        Token DIV437=null;
        Token MOD438=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression435 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression439 = null;
        CommonTree STAR436_tree=null;
        CommonTree DIV437_tree=null;
        CommonTree MOD438_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7598);
            unaryExpression435=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression435.getTree());
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);
                if ( (LA180_0==STAR||(LA180_0>=DIV && LA180_0<=MOD)) ) {
                    alt180=1;
                }
                switch (alt180) {
            	case 1 :
            	    {
            	    int alt179=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt179=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt179=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt179=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 179, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt179) {
            	        case 1 :
            	            {
            	            STAR436=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7603); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR436_tree = (CommonTree)adaptor.create(STAR436);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR436_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV437=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7606); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV437_tree = (CommonTree)adaptor.create(DIV437);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV437_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD438=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7609); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD438_tree = (CommonTree)adaptor.create(MOD438);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD438_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7613);
            	    unaryExpression439=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression439.getTree());
            	    }
            	    break;
            	default :
            	    break loop180;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS440=null;
        Token LPAREN444=null;
        Token RPAREN446=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty441 = null;
        EsperEPL2GrammarParser.constant_return constant442 = null;
        EsperEPL2GrammarParser.substitution_return substitution443 = null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass447 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass448 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction449 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc450 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression451 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression452 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression453 = null;
        CommonTree d_tree=null;
        CommonTree MINUS440_tree=null;
        CommonTree LPAREN444_tree=null;
        CommonTree RPAREN446_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt183=9;
            alt183 = dfa183.predict(input);
            switch (alt183) {
                case 1 :
                    {
                    MINUS440=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS440);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7630);
                    eventProperty441=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty441.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7643);
                    constant442=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant442.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7648);
                    substitution443=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution443.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN444=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN444);
                    pushFollow(FOLLOW_expression_in_unaryExpression7655);
                    expression445=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
                    RPAREN446=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN446);
                    int alt182=2;
                    int LA182_0 = input.LA(1);
                    if ( (LA182_0==DOT) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7662); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7664);
                            libFunctionNoClass447=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass447.getTree());
                            loop181:
                            do {
                                int alt181=2;
                                int LA181_0 = input.LA(1);
                                if ( (LA181_0==DOT) ) {
                                    alt181=1;
                                }
                                switch (alt181) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7669); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7671);
                            	    libFunctionNoClass448=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass448.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop181;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7708);
                    eventPropertyOrLibFunction449=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction449.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7720);
                    builtinFunc450=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc450.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7726);
                    arrayExpression451=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression451.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7731);
                    subSelectExpression452=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression452.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7736);
                    existsSubSelectExpression453=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression453.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr454 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7753);
            subQueryExpr454=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr454.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr455 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7775);
            subQueryExpr455=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr455.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS456=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr457 = null;
        CommonTree EXISTS456_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS456=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS456);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7799);
            subQueryExpr457=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr457.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN458=null;
        Token SELECT459=null;
        Token DISTINCT460=null;
        Token FROM462=null;
        Token WHERE464=null;
        Token RPAREN466=null;
        EsperEPL2GrammarParser.selectionList_return selectionList461 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr463 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause465 = null;
        CommonTree LPAREN458_tree=null;
        CommonTree SELECT459_tree=null;
        CommonTree DISTINCT460_tree=null;
        CommonTree FROM462_tree=null;
        CommonTree WHERE464_tree=null;
        CommonTree RPAREN466_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN458=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7832); if (state.failed) return retval;
            SELECT459=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7838); if (state.failed) return retval;
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==DISTINCT) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    DISTINCT460=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT460_tree = (CommonTree)adaptor.create(DISTINCT460);
                    adaptor.addChild(root_0, DISTINCT460_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr7844);
            selectionList461=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList461.getTree());
            FROM462=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7851); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7854);
            subSelectFilterExpr463=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr463.getTree());
            int alt185=2;
            int LA185_0 = input.LA(1);
            if ( (LA185_0==WHERE) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    {
                    WHERE464=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7862); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7865);
                    whereClause465=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause465.getTree());
                    }
                    break;
            }
            RPAREN466=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7874); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT468=null;
        Token DOT470=null;
        Token AS472=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression467 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression469 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression471 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT468_tree=null;
        CommonTree DOT470_tree=null;
        CommonTree AS472_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7898);
            eventFilterExpression467=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression467.getTree());
            int alt187=2;
            int LA187_0 = input.LA(1);
            if ( (LA187_0==DOT) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    {
                    DOT468=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT468);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7905);
                    viewExpression469=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression469.getTree());
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);
                        if ( (LA186_0==DOT) ) {
                            alt186=1;
                        }
                        switch (alt186) {
                    	case 1 :
                    	    {
                    	    DOT470=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7908); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT470);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7910);
                    	    viewExpression471=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression471.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop186;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt188=3;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==AS) ) {
                alt188=1;
            }
            else if ( (LA188_0==IDENT) ) {
                alt188=2;
            }
            switch (alt188) {
                case 1 :
                    {
                    AS472=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS472);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt189=3;
            int LA189_0 = input.LA(1);
            if ( (LA189_0==RETAINUNION) ) {
                alt189=1;
            }
            else if ( (LA189_0==RETAININTERSECTION) ) {
                alt189=2;
            }
            switch (alt189) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY473=null;
        Token COMMA475=null;
        Token RCURLY477=null;
        EsperEPL2GrammarParser.expression_return expression474 = null;
        EsperEPL2GrammarParser.expression_return expression476 = null;
        CommonTree LCURLY473_tree=null;
        CommonTree COMMA475_tree=null;
        CommonTree RCURLY477_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY473=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY473);
            int alt191=2;
            int LA191_0 = input.LA(1);
            if ( (LA191_0==WINDOW||LA191_0==ESCAPE||(LA191_0>=NOT_EXPR && LA191_0<=EVERY_EXPR)||(LA191_0>=SUM && LA191_0<=COUNT)||LA191_0==CASE||LA191_0==OUTER||(LA191_0>=JOIN && LA191_0<=FULL)||(LA191_0>=EVENTS && LA191_0<=LAST)||(LA191_0>=UNIDIRECTIONAL && LA191_0<=CURRENT_TIMESTAMP)||LA191_0==SNAPSHOT||(LA191_0>=VARIABLE && LA191_0<=INDEX)||(LA191_0>=BOOLEAN_TRUE && LA191_0<=VALUE_NULL)||(LA191_0>=DEFINE && LA191_0<=MATCHES)||LA191_0==WHILE||(LA191_0>=MERGE && LA191_0<=MATCHED)||LA191_0==NUM_DOUBLE||(LA191_0>=IDENT && LA191_0<=LPAREN)||(LA191_0>=PLUS && LA191_0<=QUESTION)||(LA191_0>=STRING_LITERAL && LA191_0<=QUOTED_STRING_LITERAL)||LA191_0==MINUS||LA191_0==LCURLY||LA191_0==NUM_INT||(LA191_0>=TICKED_STRING_LITERAL && LA191_0<=NUM_FLOAT)) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7981);
                    expression474=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression474.getTree());
                    loop190:
                    do {
                        int alt190=2;
                        int LA190_0 = input.LA(1);
                        if ( (LA190_0==COMMA) ) {
                            alt190=1;
                        }
                        switch (alt190) {
                    	case 1 :
                    	    {
                    	    COMMA475=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7984); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA475);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression7986);
                    	    expression476=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression476.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop190;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY477=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY477);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM478=null;
        Token LPAREN479=null;
        Token ALL480=null;
        Token DISTINCT481=null;
        Token RPAREN483=null;
        Token AVG484=null;
        Token LPAREN485=null;
        Token ALL486=null;
        Token DISTINCT487=null;
        Token RPAREN489=null;
        Token COUNT490=null;
        Token LPAREN491=null;
        Token ALL492=null;
        Token DISTINCT493=null;
        Token STAR495=null;
        Token RPAREN496=null;
        Token MEDIAN497=null;
        Token LPAREN498=null;
        Token ALL499=null;
        Token DISTINCT500=null;
        Token RPAREN502=null;
        Token STDDEV503=null;
        Token LPAREN504=null;
        Token ALL505=null;
        Token DISTINCT506=null;
        Token RPAREN508=null;
        Token AVEDEV509=null;
        Token LPAREN510=null;
        Token ALL511=null;
        Token DISTINCT512=null;
        Token RPAREN514=null;
        Token COALESCE518=null;
        Token LPAREN519=null;
        Token COMMA521=null;
        Token COMMA523=null;
        Token RPAREN525=null;
        Token PREVIOUS526=null;
        Token LPAREN527=null;
        Token COMMA529=null;
        Token RPAREN531=null;
        Token PREVIOUSTAIL532=null;
        Token LPAREN533=null;
        Token COMMA535=null;
        Token RPAREN537=null;
        Token PREVIOUSCOUNT538=null;
        Token LPAREN539=null;
        Token RPAREN541=null;
        Token PREVIOUSWINDOW542=null;
        Token LPAREN543=null;
        Token RPAREN545=null;
        Token PRIOR546=null;
        Token LPAREN547=null;
        Token NUM_INT548=null;
        Token COMMA549=null;
        Token RPAREN551=null;
        Token INSTANCEOF552=null;
        Token LPAREN553=null;
        Token COMMA555=null;
        Token COMMA557=null;
        Token RPAREN559=null;
        Token TYPEOF560=null;
        Token LPAREN561=null;
        Token RPAREN563=null;
        Token CAST564=null;
        Token LPAREN565=null;
        Token COMMA567=null;
        Token AS568=null;
        Token RPAREN570=null;
        Token EXISTS571=null;
        Token LPAREN572=null;
        Token RPAREN574=null;
        Token CURRENT_TIMESTAMP575=null;
        Token LPAREN576=null;
        Token RPAREN577=null;
        EsperEPL2GrammarParser.expression_return expression482 = null;
        EsperEPL2GrammarParser.expression_return expression488 = null;
        EsperEPL2GrammarParser.expression_return expression494 = null;
        EsperEPL2GrammarParser.expression_return expression501 = null;
        EsperEPL2GrammarParser.expression_return expression507 = null;
        EsperEPL2GrammarParser.expression_return expression513 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation515 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation516 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation517 = null;
        EsperEPL2GrammarParser.expression_return expression520 = null;
        EsperEPL2GrammarParser.expression_return expression522 = null;
        EsperEPL2GrammarParser.expression_return expression524 = null;
        EsperEPL2GrammarParser.expression_return expression528 = null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        EsperEPL2GrammarParser.expression_return expression534 = null;
        EsperEPL2GrammarParser.expression_return expression536 = null;
        EsperEPL2GrammarParser.expression_return expression540 = null;
        EsperEPL2GrammarParser.expression_return expression544 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty550 = null;
        EsperEPL2GrammarParser.expression_return expression554 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier556 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier558 = null;
        EsperEPL2GrammarParser.expression_return expression562 = null;
        EsperEPL2GrammarParser.expression_return expression566 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier569 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty573 = null;
        CommonTree SUM478_tree=null;
        CommonTree LPAREN479_tree=null;
        CommonTree ALL480_tree=null;
        CommonTree DISTINCT481_tree=null;
        CommonTree RPAREN483_tree=null;
        CommonTree AVG484_tree=null;
        CommonTree LPAREN485_tree=null;
        CommonTree ALL486_tree=null;
        CommonTree DISTINCT487_tree=null;
        CommonTree RPAREN489_tree=null;
        CommonTree COUNT490_tree=null;
        CommonTree LPAREN491_tree=null;
        CommonTree ALL492_tree=null;
        CommonTree DISTINCT493_tree=null;
        CommonTree STAR495_tree=null;
        CommonTree RPAREN496_tree=null;
        CommonTree MEDIAN497_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree ALL499_tree=null;
        CommonTree DISTINCT500_tree=null;
        CommonTree RPAREN502_tree=null;
        CommonTree STDDEV503_tree=null;
        CommonTree LPAREN504_tree=null;
        CommonTree ALL505_tree=null;
        CommonTree DISTINCT506_tree=null;
        CommonTree RPAREN508_tree=null;
        CommonTree AVEDEV509_tree=null;
        CommonTree LPAREN510_tree=null;
        CommonTree ALL511_tree=null;
        CommonTree DISTINCT512_tree=null;
        CommonTree RPAREN514_tree=null;
        CommonTree COALESCE518_tree=null;
        CommonTree LPAREN519_tree=null;
        CommonTree COMMA521_tree=null;
        CommonTree COMMA523_tree=null;
        CommonTree RPAREN525_tree=null;
        CommonTree PREVIOUS526_tree=null;
        CommonTree LPAREN527_tree=null;
        CommonTree COMMA529_tree=null;
        CommonTree RPAREN531_tree=null;
        CommonTree PREVIOUSTAIL532_tree=null;
        CommonTree LPAREN533_tree=null;
        CommonTree COMMA535_tree=null;
        CommonTree RPAREN537_tree=null;
        CommonTree PREVIOUSCOUNT538_tree=null;
        CommonTree LPAREN539_tree=null;
        CommonTree RPAREN541_tree=null;
        CommonTree PREVIOUSWINDOW542_tree=null;
        CommonTree LPAREN543_tree=null;
        CommonTree RPAREN545_tree=null;
        CommonTree PRIOR546_tree=null;
        CommonTree LPAREN547_tree=null;
        CommonTree NUM_INT548_tree=null;
        CommonTree COMMA549_tree=null;
        CommonTree RPAREN551_tree=null;
        CommonTree INSTANCEOF552_tree=null;
        CommonTree LPAREN553_tree=null;
        CommonTree COMMA555_tree=null;
        CommonTree COMMA557_tree=null;
        CommonTree RPAREN559_tree=null;
        CommonTree TYPEOF560_tree=null;
        CommonTree LPAREN561_tree=null;
        CommonTree RPAREN563_tree=null;
        CommonTree CAST564_tree=null;
        CommonTree LPAREN565_tree=null;
        CommonTree COMMA567_tree=null;
        CommonTree AS568_tree=null;
        CommonTree RPAREN570_tree=null;
        CommonTree EXISTS571_tree=null;
        CommonTree LPAREN572_tree=null;
        CommonTree RPAREN574_tree=null;
        CommonTree CURRENT_TIMESTAMP575_tree=null;
        CommonTree LPAREN576_tree=null;
        CommonTree RPAREN577_tree=null;
        try {
            int alt205=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt205=1;
                }
                break;
            case AVG:
                {
                alt205=2;
                }
                break;
            case COUNT:
                {
                alt205=3;
                }
                break;
            case MEDIAN:
                {
                alt205=4;
                }
                break;
            case STDDEV:
                {
                alt205=5;
                }
                break;
            case AVEDEV:
                {
                alt205=6;
                }
                break;
            case FIRST:
                {
                alt205=7;
                }
                break;
            case LAST:
                {
                alt205=8;
                }
                break;
            case WINDOW:
                {
                alt205=9;
                }
                break;
            case COALESCE:
                {
                alt205=10;
                }
                break;
            case PREVIOUS:
                {
                alt205=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt205=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt205=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt205=14;
                }
                break;
            case PRIOR:
                {
                alt205=15;
                }
                break;
            case INSTANCEOF:
                {
                alt205=16;
                }
                break;
            case TYPEOF:
                {
                alt205=17;
                }
                break;
            case CAST:
                {
                alt205=18;
                }
                break;
            case EXISTS:
                {
                alt205=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt205=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);
                throw nvae;
            }
            switch (alt205) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM478=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM478_tree = (CommonTree)adaptor.create(SUM478);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM478_tree, root_0);
                    }
                    LPAREN479=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8019); if (state.failed) return retval;
                    int alt192=3;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==ALL) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==DISTINCT) ) {
                        alt192=2;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            ALL480=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8023); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT481=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8028); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT481_tree = (CommonTree)adaptor.create(DISTINCT481);
                            adaptor.addChild(root_0, DISTINCT481_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8032);
                    expression482=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());
                    RPAREN483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8034); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG484=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG484_tree = (CommonTree)adaptor.create(AVG484);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG484_tree, root_0);
                    }
                    LPAREN485=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8043); if (state.failed) return retval;
                    int alt193=3;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==ALL) ) {
                        alt193=1;
                    }
                    else if ( (LA193_0==DISTINCT) ) {
                        alt193=2;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            ALL486=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8047); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT487=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8052); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT487_tree = (CommonTree)adaptor.create(DISTINCT487);
                            adaptor.addChild(root_0, DISTINCT487_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8056);
                    expression488=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());
                    RPAREN489=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8058); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT490=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT490_tree = (CommonTree)adaptor.create(COUNT490);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT490_tree, root_0);
                    }
                    LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8067); if (state.failed) return retval;
                    int alt195=2;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==WINDOW||LA195_0==ESCAPE||(LA195_0>=NOT_EXPR && LA195_0<=EVERY_EXPR)||(LA195_0>=SUM && LA195_0<=COUNT)||LA195_0==CASE||LA195_0==OUTER||(LA195_0>=JOIN && LA195_0<=FULL)||(LA195_0>=DISTINCT && LA195_0<=ALL)||(LA195_0>=EVENTS && LA195_0<=LAST)||(LA195_0>=UNIDIRECTIONAL && LA195_0<=CURRENT_TIMESTAMP)||LA195_0==SNAPSHOT||(LA195_0>=VARIABLE && LA195_0<=INDEX)||(LA195_0>=BOOLEAN_TRUE && LA195_0<=VALUE_NULL)||(LA195_0>=DEFINE && LA195_0<=MATCHES)||LA195_0==WHILE||(LA195_0>=MERGE && LA195_0<=MATCHED)||LA195_0==NUM_DOUBLE||(LA195_0>=IDENT && LA195_0<=LPAREN)||(LA195_0>=PLUS && LA195_0<=QUESTION)||(LA195_0>=STRING_LITERAL && LA195_0<=QUOTED_STRING_LITERAL)||LA195_0==MINUS||LA195_0==LCURLY||LA195_0==NUM_INT||(LA195_0>=TICKED_STRING_LITERAL && LA195_0<=NUM_FLOAT)) ) {
                        alt195=1;
                    }
                    else if ( (LA195_0==STAR) ) {
                        alt195=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 0, input);
                        throw nvae;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            {
                            int alt194=3;
                            int LA194_0 = input.LA(1);
                            if ( (LA194_0==ALL) ) {
                                alt194=1;
                            }
                            else if ( (LA194_0==DISTINCT) ) {
                                alt194=2;
                            }
                            switch (alt194) {
                                case 1 :
                                    {
                                    ALL492=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8079); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT493=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8084); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT493_tree = (CommonTree)adaptor.create(DISTINCT493);
                                    adaptor.addChild(root_0, DISTINCT493_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8088);
                            expression494=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression494.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR495=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8099); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN496=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8110); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN497=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN497_tree = (CommonTree)adaptor.create(MEDIAN497);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN497_tree, root_0);
                    }
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8119); if (state.failed) return retval;
                    int alt196=3;
                    int LA196_0 = input.LA(1);
                    if ( (LA196_0==ALL) ) {
                        alt196=1;
                    }
                    else if ( (LA196_0==DISTINCT) ) {
                        alt196=2;
                    }
                    switch (alt196) {
                        case 1 :
                            {
                            ALL499=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8123); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT500=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8128); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT500_tree = (CommonTree)adaptor.create(DISTINCT500);
                            adaptor.addChild(root_0, DISTINCT500_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8132);
                    expression501=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                    RPAREN502=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8134); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV503=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV503_tree = (CommonTree)adaptor.create(STDDEV503);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV503_tree, root_0);
                    }
                    LPAREN504=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8143); if (state.failed) return retval;
                    int alt197=3;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==ALL) ) {
                        alt197=1;
                    }
                    else if ( (LA197_0==DISTINCT) ) {
                        alt197=2;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            ALL505=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8147); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT506=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8152); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT506_tree = (CommonTree)adaptor.create(DISTINCT506);
                            adaptor.addChild(root_0, DISTINCT506_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8156);
                    expression507=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
                    RPAREN508=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8158); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV509=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV509_tree = (CommonTree)adaptor.create(AVEDEV509);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV509_tree, root_0);
                    }
                    LPAREN510=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8167); if (state.failed) return retval;
                    int alt198=3;
                    int LA198_0 = input.LA(1);
                    if ( (LA198_0==ALL) ) {
                        alt198=1;
                    }
                    else if ( (LA198_0==DISTINCT) ) {
                        alt198=2;
                    }
                    switch (alt198) {
                        case 1 :
                            {
                            ALL511=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8171); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT512=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8176); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT512_tree = (CommonTree)adaptor.create(DISTINCT512);
                            adaptor.addChild(root_0, DISTINCT512_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8180);
                    expression513=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression513.getTree());
                    RPAREN514=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8182); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8188);
                    firstAggregation515=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation515.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8193);
                    lastAggregation516=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation516.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8198);
                    windowAggregation517=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation517.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE518=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE518_tree = (CommonTree)adaptor.create(COALESCE518);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE518_tree, root_0);
                    }
                    LPAREN519=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8206); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8209);
                    expression520=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression520.getTree());
                    COMMA521=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8211); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8214);
                    expression522=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression522.getTree());
                    loop199:
                    do {
                        int alt199=2;
                        int LA199_0 = input.LA(1);
                        if ( (LA199_0==COMMA) ) {
                            alt199=1;
                        }
                        switch (alt199) {
                    	case 1 :
                    	    {
                    	    COMMA523=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8217); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8220);
                    	    expression524=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression524.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop199;
                        }
                    } while (true);
                    RPAREN525=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8224); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS526=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS526_tree = (CommonTree)adaptor.create(PREVIOUS526);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS526_tree, root_0);
                    }
                    LPAREN527=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8233); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8236);
                    expression528=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression528.getTree());
                    int alt200=2;
                    int LA200_0 = input.LA(1);
                    if ( (LA200_0==COMMA) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            {
                            COMMA529=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8239); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8242);
                            expression530=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression530.getTree());
                            }
                            break;
                    }
                    RPAREN531=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8246); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL532=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL532_tree = (CommonTree)adaptor.create(PREVIOUSTAIL532);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL532_tree, root_0);
                    }
                    LPAREN533=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8255); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8258);
                    expression534=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression534.getTree());
                    int alt201=2;
                    int LA201_0 = input.LA(1);
                    if ( (LA201_0==COMMA) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            {
                            COMMA535=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8261); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8264);
                            expression536=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
                            }
                            break;
                    }
                    RPAREN537=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8268); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT538=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT538_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT538);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT538_tree, root_0);
                    }
                    LPAREN539=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8277); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8280);
                    expression540=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression540.getTree());
                    RPAREN541=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8282); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW542=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW542_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW542);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW542_tree, root_0);
                    }
                    LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8291); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8294);
                    expression544=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression544.getTree());
                    RPAREN545=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8296); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR546=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR546_tree = (CommonTree)adaptor.create(PRIOR546);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR546_tree, root_0);
                    }
                    LPAREN547=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8305); if (state.failed) return retval;
                    NUM_INT548=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT548_tree = (CommonTree)adaptor.create(NUM_INT548);
                    adaptor.addChild(root_0, NUM_INT548_tree);
                    }
                    COMMA549=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8310); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8313);
                    eventProperty550=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty550.getTree());
                    RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8315); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF552=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF552_tree = (CommonTree)adaptor.create(INSTANCEOF552);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF552_tree, root_0);
                    }
                    LPAREN553=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8328); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8331);
                    expression554=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());
                    COMMA555=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8333); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8336);
                    classIdentifier556=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier556.getTree());
                    loop202:
                    do {
                        int alt202=2;
                        int LA202_0 = input.LA(1);
                        if ( (LA202_0==COMMA) ) {
                            alt202=1;
                        }
                        switch (alt202) {
                    	case 1 :
                    	    {
                    	    COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8339); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8342);
                    	    classIdentifier558=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier558.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop202;
                        }
                    } while (true);
                    RPAREN559=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8346); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF560=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc8352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF560_tree = (CommonTree)adaptor.create(TYPEOF560);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF560_tree, root_0);
                    }
                    LPAREN561=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8355); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8358);
                    expression562=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression562.getTree());
                    RPAREN563=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8360); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST564=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST564_tree = (CommonTree)adaptor.create(CAST564);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST564_tree, root_0);
                    }
                    LPAREN565=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8369); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8372);
                    expression566=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression566.getTree());
                    int alt203=2;
                    int LA203_0 = input.LA(1);
                    if ( (LA203_0==COMMA) ) {
                        alt203=1;
                    }
                    else if ( (LA203_0==AS) ) {
                        alt203=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 0, input);
                        throw nvae;
                    }
                    switch (alt203) {
                        case 1 :
                            {
                            COMMA567=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8375); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS568=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8380); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8384);
                    classIdentifier569=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier569.getTree());
                    RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8386); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS571=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS571_tree = (CommonTree)adaptor.create(EXISTS571);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS571_tree, root_0);
                    }
                    LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8395); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8398);
                    eventProperty573=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty573.getTree());
                    RPAREN574=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8400); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP575=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP575_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP575);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP575_tree, root_0);
                    }
                    int alt204=2;
                    int LA204_0 = input.LA(1);
                    if ( (LA204_0==LPAREN) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            {
                            LPAREN576=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8410); if (state.failed) return retval;
                            RPAREN577=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8413); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST578=null;
        Token LPAREN579=null;
        Token COMMA581=null;
        Token RPAREN583=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr580 = null;
        EsperEPL2GrammarParser.expression_return expression582 = null;
        CommonTree FIRST578_tree=null;
        CommonTree LPAREN579_tree=null;
        CommonTree COMMA581_tree=null;
        CommonTree RPAREN583_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST578=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST578);
            LPAREN579=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN579);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8432);
            accessAggExpr580=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr580.getTree());
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( (LA206_0==COMMA) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    COMMA581=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA581);
                    pushFollow(FOLLOW_expression_in_firstAggregation8437);
                    expression582=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression582.getTree());
                    }
                    break;
            }
            RPAREN583=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN583);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST584=null;
        Token LPAREN585=null;
        Token COMMA587=null;
        Token RPAREN589=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr586 = null;
        EsperEPL2GrammarParser.expression_return expression588 = null;
        CommonTree LAST584_tree=null;
        CommonTree LPAREN585_tree=null;
        CommonTree COMMA587_tree=null;
        CommonTree RPAREN589_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST584=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST584);
            LPAREN585=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN585);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8470);
            accessAggExpr586=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr586.getTree());
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( (LA207_0==COMMA) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    COMMA587=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA587);
                    pushFollow(FOLLOW_expression_in_lastAggregation8475);
                    expression588=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression588.getTree());
                    }
                    break;
            }
            RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN589);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW590=null;
        Token LPAREN591=null;
        Token RPAREN593=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr592 = null;
        CommonTree WINDOW590_tree=null;
        CommonTree LPAREN591_tree=null;
        CommonTree RPAREN593_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW590=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW590);
            LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN591);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8509);
            accessAggExpr592=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr592.getTree());
            RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN593);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector594 = null;
        EsperEPL2GrammarParser.expression_return expression595 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt208=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt208=1;
                }
                break;
            case IDENT:
                {
                int LA208_2 = input.LA(2);
                if ( (LA208_2==DOT) ) {
                    int LA208_69 = input.LA(3);
                    if ( (LA208_69==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt208=2;
                    }
                    else if ( (LA208_69==WINDOW||LA208_69==ESCAPE||LA208_69==EVERY_EXPR||(LA208_69>=SUM && LA208_69<=COUNT)||LA208_69==OUTER||(LA208_69>=JOIN && LA208_69<=FULL)||(LA208_69>=EVENTS && LA208_69<=LAST)||(LA208_69>=UNIDIRECTIONAL && LA208_69<=PREVIOUSTAIL)||LA208_69==PRIOR||(LA208_69>=WEEKDAY && LA208_69<=CAST)||LA208_69==SNAPSHOT||(LA208_69>=VARIABLE && LA208_69<=INDEX)||(LA208_69>=DEFINE && LA208_69<=MATCHES)||LA208_69==WHILE||(LA208_69>=MERGE && LA208_69<=MATCHED)||LA208_69==IDENT||LA208_69==TICKED_STRING_LITERAL) ) {
                        alt208=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA208_2>=IN_SET && LA208_2<=REGEXP)||(LA208_2>=OR_EXPR && LA208_2<=NOT_EXPR)||LA208_2==IS||LA208_2==COMMA||(LA208_2>=LPAREN && LA208_2<=EQUALS)||LA208_2==LBRACK||(LA208_2>=STAR && LA208_2<=QUESTION)||(LA208_2>=BAND && LA208_2<=MOD)||LA208_2==ESCAPECHAR) ) {
                    alt208=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt208=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);
                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8557);
                    propertyStreamSelector594=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector594.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8562);
                    expression595=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression595.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX596=null;
        Token MIN597=null;
        Token LPAREN598=null;
        Token COMMA600=null;
        Token COMMA602=null;
        Token RPAREN604=null;
        EsperEPL2GrammarParser.expression_return expression599 = null;
        EsperEPL2GrammarParser.expression_return expression601 = null;
        EsperEPL2GrammarParser.expression_return expression603 = null;
        CommonTree MAX596_tree=null;
        CommonTree MIN597_tree=null;
        CommonTree LPAREN598_tree=null;
        CommonTree COMMA600_tree=null;
        CommonTree COMMA602_tree=null;
        CommonTree RPAREN604_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==MAX) ) {
                alt209=1;
            }
            else if ( (LA209_0==MIN) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);
                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    {
                    MAX596=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX596_tree = (CommonTree)adaptor.create(MAX596);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX596_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN597=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN597_tree = (CommonTree)adaptor.create(MIN597);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN597_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN598=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8584); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8587);
            expression599=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression599.getTree());
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==COMMA) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    COMMA600=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8590); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8593);
                    expression601=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression601.getTree());
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);
                        if ( (LA210_0==COMMA) ) {
                            alt210=1;
                        }
                        switch (alt210) {
                    	case 1 :
                    	    {
                    	    COMMA602=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8596); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8599);
                    	    expression603=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression603.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop210;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN604=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8606); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty605 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction606 = null;
        try {
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==IDENT) ) {
                int LA212_1 = input.LA(2);
                if ( (LA212_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_284 = input.LA(4);
                        if ( (LA212_284==RPAREN) ) {
                            int LA212_658 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 658, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_284>=IN_SET && LA212_284<=REGEXP)||(LA212_284>=OR_EXPR && LA212_284<=NOT_EXPR)||LA212_284==IS||LA212_284==COMMA||LA212_284==EQUALS||(LA212_284>=STAR && LA212_284<=PLUS)||(LA212_284>=BAND && LA212_284<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 284, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_285 = input.LA(4);
                        if ( (LA212_285==RPAREN) ) {
                            int LA212_684 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 684, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_285>=IN_SET && LA212_285<=REGEXP)||(LA212_285>=OR_EXPR && LA212_285<=NOT_EXPR)||LA212_285==IS||LA212_285==COMMA||LA212_285==EQUALS||(LA212_285>=STAR && LA212_285<=PLUS)||(LA212_285>=BAND && LA212_285<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 285, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 50, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==DOT) ) {
                    int LA212_52 = input.LA(3);
                    if ( (LA212_52==IDENT) ) {
                        int LA212_354 = input.LA(4);
                        if ( (LA212_354==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==LPAREN) ) {
                            int LA212_712 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 712, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_354==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_354==DOT) ) {
                            int LA212_768 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 768, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 354, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_52==TICKED_STRING_LITERAL) ) {
                        int LA212_355 = input.LA(4);
                        if ( (LA212_355==DOT) ) {
                            int LA212_769 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 769, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_355==LPAREN) ) {
                            int LA212_770 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 770, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_355==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_355==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 355, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_52==MAX) ) {
                        int LA212_356 = input.LA(4);
                        if ( (LA212_356==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==LPAREN) ) {
                            int LA212_830 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 830, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_356==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_356==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 356, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_52==MIN) ) {
                        int LA212_357 = input.LA(4);
                        if ( (LA212_357==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==LPAREN) ) {
                            int LA212_889 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 889, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_357==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_357==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 357, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_52==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_52==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 52, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==TICKED_STRING_LITERAL) ) {
                int LA212_2 = input.LA(2);
                if ( (LA212_2==DOT) ) {
                    int LA212_107 = input.LA(3);
                    if ( (LA212_107==IDENT) ) {
                        int LA212_401 = input.LA(4);
                        if ( (LA212_401==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==LPAREN) ) {
                            int LA212_948 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 948, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_401==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_401==DOT) ) {
                            int LA212_1004 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1004, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 401, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_107==TICKED_STRING_LITERAL) ) {
                        int LA212_402 = input.LA(4);
                        if ( (LA212_402==DOT) ) {
                            int LA212_1005 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1005, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_402==LPAREN) ) {
                            int LA212_1006 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1006, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_402==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_402==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 402, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_107==MAX) ) {
                        int LA212_403 = input.LA(4);
                        if ( (LA212_403==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==LPAREN) ) {
                            int LA212_1066 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1066, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_403==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_403==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 403, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_107==MIN) ) {
                        int LA212_404 = input.LA(4);
                        if ( (LA212_404==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==LPAREN) ) {
                            int LA212_1125 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1125, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA212_404==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==END) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else if ( (LA212_404==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt212=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 404, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA212_107==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else if ( (LA212_107==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt212=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 107, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_448 = input.LA(4);
                        if ( (LA212_448==RPAREN) ) {
                            int LA212_1182 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1182, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_448>=IN_SET && LA212_448<=REGEXP)||(LA212_448>=OR_EXPR && LA212_448<=NOT_EXPR)||LA212_448==IS||LA212_448==COMMA||LA212_448==EQUALS||(LA212_448>=STAR && LA212_448<=PLUS)||(LA212_448>=BAND && LA212_448<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 448, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_449 = input.LA(4);
                        if ( (LA212_449==RPAREN) ) {
                            int LA212_1208 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1208, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_449>=IN_SET && LA212_449<=REGEXP)||(LA212_449>=OR_EXPR && LA212_449<=NOT_EXPR)||LA212_449==IS||LA212_449==COMMA||LA212_449==EQUALS||(LA212_449>=STAR && LA212_449<=PLUS)||(LA212_449>=BAND && LA212_449<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 449, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MAX) ) {
                int LA212_9 = input.LA(2);
                if ( (LA212_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_518 = input.LA(4);
                        if ( (LA212_518==RPAREN) ) {
                            int LA212_1234 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1234, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_518>=IN_SET && LA212_518<=REGEXP)||(LA212_518>=OR_EXPR && LA212_518<=NOT_EXPR)||LA212_518==IS||LA212_518==COMMA||LA212_518==EQUALS||(LA212_518>=STAR && LA212_518<=PLUS)||(LA212_518>=BAND && LA212_518<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 518, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_519 = input.LA(4);
                        if ( (LA212_519==RPAREN) ) {
                            int LA212_1260 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1260, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_519>=IN_SET && LA212_519<=REGEXP)||(LA212_519>=OR_EXPR && LA212_519<=NOT_EXPR)||LA212_519==IS||LA212_519==COMMA||LA212_519==EQUALS||(LA212_519>=STAR && LA212_519<=PLUS)||(LA212_519>=BAND && LA212_519<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 519, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 168, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==MIN) ) {
                int LA212_10 = input.LA(2);
                if ( (LA212_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA212_588 = input.LA(4);
                        if ( (LA212_588==RPAREN) ) {
                            int LA212_1286 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1286, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_588>=IN_SET && LA212_588<=REGEXP)||(LA212_588>=OR_EXPR && LA212_588<=NOT_EXPR)||LA212_588==IS||LA212_588==COMMA||LA212_588==EQUALS||(LA212_588>=STAR && LA212_588<=PLUS)||(LA212_588>=BAND && LA212_588<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 588, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA212_589 = input.LA(4);
                        if ( (LA212_589==RPAREN) ) {
                            int LA212_1312 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt212=1;
                            }
                            else if ( (true) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 1312, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA212_589>=IN_SET && LA212_589<=REGEXP)||(LA212_589>=OR_EXPR && LA212_589<=NOT_EXPR)||LA212_589==IS||LA212_589==COMMA||LA212_589==EQUALS||(LA212_589>=STAR && LA212_589<=PLUS)||(LA212_589>=BAND && LA212_589<=MOD)) ) {
                            alt212=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 212, 589, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt212=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 225, input);
                        throw nvae;
                    }
                }
                else if ( (LA212_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else if ( (LA212_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA212_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else if ( (LA212_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt212=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);
                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8625);
                    eventProperty605=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty605.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8630);
                    libFunction606=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction606.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT608=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass607 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass609 = null;
        CommonTree DOT608_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8642);
            libFunctionWithClass607=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass607.getTree());
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);
                if ( (LA213_0==DOT) ) {
                    alt213=1;
                }
                switch (alt213) {
            	case 1 :
            	    {
            	    DOT608=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8645); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT608);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8647);
            	    libFunctionNoClass609=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass609.getTree());
            	    }
            	    break;
            	default :
            	    break loop213;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT611=null;
        Token LPAREN613=null;
        Token RPAREN615=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy610 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent612 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs614 = null;
        CommonTree DOT611_tree=null;
        CommonTree LPAREN613_tree=null;
        CommonTree RPAREN615_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==IDENT) ) {
                int LA214_1 = input.LA(2);
                if ( (LA214_1==DOT) ) {
                    alt214=1;
                }
            }
            else if ( (LA214_0==TICKED_STRING_LITERAL) ) {
                int LA214_2 = input.LA(2);
                if ( (LA214_2==DOT) ) {
                    alt214=1;
                }
            }
            switch (alt214) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8677);
                    classIdentifierNonGreedy610=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy610.getTree());
                    DOT611=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8679); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT611);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8683);
            funcIdent612=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent612.getTree());
            LPAREN613=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN613);
            int alt215=2;
            int LA215_0 = input.LA(1);
            if ( (LA215_0==WINDOW||LA215_0==ESCAPE||(LA215_0>=NOT_EXPR && LA215_0<=EVERY_EXPR)||(LA215_0>=SUM && LA215_0<=COUNT)||LA215_0==CASE||LA215_0==OUTER||(LA215_0>=JOIN && LA215_0<=FULL)||(LA215_0>=DISTINCT && LA215_0<=ALL)||(LA215_0>=EVENTS && LA215_0<=LAST)||(LA215_0>=UNIDIRECTIONAL && LA215_0<=CURRENT_TIMESTAMP)||LA215_0==SNAPSHOT||(LA215_0>=VARIABLE && LA215_0<=INDEX)||(LA215_0>=BOOLEAN_TRUE && LA215_0<=VALUE_NULL)||(LA215_0>=DEFINE && LA215_0<=MATCHES)||LA215_0==WHILE||(LA215_0>=MERGE && LA215_0<=MATCHED)||LA215_0==NUM_DOUBLE||(LA215_0>=IDENT && LA215_0<=LPAREN)||(LA215_0>=PLUS && LA215_0<=QUESTION)||(LA215_0>=STRING_LITERAL && LA215_0<=QUOTED_STRING_LITERAL)||LA215_0==MINUS||LA215_0==LCURLY||LA215_0==NUM_INT||(LA215_0>=TICKED_STRING_LITERAL && LA215_0<=NUM_FLOAT)) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8688);
                    libFunctionArgs614=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs614.getTree());
                    }
                    break;
            }
            RPAREN615=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN615);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN617=null;
        Token RPAREN619=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent616 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs618 = null;
        CommonTree LPAREN617_tree=null;
        CommonTree RPAREN619_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8721);
            funcIdent616=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent616.getTree());
            LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN617);
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==WINDOW||LA216_0==ESCAPE||(LA216_0>=NOT_EXPR && LA216_0<=EVERY_EXPR)||(LA216_0>=SUM && LA216_0<=COUNT)||LA216_0==CASE||LA216_0==OUTER||(LA216_0>=JOIN && LA216_0<=FULL)||(LA216_0>=DISTINCT && LA216_0<=ALL)||(LA216_0>=EVENTS && LA216_0<=LAST)||(LA216_0>=UNIDIRECTIONAL && LA216_0<=CURRENT_TIMESTAMP)||LA216_0==SNAPSHOT||(LA216_0>=VARIABLE && LA216_0<=INDEX)||(LA216_0>=BOOLEAN_TRUE && LA216_0<=VALUE_NULL)||(LA216_0>=DEFINE && LA216_0<=MATCHES)||LA216_0==WHILE||(LA216_0>=MERGE && LA216_0<=MATCHED)||LA216_0==NUM_DOUBLE||(LA216_0>=IDENT && LA216_0<=LPAREN)||(LA216_0>=PLUS && LA216_0<=QUESTION)||(LA216_0>=STRING_LITERAL && LA216_0<=QUOTED_STRING_LITERAL)||LA216_0==MINUS||LA216_0==LCURLY||LA216_0==NUM_INT||(LA216_0>=TICKED_STRING_LITERAL && LA216_0<=NUM_FLOAT)) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8726);
                    libFunctionArgs618=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs618.getTree());
                    }
                    break;
            }
            RPAREN619=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN619);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent620 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt217=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt217=1;
                }
                break;
            case MAX:
                {
                alt217=2;
                }
                break;
            case MIN:
                {
                alt217=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);
                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8756);
                    escapableIdent620=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent620.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL621=null;
        Token DISTINCT622=null;
        Token COMMA624=null;
        EsperEPL2GrammarParser.expression_return expression623 = null;
        EsperEPL2GrammarParser.expression_return expression625 = null;
        CommonTree ALL621_tree=null;
        CommonTree DISTINCT622_tree=null;
        CommonTree COMMA624_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt218=3;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==ALL) ) {
                alt218=1;
            }
            else if ( (LA218_0==DISTINCT) ) {
                alt218=2;
            }
            switch (alt218) {
                case 1 :
                    {
                    ALL621=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8793); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT622=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8798); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT622_tree = (CommonTree)adaptor.create(DISTINCT622);
                    adaptor.addChild(root_0, DISTINCT622_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs8802);
            expression623=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression623.getTree());
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);
                if ( (LA219_0==COMMA) ) {
                    alt219=1;
                }
                switch (alt219) {
            	case 1 :
            	    {
            	    COMMA624=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8805); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8808);
            	    expression625=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression625.getTree());
            	    }
            	    break;
            	default :
            	    break loop219;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR627=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr626 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr628 = null;
        CommonTree AND_EXPR627_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8822);
            concatenationExpr626=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr626.getTree());
            AND_EXPR627=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8824); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8827);
            concatenationExpr628=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr628.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression629 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression8855);
            followedByExpression629=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression629.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression630 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression631 = null;
        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8867);
            orExpression630=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression630.getTree());
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);
                if ( (LA220_0==FOLLOWED_BY) ) {
                    alt220=1;
                }
                switch (alt220) {
            	case 1 :
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8872); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8874);
            	    orExpression631=orExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression631.getTree());
            	    }
            	    break;
            	default :
            	    break loop220;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (f != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());
                }
                stream_orExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression632 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression633 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8913);
            andExpression632=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression632.getTree());
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==OR_EXPR) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8918); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression8920);
            	    andExpression633=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression633.getTree());
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression634 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression635 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8952);
            matchUntilExpression634=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression634.getTree());
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);
                if ( (LA222_0==AND_EXPR) ) {
                    alt222=1;
                }
                switch (alt222) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8957); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8959);
            	    matchUntilExpression635=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression635.getTree());
            	    }
            	    break;
            	default :
            	    break loop222;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression636 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression637 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt223=2;
            int LA223_0 = input.LA(1);
            if ( (LA223_0==LBRACK) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8994);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8998);
            qualifyExpression636=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression636.getTree());
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==UNTIL) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression9003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9005);
                    qualifyExpression637=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression637.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList638 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix639 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt227=2;
            int LA227_0 = input.LA(1);
            if ( ((LA227_0>=NOT_EXPR && LA227_0<=EVERY_DISTINCT_EXPR)) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    int alt225=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt225=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt225=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt225=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 225, 0, input);
                        throw nvae;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9070); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9076); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9082); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9084);
                            distinctExpressionList638=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList638.getTree());
                            }
                            break;
                    }
                    int alt226=2;
                    int LA226_0 = input.LA(1);
                    if ( (LA226_0==LBRACK) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9090);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9099);
            guardPostFix639=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix639.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN640=null;
        Token COMMA642=null;
        Token RPAREN644=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom641 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom643 = null;
        CommonTree LPAREN640_tree=null;
        CommonTree COMMA642_tree=null;
        CommonTree RPAREN644_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN640=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN640);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9216);
            distinctExpressionAtom641=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom641.getTree());
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);
                if ( (LA228_0==COMMA) ) {
                    alt228=1;
                }
                switch (alt228) {
            	case 1 :
            	    {
            	    COMMA642=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9219); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA642);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9221);
            	    distinctExpressionAtom643=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom643.getTree());
            	    }
            	    break;
            	default :
            	    break loop228;
                }
            } while (true);
            RPAREN644=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN644);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expression_return expression645 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_distinctExpressionAtom9248);
            expression645=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression645.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN648=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression646 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression647 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression649 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression650 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN648_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt229=2;
            int LA229_0 = input.LA(1);
            if ( (LA229_0==IDENT||LA229_0==TICKED_STRING_LITERAL) ) {
                alt229=1;
            }
            else if ( (LA229_0==LPAREN) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);
                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9263);
                    atomicExpression646=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression646.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9271);
                    patternExpression647=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression647.getTree());
                    RPAREN648=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN648);
                    }
                    break;
            }
            int alt230=3;
            int LA230_0 = input.LA(1);
            if ( (LA230_0==WHERE) ) {
                alt230=1;
            }
            else if ( (LA230_0==WHILE) ) {
                alt230=2;
            }
            switch (alt230) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9282);
                    guardWhereExpression649=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression649.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9292);
                    guardWhileExpression650=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression650.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression651 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression652 = null;
        try {
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==IDENT) ) {
                int LA231_1 = input.LA(2);
                if ( (LA231_1==COLON) ) {
                    alt231=1;
                }
                else if ( (LA231_1==EOF||(LA231_1>=OR_EXPR && LA231_1<=AND_EXPR)||LA231_1==WHERE||LA231_1==UNTIL||LA231_1==WHILE||(LA231_1>=LPAREN && LA231_1<=RBRACK)||LA231_1==FOLLOWED_BY) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA231_0==TICKED_STRING_LITERAL) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);
                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9354);
                    observerExpression651=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression651.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9358);
                    patternFilterExpression652=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression652.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON653=null;
        Token LPAREN654=null;
        Token RPAREN656=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList655 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON653_tree=null;
        CommonTree LPAREN654_tree=null;
        CommonTree RPAREN656_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON653=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON653);
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==IDENT) ) {
                alt232=1;
            }
            else if ( (LA232_0==AT) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);
                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN654=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN654);
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==WINDOW||LA233_0==ESCAPE||(LA233_0>=NOT_EXPR && LA233_0<=EVERY_EXPR)||(LA233_0>=SUM && LA233_0<=COUNT)||LA233_0==CASE||LA233_0==OUTER||(LA233_0>=JOIN && LA233_0<=FULL)||(LA233_0>=EVENTS && LA233_0<=LAST)||(LA233_0>=UNIDIRECTIONAL && LA233_0<=CURRENT_TIMESTAMP)||LA233_0==SNAPSHOT||(LA233_0>=VARIABLE && LA233_0<=INDEX)||(LA233_0>=BOOLEAN_TRUE && LA233_0<=VALUE_NULL)||(LA233_0>=DEFINE && LA233_0<=MATCHES)||LA233_0==WHILE||(LA233_0>=MERGE && LA233_0<=MATCHED)||LA233_0==NUM_DOUBLE||(LA233_0>=IDENT && LA233_0<=LPAREN)||LA233_0==LBRACK||LA233_0==STAR||(LA233_0>=PLUS && LA233_0<=QUESTION)||(LA233_0>=STRING_LITERAL && LA233_0<=QUOTED_STRING_LITERAL)||LA233_0==MINUS||LA233_0==LCURLY||LA233_0==NUM_INT||(LA233_0>=TICKED_STRING_LITERAL && LA233_0<=NUM_FLOAT)) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9391);
                    expressionWithTimeList655=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList655.getTree());
                    }
                    break;
            }
            RPAREN656=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN656);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT657=null;
        Token COLON658=null;
        Token IDENT659=null;
        Token LPAREN660=null;
        Token RPAREN662=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList661 = null;
        CommonTree IDENT657_tree=null;
        CommonTree COLON658_tree=null;
        CommonTree IDENT659_tree=null;
        CommonTree LPAREN660_tree=null;
        CommonTree RPAREN662_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT657=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT657_tree = (CommonTree)adaptor.create(IDENT657);
            adaptor.addChild(root_0, IDENT657_tree);
            }
            COLON658=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9445); if (state.failed) return retval;
            IDENT659=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT659_tree = (CommonTree)adaptor.create(IDENT659);
            adaptor.addChild(root_0, IDENT659_tree);
            }
            LPAREN660=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9450); if (state.failed) return retval;
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==WINDOW||LA234_0==ESCAPE||(LA234_0>=NOT_EXPR && LA234_0<=EVERY_EXPR)||(LA234_0>=SUM && LA234_0<=COUNT)||LA234_0==CASE||LA234_0==OUTER||(LA234_0>=JOIN && LA234_0<=FULL)||(LA234_0>=EVENTS && LA234_0<=LAST)||(LA234_0>=UNIDIRECTIONAL && LA234_0<=CURRENT_TIMESTAMP)||LA234_0==SNAPSHOT||(LA234_0>=VARIABLE && LA234_0<=INDEX)||(LA234_0>=BOOLEAN_TRUE && LA234_0<=VALUE_NULL)||(LA234_0>=DEFINE && LA234_0<=MATCHES)||LA234_0==WHILE||(LA234_0>=MERGE && LA234_0<=MATCHED)||LA234_0==NUM_DOUBLE||(LA234_0>=IDENT && LA234_0<=LPAREN)||LA234_0==LBRACK||LA234_0==STAR||(LA234_0>=PLUS && LA234_0<=QUESTION)||(LA234_0>=STRING_LITERAL && LA234_0<=QUOTED_STRING_LITERAL)||LA234_0==MINUS||LA234_0==LCURLY||LA234_0==NUM_INT||(LA234_0>=TICKED_STRING_LITERAL && LA234_0<=NUM_FLOAT)) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9454);
                    expressionWithTimeList661=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList661.getTree());
                    }
                    break;
            }
            RPAREN662=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9458); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN663=null;
        Token RPAREN665=null;
        EsperEPL2GrammarParser.expression_return expression664 = null;
        CommonTree LPAREN663_tree=null;
        CommonTree RPAREN665_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN663=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9471); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9474);
            expression664=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression664.getTree());
            RPAREN665=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9476); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK666=null;
        Token RBRACK670=null;
        EsperEPL2GrammarParser.expression_return expression667 = null;
        EsperEPL2GrammarParser.expression_return expression668 = null;
        EsperEPL2GrammarParser.expression_return expression669 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK666_tree=null;
        CommonTree RBRACK670_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK666=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK666);
            int alt237=2;
            int LA237_0 = input.LA(1);
            if ( (LA237_0==WINDOW||LA237_0==ESCAPE||(LA237_0>=NOT_EXPR && LA237_0<=EVERY_EXPR)||(LA237_0>=SUM && LA237_0<=COUNT)||LA237_0==CASE||LA237_0==OUTER||(LA237_0>=JOIN && LA237_0<=FULL)||(LA237_0>=EVENTS && LA237_0<=LAST)||(LA237_0>=UNIDIRECTIONAL && LA237_0<=CURRENT_TIMESTAMP)||LA237_0==SNAPSHOT||(LA237_0>=VARIABLE && LA237_0<=INDEX)||(LA237_0>=BOOLEAN_TRUE && LA237_0<=VALUE_NULL)||(LA237_0>=DEFINE && LA237_0<=MATCHES)||LA237_0==WHILE||(LA237_0>=MERGE && LA237_0<=MATCHED)||LA237_0==NUM_DOUBLE||(LA237_0>=IDENT && LA237_0<=LPAREN)||(LA237_0>=PLUS && LA237_0<=QUESTION)||(LA237_0>=STRING_LITERAL && LA237_0<=QUOTED_STRING_LITERAL)||LA237_0==MINUS||LA237_0==LCURLY||LA237_0==NUM_INT||(LA237_0>=TICKED_STRING_LITERAL && LA237_0<=NUM_FLOAT)) ) {
                alt237=1;
            }
            else if ( (LA237_0==COLON) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);
                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9504);
                    expression667=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression667.getTree());
                    int alt236=2;
                    int LA236_0 = input.LA(1);
                    if ( (LA236_0==COLON) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9509); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt235=2;
                            int LA235_0 = input.LA(1);
                            if ( (LA235_0==WINDOW||LA235_0==ESCAPE||(LA235_0>=NOT_EXPR && LA235_0<=EVERY_EXPR)||(LA235_0>=SUM && LA235_0<=COUNT)||LA235_0==CASE||LA235_0==OUTER||(LA235_0>=JOIN && LA235_0<=FULL)||(LA235_0>=EVENTS && LA235_0<=LAST)||(LA235_0>=UNIDIRECTIONAL && LA235_0<=CURRENT_TIMESTAMP)||LA235_0==SNAPSHOT||(LA235_0>=VARIABLE && LA235_0<=INDEX)||(LA235_0>=BOOLEAN_TRUE && LA235_0<=VALUE_NULL)||(LA235_0>=DEFINE && LA235_0<=MATCHES)||LA235_0==WHILE||(LA235_0>=MERGE && LA235_0<=MATCHED)||LA235_0==NUM_DOUBLE||(LA235_0>=IDENT && LA235_0<=LPAREN)||(LA235_0>=PLUS && LA235_0<=QUESTION)||(LA235_0>=STRING_LITERAL && LA235_0<=QUOTED_STRING_LITERAL)||LA235_0==MINUS||LA235_0==LCURLY||LA235_0==NUM_INT||(LA235_0>=TICKED_STRING_LITERAL && LA235_0<=NUM_FLOAT)) ) {
                                alt235=1;
                            }
                            switch (alt235) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9512);
                                    expression668=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression668.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9534);
                    expression669=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression669.getTree());
                    }
                    break;
            }
            RBRACK670=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK670);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS671=null;
        Token LPAREN673=null;
        Token RPAREN675=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier672 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList674 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression676 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS671_tree=null;
        CommonTree LPAREN673_tree=null;
        CommonTree RPAREN675_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==IDENT) ) {
                int LA238_1 = input.LA(2);
                if ( (LA238_1==EQUALS) ) {
                    alt238=1;
                }
            }
            switch (alt238) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS671=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS671);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9643);
            classIdentifier672=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier672.getTree());
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==LPAREN) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    LPAREN673=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN673);
                    int alt239=2;
                    int LA239_0 = input.LA(1);
                    if ( (LA239_0==WINDOW||LA239_0==ESCAPE||(LA239_0>=NOT_EXPR && LA239_0<=EVERY_EXPR)||(LA239_0>=SUM && LA239_0<=COUNT)||LA239_0==CASE||LA239_0==OUTER||(LA239_0>=JOIN && LA239_0<=FULL)||(LA239_0>=EVENTS && LA239_0<=LAST)||(LA239_0>=UNIDIRECTIONAL && LA239_0<=CURRENT_TIMESTAMP)||LA239_0==SNAPSHOT||(LA239_0>=VARIABLE && LA239_0<=INDEX)||(LA239_0>=BOOLEAN_TRUE && LA239_0<=VALUE_NULL)||(LA239_0>=DEFINE && LA239_0<=MATCHES)||LA239_0==WHILE||(LA239_0>=MERGE && LA239_0<=MATCHED)||LA239_0==NUM_DOUBLE||(LA239_0>=IDENT && LA239_0<=LPAREN)||(LA239_0>=PLUS && LA239_0<=QUESTION)||(LA239_0>=STRING_LITERAL && LA239_0<=QUOTED_STRING_LITERAL)||LA239_0==MINUS||LA239_0==LCURLY||LA239_0==NUM_INT||(LA239_0>=TICKED_STRING_LITERAL && LA239_0<=NUM_FLOAT)) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9656);
                            expressionList674=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList674.getTree());
                            }
                            break;
                    }
                    RPAREN675=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN675);
                    }
                    break;
            }
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==LBRACK) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9671);
                    propertyExpression676=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression676.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic677 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic678 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9716);
            propertyExpressionAtomic677=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic677.getTree());
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);
                if ( (LA242_0==LBRACK) ) {
                    alt242=1;
                }
                switch (alt242) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9719);
            	    propertyExpressionAtomic678=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic678.getTree());
            	    }
            	    break;
            	default :
            	    break loop242;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK679=null;
        Token SELECT680=null;
        Token FROM682=null;
        Token AS684=null;
        Token IDENT685=null;
        Token WHERE686=null;
        Token RBRACK688=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList681 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty683 = null;
        EsperEPL2GrammarParser.expression_return expression687 = null;
        CommonTree LBRACK679_tree=null;
        CommonTree SELECT680_tree=null;
        CommonTree FROM682_tree=null;
        CommonTree AS684_tree=null;
        CommonTree IDENT685_tree=null;
        CommonTree WHERE686_tree=null;
        CommonTree RBRACK688_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK679=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK679);
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==SELECT) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    {
                    SELECT680=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT680);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9754);
                    propertySelectionList681=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList681.getTree());
                    FROM682=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM682);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9760);
            eventProperty683=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty683.getTree());
            int alt244=2;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==AS) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    AS684=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS684);
                    IDENT685=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT685);
                    }
                    break;
            }
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==WHERE) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    WHERE686=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE686);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9772);
                    expression687=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression687.getTree());
                    }
                    break;
            }
            RBRACK688=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK688);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA690=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement689 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement691 = null;
        CommonTree COMMA690_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9826);
            propertySelectionListElement689=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement689.getTree());
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);
                if ( (LA246_0==COMMA) ) {
                    alt246=1;
                }
                switch (alt246) {
            	case 1 :
            	    {
            	    COMMA690=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9829); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9832);
            	    propertySelectionListElement691=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement691.getTree());
            	    }
            	    break;
            	default :
            	    break loop246;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS694=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector692 = null;
        EsperEPL2GrammarParser.expression_return expression693 = null;
        CommonTree s_tree=null;
        CommonTree AS694_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt248=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt248=1;
                }
                break;
            case IDENT:
                {
                int LA248_2 = input.LA(2);
                if ( (LA248_2==DOT) ) {
                    int LA248_69 = input.LA(3);
                    if ( (LA248_69==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt248=2;
                    }
                    else if ( (LA248_69==WINDOW||LA248_69==ESCAPE||LA248_69==EVERY_EXPR||(LA248_69>=SUM && LA248_69<=COUNT)||LA248_69==OUTER||(LA248_69>=JOIN && LA248_69<=FULL)||(LA248_69>=EVENTS && LA248_69<=LAST)||(LA248_69>=UNIDIRECTIONAL && LA248_69<=PREVIOUSTAIL)||LA248_69==PRIOR||(LA248_69>=WEEKDAY && LA248_69<=CAST)||LA248_69==SNAPSHOT||(LA248_69>=VARIABLE && LA248_69<=INDEX)||(LA248_69>=DEFINE && LA248_69<=MATCHES)||LA248_69==WHILE||(LA248_69>=MERGE && LA248_69<=MATCHED)||LA248_69==IDENT||LA248_69==TICKED_STRING_LITERAL) ) {
                        alt248=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 248, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA248_2>=IN_SET && LA248_2<=REGEXP)||(LA248_2>=OR_EXPR && LA248_2<=NOT_EXPR)||LA248_2==AS||LA248_2==FROM||LA248_2==IS||LA248_2==COMMA||LA248_2==LPAREN||LA248_2==EQUALS||LA248_2==LBRACK||(LA248_2>=STAR && LA248_2<=QUESTION)||(LA248_2>=BAND && LA248_2<=MOD)||LA248_2==ESCAPECHAR) ) {
                    alt248=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);
                throw nvae;
            }
            switch (alt248) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9874);
                    propertyStreamSelector692=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector692.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9879);
                    expression693=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression693.getTree());
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==AS) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            AS694=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9882); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS694);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9886);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT695=null;
        Token STAR696=null;
        Token AS697=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT695_tree=null;
        CommonTree STAR696_tree=null;
        CommonTree AS697_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT695=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT695);
            STAR696=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR696);
            int alt249=2;
            int LA249_0 = input.LA(1);
            if ( (LA249_0==AS) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    {
                    AS697=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS697);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS698=null;
        Token LPAREN700=null;
        Token RPAREN702=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier699 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList701 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression703 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS698_tree=null;
        CommonTree LPAREN700_tree=null;
        CommonTree RPAREN702_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==IDENT) ) {
                int LA250_1 = input.LA(2);
                if ( (LA250_1==EQUALS) ) {
                    alt250=1;
                }
            }
            switch (alt250) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS698=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS698);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9999);
            classIdentifier699=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier699.getTree());
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==LPAREN) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    LPAREN700=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression10010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN700);
                    int alt251=2;
                    int LA251_0 = input.LA(1);
                    if ( (LA251_0==WINDOW||LA251_0==ESCAPE||(LA251_0>=NOT_EXPR && LA251_0<=EVERY_EXPR)||(LA251_0>=SUM && LA251_0<=COUNT)||LA251_0==CASE||LA251_0==OUTER||(LA251_0>=JOIN && LA251_0<=FULL)||(LA251_0>=EVENTS && LA251_0<=LAST)||(LA251_0>=UNIDIRECTIONAL && LA251_0<=CURRENT_TIMESTAMP)||LA251_0==SNAPSHOT||(LA251_0>=VARIABLE && LA251_0<=INDEX)||(LA251_0>=BOOLEAN_TRUE && LA251_0<=VALUE_NULL)||(LA251_0>=DEFINE && LA251_0<=MATCHES)||LA251_0==WHILE||(LA251_0>=MERGE && LA251_0<=MATCHED)||LA251_0==NUM_DOUBLE||(LA251_0>=IDENT && LA251_0<=LPAREN)||(LA251_0>=PLUS && LA251_0<=QUESTION)||(LA251_0>=STRING_LITERAL && LA251_0<=QUOTED_STRING_LITERAL)||LA251_0==MINUS||LA251_0==LCURLY||LA251_0==NUM_INT||(LA251_0>=TICKED_STRING_LITERAL && LA251_0<=NUM_FLOAT)) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression10012);
                            expressionList701=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList701.getTree());
                            }
                            break;
                    }
                    RPAREN702=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression10015); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN702);
                    }
                    break;
            }
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==LBRACK) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression10027);
                    propertyExpression703=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression703.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT704=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT704_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10082);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);
                if ( (LA254_0==DOT) ) {
                    int LA254_21 = input.LA(2);
                    if ( (LA254_21==IDENT) ) {
                        int LA254_45 = input.LA(3);
                        if ( (LA254_45==EOF||LA254_45==CREATE||(LA254_45>=OR_EXPR && LA254_45<=AS)||LA254_45==SELECT||(LA254_45>=INNER && LA254_45<=ON)||(LA254_45>=GROUP && LA254_45<=HAVING)||LA254_45==OUTPUT||LA254_45==INSERT||LA254_45==ORDER||(LA254_45>=UNIDIRECTIONAL && LA254_45<=RETAININTERSECTION)||LA254_45==DELETE||LA254_45==SET||LA254_45==UNTIL||LA254_45==ROW_LIMIT_EXPR||(LA254_45>=UPDATE && LA254_45<=MATCH_RECOGNIZE)||(LA254_45>=FOR && LA254_45<=WHILE)||LA254_45==MERGE||(LA254_45>=COMMA && LA254_45<=RPAREN)||(LA254_45>=DOT && LA254_45<=RBRACK)||LA254_45==RCURLY||LA254_45==FOLLOWED_BY||LA254_45==TICKED_STRING_LITERAL||LA254_45==EMAILAT) ) {
                            alt254=1;
                        }
                    }
                    else if ( (LA254_21==TICKED_STRING_LITERAL) ) {
                        alt254=1;
                    }
                }
                switch (alt254) {
            	case 1 :
            	    {
            	    DOT704=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10101); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT704);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10105);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop254;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT705=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT705_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10150);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);
                if ( (LA255_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA255_2 = input.LA(3);
                        if ( (LA255_2==DOT) ) {
                            alt255=1;
                        }
                        else if ( (LA255_2==LPAREN) ) {
                            alt255=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA255_3 = input.LA(3);
                        if ( (LA255_3==DOT) ) {
                            alt255=1;
                        }
                        else if ( (LA255_3==LPAREN) ) {
                            alt255=2;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt255=2;
                        }
                        break;
                    }
                }
                switch (alt255) {
            	case 1 :
            	    {
            	    DOT705=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10185); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT705);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10189);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop255;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA707=null;
        EsperEPL2GrammarParser.expression_return expression706 = null;
        EsperEPL2GrammarParser.expression_return expression708 = null;
        CommonTree COMMA707_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10231);
            expression706=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression706.getTree());
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);
                if ( (LA256_0==COMMA) ) {
                    alt256=1;
                }
                switch (alt256) {
            	case 1 :
            	    {
            	    COMMA707=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10234); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10237);
            	    expression708=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression708.getTree());
            	    }
            	    break;
            	default :
            	    break loop256;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA710=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime709 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime711 = null;
        CommonTree COMMA710_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10265);
            expressionWithTime709=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime709.getTree());
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);
                if ( (LA257_0==COMMA) ) {
                    alt257=1;
                }
                switch (alt257) {
            	case 1 :
            	    {
            	    COMMA710=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10268); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10271);
            	    expressionWithTime711=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime711.getTree());
            	    }
            	    break;
            	default :
            	    break loop257;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand712 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand713 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod714 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable715 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand716 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand717 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator718 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator719 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList720 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar721 = null;
        try {
            int alt258=10;
            int LA258_0 = input.LA(1);
            if ( (LA258_0==LAST) ) {
                int LA258_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt258=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt258=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==LW) ) {
                int LA258_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt258=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt258=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==NUM_INT) ) {
                int LA258_3 = input.LA(2);
                if ( (LA258_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt258=7;
                }
                else if ( (LA258_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==TIMEPERIOD_SECONDS) ) {
                    int LA258_169 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 169, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_3==TIMEPERIOD_SECOND) ) {
                    int LA258_170 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_3==TIMEPERIOD_SEC) ) {
                    int LA258_171 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 171, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt258=8;
                }
                else if ( (LA258_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt258=5;
                }
                else if ( (LA258_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==NUM_LONG) ) {
                int LA258_4 = input.LA(2);
                if ( (LA258_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt258=7;
                }
                else if ( (LA258_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt258=8;
                }
                else if ( (LA258_4==TIMEPERIOD_SECONDS) ) {
                    int LA258_197 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 197, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_4==TIMEPERIOD_SECOND) ) {
                    int LA258_198 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 198, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_4==TIMEPERIOD_SEC) ) {
                    int LA258_199 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 199, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt258=5;
                }
                else if ( (LA258_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==NUM_FLOAT) ) {
                int LA258_5 = input.LA(2);
                if ( (LA258_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt258=5;
                }
                else if ( (LA258_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt258=8;
                }
                else if ( (LA258_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt258=7;
                }
                else if ( (LA258_5==TIMEPERIOD_SECONDS) ) {
                    int LA258_237 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 237, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_5==TIMEPERIOD_SECOND) ) {
                    int LA258_238 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 238, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_5==TIMEPERIOD_SEC) ) {
                    int LA258_239 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 239, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==NUM_DOUBLE) ) {
                int LA258_6 = input.LA(2);
                if ( (LA258_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt258=5;
                }
                else if ( (LA258_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt258=7;
                }
                else if ( (LA258_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt258=8;
                }
                else if ( (LA258_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_SECONDS) ) {
                    int LA258_286 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 286, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_6==TIMEPERIOD_SECOND) ) {
                    int LA258_287 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 287, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_6==TIMEPERIOD_SEC) ) {
                    int LA258_288 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 288, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==IDENT) ) {
                int LA258_7 = input.LA(2);
                if ( (LA258_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt258=8;
                }
                else if ( (LA258_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==TIMEPERIOD_SECONDS) ) {
                    int LA258_353 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 353, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_7==TIMEPERIOD_SECOND) ) {
                    int LA258_354 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 354, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_7==TIMEPERIOD_SEC) ) {
                    int LA258_355 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 355, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt258=7;
                }
                else if ( (LA258_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt258=5;
                }
                else if ( (LA258_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==QUESTION) ) {
                int LA258_8 = input.LA(2);
                if ( (LA258_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==TIMEPERIOD_SECONDS) ) {
                    int LA258_393 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 393, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_8==TIMEPERIOD_SECOND) ) {
                    int LA258_394 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 394, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_8==TIMEPERIOD_SEC) ) {
                    int LA258_395 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt258=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt258=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 258, 395, input);
                        throw nvae;
                    }
                }
                else if ( (LA258_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt258=4;
                }
                else if ( (LA258_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt258=8;
                }
                else if ( (LA258_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt258=3;
                }
                else if ( (LA258_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt258=7;
                }
                else if ( (LA258_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt258=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==TYPEOF) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt258=4;
            }
            else if ( (LA258_0==STAR) ) {
                int LA258_68 = input.LA(2);
                if ( (LA258_68==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt258=6;
                }
                else if ( (LA258_68==COMMA||LA258_68==RPAREN) ) {
                    alt258=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 68, input);
                    throw nvae;
                }
            }
            else if ( (LA258_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt258=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);
                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10297);
                    lastOperand712=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand712.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10308);
                    lastWeekdayOperand713=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand713.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10319);
                    timePeriod714=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod714.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10330);
                    expressionQualifyable715=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable715.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10341);
                    rangeOperand716=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand716.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10353);
                    frequencyOperand717=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand717.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10364);
                    lastOperator718=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator718.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10376);
                    weekDayOperator719=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator719.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10388);
                    numericParameterList720=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList720.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10393);
                    numberSetStar721=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar721.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression722 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10404);
            expression722=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression722.getTree());
            int alt259=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt259=1;
                    }
                    break;
                case DESC:
                    {
                    alt259=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt259=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt259=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt259=5;
                    }
                    break;
            }
            switch (alt259) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR723=null;
        CommonTree STAR723_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR723=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR723);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW724=null;
        CommonTree LW724_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW724=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW724_tree = (CommonTree)adaptor.create(LW724);
            root_0 = (CommonTree)adaptor.becomeRoot(LW724_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST725=null;
        CommonTree LAST725_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST725=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST725_tree = (CommonTree)adaptor.create(LAST725);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST725_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR726=null;
        Token DIV727=null;
        EsperEPL2GrammarParser.number_return number728 = null;
        EsperEPL2GrammarParser.substitution_return substitution729 = null;
        CommonTree i_tree=null;
        CommonTree STAR726_tree=null;
        CommonTree DIV727_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR726=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR726);
            DIV727=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV727);
            int alt260=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt260=1;
                }
                break;
            case IDENT:
                {
                alt260=2;
                }
                break;
            case QUESTION:
                {
                alt260=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);
                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10532);
                    number728=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number728.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10538);
                    substitution729=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution729.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON732=null;
        EsperEPL2GrammarParser.number_return number730 = null;
        EsperEPL2GrammarParser.substitution_return substitution731 = null;
        EsperEPL2GrammarParser.number_return number733 = null;
        EsperEPL2GrammarParser.substitution_return substitution734 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON732_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt261=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt261=1;
                }
                break;
            case IDENT:
                {
                alt261=2;
                }
                break;
            case QUESTION:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10587);
                    number730=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number730.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10593);
                    substitution731=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution731.getTree());
                    }
                    break;
            }
            COLON732=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON732);
            int alt262=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt262=1;
                }
                break;
            case IDENT:
                {
                alt262=2;
                }
                break;
            case QUESTION:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);
                throw nvae;
            }
            switch (alt262) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10599);
                    number733=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number733.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10605);
                    substitution734=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution734.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST737=null;
        EsperEPL2GrammarParser.number_return number735 = null;
        EsperEPL2GrammarParser.substitution_return substitution736 = null;
        CommonTree i_tree=null;
        CommonTree LAST737_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt263=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt263=1;
                }
                break;
            case IDENT:
                {
                alt263=2;
                }
                break;
            case QUESTION:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);
                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10719);
                    number735=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number735.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10725);
                    substitution736=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution736.getTree());
                    }
                    break;
            }
            LAST737=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST737);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY740=null;
        EsperEPL2GrammarParser.number_return number738 = null;
        EsperEPL2GrammarParser.substitution_return substitution739 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY740_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt264=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt264=1;
                }
                break;
            case IDENT:
                {
                alt264=2;
                }
                break;
            case QUESTION:
                {
                alt264=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);
                throw nvae;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10776);
                    number738=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number738.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10782);
                    substitution739=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution739.getTree());
                    }
                    break;
            }
            WEEKDAY740=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY740);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK741=null;
        Token COMMA743=null;
        Token RBRACK745=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter742 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter744 = null;
        CommonTree LBRACK741_tree=null;
        CommonTree COMMA743_tree=null;
        CommonTree RBRACK745_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK741=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK741);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10834);
            numericListParameter742=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter742.getTree());
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);
                if ( (LA265_0==COMMA) ) {
                    alt265=1;
                }
                switch (alt265) {
            	case 1 :
            	    {
            	    COMMA743=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10837); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA743);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10839);
            	    numericListParameter744=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter744.getTree());
            	    }
            	    break;
            	default :
            	    break loop265;
                }
            } while (true);
            RBRACK745=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK745);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand746 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand747 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant748 = null;
        try {
            int alt266=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA266_1 = input.LA(2);
                if ( (LA266_1==COMMA||LA266_1==RBRACK) ) {
                    alt266=3;
                }
                else if ( (LA266_1==COLON) ) {
                    alt266=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA266_2 = input.LA(2);
                if ( (LA266_2==COLON) ) {
                    alt266=1;
                }
                else if ( (LA266_2==COMMA||LA266_2==RBRACK) ) {
                    alt266=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA266_3 = input.LA(2);
                if ( (LA266_3==COMMA||LA266_3==RBRACK) ) {
                    alt266=3;
                }
                else if ( (LA266_3==COLON) ) {
                    alt266=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA266_4 = input.LA(2);
                if ( (LA266_4==COMMA||LA266_4==RBRACK) ) {
                    alt266=3;
                }
                else if ( (LA266_4==COLON) ) {
                    alt266=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt266=1;
                }
                break;
            case STAR:
                {
                alt266=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt266=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);
                throw nvae;
            }
            switch (alt266) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10865);
                    rangeOperand746=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand746.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10871);
                    frequencyOperand747=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand747.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10876);
                    numberconstant748=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant748.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT750=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic749 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic751 = null;
        CommonTree DOT750_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10892);
            eventPropertyAtomic749=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic749.getTree());
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);
                if ( (LA267_0==DOT) ) {
                    alt267=1;
                }
                switch (alt267) {
            	case 1 :
            	    {
            	    DOT750=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10895); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT750);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10897);
            	    eventPropertyAtomic751=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic751.getTree());
            	    }
            	    break;
            	default :
            	    break loop267;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK753=null;
        Token RPAREN754=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent752 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK753_tree=null;
        CommonTree RPAREN754_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10923);
            eventPropertyIdent752=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent752.getTree());
            int alt271=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt271=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt271=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt271=3;
                    }
                    break;
            }
            switch (alt271) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK753=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK753);
                    int alt268=2;
                    int LA268_0 = input.LA(1);
                    if ( (LA268_0==QUESTION) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10943); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt269=2;
                    int LA269_0 = input.LA(1);
                    if ( (LA269_0==STRING_LITERAL) ) {
                        alt269=1;
                    }
                    else if ( (LA269_0==QUOTED_STRING_LITERAL) ) {
                        alt269=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 269, 0, input);
                        throw nvae;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10962); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10968); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN754=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN754);
                    int alt270=2;
                    int LA270_0 = input.LA(1);
                    if ( (LA270_0==QUESTION) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10976); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR755=null;
        Token DOT756=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR755_tree=null;
        CommonTree DOT756_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11113);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);
                if ( (LA273_0==ESCAPECHAR) ) {
                    alt273=1;
                }
                switch (alt273) {
            	case 1 :
            	    {
            	    ESCAPECHAR755=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11125); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR755);
            	    DOT756=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11127); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT756);
            	    int alt272=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt272=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA272_5 = input.LA(2);
            	            if ( (LA272_5==EOF||(LA272_5>=IN_SET && LA272_5<=NOT_EXPR)||(LA272_5>=WHERE && LA272_5<=AS)||(LA272_5>=ELSE && LA272_5<=FROM)||(LA272_5>=INNER && LA272_5<=FULL)||LA272_5==IS||(LA272_5>=GROUP && LA272_5<=HAVING)||LA272_5==ALL||LA272_5==OUTPUT||LA272_5==INSERT||(LA272_5>=ORDER && LA272_5<=DESC)||LA272_5==PATTERN||(LA272_5>=TIMEPERIOD_SEC && LA272_5<=TIMEPERIOD_SECONDS)||LA272_5==ROW_LIMIT_EXPR||(LA272_5>=MATCH_RECOGNIZE && LA272_5<=MEASURES)||(LA272_5>=AFTER && LA272_5<=FOR)||LA272_5==COMMA||(LA272_5>=LPAREN && LA272_5<=COLON)||(LA272_5>=BAND && LA272_5<=MOD)||LA272_5==RCURLY||LA272_5==ESCAPECHAR) ) {
            	                alt272=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA272_25 = input.LA(2);
            	            if ( (LA272_25==LPAREN) ) {
            	                int LA272_174 = input.LA(3);
            	                if ( ((LA272_174>=STRING_LITERAL && LA272_174<=QUOTED_STRING_LITERAL)) ) {
            	                    alt272=1;
            	                }
            	            }
            	            else if ( (LA272_25==EOF||(LA272_25>=IN_SET && LA272_25<=NOT_EXPR)||(LA272_25>=WHERE && LA272_25<=AS)||(LA272_25>=ELSE && LA272_25<=FROM)||(LA272_25>=INNER && LA272_25<=FULL)||LA272_25==IS||(LA272_25>=GROUP && LA272_25<=HAVING)||LA272_25==ALL||LA272_25==OUTPUT||LA272_25==INSERT||(LA272_25>=ORDER && LA272_25<=DESC)||LA272_25==PATTERN||(LA272_25>=TIMEPERIOD_SEC && LA272_25<=TIMEPERIOD_SECONDS)||LA272_25==ROW_LIMIT_EXPR||(LA272_25>=MATCH_RECOGNIZE && LA272_25<=MEASURES)||(LA272_25>=AFTER && LA272_25<=FOR)||LA272_25==COMMA||(LA272_25>=RPAREN && LA272_25<=COLON)||(LA272_25>=BAND && LA272_25<=MOD)||LA272_25==RCURLY||LA272_25==ESCAPECHAR) ) {
            	                alt272=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA272_40 = input.LA(2);
            	            if ( (LA272_40==EOF||(LA272_40>=IN_SET && LA272_40<=NOT_EXPR)||(LA272_40>=WHERE && LA272_40<=AS)||(LA272_40>=ELSE && LA272_40<=FROM)||(LA272_40>=INNER && LA272_40<=FULL)||LA272_40==IS||(LA272_40>=GROUP && LA272_40<=HAVING)||LA272_40==ALL||LA272_40==OUTPUT||LA272_40==INSERT||(LA272_40>=ORDER && LA272_40<=DESC)||LA272_40==PATTERN||(LA272_40>=TIMEPERIOD_SEC && LA272_40<=TIMEPERIOD_SECONDS)||LA272_40==ROW_LIMIT_EXPR||(LA272_40>=MATCH_RECOGNIZE && LA272_40<=MEASURES)||(LA272_40>=AFTER && LA272_40<=FOR)||LA272_40==COMMA||(LA272_40>=LPAREN && LA272_40<=COLON)||(LA272_40>=BAND && LA272_40<=MOD)||LA272_40==RCURLY||LA272_40==ESCAPECHAR) ) {
            	                alt272=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA272_41 = input.LA(2);
            	            if ( (LA272_41==EOF||(LA272_41>=IN_SET && LA272_41<=NOT_EXPR)||(LA272_41>=WHERE && LA272_41<=AS)||(LA272_41>=ELSE && LA272_41<=FROM)||(LA272_41>=INNER && LA272_41<=FULL)||LA272_41==IS||(LA272_41>=GROUP && LA272_41<=HAVING)||LA272_41==ALL||LA272_41==OUTPUT||LA272_41==INSERT||(LA272_41>=ORDER && LA272_41<=DESC)||LA272_41==PATTERN||(LA272_41>=TIMEPERIOD_SEC && LA272_41<=TIMEPERIOD_SECONDS)||LA272_41==ROW_LIMIT_EXPR||(LA272_41>=MATCH_RECOGNIZE && LA272_41<=MEASURES)||(LA272_41>=AFTER && LA272_41<=FOR)||LA272_41==COMMA||(LA272_41>=LPAREN && LA272_41<=COLON)||(LA272_41>=BAND && LA272_41<=MOD)||LA272_41==RCURLY||LA272_41==ESCAPECHAR) ) {
            	                alt272=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA272_43 = input.LA(2);
            	            if ( (LA272_43==EOF||(LA272_43>=IN_SET && LA272_43<=NOT_EXPR)||(LA272_43>=WHERE && LA272_43<=AS)||(LA272_43>=ELSE && LA272_43<=FROM)||(LA272_43>=INNER && LA272_43<=FULL)||LA272_43==IS||(LA272_43>=GROUP && LA272_43<=HAVING)||LA272_43==ALL||LA272_43==OUTPUT||LA272_43==INSERT||(LA272_43>=ORDER && LA272_43<=DESC)||LA272_43==PATTERN||(LA272_43>=TIMEPERIOD_SEC && LA272_43<=TIMEPERIOD_SECONDS)||LA272_43==ROW_LIMIT_EXPR||(LA272_43>=MATCH_RECOGNIZE && LA272_43<=MEASURES)||(LA272_43>=AFTER && LA272_43<=FOR)||LA272_43==COMMA||(LA272_43>=LPAREN && LA272_43<=COLON)||(LA272_43>=BAND && LA272_43<=MOD)||LA272_43==RCURLY||LA272_43==ESCAPECHAR) ) {
            	                alt272=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA272_44 = input.LA(2);
            	            if ( (LA272_44==EOF||(LA272_44>=IN_SET && LA272_44<=NOT_EXPR)||(LA272_44>=WHERE && LA272_44<=AS)||(LA272_44>=ELSE && LA272_44<=FROM)||(LA272_44>=INNER && LA272_44<=FULL)||LA272_44==IS||(LA272_44>=GROUP && LA272_44<=HAVING)||LA272_44==ALL||LA272_44==OUTPUT||LA272_44==INSERT||(LA272_44>=ORDER && LA272_44<=DESC)||(LA272_44>=TIMEPERIOD_SEC && LA272_44<=TIMEPERIOD_SECONDS)||LA272_44==ROW_LIMIT_EXPR||(LA272_44>=MATCH_RECOGNIZE && LA272_44<=MEASURES)||(LA272_44>=AFTER && LA272_44<=FOR)||LA272_44==COMMA||(LA272_44>=LPAREN && LA272_44<=COLON)||(LA272_44>=BAND && LA272_44<=MOD)||LA272_44==RCURLY||LA272_44==ESCAPECHAR) ) {
            	                alt272=1;
            	            }
            	            else if ( (LA272_44==PATTERN) ) {
            	                int LA272_484 = input.LA(3);
            	                if ( (LA272_484==LPAREN) ) {
            	                    alt272=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt272) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11131);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop273;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT757=null;
        Token COUNT758=null;
        Token ESCAPE759=null;
        Token EVERY_EXPR760=null;
        Token SUM761=null;
        Token AVG762=null;
        Token MAX763=null;
        Token MIN764=null;
        Token COALESCE765=null;
        Token MEDIAN766=null;
        Token STDDEV767=null;
        Token AVEDEV768=null;
        Token EVENTS769=null;
        Token FIRST770=null;
        Token LAST771=null;
        Token WHILE772=null;
        Token MERGE773=null;
        Token MATCHED774=null;
        Token UNIDIRECTIONAL775=null;
        Token RETAINUNION776=null;
        Token RETAININTERSECTION777=null;
        Token UNTIL778=null;
        Token PATTERN779=null;
        Token SQL780=null;
        Token METADATASQL781=null;
        Token PREVIOUS782=null;
        Token PREVIOUSTAIL783=null;
        Token PRIOR784=null;
        Token WEEKDAY785=null;
        Token LW786=null;
        Token INSTANCEOF787=null;
        Token TYPEOF788=null;
        Token CAST789=null;
        Token SNAPSHOT790=null;
        Token VARIABLE791=null;
        Token INDEX792=null;
        Token WINDOW793=null;
        Token LEFT794=null;
        Token RIGHT795=null;
        Token OUTER796=null;
        Token FULL797=null;
        Token JOIN798=null;
        Token DEFINE799=null;
        Token PARTITION800=null;
        Token MATCHES801=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT757_tree=null;
        CommonTree COUNT758_tree=null;
        CommonTree ESCAPE759_tree=null;
        CommonTree EVERY_EXPR760_tree=null;
        CommonTree SUM761_tree=null;
        CommonTree AVG762_tree=null;
        CommonTree MAX763_tree=null;
        CommonTree MIN764_tree=null;
        CommonTree COALESCE765_tree=null;
        CommonTree MEDIAN766_tree=null;
        CommonTree STDDEV767_tree=null;
        CommonTree AVEDEV768_tree=null;
        CommonTree EVENTS769_tree=null;
        CommonTree FIRST770_tree=null;
        CommonTree LAST771_tree=null;
        CommonTree WHILE772_tree=null;
        CommonTree MERGE773_tree=null;
        CommonTree MATCHED774_tree=null;
        CommonTree UNIDIRECTIONAL775_tree=null;
        CommonTree RETAINUNION776_tree=null;
        CommonTree RETAININTERSECTION777_tree=null;
        CommonTree UNTIL778_tree=null;
        CommonTree PATTERN779_tree=null;
        CommonTree SQL780_tree=null;
        CommonTree METADATASQL781_tree=null;
        CommonTree PREVIOUS782_tree=null;
        CommonTree PREVIOUSTAIL783_tree=null;
        CommonTree PRIOR784_tree=null;
        CommonTree WEEKDAY785_tree=null;
        CommonTree LW786_tree=null;
        CommonTree INSTANCEOF787_tree=null;
        CommonTree TYPEOF788_tree=null;
        CommonTree CAST789_tree=null;
        CommonTree SNAPSHOT790_tree=null;
        CommonTree VARIABLE791_tree=null;
        CommonTree INDEX792_tree=null;
        CommonTree WINDOW793_tree=null;
        CommonTree LEFT794_tree=null;
        CommonTree RIGHT795_tree=null;
        CommonTree OUTER796_tree=null;
        CommonTree FULL797_tree=null;
        CommonTree JOIN798_tree=null;
        CommonTree DEFINE799_tree=null;
        CommonTree PARTITION800_tree=null;
        CommonTree MATCHES801_tree=null;
        try {
            int alt274=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt274=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt274=2;
                }
                break;
            case AT:
                {
                alt274=3;
                }
                break;
            case COUNT:
                {
                alt274=4;
                }
                break;
            case ESCAPE:
                {
                alt274=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt274=6;
                }
                break;
            case SUM:
                {
                alt274=7;
                }
                break;
            case AVG:
                {
                alt274=8;
                }
                break;
            case MAX:
                {
                alt274=9;
                }
                break;
            case MIN:
                {
                alt274=10;
                }
                break;
            case COALESCE:
                {
                alt274=11;
                }
                break;
            case MEDIAN:
                {
                alt274=12;
                }
                break;
            case STDDEV:
                {
                alt274=13;
                }
                break;
            case AVEDEV:
                {
                alt274=14;
                }
                break;
            case EVENTS:
                {
                alt274=15;
                }
                break;
            case FIRST:
                {
                alt274=16;
                }
                break;
            case LAST:
                {
                alt274=17;
                }
                break;
            case WHILE:
                {
                alt274=18;
                }
                break;
            case MERGE:
                {
                alt274=19;
                }
                break;
            case MATCHED:
                {
                alt274=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt274=21;
                }
                break;
            case RETAINUNION:
                {
                alt274=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt274=23;
                }
                break;
            case UNTIL:
                {
                alt274=24;
                }
                break;
            case PATTERN:
                {
                alt274=25;
                }
                break;
            case SQL:
                {
                alt274=26;
                }
                break;
            case METADATASQL:
                {
                alt274=27;
                }
                break;
            case PREVIOUS:
                {
                alt274=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt274=29;
                }
                break;
            case PRIOR:
                {
                alt274=30;
                }
                break;
            case WEEKDAY:
                {
                alt274=31;
                }
                break;
            case LW:
                {
                alt274=32;
                }
                break;
            case INSTANCEOF:
                {
                alt274=33;
                }
                break;
            case TYPEOF:
                {
                alt274=34;
                }
                break;
            case CAST:
                {
                alt274=35;
                }
                break;
            case SNAPSHOT:
                {
                alt274=36;
                }
                break;
            case VARIABLE:
                {
                alt274=37;
                }
                break;
            case INDEX:
                {
                alt274=38;
                }
                break;
            case WINDOW:
                {
                alt274=39;
                }
                break;
            case LEFT:
                {
                alt274=40;
                }
                break;
            case RIGHT:
                {
                alt274=41;
                }
                break;
            case OUTER:
                {
                alt274=42;
                }
                break;
            case FULL:
                {
                alt274=43;
                }
                break;
            case JOIN:
                {
                alt274=44;
                }
                break;
            case DEFINE:
                {
                alt274=45;
                }
                break;
            case PARTITION:
                {
                alt274=46;
                }
                break;
            case MATCHES:
                {
                alt274=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);
                throw nvae;
            }
            switch (alt274) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT757=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT757_tree = (CommonTree)adaptor.create(AT757);
                    adaptor.addChild(root_0, AT757_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT758=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT758_tree = (CommonTree)adaptor.create(COUNT758);
                    adaptor.addChild(root_0, COUNT758_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE759=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE759_tree = (CommonTree)adaptor.create(ESCAPE759);
                    adaptor.addChild(root_0, ESCAPE759_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR760=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR760_tree = (CommonTree)adaptor.create(EVERY_EXPR760);
                    adaptor.addChild(root_0, EVERY_EXPR760_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM761=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11218); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM761_tree = (CommonTree)adaptor.create(SUM761);
                    adaptor.addChild(root_0, SUM761_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG762=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG762_tree = (CommonTree)adaptor.create(AVG762);
                    adaptor.addChild(root_0, AVG762_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX763=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX763_tree = (CommonTree)adaptor.create(MAX763);
                    adaptor.addChild(root_0, MAX763_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN764=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN764_tree = (CommonTree)adaptor.create(MIN764);
                    adaptor.addChild(root_0, MIN764_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE765=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11246); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE765_tree = (CommonTree)adaptor.create(COALESCE765);
                    adaptor.addChild(root_0, COALESCE765_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN766=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN766_tree = (CommonTree)adaptor.create(MEDIAN766);
                    adaptor.addChild(root_0, MEDIAN766_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV767=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV767_tree = (CommonTree)adaptor.create(STDDEV767);
                    adaptor.addChild(root_0, STDDEV767_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV768=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV768_tree = (CommonTree)adaptor.create(AVEDEV768);
                    adaptor.addChild(root_0, AVEDEV768_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS769=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS769_tree = (CommonTree)adaptor.create(EVENTS769);
                    adaptor.addChild(root_0, EVENTS769_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST770=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST770_tree = (CommonTree)adaptor.create(FIRST770);
                    adaptor.addChild(root_0, FIRST770_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST771=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST771_tree = (CommonTree)adaptor.create(LAST771);
                    adaptor.addChild(root_0, LAST771_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE772=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE772_tree = (CommonTree)adaptor.create(WHILE772);
                    adaptor.addChild(root_0, WHILE772_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE773=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE773_tree = (CommonTree)adaptor.create(MERGE773);
                    adaptor.addChild(root_0, MERGE773_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED774=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED774_tree = (CommonTree)adaptor.create(MATCHED774);
                    adaptor.addChild(root_0, MATCHED774_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL775=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL775_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL775);
                    adaptor.addChild(root_0, UNIDIRECTIONAL775_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION776=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION776_tree = (CommonTree)adaptor.create(RETAINUNION776);
                    adaptor.addChild(root_0, RETAINUNION776_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION777=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION777_tree = (CommonTree)adaptor.create(RETAININTERSECTION777);
                    adaptor.addChild(root_0, RETAININTERSECTION777_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL778=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL778_tree = (CommonTree)adaptor.create(UNTIL778);
                    adaptor.addChild(root_0, UNTIL778_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN779=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN779_tree = (CommonTree)adaptor.create(PATTERN779);
                    adaptor.addChild(root_0, PATTERN779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL780=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL780_tree = (CommonTree)adaptor.create(SQL780);
                    adaptor.addChild(root_0, SQL780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL781=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL781_tree = (CommonTree)adaptor.create(METADATASQL781);
                    adaptor.addChild(root_0, METADATASQL781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS782=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS782_tree = (CommonTree)adaptor.create(PREVIOUS782);
                    adaptor.addChild(root_0, PREVIOUS782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL783=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL783_tree = (CommonTree)adaptor.create(PREVIOUSTAIL783);
                    adaptor.addChild(root_0, PREVIOUSTAIL783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR784=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR784_tree = (CommonTree)adaptor.create(PRIOR784);
                    adaptor.addChild(root_0, PRIOR784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY785=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY785_tree = (CommonTree)adaptor.create(WEEKDAY785);
                    adaptor.addChild(root_0, WEEKDAY785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW786=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW786_tree = (CommonTree)adaptor.create(LW786);
                    adaptor.addChild(root_0, LW786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF787=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF787_tree = (CommonTree)adaptor.create(INSTANCEOF787);
                    adaptor.addChild(root_0, INSTANCEOF787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF788=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent11407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF788_tree = (CommonTree)adaptor.create(TYPEOF788);
                    adaptor.addChild(root_0, TYPEOF788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST789=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST789_tree = (CommonTree)adaptor.create(CAST789);
                    adaptor.addChild(root_0, CAST789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT790=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT790_tree = (CommonTree)adaptor.create(SNAPSHOT790);
                    adaptor.addChild(root_0, SNAPSHOT790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE791=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE791_tree = (CommonTree)adaptor.create(VARIABLE791);
                    adaptor.addChild(root_0, VARIABLE791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX792=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX792_tree = (CommonTree)adaptor.create(INDEX792);
                    adaptor.addChild(root_0, INDEX792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW793=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW793_tree = (CommonTree)adaptor.create(WINDOW793);
                    adaptor.addChild(root_0, WINDOW793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT794=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT794_tree = (CommonTree)adaptor.create(LEFT794);
                    adaptor.addChild(root_0, LEFT794_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT795=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT795_tree = (CommonTree)adaptor.create(RIGHT795);
                    adaptor.addChild(root_0, RIGHT795_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER796=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER796_tree = (CommonTree)adaptor.create(OUTER796);
                    adaptor.addChild(root_0, OUTER796_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL797=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL797_tree = (CommonTree)adaptor.create(FULL797);
                    adaptor.addChild(root_0, FULL797_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN798=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN798_tree = (CommonTree)adaptor.create(JOIN798);
                    adaptor.addChild(root_0, JOIN798_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE799=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE799_tree = (CommonTree)adaptor.create(DEFINE799);
                    adaptor.addChild(root_0, DEFINE799_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION800=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION800_tree = (CommonTree)adaptor.create(PARTITION800);
                    adaptor.addChild(root_0, PARTITION800_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES801=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES801_tree = (CommonTree)adaptor.create(MATCHES801);
                    adaptor.addChild(root_0, MATCHES801_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt275=2;
            int LA275_0 = input.LA(1);
            if ( (LA275_0==IDENT) ) {
                alt275=1;
            }
            else if ( (LA275_0==TICKED_STRING_LITERAL) ) {
                alt275=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);
                throw nvae;
            }
            switch (alt275) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT802=null;
        CommonTree t_tree=null;
        CommonTree IDENT802_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt276=2;
            int LA276_0 = input.LA(1);
            if ( (LA276_0==IDENT) ) {
                alt276=1;
            }
            else if ( (LA276_0==TICKED_STRING_LITERAL) ) {
                alt276=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);
                throw nvae;
            }
            switch (alt276) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT802=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT802_tree = (CommonTree)adaptor.create(IDENT802);
                    adaptor.addChild(root_0, IDENT802_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart803 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart804 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart805 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart806 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart807 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart808 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart809 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart810 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart811 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart812 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart813 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart814 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart815 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart816 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart817 = null;
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            {
            int alt287=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt287=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt287=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt287=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt287=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt287=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt287=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt287=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt287=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt287=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt287=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt287=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt287=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt287=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt287=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt287=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt287=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt287=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt287=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11579);
                    dayPart803=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart803.getTree());
                    int alt277=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA277_1 = input.LA(2);
                            if ( ((LA277_1>=TIMEPERIOD_HOUR && LA277_1<=TIMEPERIOD_HOURS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA277_2 = input.LA(2);
                            if ( ((LA277_2>=TIMEPERIOD_HOUR && LA277_2<=TIMEPERIOD_HOURS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA277_3 = input.LA(2);
                            if ( ((LA277_3>=TIMEPERIOD_HOUR && LA277_3<=TIMEPERIOD_HOURS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA277_4 = input.LA(2);
                            if ( ((LA277_4>=TIMEPERIOD_HOUR && LA277_4<=TIMEPERIOD_HOURS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA277_5 = input.LA(2);
                            if ( ((LA277_5>=TIMEPERIOD_HOUR && LA277_5<=TIMEPERIOD_HOURS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA277_6 = input.LA(2);
                            if ( ((LA277_6>=TIMEPERIOD_HOUR && LA277_6<=TIMEPERIOD_HOURS)) ) {
                                alt277=1;
                            }
                            }
                            break;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11581);
                            hourPart804=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart804.getTree());
                            }
                            break;
                    }
                    int alt278=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA278_1 = input.LA(2);
                            if ( (LA278_1==MIN||(LA278_1>=TIMEPERIOD_MINUTE && LA278_1<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA278_2 = input.LA(2);
                            if ( (LA278_2==MIN||(LA278_2>=TIMEPERIOD_MINUTE && LA278_2<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA278_3 = input.LA(2);
                            if ( (LA278_3==MIN||(LA278_3>=TIMEPERIOD_MINUTE && LA278_3<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA278_4 = input.LA(2);
                            if ( (LA278_4==MIN||(LA278_4>=TIMEPERIOD_MINUTE && LA278_4<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA278_5 = input.LA(2);
                            if ( (LA278_5==MIN||(LA278_5>=TIMEPERIOD_MINUTE && LA278_5<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA278_6 = input.LA(2);
                            if ( (LA278_6==MIN||(LA278_6>=TIMEPERIOD_MINUTE && LA278_6<=TIMEPERIOD_MINUTES)) ) {
                                alt278=1;
                            }
                            }
                            break;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11584);
                            minutePart805=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart805.getTree());
                            }
                            break;
                    }
                    int alt279=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA279_1 = input.LA(2);
                            if ( ((LA279_1>=TIMEPERIOD_SEC && LA279_1<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA279_2 = input.LA(2);
                            if ( ((LA279_2>=TIMEPERIOD_SEC && LA279_2<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA279_3 = input.LA(2);
                            if ( ((LA279_3>=TIMEPERIOD_SEC && LA279_3<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA279_4 = input.LA(2);
                            if ( ((LA279_4>=TIMEPERIOD_SEC && LA279_4<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA279_5 = input.LA(2);
                            if ( ((LA279_5>=TIMEPERIOD_SEC && LA279_5<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA279_6 = input.LA(2);
                            if ( ((LA279_6>=TIMEPERIOD_SEC && LA279_6<=TIMEPERIOD_SECONDS)) ) {
                                alt279=1;
                            }
                            }
                            break;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11587);
                            secondPart806=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart806.getTree());
                            }
                            break;
                    }
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==NUM_DOUBLE||LA280_0==IDENT||LA280_0==QUESTION||LA280_0==NUM_INT||(LA280_0>=NUM_LONG && LA280_0<=NUM_FLOAT)) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11590);
                            millisecondPart807=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart807.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11596);
                    hourPart808=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart808.getTree());
                    int alt281=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA281_1 = input.LA(2);
                            if ( (LA281_1==MIN||(LA281_1>=TIMEPERIOD_MINUTE && LA281_1<=TIMEPERIOD_MINUTES)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA281_2 = input.LA(2);
                            if ( (LA281_2==MIN||(LA281_2>=TIMEPERIOD_MINUTE && LA281_2<=TIMEPERIOD_MINUTES)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA281_3 = input.LA(2);
                            if ( (LA281_3==MIN||(LA281_3>=TIMEPERIOD_MINUTE && LA281_3<=TIMEPERIOD_MINUTES)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA281_4 = input.LA(2);
                            if ( (LA281_4==MIN||(LA281_4>=TIMEPERIOD_MINUTE && LA281_4<=TIMEPERIOD_MINUTES)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA281_5 = input.LA(2);
                            if ( (LA281_5==MIN||(LA281_5>=TIMEPERIOD_MINUTE && LA281_5<=TIMEPERIOD_MINUTES)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA281_6 = input.LA(2);
                            if ( (LA281_6==MIN||(LA281_6>=TIMEPERIOD_MINUTE && LA281_6<=TIMEPERIOD_MINUTES)) ) {
                                alt281=1;
                            }
                            }
                            break;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11598);
                            minutePart809=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart809.getTree());
                            }
                            break;
                    }
                    int alt282=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA282_1 = input.LA(2);
                            if ( ((LA282_1>=TIMEPERIOD_SEC && LA282_1<=TIMEPERIOD_SECONDS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA282_2 = input.LA(2);
                            if ( ((LA282_2>=TIMEPERIOD_SEC && LA282_2<=TIMEPERIOD_SECONDS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA282_3 = input.LA(2);
                            if ( ((LA282_3>=TIMEPERIOD_SEC && LA282_3<=TIMEPERIOD_SECONDS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA282_4 = input.LA(2);
                            if ( ((LA282_4>=TIMEPERIOD_SEC && LA282_4<=TIMEPERIOD_SECONDS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA282_5 = input.LA(2);
                            if ( ((LA282_5>=TIMEPERIOD_SEC && LA282_5<=TIMEPERIOD_SECONDS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA282_6 = input.LA(2);
                            if ( ((LA282_6>=TIMEPERIOD_SEC && LA282_6<=TIMEPERIOD_SECONDS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11601);
                            secondPart810=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart810.getTree());
                            }
                            break;
                    }
                    int alt283=2;
                    int LA283_0 = input.LA(1);
                    if ( (LA283_0==NUM_DOUBLE||LA283_0==IDENT||LA283_0==QUESTION||LA283_0==NUM_INT||(LA283_0>=NUM_LONG && LA283_0<=NUM_FLOAT)) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11604);
                            millisecondPart811=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart811.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11610);
                    minutePart812=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart812.getTree());
                    int alt284=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA284_1 = input.LA(2);
                            if ( ((LA284_1>=TIMEPERIOD_SEC && LA284_1<=TIMEPERIOD_SECONDS)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA284_2 = input.LA(2);
                            if ( ((LA284_2>=TIMEPERIOD_SEC && LA284_2<=TIMEPERIOD_SECONDS)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA284_3 = input.LA(2);
                            if ( ((LA284_3>=TIMEPERIOD_SEC && LA284_3<=TIMEPERIOD_SECONDS)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA284_4 = input.LA(2);
                            if ( ((LA284_4>=TIMEPERIOD_SEC && LA284_4<=TIMEPERIOD_SECONDS)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA284_5 = input.LA(2);
                            if ( ((LA284_5>=TIMEPERIOD_SEC && LA284_5<=TIMEPERIOD_SECONDS)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA284_6 = input.LA(2);
                            if ( ((LA284_6>=TIMEPERIOD_SEC && LA284_6<=TIMEPERIOD_SECONDS)) ) {
                                alt284=1;
                            }
                            }
                            break;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11612);
                            secondPart813=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart813.getTree());
                            }
                            break;
                    }
                    int alt285=2;
                    int LA285_0 = input.LA(1);
                    if ( (LA285_0==NUM_DOUBLE||LA285_0==IDENT||LA285_0==QUESTION||LA285_0==NUM_INT||(LA285_0>=NUM_LONG && LA285_0<=NUM_FLOAT)) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11615);
                            millisecondPart814=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart814.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11621);
                    secondPart815=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart815.getTree());
                    int alt286=2;
                    int LA286_0 = input.LA(1);
                    if ( (LA286_0==NUM_DOUBLE||LA286_0==IDENT||LA286_0==QUESTION||LA286_0==NUM_INT||(LA286_0>=NUM_LONG && LA286_0<=NUM_FLOAT)) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11623);
                            millisecondPart816=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart816.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11629);
                    millisecondPart817=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart817.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS820=null;
        Token TIMEPERIOD_DAY821=null;
        EsperEPL2GrammarParser.number_return number818 = null;
        EsperEPL2GrammarParser.substitution_return substitution819 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS820_tree=null;
        CommonTree TIMEPERIOD_DAY821_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt288=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt288=1;
                }
                break;
            case IDENT:
                {
                alt288=2;
                }
                break;
            case QUESTION:
                {
                alt288=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);
                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart11667);
                    number818=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number818.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11673);
                    substitution819=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution819.getTree());
                    }
                    break;
            }
            int alt289=2;
            int LA289_0 = input.LA(1);
            if ( (LA289_0==TIMEPERIOD_DAYS) ) {
                alt289=1;
            }
            else if ( (LA289_0==TIMEPERIOD_DAY) ) {
                alt289=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS820=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS820);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY821=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY821);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS824=null;
        Token TIMEPERIOD_HOUR825=null;
        EsperEPL2GrammarParser.number_return number822 = null;
        EsperEPL2GrammarParser.substitution_return substitution823 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS824_tree=null;
        CommonTree TIMEPERIOD_HOUR825_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt290=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt290=1;
                }
                break;
            case IDENT:
                {
                alt290=2;
                }
                break;
            case QUESTION:
                {
                alt290=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);
                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart11730);
                    number822=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number822.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11736);
                    substitution823=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution823.getTree());
                    }
                    break;
            }
            int alt291=2;
            int LA291_0 = input.LA(1);
            if ( (LA291_0==TIMEPERIOD_HOURS) ) {
                alt291=1;
            }
            else if ( (LA291_0==TIMEPERIOD_HOUR) ) {
                alt291=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS824=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS824);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR825=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR825);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES828=null;
        Token TIMEPERIOD_MINUTE829=null;
        Token MIN830=null;
        EsperEPL2GrammarParser.number_return number826 = null;
        EsperEPL2GrammarParser.substitution_return substitution827 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES828_tree=null;
        CommonTree TIMEPERIOD_MINUTE829_tree=null;
        CommonTree MIN830_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt292=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt292=1;
                }
                break;
            case IDENT:
                {
                alt292=2;
                }
                break;
            case QUESTION:
                {
                alt292=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);
                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart11793);
                    number826=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number826.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11799);
                    substitution827=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution827.getTree());
                    }
                    break;
            }
            int alt293=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt293=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt293=2;
                }
                break;
            case MIN:
                {
                alt293=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);
                throw nvae;
            }
            switch (alt293) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES828=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES828);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE829=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE829);
                    }
                    break;
                case 3 :
                    {
                    MIN830=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN830);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS833=null;
        Token TIMEPERIOD_SECOND834=null;
        Token TIMEPERIOD_SEC835=null;
        EsperEPL2GrammarParser.number_return number831 = null;
        EsperEPL2GrammarParser.substitution_return substitution832 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS833_tree=null;
        CommonTree TIMEPERIOD_SECOND834_tree=null;
        CommonTree TIMEPERIOD_SEC835_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt294=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt294=1;
                }
                break;
            case IDENT:
                {
                alt294=2;
                }
                break;
            case QUESTION:
                {
                alt294=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);
                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart11861);
                    number831=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number831.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11867);
                    substitution832=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution832.getTree());
                    }
                    break;
            }
            int alt295=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt295=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt295=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt295=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);
                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS833=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS833);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND834=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND834);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC835=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC835);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS838=null;
        Token TIMEPERIOD_MILLISECOND839=null;
        Token TIMEPERIOD_MILLISEC840=null;
        EsperEPL2GrammarParser.number_return number836 = null;
        EsperEPL2GrammarParser.substitution_return substitution837 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS838_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND839_tree=null;
        CommonTree TIMEPERIOD_MILLISEC840_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt296=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt296=1;
                }
                break;
            case IDENT:
                {
                alt296=2;
                }
                break;
            case QUESTION:
                {
                alt296=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 296, 0, input);
                throw nvae;
            }
            switch (alt296) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11929);
                    number836=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number836.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11935);
                    substitution837=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution837.getTree());
                    }
                    break;
            }
            int alt297=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt297=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt297=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt297=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 297, 0, input);
                throw nvae;
            }
            switch (alt297) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS838=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS838);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND839=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND839);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC840=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC840);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt298=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt298=1;
                }
                break;
            case NUM_LONG:
                {
                alt298=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt298=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt298=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 298, 0, input);
                throw nvae;
            }
            switch (alt298) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number12002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number12019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number12036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number12053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution12074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant841 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant842 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt299=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt299=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt299=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt299=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt299=4;
                }
                break;
            case VALUE_NULL:
                {
                alt299=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);
                throw nvae;
            }
            switch (alt299) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant12093);
                    numberconstant841=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant841.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant12100);
                    stringconstant842=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant842.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant12113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number843 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt300=3;
            int LA300_0 = input.LA(1);
            if ( (LA300_0==MINUS) ) {
                alt300=1;
            }
            else if ( (LA300_0==PLUS) ) {
                alt300=2;
            }
            switch (alt300) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12185);
            number843=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number843.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number843!=null?((CommonTree)number843.tree):null).getType(), "-" + (number843!=null?input.toString(number843.start,number843.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==STRING_LITERAL) ) {
                alt301=1;
            }
            else if ( (LA301_0==QUOTED_STRING_LITERAL) ) {
                alt301=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);
                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4450);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5850);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7714);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8552);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8620);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9869);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10292);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10303);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10314);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10325);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10336);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10348);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10359);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10370);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10383);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA183 dfa183 = new DFA183(this);
    static final String DFA183_eotS =
        "\u0b98\uffff";
    static final String DFA183_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0b63\uffff";
    static final String DFA183_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\12\uffff\1\u0114\171\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\u011f\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72"+
        "\uffff\1\5\72\uffff\1\5\11\uffff\2\6\73\uffff\2\6\103\uffff\2\6"+
        "\112\uffff\2\6\103\uffff\2\6\103\uffff\2\6\103\uffff\2\6\103\uffff"+
        "\2\6\102\uffff\2\6\100\uffff\2\6\101\uffff\2\6\104\uffff\2\6\101"+
        "\uffff\2\6\101\uffff\2\6\103\uffff\2\6\174\uffff\1\0\5\uffff\1\0"+
        "\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\137\uffff\1\0"+
        "\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\54"+
        "\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\140\uffff\1\0\5\uffff\1\0\141\uffff"+
        "\1\0\5\uffff\1\0\30\uffff";
    static final String DFA183_maxS =
        "\2\u0134\13\uffff\1\u0134\3\uffff\1\u0131\2\uffff\2\u0131\2\uffff"+
        "\4\u0131\1\uffff\2\u0131\12\uffff\3\u0131\2\uffff\3\u0131\3\uffff"+
        "\1\u0131\12\uffff\1\u0114\171\uffff\1\u0134\72\uffff\1\u0134\72"+
        "\uffff\1\u0134\72\uffff\1\u0134\72\uffff\1\u0134\72\uffff\1\u0134"+
        "\72\uffff\1\u0134\72\uffff\1\u0134\72\uffff\1\u0134\72\uffff\1\u0134"+
        "\72\uffff\1\u0134\72\uffff\1\u012f\72\uffff\1\u0134\72\uffff\1\u0134"+
        "\72\uffff\1\u0134\72\uffff\1\u0134\72\uffff\1\u0132\11\uffff\2\u012c"+
        "\73\uffff\2\u012c\103\uffff\2\u012c\112\uffff\2\u012c\103\uffff"+
        "\2\u012c\103\uffff\2\u012c\103\uffff\2\u012c\103\uffff\2\u012c\102"+
        "\uffff\2\u012c\100\uffff\2\u012c\101\uffff\2\u012c\104\uffff\2\u012c"+
        "\101\uffff\2\u012c\101\uffff\2\u012c\103\uffff\2\u012c\174\uffff"+
        "\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1"+
        "\0\137\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1"+
        "\0\5\uffff\1\0\54\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0"+
        "\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\140\uffff\1\0"+
        "\5\uffff\1\0\141\uffff\1\0\5\uffff\1\0\30\uffff";
    static final String DFA183_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\56\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\1\62\uffff\1\10\1\4\u03f3\uffff\11\6\2\uffff\73\6\2\uffff"+
        "\103\6\2\uffff\112\6\2\uffff\103\6\2\uffff\103\6\2\uffff\103\6\2"+
        "\uffff\103\6\2\uffff\102\6\2\uffff\100\6\2\uffff\101\6\2\uffff\73"+
        "\6\2\uffff\7\6\2\uffff\101\6\2\uffff\101\6\2\uffff\103\6\2\uffff"+
        "\71\6\1\11\102\6\1\uffff\5\6\1\uffff\53\6\1\uffff\5\6\1\uffff\53"+
        "\6\1\uffff\5\6\1\uffff\30\6\1\uffff\31\6\1\uffff\54\6\1\uffff\5"+
        "\6\1\uffff\53\6\1\uffff\5\6\1\uffff\53\6\1\uffff\5\6\1\uffff\54"+
        "\6\1\uffff\5\6\1\uffff\55\6\1\uffff\5\6\1\uffff\55\6\1\uffff\5\6"+
        "\1\uffff\55\6\1\uffff\5\6\1\uffff\62\6\2\uffff\54\6\1\uffff\5\6"+
        "\1\uffff\30\6\1\uffff\32\6\1\uffff\55\6\1\uffff\5\6\1\uffff\30\6";
    static final String DFA183_specialS =
        "\1\0\u00b8\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\72\uffff\1\17\72\uffff\1\20\72\uffff\1\21\11\uffff\1\22\1"+
        "\23\73\uffff\1\24\1\25\103\uffff\1\26\1\27\112\uffff\1\30\1\31\103"+
        "\uffff\1\32\1\33\103\uffff\1\34\1\35\103\uffff\1\36\1\37\103\uffff"+
        "\1\40\1\41\102\uffff\1\42\1\43\100\uffff\1\44\1\45\101\uffff\1\46"+
        "\1\47\104\uffff\1\50\1\51\101\uffff\1\52\1\53\101\uffff\1\54\1\55"+
        "\103\uffff\1\56\1\57\174\uffff\1\60\5\uffff\1\61\53\uffff\1\62\5"+
        "\uffff\1\63\53\uffff\1\64\5\uffff\1\65\137\uffff\1\66\5\uffff\1"+
        "\67\53\uffff\1\70\5\uffff\1\71\53\uffff\1\72\5\uffff\1\73\54\uffff"+
        "\1\74\5\uffff\1\75\55\uffff\1\76\5\uffff\1\77\55\uffff\1\100\5\uffff"+
        "\1\101\55\uffff\1\102\5\uffff\1\103\140\uffff\1\104\5\uffff\1\105"+
        "\141\uffff\1\106\5\uffff\1\107\30\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\75\1\76\1\53\1\77\2\16"+
            "\1\56\1\57\1\60\1\100\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2"+
            "\5\uffff\3\16\2\uffff\1\16\1\uffff\2\16\u008f\uffff\1\2\16\uffff"+
            "\1\16\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff"+
            "\1\101\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\102\4\uffff\1\102\3\uffff\1\102\3\uffff\11\102\10\uffff"+
            "\1\102\1\uffff\4\102\12\uffff\3\102\11\uffff\10\102\2\uffff"+
            "\1\102\1\uffff\5\102\2\uffff\1\102\1\uffff\4\102\24\uffff\3"+
            "\102\2\uffff\1\102\1\uffff\2\102\u008f\uffff\1\2\16\uffff\1"+
            "\102\33\uffff\1\2\2\uffff\1\102\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\4\uffff\1\166\2\uffff\2\166\3\uffff\11\166\1\165\1"+
            "\166\6\uffff\1\166\1\uffff\4\166\12\uffff\3\166\11\uffff\22"+
            "\166\1\uffff\1\166\1\uffff\4\166\14\uffff\3\166\5\uffff\3\166"+
            "\2\uffff\1\166\1\uffff\2\166\u008f\uffff\1\166\16\uffff\2\166"+
            "\7\uffff\2\166\1\uffff\2\166\11\uffff\1\166\2\uffff\1\166\1"+
            "\uffff\1\166\2\uffff\3\166",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u00b9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u00f4\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u012f\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u016a\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u01a5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u01e0\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u021b\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0256\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0291\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u02cc\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0307\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u0342\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u037d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u03b8\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u03f3\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\33\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a1"+
            "\uffff\1\16\1\uffff\1\u042e\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0469",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04a0\4\uffff\1\u047e\2\uffff\1\u04ae\1\u047f\3\uffff\1"+
            "\u0480\1\u0481\1\u0482\1\u0483\1\u0484\1\u0485\1\u0486\1\u0487"+
            "\1\u047d\1\uffff\1\u046c\6\uffff\1\u04a3\1\uffff\1\u04a5\1\u04a1"+
            "\1\u04a2\1\u04a4\5\uffff\1\u046b\1\u046a\3\uffff\1\u0488\1\u0489"+
            "\1\u048a\11\uffff\1\u048e\1\u048f\1\u0490\1\u0492\1\u0493\1"+
            "\u0494\1\u0495\1\u0496\1\u04a9\1\u04aa\1\u0497\1\u04ab\1\u0498"+
            "\1\u0499\1\u049a\1\u049b\1\u049c\1\u04ac\1\uffff\1\u049d\1\uffff"+
            "\1\u049e\1\u0491\1\u047c\1\u049f\14\uffff\1\u0475\1\u0476\1"+
            "\u0477\5\uffff\1\u04a6\1\u04a7\1\u04a8\2\uffff\1\u048b\1\uffff"+
            "\1\u048c\1\u048d\u008f\uffff\1\u0472\16\uffff\1\u047a\1\u0479"+
            "\5\uffff\1\u04af\1\uffff\1\u046e\1\u0478\1\uffff\1\u0473\1\u0474"+
            "\11\uffff\1\u046d\2\uffff\1\u04ad\1\uffff\1\u046f\2\uffff\1"+
            "\u047b\1\u0470\1\u0471",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04e6\4\uffff\1\u04c4\2\uffff\1\u04f4\1\u04c5\3\uffff\1"+
            "\u04c6\1\u04c7\1\u04c8\1\u04c9\1\u04ca\1\u04cb\1\u04cc\1\u04cd"+
            "\1\u04c3\1\uffff\1\u04b4\6\uffff\1\u04e9\1\uffff\1\u04eb\1\u04e7"+
            "\1\u04e8\1\u04ea\5\uffff\1\u04b3\1\u04b2\3\uffff\1\u04ce\1\u04cf"+
            "\1\u04d0\11\uffff\1\u04d4\1\u04d5\1\u04d6\1\u04d8\1\u04d9\1"+
            "\u04da\1\u04db\1\u04dc\1\u04ef\1\u04f0\1\u04dd\1\u04f1\1\u04de"+
            "\1\u04df\1\u04e0\1\u04e1\1\u04e2\1\u04f2\1\uffff\1\u04e3\1\uffff"+
            "\1\u04e4\1\u04d7\1\u04c2\1\u04e5\14\uffff\1\u04bb\1\u04bc\1"+
            "\u04bd\5\uffff\1\u04ec\1\u04ed\1\u04ee\2\uffff\1\u04d1\1\uffff"+
            "\1\u04d2\1\u04d3\u008f\uffff\1\u04ba\16\uffff\1\u04c0\1\u04bf"+
            "\7\uffff\1\u04b6\1\u04be\1\uffff\1\u04b0\1\u04b1\11\uffff\1"+
            "\u04b5\2\uffff\1\u04f3\1\uffff\1\u04b7\2\uffff\1\u04c1\1\u04b8"+
            "\1\u04b9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u052b\4\uffff\1\u0509\2\uffff\1\u0539\1\u050a\3\uffff\1"+
            "\u050b\1\u050c\1\u050d\1\u050e\1\u050f\1\u0510\1\u0511\1\u0512"+
            "\1\u0508\1\uffff\1\u04f9\6\uffff\1\u052e\1\uffff\1\u0530\1\u052c"+
            "\1\u052d\1\u052f\5\uffff\1\u04f8\1\u04f7\3\uffff\1\u0513\1\u0514"+
            "\1\u0515\11\uffff\1\u0519\1\u051a\1\u051b\1\u051d\1\u051e\1"+
            "\u051f\1\u0520\1\u0521\1\u0534\1\u0535\1\u0522\1\u0536\1\u0523"+
            "\1\u0524\1\u0525\1\u0526\1\u0527\1\u0537\1\uffff\1\u0528\1\uffff"+
            "\1\u0529\1\u051c\1\u0507\1\u052a\14\uffff\1\u0500\1\u0501\1"+
            "\u0502\5\uffff\1\u0531\1\u0532\1\u0533\2\uffff\1\u0516\1\uffff"+
            "\1\u0517\1\u0518\u008f\uffff\1\u04ff\16\uffff\1\u0505\1\u0504"+
            "\7\uffff\1\u04fb\1\u0503\1\uffff\1\u04f5\1\u04f6\11\uffff\1"+
            "\u04fa\2\uffff\1\u0538\1\uffff\1\u04fc\2\uffff\1\u0506\1\u04fd"+
            "\1\u04fe",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u056e\4\uffff\1\u054c\2\uffff\1\u057c\1\u054d\3\uffff\1"+
            "\u054e\1\u054f\1\u0550\1\u0551\1\u0552\1\u0553\1\u0554\1\u0555"+
            "\1\u054b\1\uffff\1\u053a\6\uffff\1\u0571\1\uffff\1\u0573\1\u056f"+
            "\1\u0570\1\u0572\12\uffff\1\u0556\1\u0557\1\u0558\11\uffff\1"+
            "\u055c\1\u055d\1\u055e\1\u0560\1\u0561\1\u0562\1\u0563\1\u0564"+
            "\1\u0577\1\u0578\1\u0565\1\u0579\1\u0566\1\u0567\1\u0568\1\u0569"+
            "\1\u056a\1\u057a\1\uffff\1\u056b\1\uffff\1\u056c\1\u055f\1\u054a"+
            "\1\u056d\14\uffff\1\u0543\1\u0544\1\u0545\5\uffff\1\u0574\1"+
            "\u0575\1\u0576\2\uffff\1\u0559\1\uffff\1\u055a\1\u055b\u008f"+
            "\uffff\1\u0540\16\uffff\1\u0548\1\u0547\7\uffff\1\u053c\1\u0546"+
            "\1\uffff\1\u0541\1\u0542\11\uffff\1\u053b\2\uffff\1\u057b\1"+
            "\uffff\1\u053d\2\uffff\1\u0549\1\u053e\1\u053f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b3\4\uffff\1\u0591\2\uffff\1\u05c1\1\u0592\3\uffff\1"+
            "\u0593\1\u0594\1\u0595\1\u0596\1\u0597\1\u0598\1\u0599\1\u059a"+
            "\1\u0590\1\uffff\1\u057f\6\uffff\1\u05b6\1\uffff\1\u05b8\1\u05b4"+
            "\1\u05b5\1\u05b7\5\uffff\1\u057e\1\u057d\3\uffff\1\u059b\1\u059c"+
            "\1\u059d\11\uffff\1\u05a1\1\u05a2\1\u05a3\1\u05a5\1\u05a6\1"+
            "\u05a7\1\u05a8\1\u05a9\1\u05bc\1\u05bd\1\u05aa\1\u05be\1\u05ab"+
            "\1\u05ac\1\u05ad\1\u05ae\1\u05af\1\u05bf\1\uffff\1\u05b0\1\uffff"+
            "\1\u05b1\1\u05a4\1\u058f\1\u05b2\14\uffff\1\u0588\1\u0589\1"+
            "\u058a\5\uffff\1\u05b9\1\u05ba\1\u05bb\2\uffff\1\u059e\1\uffff"+
            "\1\u059f\1\u05a0\u008f\uffff\1\u0585\16\uffff\1\u058d\1\u058c"+
            "\7\uffff\1\u0581\1\u058b\1\uffff\1\u0586\1\u0587\11\uffff\1"+
            "\u0580\2\uffff\1\u05c0\1\uffff\1\u0582\2\uffff\1\u058e\1\u0583"+
            "\1\u0584",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f8\4\uffff\1\u05d6\2\uffff\1\u0606\1\u05d7\3\uffff\1"+
            "\u05d8\1\u05d9\1\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df"+
            "\1\u05d5\1\uffff\1\u05c4\6\uffff\1\u05fb\1\uffff\1\u05fd\1\u05f9"+
            "\1\u05fa\1\u05fc\5\uffff\1\u05c3\1\u05c2\3\uffff\1\u05e0\1\u05e1"+
            "\1\u05e2\11\uffff\1\u05e6\1\u05e7\1\u05e8\1\u05ea\1\u05eb\1"+
            "\u05ec\1\u05ed\1\u05ee\1\u0601\1\u0602\1\u05ef\1\u0603\1\u05f0"+
            "\1\u05f1\1\u05f2\1\u05f3\1\u05f4\1\u0604\1\uffff\1\u05f5\1\uffff"+
            "\1\u05f6\1\u05e9\1\u05d4\1\u05f7\14\uffff\1\u05cd\1\u05ce\1"+
            "\u05cf\5\uffff\1\u05fe\1\u05ff\1\u0600\2\uffff\1\u05e3\1\uffff"+
            "\1\u05e4\1\u05e5\u008f\uffff\1\u05ca\16\uffff\1\u05d2\1\u05d1"+
            "\7\uffff\1\u05c6\1\u05d0\1\uffff\1\u05cb\1\u05cc\11\uffff\1"+
            "\u05c5\2\uffff\1\u0605\1\uffff\1\u05c7\2\uffff\1\u05d3\1\u05c8"+
            "\1\u05c9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u063d\4\uffff\1\u061b\2\uffff\1\u064b\1\u061c\3\uffff\1"+
            "\u061d\1\u061e\1\u061f\1\u0620\1\u0621\1\u0622\1\u0623\1\u0624"+
            "\1\u061a\1\uffff\1\u0609\6\uffff\1\u0640\1\uffff\1\u0642\1\u063e"+
            "\1\u063f\1\u0641\5\uffff\1\u0608\1\u0607\3\uffff\1\u0625\1\u0626"+
            "\1\u0627\11\uffff\1\u062b\1\u062c\1\u062d\1\u062f\1\u0630\1"+
            "\u0631\1\u0632\1\u0633\1\u0646\1\u0647\1\u0634\1\u0648\1\u0635"+
            "\1\u0636\1\u0637\1\u0638\1\u0639\1\u0649\1\uffff\1\u063a\1\uffff"+
            "\1\u063b\1\u062e\1\u0619\1\u063c\14\uffff\1\u0612\1\u0613\1"+
            "\u0614\5\uffff\1\u0643\1\u0644\1\u0645\2\uffff\1\u0628\1\uffff"+
            "\1\u0629\1\u062a\u008f\uffff\1\u060f\16\uffff\1\u0617\1\u0616"+
            "\7\uffff\1\u060b\1\u0615\1\uffff\1\u0610\1\u0611\11\uffff\1"+
            "\u060a\2\uffff\1\u064a\1\uffff\1\u060c\2\uffff\1\u0618\1\u060d"+
            "\1\u060e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0681\4\uffff\1\u065f\2\uffff\1\u068f\1\u0660\3\uffff\1"+
            "\u0661\1\u0662\1\u0663\1\u0664\1\u0665\1\u0666\1\u0667\1\u0668"+
            "\1\u065e\1\uffff\1\u064e\6\uffff\1\u0684\1\uffff\1\u0686\1\u0682"+
            "\1\u0683\1\u0685\12\uffff\1\u0669\1\u066a\1\u066b\11\uffff\1"+
            "\u066f\1\u0670\1\u0671\1\u0673\1\u0674\1\u0675\1\u0676\1\u0677"+
            "\1\u068a\1\u068b\1\u0678\1\u068c\1\u0679\1\u067a\1\u067b\1\u067c"+
            "\1\u067d\1\u068d\1\uffff\1\u067e\1\uffff\1\u067f\1\u0672\1\u065d"+
            "\1\u0680\14\uffff\1\u0657\1\u0658\1\u0659\5\uffff\1\u0687\1"+
            "\u0688\1\u0689\2\uffff\1\u066c\1\uffff\1\u066d\1\u066e\u008f"+
            "\uffff\1\u0654\16\uffff\1\u064d\1\u065b\5\uffff\1\u064c\1\uffff"+
            "\1\u0650\1\u065a\1\uffff\1\u0655\1\u0656\11\uffff\1\u064f\2"+
            "\uffff\1\u068e\1\uffff\1\u0651\2\uffff\1\u065c\1\u0652\1\u0653",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06c5\4\uffff\1\u06a3\2\uffff\1\u06d3\1\u06a4\3\uffff\1"+
            "\u06a5\1\u06a6\1\u06a7\1\u06a8\1\u06a9\1\u06aa\1\u06ab\1\u06ac"+
            "\1\u06a2\1\uffff\1\u0692\6\uffff\1\u06c8\1\uffff\1\u06ca\1\u06c6"+
            "\1\u06c7\1\u06c9\12\uffff\1\u06ad\1\u06ae\1\u06af\11\uffff\1"+
            "\u06b3\1\u06b4\1\u06b5\1\u06b7\1\u06b8\1\u06b9\1\u06ba\1\u06bb"+
            "\1\u06ce\1\u06cf\1\u06bc\1\u06d0\1\u06bd\1\u06be\1\u06bf\1\u06c0"+
            "\1\u06c1\1\u06d1\1\uffff\1\u06c2\1\uffff\1\u06c3\1\u06b6\1\u06a1"+
            "\1\u06c4\14\uffff\1\u069b\1\u069c\1\u069d\5\uffff\1\u06cb\1"+
            "\u06cc\1\u06cd\2\uffff\1\u06b0\1\uffff\1\u06b1\1\u06b2\u008f"+
            "\uffff\1\u0698\16\uffff\1\u0691\1\u069f\5\uffff\1\u0690\1\uffff"+
            "\1\u0694\1\u069e\1\uffff\1\u0699\1\u069a\11\uffff\1\u0693\2"+
            "\uffff\1\u06d2\1\uffff\1\u0695\2\uffff\1\u06a0\1\u0696\1\u0697",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0708\4\uffff\1\u06e6\2\uffff\1\u0716\1\u06e7\3\uffff\1"+
            "\u06e8\1\u06e9\1\u06ea\1\u06eb\1\u06ec\1\u06ed\1\u06ee\1\u06ef"+
            "\1\u06e5\1\uffff\1\u06d4\6\uffff\1\u070b\1\uffff\1\u070d\1\u0709"+
            "\1\u070a\1\u070c\12\uffff\1\u06f0\1\u06f1\1\u06f2\11\uffff\1"+
            "\u06f6\1\u06f7\1\u06f8\1\u06fa\1\u06fb\1\u06fc\1\u06fd\1\u06fe"+
            "\1\u0711\1\u0712\1\u06ff\1\u0713\1\u0700\1\u0701\1\u0702\1\u0703"+
            "\1\u0704\1\u0714\1\uffff\1\u0705\1\uffff\1\u0706\1\u06f9\1\u06e4"+
            "\1\u0707\14\uffff\1\u06dd\1\u06de\1\u06df\5\uffff\1\u070e\1"+
            "\u070f\1\u0710\2\uffff\1\u06f3\1\uffff\1\u06f4\1\u06f5\u008f"+
            "\uffff\1\u06da\16\uffff\1\u06e2\1\u06e1\7\uffff\1\u06d6\1\u06e0"+
            "\1\uffff\1\u06db\1\u06dc\11\uffff\1\u06d5\2\uffff\1\u0715\1"+
            "\uffff\1\u06d7\2\uffff\1\u06e3\1\u06d8\1\u06d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u074b\4\uffff\1\u0729\2\uffff\1\u0759\1\u072a\3\uffff\1"+
            "\u072b\1\u072c\1\u072d\1\u072e\1\u072f\1\u0730\1\u0731\1\u0732"+
            "\1\u0728\1\uffff\1\u0717\6\uffff\1\u074e\1\uffff\1\u0750\1\u074c"+
            "\1\u074d\1\u074f\12\uffff\1\u0733\1\u0734\1\u0735\11\uffff\1"+
            "\u0739\1\u073a\1\u073b\1\u073d\1\u073e\1\u073f\1\u0740\1\u0741"+
            "\1\u0754\1\u0755\1\u0742\1\u0756\1\u0743\1\u0744\1\u0745\1\u0746"+
            "\1\u0747\1\u0757\1\uffff\1\u0748\1\uffff\1\u0749\1\u073c\1\u0727"+
            "\1\u074a\14\uffff\1\u0720\1\u0721\1\u0722\5\uffff\1\u0751\1"+
            "\u0752\1\u0753\2\uffff\1\u0736\1\uffff\1\u0737\1\u0738\u008f"+
            "\uffff\1\u071d\16\uffff\1\u0725\1\u0724\7\uffff\1\u0719\1\u0723"+
            "\1\uffff\1\u071e\1\u071f\11\uffff\1\u0718\2\uffff\1\u0758\1"+
            "\uffff\1\u071a\2\uffff\1\u0726\1\u071b\1\u071c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u075a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0791\4\uffff\1\u076f\2\uffff\1\u079f\1\u0770\3\uffff\1"+
            "\u0771\1\u0772\1\u0773\1\u0774\1\u0775\1\u0776\1\u0777\1\u0778"+
            "\1\u076e\1\uffff\1\u075d\6\uffff\1\u0794\1\uffff\1\u0796\1\u0792"+
            "\1\u0793\1\u0795\12\uffff\1\u0779\1\u077a\1\u077b\11\uffff\1"+
            "\u077f\1\u0780\1\u0781\1\u0783\1\u0784\1\u0785\1\u0786\1\u0787"+
            "\1\u079a\1\u079b\1\u0788\1\u079c\1\u0789\1\u078a\1\u078b\1\u078c"+
            "\1\u078d\1\u079d\1\uffff\1\u078e\1\uffff\1\u078f\1\u0782\1\u076d"+
            "\1\u0790\14\uffff\1\u0766\1\u0767\1\u0768\5\uffff\1\u0797\1"+
            "\u0798\1\u0799\2\uffff\1\u077c\1\uffff\1\u077d\1\u077e\u008f"+
            "\uffff\1\u0763\16\uffff\1\u076b\1\u076a\7\uffff\1\u075f\1\u0769"+
            "\1\uffff\1\u0764\1\u0765\11\uffff\1\u075e\2\uffff\1\u079e\1"+
            "\uffff\1\u0760\2\uffff\1\u076c\1\u0761\1\u0762",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07d4\4\uffff\1\u07b2\2\uffff\1\u07e2\1\u07b3\3\uffff\1"+
            "\u07b4\1\u07b5\1\u07b6\1\u07b7\1\u07b8\1\u07b9\1\u07ba\1\u07bb"+
            "\1\u07b1\1\uffff\1\u07a0\6\uffff\1\u07d7\1\uffff\1\u07d9\1\u07d5"+
            "\1\u07d6\1\u07d8\12\uffff\1\u07bc\1\u07bd\1\u07be\11\uffff\1"+
            "\u07c2\1\u07c3\1\u07c4\1\u07c6\1\u07c7\1\u07c8\1\u07c9\1\u07ca"+
            "\1\u07dd\1\u07de\1\u07cb\1\u07df\1\u07cc\1\u07cd\1\u07ce\1\u07cf"+
            "\1\u07d0\1\u07e0\1\uffff\1\u07d1\1\uffff\1\u07d2\1\u07c5\1\u07b0"+
            "\1\u07d3\14\uffff\1\u07a9\1\u07aa\1\u07ab\5\uffff\1\u07da\1"+
            "\u07db\1\u07dc\2\uffff\1\u07bf\1\uffff\1\u07c0\1\u07c1\u008f"+
            "\uffff\1\u07a6\16\uffff\1\u07ae\1\u07ad\7\uffff\1\u07a2\1\u07ac"+
            "\1\uffff\1\u07a7\1\u07a8\11\uffff\1\u07a1\2\uffff\1\u07e1\1"+
            "\uffff\1\u07a3\2\uffff\1\u07af\1\u07a4\1\u07a5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0817\4\uffff\1\u07f5\2\uffff\1\u0825\1\u07f6\3\uffff\1"+
            "\u07f7\1\u07f8\1\u07f9\1\u07fa\1\u07fb\1\u07fc\1\u07fd\1\u07fe"+
            "\1\u07f4\1\uffff\1\u07e3\6\uffff\1\u081a\1\uffff\1\u081c\1\u0818"+
            "\1\u0819\1\u081b\12\uffff\1\u07ff\1\u0800\1\u0801\11\uffff\1"+
            "\u0805\1\u0806\1\u0807\1\u0809\1\u080a\1\u080b\1\u080c\1\u080d"+
            "\1\u0820\1\u0821\1\u080e\1\u0822\1\u080f\1\u0810\1\u0811\1\u0812"+
            "\1\u0813\1\u0823\1\uffff\1\u0814\1\uffff\1\u0815\1\u0808\1\u07f3"+
            "\1\u0816\14\uffff\1\u07ec\1\u07ed\1\u07ee\5\uffff\1\u081d\1"+
            "\u081e\1\u081f\2\uffff\1\u0802\1\uffff\1\u0803\1\u0804\u008f"+
            "\uffff\1\u07e9\16\uffff\1\u07f1\1\u07f0\7\uffff\1\u07e5\1\u07ef"+
            "\1\uffff\1\u07ea\1\u07eb\11\uffff\1\u07e4\2\uffff\1\u0824\1"+
            "\uffff\1\u07e6\2\uffff\1\u07f2\1\u07e7\1\u07e8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u085b\4\uffff\1\u0839\2\uffff\1\u0869\1\u083a\3\uffff\1"+
            "\u083b\1\u083c\1\u083d\1\u083e\1\u083f\1\u0840\1\u0841\1\u0842"+
            "\1\u0838\1\uffff\1\u0828\6\uffff\1\u085e\1\uffff\1\u0860\1\u085c"+
            "\1\u085d\1\u085f\12\uffff\1\u0843\1\u0844\1\u0845\11\uffff\1"+
            "\u0849\1\u084a\1\u084b\1\u084d\1\u084e\1\u084f\1\u0850\1\u0851"+
            "\1\u0864\1\u0865\1\u0852\1\u0866\1\u0853\1\u0854\1\u0855\1\u0856"+
            "\1\u0857\1\u0867\1\uffff\1\u0858\1\uffff\1\u0859\1\u084c\1\u0837"+
            "\1\u085a\14\uffff\1\u0831\1\u0832\1\u0833\5\uffff\1\u0861\1"+
            "\u0862\1\u0863\2\uffff\1\u0846\1\uffff\1\u0847\1\u0848\u008f"+
            "\uffff\1\u082e\16\uffff\1\u0827\1\u0835\5\uffff\1\u0826\1\uffff"+
            "\1\u082a\1\u0834\1\uffff\1\u082f\1\u0830\11\uffff\1\u0829\2"+
            "\uffff\1\u0868\1\uffff\1\u082b\2\uffff\1\u0836\1\u082c\1\u082d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0891\4\uffff\1\u086f\3\uffff\1\u0870\3\uffff\1\u0871\1"+
            "\u0872\1\u0873\1\u0874\1\u0875\1\u0876\1\u0877\1\u0878\1\u086e"+
            "\1\u086a\7\uffff\1\u0894\1\uffff\1\u0896\1\u0892\1\u0893\1\u0895"+
            "\12\uffff\1\u0879\1\u087a\1\u087b\11\uffff\1\u087f\1\u0880\1"+
            "\u0881\1\u0883\1\u0884\1\u0885\1\u0886\1\u0887\2\uffff\1\u0888"+
            "\1\uffff\1\u0889\1\u088a\1\u088b\1\u088c\1\u088d\2\uffff\1\u088e"+
            "\1\uffff\1\u088f\1\u0882\1\u086d\1\u0890\24\uffff\1\u0897\1"+
            "\u0898\1\u0899\2\uffff\1\u087c\1\uffff\1\u087d\1\u087e\u009e"+
            "\uffff\1\u086b\36\uffff\1\u086c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08af\1\u08b0\1\u08b1\1\u08b2\1\uffff\1\u08ac\1\u08ab\1"+
            "\u08ae\34\uffff\1\u08a5\u00ea\uffff\1\u08ad\1\u08a4\3\uffff"+
            "\1\u089a\1\u08a9\1\u089d\4\uffff\1\u08a8\1\u08aa\1\u08a6\1\u08a7"+
            "\1\u08a0\1\u08a1\1\u08a2\1\u08a3\1\u089f\1\u089e\1\u089b\1\u089c",
            "\1\u08c8\1\u08c9\1\u08ca\1\u08cb\1\uffff\1\u08c6\1\u08c5\1"+
            "\u08c7\34\uffff\1\u08bf\u00ea\uffff\1\u08b3\1\u08be\3\uffff"+
            "\1\u08b4\1\u08c3\1\u08b7\4\uffff\1\u08c2\1\u08c4\1\u08c0\1\u08c1"+
            "\1\u08ba\1\u08bb\1\u08bc\1\u08bd\1\u08b9\1\u08b8\1\u08b5\1\u08b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08e1\1\u08e2\1\u08e3\1\u08e4\1\uffff\1\u08de\1\u08dd\1"+
            "\u08e0\34\uffff\1\u08d7\u00ea\uffff\1\u08df\1\u08d6\3\uffff"+
            "\1\u08cc\1\u08db\1\u08cf\4\uffff\1\u08da\1\u08dc\1\u08d8\1\u08d9"+
            "\1\u08d2\1\u08d3\1\u08d4\1\u08d5\1\u08d1\1\u08d0\1\u08cd\1\u08ce",
            "\1\u08fa\1\u08fb\1\u08fc\1\u08fd\1\uffff\1\u08f8\1\u08f7\1"+
            "\u08f9\34\uffff\1\u08f1\u00ea\uffff\1\u08e5\1\u08f0\3\uffff"+
            "\1\u08e6\1\u08f5\1\u08e9\4\uffff\1\u08f4\1\u08f6\1\u08f2\1\u08f3"+
            "\1\u08ec\1\u08ed\1\u08ee\1\u08ef\1\u08eb\1\u08ea\1\u08e7\1\u08e8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0913\1\u0914\1\u0915\1\u0916\1\uffff\1\u0910\1\u090f\1"+
            "\u0912\34\uffff\1\u0909\u00ea\uffff\1\u0911\1\u0908\3\uffff"+
            "\1\u08fe\1\u090d\1\u0901\4\uffff\1\u090c\1\u090e\1\u090a\1\u090b"+
            "\1\u0904\1\u0905\1\u0906\1\u0907\1\u0903\1\u0902\1\u08ff\1\u0900",
            "\1\u092c\1\u092d\1\u092e\1\u092f\1\uffff\1\u092a\1\u0929\1"+
            "\u092b\34\uffff\1\u0923\u00ea\uffff\1\u0917\1\u0922\3\uffff"+
            "\1\u0918\1\u0927\1\u091b\4\uffff\1\u0926\1\u0928\1\u0924\1\u0925"+
            "\1\u091e\1\u091f\1\u0920\1\u0921\1\u091d\1\u091c\1\u0919\1\u091a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0946\1\u0947\1\u0948\1\u0949\1\uffff\1\u0943\1\u0942\1"+
            "\u0945\34\uffff\1\u093c\u00e7\uffff\1\u0944\2\uffff\1\16\1\u093b"+
            "\3\uffff\1\u0931\1\u0940\1\u0934\4\uffff\1\u093f\1\u0941\1\u093d"+
            "\1\u093e\1\u0937\1\u0938\1\u0939\1\u093a\1\u0936\1\u0935\1\u0932"+
            "\1\u0933",
            "\1\u0960\1\u0961\1\u0962\1\u0963\1\uffff\1\u095d\1\u095c\1"+
            "\u095f\34\uffff\1\u0956\u00e7\uffff\1\u095e\2\uffff\1\16\1\u0955"+
            "\3\uffff\1\u094b\1\u095a\1\u094e\4\uffff\1\u0959\1\u095b\1\u0957"+
            "\1\u0958\1\u0951\1\u0952\1\u0953\1\u0954\1\u0950\1\u094f\1\u094c"+
            "\1\u094d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0979\1\u097a\1\u097b\1\u097c\1\uffff\1\u0976\1\u0975\1"+
            "\u0978\34\uffff\1\u096f\u00ea\uffff\1\u0977\1\u096e\3\uffff"+
            "\1\u0964\1\u0973\1\u0967\4\uffff\1\u0972\1\u0974\1\u0970\1\u0971"+
            "\1\u096a\1\u096b\1\u096c\1\u096d\1\u0969\1\u0968\1\u0965\1\u0966",
            "\1\u0992\1\u0993\1\u0994\1\u0995\1\uffff\1\u0990\1\u098f\1"+
            "\u0991\34\uffff\1\u0989\u00ea\uffff\1\u097d\1\u0988\3\uffff"+
            "\1\u097e\1\u098d\1\u0981\4\uffff\1\u098c\1\u098e\1\u098a\1\u098b"+
            "\1\u0984\1\u0985\1\u0986\1\u0987\1\u0983\1\u0982\1\u097f\1\u0980",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09ab\1\u09ac\1\u09ad\1\u09ae\1\uffff\1\u09a8\1\u09a7\1"+
            "\u09aa\34\uffff\1\u09a1\u00ea\uffff\1\u09a9\1\u09a0\3\uffff"+
            "\1\u0996\1\u09a5\1\u0999\4\uffff\1\u09a4\1\u09a6\1\u09a2\1\u09a3"+
            "\1\u099c\1\u099d\1\u099e\1\u099f\1\u099b\1\u099a\1\u0997\1\u0998",
            "\1\u09c4\1\u09c5\1\u09c6\1\u09c7\1\uffff\1\u09c2\1\u09c1\1"+
            "\u09c3\34\uffff\1\u09bb\u00ea\uffff\1\u09af\1\u09ba\3\uffff"+
            "\1\u09b0\1\u09bf\1\u09b3\4\uffff\1\u09be\1\u09c0\1\u09bc\1\u09bd"+
            "\1\u09b6\1\u09b7\1\u09b8\1\u09b9\1\u09b5\1\u09b4\1\u09b1\1\u09b2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09dd\1\u09de\1\u09df\1\u09e0\1\uffff\1\u09da\1\u09d9\1"+
            "\u09dc\34\uffff\1\u09d3\u00ea\uffff\1\u09db\1\u09d2\3\uffff"+
            "\1\u09c8\1\u09d7\1\u09cb\4\uffff\1\u09d6\1\u09d8\1\u09d4\1\u09d5"+
            "\1\u09ce\1\u09cf\1\u09d0\1\u09d1\1\u09cd\1\u09cc\1\u09c9\1\u09ca",
            "\1\u09f6\1\u09f7\1\u09f8\1\u09f9\1\uffff\1\u09f4\1\u09f3\1"+
            "\u09f5\34\uffff\1\u09ed\u00ea\uffff\1\u09e1\1\u09ec\3\uffff"+
            "\1\u09e2\1\u09f1\1\u09e5\4\uffff\1\u09f0\1\u09f2\1\u09ee\1\u09ef"+
            "\1\u09e8\1\u09e9\1\u09ea\1\u09eb\1\u09e7\1\u09e6\1\u09e3\1\u09e4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a10\1\u0a11\1\u0a12\1\u0a13\1\uffff\1\u0a0c\1\u0a0b\1"+
            "\u0a0f\34\uffff\1\u0a05\u00e7\uffff\1\u0a0d\2\uffff\1\u0a0e"+
            "\1\u0a04\3\uffff\1\u09fa\1\u0a09\1\u09fd\4\uffff\1\u0a08\1\u0a0a"+
            "\1\u0a06\1\u0a07\1\u0a00\1\u0a01\1\u0a02\1\u0a03\1\u09ff\1\u09fe"+
            "\1\u09fb\1\u09fc",
            "\1\u0a2a\1\u0a2b\1\u0a2c\1\u0a2d\1\uffff\1\u0a27\1\u0a26\1"+
            "\u0a29\34\uffff\1\u0a20\u00e7\uffff\1\u0a28\2\uffff\1\u0a14"+
            "\1\u0a1f\3\uffff\1\u0a15\1\u0a24\1\u0a18\4\uffff\1\u0a23\1\u0a25"+
            "\1\u0a21\1\u0a22\1\u0a1b\1\u0a1c\1\u0a1d\1\u0a1e\1\u0a1a\1\u0a19"+
            "\1\u0a16\1\u0a17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a44\1\u0a45\1\u0a46\1\u0a47\1\uffff\1\u0a40\1\u0a3f\1"+
            "\u0a43\34\uffff\1\u0a39\u00e7\uffff\1\u0a41\2\uffff\1\u0a42"+
            "\1\u0a38\3\uffff\1\u0a2e\1\u0a3d\1\u0a31\4\uffff\1\u0a3c\1\u0a3e"+
            "\1\u0a3a\1\u0a3b\1\u0a34\1\u0a35\1\u0a36\1\u0a37\1\u0a33\1\u0a32"+
            "\1\u0a2f\1\u0a30",
            "\1\u0a5e\1\u0a5f\1\u0a60\1\u0a61\1\uffff\1\u0a5b\1\u0a5a\1"+
            "\u0a5d\34\uffff\1\u0a54\u00e7\uffff\1\u0a5c\2\uffff\1\u0a48"+
            "\1\u0a53\3\uffff\1\u0a49\1\u0a58\1\u0a4c\4\uffff\1\u0a57\1\u0a59"+
            "\1\u0a55\1\u0a56\1\u0a4f\1\u0a50\1\u0a51\1\u0a52\1\u0a4e\1\u0a4d"+
            "\1\u0a4a\1\u0a4b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a78\1\u0a79\1\u0a7a\1\u0a7b\1\uffff\1\u0a74\1\u0a73\1"+
            "\u0a77\34\uffff\1\u0a6d\u00e7\uffff\1\u0a75\2\uffff\1\u0a76"+
            "\1\u0a6c\3\uffff\1\u0a62\1\u0a71\1\u0a65\4\uffff\1\u0a70\1\u0a72"+
            "\1\u0a6e\1\u0a6f\1\u0a68\1\u0a69\1\u0a6a\1\u0a6b\1\u0a67\1\u0a66"+
            "\1\u0a63\1\u0a64",
            "\1\u0a92\1\u0a93\1\u0a94\1\u0a95\1\uffff\1\u0a8f\1\u0a8e\1"+
            "\u0a91\34\uffff\1\u0a88\u00e7\uffff\1\u0a90\2\uffff\1\u0a7c"+
            "\1\u0a87\3\uffff\1\u0a7d\1\u0a8c\1\u0a80\4\uffff\1\u0a8b\1\u0a8d"+
            "\1\u0a89\1\u0a8a\1\u0a83\1\u0a84\1\u0a85\1\u0a86\1\u0a82\1\u0a81"+
            "\1\u0a7e\1\u0a7f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0aac\1\u0aad\1\u0aae\1\u0aaf\1\uffff\1\u0aa8\1\u0aa7\1"+
            "\u0aab\34\uffff\1\u0aa1\u00e7\uffff\1\u0aa9\2\uffff\1\u0aaa"+
            "\1\u0aa0\3\uffff\1\u0a96\1\u0aa5\1\u0a99\4\uffff\1\u0aa4\1\u0aa6"+
            "\1\u0aa2\1\u0aa3\1\u0a9c\1\u0a9d\1\u0a9e\1\u0a9f\1\u0a9b\1\u0a9a"+
            "\1\u0a97\1\u0a98",
            "\1\u0ac6\1\u0ac7\1\u0ac8\1\u0ac9\1\uffff\1\u0ac3\1\u0ac2\1"+
            "\u0ac5\34\uffff\1\u0abc\u00e7\uffff\1\u0ac4\2\uffff\1\u0ab0"+
            "\1\u0abb\3\uffff\1\u0ab1\1\u0ac0\1\u0ab4\4\uffff\1\u0abf\1\u0ac1"+
            "\1\u0abd\1\u0abe\1\u0ab7\1\u0ab8\1\u0ab9\1\u0aba\1\u0ab6\1\u0ab5"+
            "\1\u0ab2\1\u0ab3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0adf\1\u0ae0\1\u0ae1\1\u0ae2\1\uffff\1\u0adc\1\u0adb\1"+
            "\u0ade\34\uffff\1\u0ad5\u00e7\uffff\1\u0add\2\uffff\1\16\1\u0ad4"+
            "\3\uffff\1\u0aca\1\u0ad9\1\u0acd\4\uffff\1\u0ad8\1\u0ada\1\u0ad6"+
            "\1\u0ad7\1\u0ad0\1\u0ad1\1\u0ad2\1\u0ad3\1\u0acf\1\u0ace\1\u0acb"+
            "\1\u0acc",
            "\1\u0afa\1\u0afb\1\u0afc\1\u0afd\1\uffff\1\u0af7\1\u0af6\1"+
            "\u0af9\34\uffff\1\u0af0\u00e7\uffff\1\u0af8\2\uffff\1\16\1\u0aef"+
            "\3\uffff\1\u0ae5\1\u0af4\1\u0ae8\4\uffff\1\u0af3\1\u0af5\1\u0af1"+
            "\1\u0af2\1\u0aeb\1\u0aec\1\u0aed\1\u0aee\1\u0aea\1\u0ae9\1\u0ae6"+
            "\1\u0ae7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b13\1\u0b14\1\u0b15\1\u0b16\1\uffff\1\u0b10\1\u0b0f\1"+
            "\u0b12\34\uffff\1\u0b09\u00ea\uffff\1\u0b11\1\u0b08\3\uffff"+
            "\1\u0afe\1\u0b0d\1\u0b01\4\uffff\1\u0b0c\1\u0b0e\1\u0b0a\1\u0b0b"+
            "\1\u0b04\1\u0b05\1\u0b06\1\u0b07\1\u0b03\1\u0b02\1\u0aff\1\u0b00",
            "\1\u0b2c\1\u0b2d\1\u0b2e\1\u0b2f\1\uffff\1\u0b2a\1\u0b29\1"+
            "\u0b2b\34\uffff\1\u0b23\u00ea\uffff\1\u0b17\1\u0b22\3\uffff"+
            "\1\u0b18\1\u0b27\1\u0b1b\4\uffff\1\u0b26\1\u0b28\1\u0b24\1\u0b25"+
            "\1\u0b1e\1\u0b1f\1\u0b20\1\u0b21\1\u0b1d\1\u0b1c\1\u0b19\1\u0b1a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b47\1\u0b48\1\u0b49\1\u0b4a\1\uffff\1\u0b43\1\u0b42\1"+
            "\u0b46\3\uffff\1\u0b45\30\uffff\1\u0b3c\u00e7\uffff\1\u0b44"+
            "\2\uffff\1\16\1\u0b3b\3\uffff\1\u0b31\1\u0b40\1\u0b34\4\uffff"+
            "\1\u0b3f\1\u0b41\1\u0b3d\1\u0b3e\1\u0b37\1\u0b38\1\u0b39\1\u0b3a"+
            "\1\u0b36\1\u0b35\1\u0b32\1\u0b33",
            "\1\u0b62\1\u0b63\1\u0b64\1\u0b65\1\uffff\1\u0b5e\1\u0b5d\1"+
            "\u0b61\3\uffff\1\u0b60\30\uffff\1\u0b57\u00e7\uffff\1\u0b5f"+
            "\2\uffff\1\16\1\u0b56\3\uffff\1\u0b4c\1\u0b5b\1\u0b4f\4\uffff"+
            "\1\u0b5a\1\u0b5c\1\u0b58\1\u0b59\1\u0b52\1\u0b53\1\u0b54\1\u0b55"+
            "\1\u0b51\1\u0b50\1\u0b4d\1\u0b4e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b7b\1\u0b7c\1\u0b7d\1\u0b7e\1\uffff\1\u0b78\1\u0b77\1"+
            "\u0b7a\34\uffff\1\u0b71\u00ea\uffff\1\u0b79\1\u0b70\3\uffff"+
            "\1\u0b66\1\u0b75\1\u0b69\4\uffff\1\u0b74\1\u0b76\1\u0b72\1\u0b73"+
            "\1\u0b6c\1\u0b6d\1\u0b6e\1\u0b6f\1\u0b6b\1\u0b6a\1\u0b67\1\u0b68",
            "\1\u0b94\1\u0b95\1\u0b96\1\u0b97\1\uffff\1\u0b92\1\u0b91\1"+
            "\u0b93\34\uffff\1\u0b8b\u00ea\uffff\1\u0b7f\1\u0b8a\3\uffff"+
            "\1\u0b80\1\u0b8f\1\u0b83\4\uffff\1\u0b8e\1\u0b90\1\u0b8c\1\u0b8d"+
            "\1\u0b86\1\u0b87\1\u0b88\1\u0b89\1\u0b85\1\u0b84\1\u0b81\1\u0b82",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;
    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }
    class DFA183 extends DFA {
        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "1235:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA183_0 = input.LA(1);
                        int index183_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_0==MINUS) ) {s = 1;}
                        else if ( ((LA183_0>=BOOLEAN_TRUE && LA183_0<=VALUE_NULL)||LA183_0==NUM_DOUBLE||LA183_0==PLUS||(LA183_0>=STRING_LITERAL && LA183_0<=QUOTED_STRING_LITERAL)||LA183_0==NUM_INT||(LA183_0>=NUM_LONG && LA183_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA183_0==QUESTION) ) {s = 12;}
                        else if ( (LA183_0==LPAREN) ) {s = 13;}
                        else if ( (LA183_0==ESCAPE||LA183_0==EVERY_EXPR||(LA183_0>=MAX && LA183_0<=MIN)||LA183_0==OUTER||(LA183_0>=JOIN && LA183_0<=FULL)||LA183_0==EVENTS||(LA183_0>=UNIDIRECTIONAL && LA183_0<=METADATASQL)||(LA183_0>=WEEKDAY && LA183_0<=LW)||LA183_0==SNAPSHOT||(LA183_0>=VARIABLE && LA183_0<=INDEX)||(LA183_0>=DEFINE && LA183_0<=MATCHES)||LA183_0==WHILE||(LA183_0>=MERGE && LA183_0<=MATCHED)||LA183_0==IDENT||LA183_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA183_0==COUNT) ) {s = 17;}
                        else if ( (LA183_0==SUM) ) {s = 20;}
                        else if ( (LA183_0==AVG) ) {s = 21;}
                        else if ( (LA183_0==COALESCE) ) {s = 24;}
                        else if ( (LA183_0==MEDIAN) ) {s = 25;}
                        else if ( (LA183_0==STDDEV) ) {s = 26;}
                        else if ( (LA183_0==AVEDEV) ) {s = 27;}
                        else if ( (LA183_0==FIRST) ) {s = 29;}
                        else if ( (LA183_0==LAST) ) {s = 30;}
                        else if ( (LA183_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA183_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA183_0==PRIOR) ) {s = 43;}
                        else if ( (LA183_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA183_0==TYPEOF) ) {s = 47;}
                        else if ( (LA183_0==CAST) ) {s = 48;}
                        else if ( (LA183_0==WINDOW) ) {s = 52;}
                        else if ( (LA183_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA183_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA183_0==EXISTS) ) {s = 63;}
                        else if ( (LA183_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA183_0==LCURLY) ) {s = 65;}
                        input.seek(index183_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA183_185 = input.LA(1);
                        int index183_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_185==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA183_185==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA183_185==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA183_185==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA183_185==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA183_185==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA183_185==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1136;}
                        else if ( (LA183_185==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1137;}
                        else if ( (LA183_185==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1138;}
                        else if ( (LA183_185==STRING_LITERAL) ) {s = 1139;}
                        else if ( (LA183_185==QUOTED_STRING_LITERAL) ) {s = 1140;}
                        else if ( (LA183_185==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA183_185==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA183_185==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA183_185==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA183_185==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA183_185==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA183_185==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA183_185==AT) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA183_185==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA183_185==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA183_185==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA183_185==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA183_185==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA183_185==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA183_185==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA183_185==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA183_185==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA183_185==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA183_185==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA183_185==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA183_185==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA183_185==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA183_185==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA183_185==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA183_185==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA183_185==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA183_185==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA183_185==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA183_185==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA183_185==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA183_185==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA183_185==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA183_185==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA183_185==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA183_185==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA183_185==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA183_185==LW) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA183_185==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA183_185==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA183_185==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA183_185==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA183_185==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA183_185==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA183_185==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA183_185==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA183_185==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA183_185==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA183_185==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA183_185==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA183_185==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA183_185==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA183_185==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA183_185==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA183_185==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA183_185==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA183_185==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA183_185==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA183_185==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA183_185==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        input.seek(index183_185);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA183_244 = input.LA(1);
                        int index183_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_244==STRING_LITERAL) ) {s = 1200;}
                        else if ( (LA183_244==QUOTED_STRING_LITERAL) ) {s = 1201;}
                        else if ( (LA183_244==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA183_244==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA183_244==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA183_244==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA183_244==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA183_244==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA183_244==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA183_244==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA183_244==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA183_244==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA183_244==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA183_244==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA183_244==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA183_244==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA183_244==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA183_244==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA183_244==AT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA183_244==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA183_244==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA183_244==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA183_244==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA183_244==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA183_244==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA183_244==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA183_244==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA183_244==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA183_244==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA183_244==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA183_244==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA183_244==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA183_244==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA183_244==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA183_244==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA183_244==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA183_244==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA183_244==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA183_244==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA183_244==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA183_244==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA183_244==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA183_244==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA183_244==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA183_244==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA183_244==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA183_244==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA183_244==LW) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA183_244==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA183_244==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA183_244==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA183_244==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA183_244==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA183_244==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA183_244==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA183_244==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA183_244==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA183_244==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA183_244==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA183_244==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA183_244==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA183_244==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA183_244==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA183_244==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA183_244==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA183_244==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA183_244==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA183_244==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA183_244==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        input.seek(index183_244);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA183_303 = input.LA(1);
                        int index183_303 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_303==STRING_LITERAL) ) {s = 1269;}
                        else if ( (LA183_303==QUOTED_STRING_LITERAL) ) {s = 1270;}
                        else if ( (LA183_303==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA183_303==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA183_303==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA183_303==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA183_303==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA183_303==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA183_303==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA183_303==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA183_303==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA183_303==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA183_303==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA183_303==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA183_303==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA183_303==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA183_303==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA183_303==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA183_303==AT) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA183_303==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA183_303==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA183_303==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA183_303==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA183_303==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA183_303==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA183_303==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA183_303==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA183_303==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA183_303==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA183_303==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA183_303==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA183_303==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA183_303==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA183_303==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA183_303==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA183_303==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA183_303==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA183_303==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA183_303==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA183_303==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA183_303==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA183_303==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA183_303==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA183_303==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA183_303==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA183_303==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA183_303==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA183_303==LW) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA183_303==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA183_303==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA183_303==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA183_303==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA183_303==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA183_303==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA183_303==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA183_303==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA183_303==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA183_303==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA183_303==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA183_303==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA183_303==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA183_303==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA183_303==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA183_303==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA183_303==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA183_303==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA183_303==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA183_303==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA183_303==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        input.seek(index183_303);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA183_362 = input.LA(1);
                        int index183_362 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_362==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA183_362==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA183_362==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA183_362==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA183_362==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA183_362==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA183_362==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA183_362==STRING_LITERAL) ) {s = 1345;}
                        else if ( (LA183_362==QUOTED_STRING_LITERAL) ) {s = 1346;}
                        else if ( (LA183_362==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA183_362==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA183_362==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA183_362==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA183_362==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA183_362==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA183_362==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA183_362==AT) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA183_362==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA183_362==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA183_362==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA183_362==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA183_362==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA183_362==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA183_362==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA183_362==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA183_362==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA183_362==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA183_362==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA183_362==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA183_362==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA183_362==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA183_362==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA183_362==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA183_362==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA183_362==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA183_362==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA183_362==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA183_362==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA183_362==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA183_362==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA183_362==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA183_362==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA183_362==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA183_362==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA183_362==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA183_362==LW) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA183_362==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA183_362==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA183_362==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA183_362==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA183_362==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA183_362==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA183_362==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA183_362==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA183_362==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA183_362==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA183_362==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA183_362==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA183_362==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA183_362==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA183_362==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA183_362==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA183_362==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA183_362==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA183_362==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA183_362==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA183_362==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        input.seek(index183_362);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA183_421 = input.LA(1);
                        int index183_421 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_421==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA183_421==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA183_421==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA183_421==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA183_421==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA183_421==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA183_421==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA183_421==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA183_421==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA183_421==STRING_LITERAL) ) {s = 1414;}
                        else if ( (LA183_421==QUOTED_STRING_LITERAL) ) {s = 1415;}
                        else if ( (LA183_421==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA183_421==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA183_421==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA183_421==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA183_421==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA183_421==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA183_421==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA183_421==AT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA183_421==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA183_421==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA183_421==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA183_421==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA183_421==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA183_421==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA183_421==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA183_421==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA183_421==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA183_421==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA183_421==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA183_421==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA183_421==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA183_421==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA183_421==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA183_421==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA183_421==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA183_421==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA183_421==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA183_421==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA183_421==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA183_421==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA183_421==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA183_421==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA183_421==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA183_421==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA183_421==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA183_421==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA183_421==LW) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA183_421==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA183_421==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA183_421==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA183_421==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA183_421==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA183_421==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA183_421==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA183_421==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA183_421==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA183_421==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA183_421==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA183_421==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA183_421==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA183_421==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA183_421==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA183_421==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA183_421==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA183_421==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA183_421==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA183_421==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA183_421==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        input.seek(index183_421);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA183_480 = input.LA(1);
                        int index183_480 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_480==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA183_480==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA183_480==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA183_480==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA183_480==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA183_480==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA183_480==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA183_480==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA183_480==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA183_480==STRING_LITERAL) ) {s = 1483;}
                        else if ( (LA183_480==QUOTED_STRING_LITERAL) ) {s = 1484;}
                        else if ( (LA183_480==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA183_480==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA183_480==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA183_480==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA183_480==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA183_480==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA183_480==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA183_480==AT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA183_480==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA183_480==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA183_480==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA183_480==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA183_480==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA183_480==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA183_480==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA183_480==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA183_480==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA183_480==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA183_480==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA183_480==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA183_480==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA183_480==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA183_480==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA183_480==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA183_480==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA183_480==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA183_480==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA183_480==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA183_480==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA183_480==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA183_480==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA183_480==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA183_480==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA183_480==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA183_480==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA183_480==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA183_480==LW) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA183_480==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA183_480==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA183_480==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA183_480==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA183_480==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA183_480==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA183_480==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA183_480==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA183_480==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA183_480==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA183_480==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA183_480==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA183_480==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA183_480==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA183_480==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA183_480==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA183_480==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA183_480==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA183_480==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA183_480==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA183_480==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        input.seek(index183_480);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA183_539 = input.LA(1);
                        int index183_539 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_539==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA183_539==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA183_539==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA183_539==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA183_539==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA183_539==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA183_539==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA183_539==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA183_539==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA183_539==STRING_LITERAL) ) {s = 1552;}
                        else if ( (LA183_539==QUOTED_STRING_LITERAL) ) {s = 1553;}
                        else if ( (LA183_539==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA183_539==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA183_539==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA183_539==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA183_539==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA183_539==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA183_539==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA183_539==AT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA183_539==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA183_539==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA183_539==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA183_539==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA183_539==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA183_539==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA183_539==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA183_539==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA183_539==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA183_539==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA183_539==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA183_539==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA183_539==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA183_539==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA183_539==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA183_539==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA183_539==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA183_539==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA183_539==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA183_539==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA183_539==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA183_539==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA183_539==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA183_539==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA183_539==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA183_539==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA183_539==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA183_539==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA183_539==LW) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA183_539==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA183_539==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA183_539==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA183_539==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA183_539==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA183_539==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA183_539==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA183_539==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA183_539==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA183_539==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA183_539==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA183_539==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA183_539==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA183_539==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA183_539==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA183_539==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA183_539==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA183_539==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA183_539==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA183_539==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA183_539==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        input.seek(index183_539);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA183_598 = input.LA(1);
                        int index183_598 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_598==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA183_598==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA183_598==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA183_598==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA183_598==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA183_598==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA183_598==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA183_598==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA183_598==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA183_598==STRING_LITERAL) ) {s = 1621;}
                        else if ( (LA183_598==QUOTED_STRING_LITERAL) ) {s = 1622;}
                        else if ( (LA183_598==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA183_598==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA183_598==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA183_598==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA183_598==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA183_598==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA183_598==AT) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA183_598==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA183_598==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA183_598==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA183_598==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA183_598==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA183_598==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA183_598==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA183_598==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA183_598==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA183_598==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA183_598==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA183_598==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA183_598==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA183_598==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA183_598==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA183_598==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA183_598==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA183_598==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA183_598==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA183_598==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA183_598==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA183_598==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA183_598==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA183_598==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA183_598==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA183_598==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA183_598==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA183_598==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA183_598==LW) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA183_598==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA183_598==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA183_598==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA183_598==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA183_598==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA183_598==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA183_598==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA183_598==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA183_598==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA183_598==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA183_598==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA183_598==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA183_598==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA183_598==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA183_598==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA183_598==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA183_598==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA183_598==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA183_598==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA183_598==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA183_598==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        input.seek(index183_598);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA183_657 = input.LA(1);
                        int index183_657 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_657==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA183_657==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA183_657==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA183_657==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA183_657==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA183_657==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA183_657==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA183_657==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA183_657==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA183_657==STRING_LITERAL) ) {s = 1689;}
                        else if ( (LA183_657==QUOTED_STRING_LITERAL) ) {s = 1690;}
                        else if ( (LA183_657==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA183_657==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA183_657==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA183_657==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA183_657==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA183_657==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA183_657==AT) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA183_657==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA183_657==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA183_657==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA183_657==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA183_657==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA183_657==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA183_657==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA183_657==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA183_657==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA183_657==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA183_657==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA183_657==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA183_657==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA183_657==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA183_657==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA183_657==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA183_657==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA183_657==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA183_657==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA183_657==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA183_657==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA183_657==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA183_657==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA183_657==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA183_657==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA183_657==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA183_657==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA183_657==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA183_657==LW) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA183_657==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA183_657==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA183_657==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA183_657==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA183_657==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA183_657==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA183_657==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA183_657==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA183_657==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA183_657==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA183_657==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA183_657==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA183_657==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA183_657==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA183_657==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA183_657==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA183_657==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA183_657==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA183_657==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA183_657==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA183_657==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        input.seek(index183_657);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA183_716 = input.LA(1);
                        int index183_716 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_716==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA183_716==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA183_716==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA183_716==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA183_716==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA183_716==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA183_716==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA183_716==STRING_LITERAL) ) {s = 1755;}
                        else if ( (LA183_716==QUOTED_STRING_LITERAL) ) {s = 1756;}
                        else if ( (LA183_716==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA183_716==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA183_716==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA183_716==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA183_716==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA183_716==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA183_716==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA183_716==AT) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA183_716==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA183_716==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA183_716==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA183_716==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA183_716==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA183_716==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA183_716==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA183_716==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA183_716==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA183_716==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA183_716==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA183_716==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA183_716==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA183_716==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA183_716==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA183_716==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA183_716==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA183_716==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA183_716==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA183_716==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA183_716==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA183_716==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA183_716==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA183_716==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA183_716==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA183_716==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA183_716==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA183_716==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA183_716==LW) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA183_716==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA183_716==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA183_716==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA183_716==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA183_716==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA183_716==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA183_716==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA183_716==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA183_716==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA183_716==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA183_716==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA183_716==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA183_716==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA183_716==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA183_716==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA183_716==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA183_716==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA183_716==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA183_716==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA183_716==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA183_716==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        input.seek(index183_716);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA183_775 = input.LA(1);
                        int index183_775 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_775==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA183_775==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA183_775==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA183_775==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA183_775==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA183_775==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA183_775==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA183_775==STRING_LITERAL) ) {s = 1822;}
                        else if ( (LA183_775==QUOTED_STRING_LITERAL) ) {s = 1823;}
                        else if ( (LA183_775==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA183_775==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA183_775==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA183_775==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA183_775==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA183_775==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA183_775==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA183_775==AT) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA183_775==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA183_775==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA183_775==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA183_775==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA183_775==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA183_775==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA183_775==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA183_775==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA183_775==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA183_775==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA183_775==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA183_775==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA183_775==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA183_775==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA183_775==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA183_775==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA183_775==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA183_775==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA183_775==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA183_775==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA183_775==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA183_775==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA183_775==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA183_775==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA183_775==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA183_775==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA183_775==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA183_775==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA183_775==LW) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA183_775==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA183_775==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA183_775==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA183_775==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA183_775==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA183_775==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA183_775==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA183_775==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA183_775==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA183_775==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA183_775==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA183_775==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA183_775==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA183_775==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA183_775==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA183_775==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA183_775==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA183_775==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA183_775==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA183_775==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA183_775==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        input.seek(index183_775);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA183_834 = input.LA(1);
                        int index183_834 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_834==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( ((LA183_834>=STRING_LITERAL && LA183_834<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index183_834);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA183_893 = input.LA(1);
                        int index183_893 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_893==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA183_893==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA183_893==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA183_893==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA183_893==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA183_893==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA183_893==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA183_893==STRING_LITERAL) ) {s = 1892;}
                        else if ( (LA183_893==QUOTED_STRING_LITERAL) ) {s = 1893;}
                        else if ( (LA183_893==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA183_893==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA183_893==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA183_893==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA183_893==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA183_893==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA183_893==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA183_893==AT) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA183_893==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA183_893==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA183_893==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA183_893==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA183_893==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA183_893==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA183_893==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA183_893==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA183_893==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA183_893==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA183_893==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA183_893==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA183_893==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA183_893==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA183_893==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA183_893==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA183_893==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA183_893==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA183_893==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA183_893==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA183_893==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA183_893==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA183_893==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA183_893==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA183_893==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA183_893==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA183_893==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA183_893==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA183_893==LW) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA183_893==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA183_893==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA183_893==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA183_893==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA183_893==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA183_893==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA183_893==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA183_893==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA183_893==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA183_893==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA183_893==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA183_893==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA183_893==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA183_893==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA183_893==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA183_893==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA183_893==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA183_893==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA183_893==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA183_893==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA183_893==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        input.seek(index183_893);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA183_952 = input.LA(1);
                        int index183_952 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_952==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA183_952==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA183_952==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA183_952==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA183_952==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA183_952==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA183_952==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA183_952==STRING_LITERAL) ) {s = 1959;}
                        else if ( (LA183_952==QUOTED_STRING_LITERAL) ) {s = 1960;}
                        else if ( (LA183_952==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA183_952==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA183_952==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA183_952==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA183_952==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA183_952==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA183_952==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA183_952==AT) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA183_952==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA183_952==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA183_952==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA183_952==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA183_952==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA183_952==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA183_952==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA183_952==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA183_952==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA183_952==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA183_952==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA183_952==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA183_952==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA183_952==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA183_952==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA183_952==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA183_952==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA183_952==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA183_952==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA183_952==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA183_952==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA183_952==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA183_952==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA183_952==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA183_952==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA183_952==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA183_952==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA183_952==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA183_952==LW) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA183_952==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA183_952==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA183_952==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA183_952==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA183_952==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA183_952==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA183_952==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA183_952==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA183_952==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA183_952==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA183_952==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA183_952==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA183_952==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA183_952==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA183_952==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA183_952==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA183_952==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA183_952==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA183_952==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA183_952==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA183_952==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        input.seek(index183_952);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA183_1011 = input.LA(1);
                        int index183_1011 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1011==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA183_1011==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA183_1011==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA183_1011==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA183_1011==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA183_1011==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA183_1011==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA183_1011==STRING_LITERAL) ) {s = 2026;}
                        else if ( (LA183_1011==QUOTED_STRING_LITERAL) ) {s = 2027;}
                        else if ( (LA183_1011==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA183_1011==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA183_1011==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA183_1011==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA183_1011==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA183_1011==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA183_1011==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA183_1011==AT) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA183_1011==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA183_1011==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA183_1011==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA183_1011==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA183_1011==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA183_1011==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA183_1011==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA183_1011==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA183_1011==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA183_1011==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA183_1011==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA183_1011==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA183_1011==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA183_1011==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA183_1011==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA183_1011==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA183_1011==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA183_1011==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA183_1011==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA183_1011==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA183_1011==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA183_1011==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA183_1011==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA183_1011==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA183_1011==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA183_1011==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA183_1011==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA183_1011==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA183_1011==LW) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA183_1011==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA183_1011==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA183_1011==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA183_1011==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA183_1011==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA183_1011==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA183_1011==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA183_1011==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA183_1011==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA183_1011==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA183_1011==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA183_1011==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA183_1011==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA183_1011==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA183_1011==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA183_1011==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA183_1011==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA183_1011==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA183_1011==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA183_1011==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA183_1011==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        input.seek(index183_1011);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA183_1070 = input.LA(1);
                        int index183_1070 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1070==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA183_1070==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA183_1070==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA183_1070==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA183_1070==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA183_1070==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA183_1070==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA183_1070==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA183_1070==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA183_1070==STRING_LITERAL) ) {s = 2095;}
                        else if ( (LA183_1070==QUOTED_STRING_LITERAL) ) {s = 2096;}
                        else if ( (LA183_1070==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA183_1070==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA183_1070==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA183_1070==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA183_1070==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA183_1070==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA183_1070==AT) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA183_1070==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA183_1070==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA183_1070==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA183_1070==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA183_1070==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA183_1070==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA183_1070==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA183_1070==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA183_1070==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA183_1070==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA183_1070==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA183_1070==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA183_1070==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA183_1070==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA183_1070==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA183_1070==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA183_1070==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA183_1070==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA183_1070==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA183_1070==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA183_1070==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA183_1070==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA183_1070==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA183_1070==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA183_1070==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA183_1070==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA183_1070==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA183_1070==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA183_1070==LW) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA183_1070==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA183_1070==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA183_1070==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA183_1070==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA183_1070==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA183_1070==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA183_1070==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA183_1070==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA183_1070==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA183_1070==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA183_1070==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA183_1070==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA183_1070==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA183_1070==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA183_1070==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA183_1070==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA183_1070==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA183_1070==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA183_1070==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA183_1070==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA183_1070==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        input.seek(index183_1070);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA183_1129 = input.LA(1);
                        int index183_1129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1129==SELECT) ) {s = 2154;}
                        else if ( (LA183_1129==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA183_1129==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA183_1129==AT) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA183_1129==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA183_1129==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA183_1129==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA183_1129==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA183_1129==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA183_1129==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA183_1129==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA183_1129==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA183_1129==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA183_1129==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA183_1129==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA183_1129==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA183_1129==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA183_1129==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA183_1129==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA183_1129==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA183_1129==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA183_1129==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA183_1129==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA183_1129==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA183_1129==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA183_1129==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA183_1129==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA183_1129==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA183_1129==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA183_1129==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA183_1129==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA183_1129==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA183_1129==LW) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA183_1129==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA183_1129==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA183_1129==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA183_1129==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA183_1129==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA183_1129==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA183_1129==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA183_1129==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA183_1129==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA183_1129==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA183_1129==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA183_1129==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA183_1129==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA183_1129==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA183_1129==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        input.seek(index183_1129);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA183_1139 = input.LA(1);
                        int index183_1139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1139==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA183_1139==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA183_1139==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA183_1139==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA183_1139==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA183_1139==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA183_1139==LT) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA183_1139==GT) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA183_1139==LE) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA183_1139==GE) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA183_1139==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA183_1139==IS) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA183_1139==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA183_1139==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA183_1139==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA183_1139==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA183_1139==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA183_1139==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA183_1139==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA183_1139==RPAREN) ) {s = 2221;}
                        else if ( (LA183_1139==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA183_1139==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA183_1139==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA183_1139==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA183_1139==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        input.seek(index183_1139);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA183_1140 = input.LA(1);
                        int index183_1140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1140==RPAREN) ) {s = 2227;}
                        else if ( (LA183_1140==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA183_1140==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA183_1140==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA183_1140==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA183_1140==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA183_1140==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA183_1140==LT) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA183_1140==GT) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA183_1140==LE) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA183_1140==GE) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA183_1140==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA183_1140==IS) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA183_1140==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA183_1140==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA183_1140==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA183_1140==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA183_1140==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA183_1140==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA183_1140==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA183_1140==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA183_1140==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA183_1140==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA183_1140==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA183_1140==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        input.seek(index183_1140);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA183_1200 = input.LA(1);
                        int index183_1200 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1200==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA183_1200==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA183_1200==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA183_1200==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA183_1200==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA183_1200==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA183_1200==LT) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA183_1200==GT) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA183_1200==LE) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA183_1200==GE) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA183_1200==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA183_1200==IS) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA183_1200==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA183_1200==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA183_1200==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA183_1200==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA183_1200==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA183_1200==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA183_1200==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA183_1200==RPAREN) ) {s = 2271;}
                        else if ( (LA183_1200==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA183_1200==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA183_1200==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA183_1200==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA183_1200==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        input.seek(index183_1200);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA183_1201 = input.LA(1);
                        int index183_1201 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1201==RPAREN) ) {s = 2277;}
                        else if ( (LA183_1201==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA183_1201==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA183_1201==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA183_1201==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA183_1201==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA183_1201==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA183_1201==LT) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA183_1201==GT) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA183_1201==LE) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA183_1201==GE) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA183_1201==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA183_1201==IS) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA183_1201==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA183_1201==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA183_1201==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA183_1201==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA183_1201==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA183_1201==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA183_1201==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA183_1201==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA183_1201==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA183_1201==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA183_1201==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA183_1201==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        input.seek(index183_1201);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA183_1269 = input.LA(1);
                        int index183_1269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1269==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA183_1269==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA183_1269==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA183_1269==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA183_1269==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA183_1269==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA183_1269==LT) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA183_1269==GT) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA183_1269==LE) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA183_1269==GE) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA183_1269==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA183_1269==IS) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA183_1269==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA183_1269==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA183_1269==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA183_1269==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA183_1269==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA183_1269==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA183_1269==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA183_1269==RPAREN) ) {s = 2321;}
                        else if ( (LA183_1269==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA183_1269==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA183_1269==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA183_1269==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA183_1269==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        input.seek(index183_1269);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA183_1270 = input.LA(1);
                        int index183_1270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1270==RPAREN) ) {s = 2327;}
                        else if ( (LA183_1270==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA183_1270==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA183_1270==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA183_1270==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA183_1270==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA183_1270==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA183_1270==LT) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA183_1270==GT) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA183_1270==LE) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA183_1270==GE) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA183_1270==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA183_1270==IS) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA183_1270==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA183_1270==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA183_1270==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA183_1270==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA183_1270==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA183_1270==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA183_1270==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA183_1270==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA183_1270==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA183_1270==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA183_1270==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA183_1270==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        input.seek(index183_1270);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA183_1345 = input.LA(1);
                        int index183_1345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1345==RPAREN) ) {s = 14;}
                        else if ( (LA183_1345==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA183_1345==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA183_1345==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA183_1345==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA183_1345==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA183_1345==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA183_1345==LT) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA183_1345==GT) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA183_1345==LE) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA183_1345==GE) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA183_1345==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA183_1345==IS) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA183_1345==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA183_1345==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA183_1345==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA183_1345==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA183_1345==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA183_1345==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA183_1345==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA183_1345==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA183_1345==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA183_1345==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA183_1345==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA183_1345==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA183_1345==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        input.seek(index183_1345);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA183_1346 = input.LA(1);
                        int index183_1346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1346==RPAREN) ) {s = 14;}
                        else if ( (LA183_1346==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA183_1346==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA183_1346==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA183_1346==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA183_1346==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA183_1346==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA183_1346==LT) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA183_1346==GT) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA183_1346==LE) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA183_1346==GE) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA183_1346==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA183_1346==IS) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA183_1346==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA183_1346==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA183_1346==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA183_1346==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA183_1346==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA183_1346==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA183_1346==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA183_1346==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA183_1346==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA183_1346==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA183_1346==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA183_1346==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA183_1346==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        input.seek(index183_1346);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA183_1414 = input.LA(1);
                        int index183_1414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1414==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA183_1414==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA183_1414==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA183_1414==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA183_1414==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA183_1414==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA183_1414==LT) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA183_1414==GT) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA183_1414==LE) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA183_1414==GE) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA183_1414==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA183_1414==IS) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA183_1414==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA183_1414==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA183_1414==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA183_1414==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA183_1414==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA183_1414==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA183_1414==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA183_1414==RPAREN) ) {s = 2423;}
                        else if ( (LA183_1414==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA183_1414==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA183_1414==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA183_1414==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA183_1414==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        input.seek(index183_1414);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA183_1415 = input.LA(1);
                        int index183_1415 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1415==RPAREN) ) {s = 2429;}
                        else if ( (LA183_1415==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA183_1415==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA183_1415==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA183_1415==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA183_1415==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA183_1415==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA183_1415==LT) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA183_1415==GT) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA183_1415==LE) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA183_1415==GE) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA183_1415==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA183_1415==IS) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA183_1415==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA183_1415==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA183_1415==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA183_1415==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA183_1415==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA183_1415==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA183_1415==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA183_1415==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA183_1415==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA183_1415==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA183_1415==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA183_1415==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        input.seek(index183_1415);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA183_1483 = input.LA(1);
                        int index183_1483 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1483==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA183_1483==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA183_1483==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA183_1483==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA183_1483==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA183_1483==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA183_1483==LT) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA183_1483==GT) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA183_1483==LE) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA183_1483==GE) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA183_1483==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA183_1483==IS) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA183_1483==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA183_1483==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA183_1483==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA183_1483==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA183_1483==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA183_1483==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA183_1483==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA183_1483==RPAREN) ) {s = 2473;}
                        else if ( (LA183_1483==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA183_1483==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA183_1483==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA183_1483==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA183_1483==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        input.seek(index183_1483);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA183_1484 = input.LA(1);
                        int index183_1484 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1484==RPAREN) ) {s = 2479;}
                        else if ( (LA183_1484==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA183_1484==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA183_1484==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA183_1484==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA183_1484==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA183_1484==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA183_1484==LT) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA183_1484==GT) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA183_1484==LE) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA183_1484==GE) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA183_1484==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA183_1484==IS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA183_1484==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA183_1484==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA183_1484==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA183_1484==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA183_1484==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA183_1484==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA183_1484==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA183_1484==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA183_1484==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA183_1484==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA183_1484==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA183_1484==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        input.seek(index183_1484);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA183_1552 = input.LA(1);
                        int index183_1552 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1552==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA183_1552==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA183_1552==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA183_1552==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA183_1552==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA183_1552==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA183_1552==LT) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA183_1552==GT) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA183_1552==LE) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA183_1552==GE) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA183_1552==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA183_1552==IS) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA183_1552==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA183_1552==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA183_1552==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA183_1552==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA183_1552==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA183_1552==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA183_1552==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA183_1552==RPAREN) ) {s = 2523;}
                        else if ( (LA183_1552==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA183_1552==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA183_1552==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA183_1552==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA183_1552==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        input.seek(index183_1552);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA183_1553 = input.LA(1);
                        int index183_1553 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1553==RPAREN) ) {s = 2529;}
                        else if ( (LA183_1553==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA183_1553==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA183_1553==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA183_1553==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA183_1553==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA183_1553==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA183_1553==LT) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA183_1553==GT) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA183_1553==LE) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA183_1553==GE) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA183_1553==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA183_1553==IS) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA183_1553==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA183_1553==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA183_1553==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA183_1553==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA183_1553==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA183_1553==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA183_1553==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA183_1553==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA183_1553==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA183_1553==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA183_1553==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA183_1553==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        input.seek(index183_1553);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA183_1621 = input.LA(1);
                        int index183_1621 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1621==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA183_1621==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA183_1621==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA183_1621==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA183_1621==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA183_1621==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA183_1621==LT) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA183_1621==GT) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA183_1621==LE) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA183_1621==GE) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA183_1621==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA183_1621==IS) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA183_1621==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA183_1621==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA183_1621==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA183_1621==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA183_1621==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA183_1621==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA183_1621==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA183_1621==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA183_1621==RPAREN) ) {s = 2574;}
                        else if ( (LA183_1621==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA183_1621==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA183_1621==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA183_1621==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA183_1621==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        input.seek(index183_1621);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA183_1622 = input.LA(1);
                        int index183_1622 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1622==RPAREN) ) {s = 2580;}
                        else if ( (LA183_1622==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA183_1622==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA183_1622==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA183_1622==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA183_1622==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA183_1622==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA183_1622==LT) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA183_1622==GT) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA183_1622==LE) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA183_1622==GE) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA183_1622==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA183_1622==IS) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA183_1622==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA183_1622==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA183_1622==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA183_1622==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA183_1622==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA183_1622==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA183_1622==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA183_1622==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA183_1622==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA183_1622==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA183_1622==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA183_1622==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA183_1622==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        input.seek(index183_1622);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA183_1689 = input.LA(1);
                        int index183_1689 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1689==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA183_1689==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA183_1689==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA183_1689==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA183_1689==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA183_1689==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA183_1689==LT) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA183_1689==GT) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA183_1689==LE) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA183_1689==GE) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA183_1689==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA183_1689==IS) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA183_1689==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA183_1689==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA183_1689==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA183_1689==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA183_1689==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA183_1689==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA183_1689==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA183_1689==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA183_1689==RPAREN) ) {s = 2626;}
                        else if ( (LA183_1689==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA183_1689==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA183_1689==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA183_1689==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA183_1689==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        input.seek(index183_1689);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA183_1690 = input.LA(1);
                        int index183_1690 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1690==RPAREN) ) {s = 2632;}
                        else if ( (LA183_1690==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA183_1690==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA183_1690==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA183_1690==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA183_1690==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA183_1690==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA183_1690==LT) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA183_1690==GT) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA183_1690==LE) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA183_1690==GE) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA183_1690==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA183_1690==IS) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA183_1690==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA183_1690==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA183_1690==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA183_1690==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA183_1690==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA183_1690==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA183_1690==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA183_1690==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA183_1690==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA183_1690==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA183_1690==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA183_1690==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA183_1690==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        input.seek(index183_1690);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA183_1755 = input.LA(1);
                        int index183_1755 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1755==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA183_1755==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA183_1755==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA183_1755==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA183_1755==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA183_1755==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA183_1755==LT) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA183_1755==GT) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA183_1755==LE) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA183_1755==GE) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA183_1755==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA183_1755==IS) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA183_1755==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA183_1755==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA183_1755==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA183_1755==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA183_1755==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA183_1755==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA183_1755==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA183_1755==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA183_1755==RPAREN) ) {s = 2678;}
                        else if ( (LA183_1755==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA183_1755==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA183_1755==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA183_1755==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA183_1755==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        input.seek(index183_1755);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA183_1756 = input.LA(1);
                        int index183_1756 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1756==RPAREN) ) {s = 2684;}
                        else if ( (LA183_1756==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA183_1756==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA183_1756==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA183_1756==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA183_1756==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA183_1756==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA183_1756==LT) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA183_1756==GT) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA183_1756==LE) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA183_1756==GE) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA183_1756==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA183_1756==IS) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA183_1756==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA183_1756==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA183_1756==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA183_1756==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA183_1756==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA183_1756==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA183_1756==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA183_1756==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA183_1756==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA183_1756==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA183_1756==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA183_1756==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA183_1756==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        input.seek(index183_1756);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA183_1822 = input.LA(1);
                        int index183_1822 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1822==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA183_1822==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA183_1822==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA183_1822==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA183_1822==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA183_1822==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA183_1822==LT) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA183_1822==GT) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA183_1822==LE) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA183_1822==GE) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA183_1822==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA183_1822==IS) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA183_1822==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA183_1822==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA183_1822==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA183_1822==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA183_1822==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA183_1822==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA183_1822==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA183_1822==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA183_1822==RPAREN) ) {s = 2730;}
                        else if ( (LA183_1822==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA183_1822==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA183_1822==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA183_1822==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA183_1822==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        input.seek(index183_1822);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA183_1823 = input.LA(1);
                        int index183_1823 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1823==RPAREN) ) {s = 2736;}
                        else if ( (LA183_1823==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA183_1823==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA183_1823==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA183_1823==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA183_1823==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA183_1823==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA183_1823==LT) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA183_1823==GT) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA183_1823==LE) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA183_1823==GE) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA183_1823==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA183_1823==IS) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA183_1823==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA183_1823==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA183_1823==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA183_1823==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA183_1823==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA183_1823==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA183_1823==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA183_1823==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA183_1823==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA183_1823==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA183_1823==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA183_1823==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA183_1823==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        input.seek(index183_1823);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA183_1892 = input.LA(1);
                        int index183_1892 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1892==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA183_1892==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA183_1892==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA183_1892==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA183_1892==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA183_1892==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA183_1892==LT) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA183_1892==GT) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA183_1892==LE) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA183_1892==GE) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA183_1892==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA183_1892==IS) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA183_1892==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA183_1892==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA183_1892==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA183_1892==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA183_1892==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA183_1892==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA183_1892==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA183_1892==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA183_1892==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA183_1892==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA183_1892==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA183_1892==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA183_1892==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA183_1892==RPAREN) ) {s = 14;}
                        input.seek(index183_1892);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA183_1893 = input.LA(1);
                        int index183_1893 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1893==RPAREN) ) {s = 14;}
                        else if ( (LA183_1893==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA183_1893==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA183_1893==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA183_1893==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA183_1893==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA183_1893==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA183_1893==LT) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA183_1893==GT) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA183_1893==LE) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA183_1893==GE) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA183_1893==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA183_1893==IS) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA183_1893==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA183_1893==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA183_1893==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA183_1893==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA183_1893==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA183_1893==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA183_1893==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA183_1893==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA183_1893==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA183_1893==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA183_1893==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA183_1893==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA183_1893==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        input.seek(index183_1893);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA183_1959 = input.LA(1);
                        int index183_1959 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1959==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA183_1959==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA183_1959==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA183_1959==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA183_1959==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA183_1959==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA183_1959==LT) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA183_1959==GT) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA183_1959==LE) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA183_1959==GE) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA183_1959==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA183_1959==IS) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA183_1959==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA183_1959==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA183_1959==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA183_1959==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA183_1959==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA183_1959==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA183_1959==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA183_1959==RPAREN) ) {s = 2833;}
                        else if ( (LA183_1959==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA183_1959==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA183_1959==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA183_1959==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA183_1959==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        input.seek(index183_1959);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA183_1960 = input.LA(1);
                        int index183_1960 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1960==RPAREN) ) {s = 2839;}
                        else if ( (LA183_1960==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA183_1960==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA183_1960==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA183_1960==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA183_1960==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA183_1960==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA183_1960==LT) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA183_1960==GT) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA183_1960==LE) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA183_1960==GE) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA183_1960==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA183_1960==IS) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA183_1960==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA183_1960==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA183_1960==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA183_1960==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA183_1960==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA183_1960==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA183_1960==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA183_1960==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA183_1960==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA183_1960==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA183_1960==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA183_1960==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        input.seek(index183_1960);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA183_2026 = input.LA(1);
                        int index183_2026 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2026==RPAREN) ) {s = 14;}
                        else if ( (LA183_2026==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA183_2026==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA183_2026==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA183_2026==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA183_2026==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA183_2026==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA183_2026==LT) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA183_2026==GT) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA183_2026==LE) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA183_2026==GE) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA183_2026==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA183_2026==IS) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA183_2026==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA183_2026==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA183_2026==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA183_2026==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA183_2026==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA183_2026==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA183_2026==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA183_2026==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA183_2026==AS) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA183_2026==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA183_2026==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA183_2026==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA183_2026==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA183_2026==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        input.seek(index183_2026);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA183_2027 = input.LA(1);
                        int index183_2027 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2027==RPAREN) ) {s = 14;}
                        else if ( (LA183_2027==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA183_2027==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA183_2027==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA183_2027==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA183_2027==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA183_2027==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA183_2027==LT) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA183_2027==GT) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA183_2027==LE) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA183_2027==GE) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA183_2027==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA183_2027==IS) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA183_2027==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA183_2027==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA183_2027==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA183_2027==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA183_2027==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA183_2027==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA183_2027==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA183_2027==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA183_2027==AS) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA183_2027==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA183_2027==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA183_2027==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA183_2027==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA183_2027==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        input.seek(index183_2027);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA183_2095 = input.LA(1);
                        int index183_2095 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2095==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA183_2095==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA183_2095==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA183_2095==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA183_2095==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA183_2095==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA183_2095==LT) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA183_2095==GT) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA183_2095==LE) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA183_2095==GE) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA183_2095==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA183_2095==IS) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA183_2095==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA183_2095==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA183_2095==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA183_2095==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA183_2095==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA183_2095==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA183_2095==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA183_2095==RPAREN) ) {s = 2937;}
                        else if ( (LA183_2095==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA183_2095==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA183_2095==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA183_2095==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA183_2095==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        input.seek(index183_2095);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA183_2096 = input.LA(1);
                        int index183_2096 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2096==RPAREN) ) {s = 2943;}
                        else if ( (LA183_2096==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA183_2096==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA183_2096==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA183_2096==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA183_2096==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA183_2096==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA183_2096==LT) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA183_2096==GT) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA183_2096==LE) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA183_2096==GE) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA183_2096==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA183_2096==IS) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA183_2096==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA183_2096==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA183_2096==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA183_2096==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA183_2096==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA183_2096==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA183_2096==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA183_2096==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA183_2096==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA183_2096==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA183_2096==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA183_2096==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        input.seek(index183_2096);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA183_2221 = input.LA(1);
                        int index183_2221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2221);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA183_2227 = input.LA(1);
                        int index183_2227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2227);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA183_2271 = input.LA(1);
                        int index183_2271 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2271);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA183_2277 = input.LA(1);
                        int index183_2277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2277);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA183_2321 = input.LA(1);
                        int index183_2321 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2321);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA183_2327 = input.LA(1);
                        int index183_2327 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2327);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA183_2423 = input.LA(1);
                        int index183_2423 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2423);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA183_2429 = input.LA(1);
                        int index183_2429 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2429);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA183_2473 = input.LA(1);
                        int index183_2473 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2473);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA183_2479 = input.LA(1);
                        int index183_2479 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2479);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA183_2523 = input.LA(1);
                        int index183_2523 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2523);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA183_2529 = input.LA(1);
                        int index183_2529 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2529);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA183_2574 = input.LA(1);
                        int index183_2574 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2574);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA183_2580 = input.LA(1);
                        int index183_2580 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2580);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA183_2626 = input.LA(1);
                        int index183_2626 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2626);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA183_2632 = input.LA(1);
                        int index183_2632 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2632);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA183_2678 = input.LA(1);
                        int index183_2678 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2678);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA183_2684 = input.LA(1);
                        int index183_2684 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2684);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA183_2730 = input.LA(1);
                        int index183_2730 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2730);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA183_2736 = input.LA(1);
                        int index183_2736 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2736);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA183_2833 = input.LA(1);
                        int index183_2833 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2833);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA183_2839 = input.LA(1);
                        int index183_2839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2839);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA183_2937 = input.LA(1);
                        int index183_2937 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2937);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA183_2943 = input.LA(1);
                        int index183_2943 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2967;}
                        input.seek(index183_2943);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1672 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L,0x0000000000000400L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1677 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1695 = new BitSet(new long[]{0x0040020008000010L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1701 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1731 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1761 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x0018A40190280010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1821 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x001CA40190280010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1933 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x0018A40190000010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1974 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x001CA40190080010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2106 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x0018E40190040010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2112 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x0018A40190000010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2154 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x001CE401900C0010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2160 = new BitSet(new long[]{0x0040020008000010L,0x0000027000000000L,0x0000000000000000L,0x0000000000000000L,0x001CA40190080010L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000040000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2206 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2211 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2216 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2221 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2226 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2231 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2236 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2253 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2256 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2262 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2265 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2269 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2272 = new BitSet(new long[]{0x0104300000010002L,0x0000048000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2276 = new BitSet(new long[]{0x0104300000010002L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2282 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2285 = new BitSet(new long[]{0x0104300000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2292 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2295 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2298 = new BitSet(new long[]{0x0104200000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2305 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2308 = new BitSet(new long[]{0x0104000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2315 = new BitSet(new long[]{0x0130800080004000L,0x0000808000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2318 = new BitSet(new long[]{0x0100000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2325 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2328 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2331 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840010080010L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2358 = new BitSet(new long[]{0x0040000008000000L,0x00080200000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2367 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2370 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2433 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2437 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2482 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2486 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2505 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2507 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2510 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2512 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2520 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2557 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2564 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2571 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2577 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2584 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2586 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2594 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2645 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2647 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2650 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2652 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeMatched2656 = new BitSet(new long[]{0x0000000000000000L,0x0000020000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatched2669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatched2671 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatched2676 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2678 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatched2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2729 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2731 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2733 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched2736 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched2738 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatched2742 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INSERT_in_mergeUnmatched2746 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeUnmatched2749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_columnList_in_mergeUnmatched2751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeUnmatched2753 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeUnmatched2757 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectionList_in_mergeUnmatched2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2801 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2803 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2809 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2811 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2814 = new BitSet(new long[]{0x0100300400010002L,0x0000008000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2818 = new BitSet(new long[]{0x0100300000010002L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2824 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2826 = new BitSet(new long[]{0x0100300000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2835 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2837 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2839 = new BitSet(new long[]{0x0100200000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2846 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2848 = new BitSet(new long[]{0x0100000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2855 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2857 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2859 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840010080010L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2935 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2954 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2956 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2959 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2961 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2968 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3021 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3023 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3027 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3029 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3034 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3067 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3120 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3124 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3129 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3171 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3176 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3205 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3236 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3277 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3283 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0004000000980000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3288 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0004000000980000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3293 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0004000000980000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3302 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000180000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3306 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000180000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3310 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000180000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3325 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3344 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3361 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3364 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3453 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x001CA40194080010L,0x0000000000000400L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3456 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3482 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3532 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3668 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x001CA40194080010L,0x0000000000000400L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3711 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3739 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3770 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3774 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3781 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000004180000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000004180000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_variantList3911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000004080000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3971 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3977 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4069 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4090 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4107 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4110 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4153 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4157 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4161 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4164 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4185 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4199 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4201 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4268 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4271 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4274 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4277 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4294 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4355 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4361 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4367 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4373 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4410 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4460 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4463 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4527 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4565 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4569 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4573 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4577 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4586 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4591 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4602 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4608 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4689 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4744 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4750 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4757 = new BitSet(new long[]{0x0000800000000000L,0x0000800000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4762 = new BitSet(new long[]{0x0000800000000000L,0x0000800000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4768 = new BitSet(new long[]{0x0000800000000000L,0x0000800000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4774 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4780 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4830 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4832 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4837 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4868 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4873 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4900 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4939 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4985 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4989 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4993 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4997 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5001 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000034000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000034000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5314 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5316 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5345 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5479 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5539 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5551 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5619 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5659 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5686 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5771 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5786 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5790 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5794 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5798 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5866 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5872 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5928 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_outputLimit5930 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6092 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6140 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6146 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840010080010L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840010080010L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6223 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6227 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6231 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6235 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6239 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6244 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6280 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_whenClause6283 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6285 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_whenClause6288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6301 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_elseClause6304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6331 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6334 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6337 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6351 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_caseExpression6353 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6355 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6358 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6396 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6401 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6403 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6435 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6440 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6442 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000608000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6479 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6482 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6485 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000608000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6510 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6526 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800400000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6539 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6557 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6571 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6573 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6587 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6601 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6631 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800400000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6666 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6671 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800400000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6676 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800400000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6804 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000001E000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6836 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6840 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6844 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6848 = new BitSet(new long[]{0x807B83E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000001E000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6907 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000001E000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000001E000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7013 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7052 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7058 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000042240000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7083 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7112 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002240000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7317 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7369 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7371 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7428 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7517 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7523 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7525 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7529 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040010000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7577 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7580 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040010000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180004000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7603 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7606 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7609 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000180004000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7628 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7653 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7657 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7662 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7669 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7832 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7838 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7841 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr7844 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7854 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7862 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7898 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7905 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7910 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7978 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CE401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000040000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7984 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000040000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8019 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8023 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8028 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8043 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8047 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8052 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8067 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8079 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8084 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8119 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8123 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8128 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8143 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8147 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8152 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8167 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8171 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8176 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8206 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8211 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8217 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8233 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8239 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8255 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8261 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8277 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8291 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8310 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8328 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc8352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8355 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8369 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8372 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8395 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8430 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8435 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8468 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8473 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8507 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8584 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_maxFunc8587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8590 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_maxFunc8593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8596 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_maxFunc8599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8642 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8645 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8679 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8685 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8723 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8793 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8798 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8805 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8822 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8824 = new BitSet(new long[]{0x807803E80FFC4430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B0180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8872 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8913 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8918 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8920 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8952 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8957 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8959 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8994 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression9003 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9070 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9076 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9084 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9090 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9214 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9219 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9263 = new BitSet(new long[]{0x0000000000010002L,0x0002000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9269 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000001180000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9273 = new BitSet(new long[]{0x0000000000010002L,0x0002000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9389 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9450 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9471 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9497 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401F4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000042000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9509 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B6180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9532 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9654 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9749 = new BitSet(new long[]{0x803801E80FFC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9752 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9754 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9756 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9760 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9765 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9770 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9829 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9879 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9882 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9934 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression10010 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4380010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression10012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression10015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression10027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10189 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_expression_in_expressionList10231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10234 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B4180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_expressionList10237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10268 = new BitSet(new long[]{0xB87843E81FFC6430L,0x001A727000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x001CA401B5180010L,0x0000000000000400L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10404 = new BitSet(new long[]{0x0600000000000002L,0x00000001C0000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_number_in_rangeOperand10599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10719 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10723 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10725 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840034080010L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840034080010L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10895 = new BitSet(new long[]{0x803801E807FC4420L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000080000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000021100000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10938 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11127 = new BitSet(new long[]{0x803801E807FC4422L,0x001A700000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0006000000080000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent11407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840030080010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11667 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11671 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11673 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11730 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11734 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11736 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11793 = new BitSet(new long[]{0x0000000000200000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11797 = new BitSet(new long[]{0x0000000000200000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11799 = new BitSet(new long[]{0x0000000000200000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11861 = new BitSet(new long[]{0x0000000000000000L,0x00000001C0000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11865 = new BitSet(new long[]{0x0000000000000000L,0x00000001C0000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11867 = new BitSet(new long[]{0x0000000000000000L,0x00000001C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11929 = new BitSet(new long[]{0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11933 = new BitSet(new long[]{0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11935 = new BitSet(new long[]{0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number12019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number12036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number12053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution12074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant12093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant12100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant12113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840010000010L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018840010000010L});
    public static final BitSet FOLLOW_number_in_numberconstant12185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10383 = new BitSet(new long[]{0x0000000000000002L});
}
