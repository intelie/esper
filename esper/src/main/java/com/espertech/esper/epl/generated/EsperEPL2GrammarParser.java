// $ANTLR 3.1.1 EsperEPL2Grammar.g 2010-03-02 21:41:44

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "BOR", "PLUS", "QUESTION", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=168;
    public static final int FLOAT_SUFFIX=319;
    public static final int STAR=260;
    public static final int NUMERIC_PARAM_LIST=108;
    public static final int MOD=280;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=150;
    public static final int BSR=301;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=174;
    public static final int TIMEPERIOD_MILLISECONDS=94;
    public static final int FULL_OUTERJOIN_EXPR=154;
    public static final int MATCHREC_PATTERN_CONCAT=244;
    public static final int INC=294;
    public static final int LNOT=290;
    public static final int RPAREN=259;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=267;
    public static final int BSR_ASSIGN=302;
    public static final int CAST_EXPR=203;
    public static final int MATCHES=105;
    public static final int STREAM_EXPR=149;
    public static final int TIMEPERIOD_SECONDS=91;
    public static final int NOT_EQUAL=272;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=117;
    public static final int LAST_AGGREG=230;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=111;
    public static final int FOLLOWED_BY=284;
    public static final int HOUR_PART=179;
    public static final int RBRACK=265;
    public static final int MATCHREC_PATTERN_NESTED=246;
    public static final int MATCH_UNTIL_RANGE_CLOSED=221;
    public static final int GE=276;
    public static final int METHOD_JOIN_EXPR=217;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=116;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=115;
    public static final int MINUS_ASSIGN=295;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=127;
    public static final int NUM_DOUBLE=240;
    public static final int INSERTINTO_STREAM_NAME=191;
    public static final int LCURLY=281;
    public static final int TIMEPERIOD_MILLISEC=92;
    public static final int UNARY_MINUS=175;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=189;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=125;
    public static final int WS=311;
    public static final int EMAILAT=310;
    public static final int SUBSELECT_GROUP_EXPR=195;
    public static final int ON_SELECT_INSERT_EXPR=212;
    public static final int ESCAPECHAR=285;
    public static final int EXPRCOL=172;
    public static final int SL_COMMENT=312;
    public static final int NULL_TYPE=239;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=219;
    public static final int GT=274;
    public static final int BNOT=291;
    public static final int WHERE_EXPR=136;
    public static final int END=33;
    public static final int LAND=308;
    public static final int INNERJOIN_EXPR=151;
    public static final int NOT_REGEXP=186;
    public static final int MATCH_UNTIL_EXPR=218;
    public static final int EVENT_PROP_EXPR=158;
    public static final int LBRACK=264;
    public static final int VIEW_EXPR=133;
    public static final int ANNOTATION=226;
    public static final int LONG_TYPE=234;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=118;
    public static final int MATCHREC_PATTERN=242;
    public static final int TIMEPERIOD_SEC=89;
    public static final int TICKED_STRING_LITERAL=286;
    public static final int ON_SELECT_EXPR=210;
    public static final int MINUTE_PART=180;
    public static final int PATTERN_NOT_EXPR=114;
    public static final int SQL_NE=271;
    public static final int SUM=18;
    public static final int HexDigit=317;
    public static final int UPDATE_EXPR=231;
    public static final int LPAREN=258;
    public static final int IN_SUBSELECT_EXPR=197;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=95;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=248;
    public static final int NOT_IN_RANGE=193;
    public static final int OFFSET=99;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=181;
    public static final int MATCH_RECOGNIZE=101;
    public static final int IDENT=255;
    public static final int DATABASE_JOIN_EXPR=135;
    public static final int BXOR=270;
    public static final int PLUS=262;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=83;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=161;
    public static final int CREATE_INDEX_EXPR=204;
    public static final int TIMEPERIOD_MILLISECOND=93;
    public static final int EVAL_NOTEQUALS_EXPR=142;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=220;
    public static final int CREATE_VARIABLE_EXPR=216;
    public static final int CREATE_WINDOW_COL_TYPE=224;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=249;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=112;
    public static final int RIGHT_OUTERJOIN_EXPR=153;
    public static final int NUMBERSETSTAR=225;
    public static final int LAST_OPERATOR=200;
    public static final int PATTERN_FILTER_EXPR=113;
    public static final int EVAL_AND_EXPR=139;
    public static final int LEFT_OUTERJOIN_EXPR=152;
    public static final int EPL_EXPR=241;
    public static final int GROUP_BY_EXPR=155;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=159;
    public static final int MINUS=278;
    public static final int SEMI=309;
    public static final int STAR_ASSIGN=297;
    public static final int FIRST_AGGREG=229;
    public static final int COLON=266;
    public static final int EVAL_EQUALS_GROUP_EXPR=143;
    public static final int BAND_ASSIGN=307;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=169;
    public static final int VALUE_NULL=97;
    public static final int NOT_IN_SET=183;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=162;
    public static final int SL=303;
    public static final int NOT_IN_SUBSELECT_EXPR=198;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=131;
    public static final int SR=299;
    public static final int RCURLY=282;
    public static final int PLUS_ASSIGN=293;
    public static final int EXISTS_SUBSELECT_EXPR=196;
    public static final int DAY_PART=178;
    public static final int EVENT_FILTER_IN=126;
    public static final int DIV=279;
    public static final int OBJECT_PARAM_ORDERED_EXPR=110;
    public static final int OctalEscape=316;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=182;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=98;
    public static final int SELECTION_EXPR=146;
    public static final int LOR=277;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=190;
    public static final int EXPONENT=318;
    public static final int LT=273;
    public static final int PATTERN_INCL_EXPR=134;
    public static final int ORDER_BY_EXPR=156;
    public static final int BOOL_TYPE=238;
    public static final int MOD_ASSIGN=298;
    public static final int ANNOTATION_ARRAY=227;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=199;
    public static final int EQUALS=256;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=292;
    public static final int SL_ASSIGN=304;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int MATCHREC_AFTER_SKIP=247;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=211;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=177;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=96;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=144;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=235;
    public static final int TIMEPERIOD_SECOND=90;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=128;
    public static final int ANNOTATION_VALUE=228;
    public static final int SUBSELECT_EXPR=194;
    public static final int NUMERIC_PARAM_RANGE=107;
    public static final int CONCAT=173;
    public static final int CLASS_IDENT=130;
    public static final int MATCHREC_PATTERN_ALTER=245;
    public static final int ON_EXPR=207;
    public static final int CREATE_WINDOW_EXPR=205;
    public static final int PROPERTY_SELECTION_STREAM=120;
    public static final int ON_DELETE_EXPR=209;
    public static final int NUM_LONG=287;
    public static final int ON=41;
    public static final int TIME_PERIOD=176;
    public static final int DOUBLE_TYPE=236;
    public static final int DELETE=76;
    public static final int INT_TYPE=233;
    public static final int MATCHREC_PARTITION=253;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=138;
    public static final int ORDER_ELEMENT_EXPR=157;
    public static final int TIMEPERIOD_HOURS=86;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=202;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=237;
    public static final int NUM_INT=283;
    public static final int MATCHREC_DEFINE_ITEM=250;
    public static final int ON_SET_EXPR=215;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=288;
    public static final int ON_EXPR_FROM=214;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=314;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=119;
    public static final int WEEKDAY_OPERATOR=201;
    public static final int DEC=296;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=223;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=305;
    public static final int NUMERIC_PARAM_FREQUENCY=109;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=167;
    public static final int EVENT_FILTER_PARAM=123;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=164;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=100;
    public static final int ON_STREAM=208;
    public static final int DEFINE=103;
    public static final int TIMEPERIOD_DAYS=84;
    public static final int EVENT_FILTER_RANGE=124;
    public static final int ML_COMMENT=313;
    public static final int INDEX=82;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=163;
    public static final int BOR_ASSIGN=306;
    public static final int COMMA=254;
    public static final int IS=42;
    public static final int PARTITION=104;
    public static final int WHEN_LIMIT_EXPR=170;
    public static final int TIMEPERIOD_LIMIT_EXPR=166;
    public static final int SOME=49;
    public static final int EQUAL=289;
    public static final int BOR=261;
    public static final int MATCHREC_MEASURE_ITEM=252;
    public static final int TIMEPERIOD_HOUR=85;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=129;
    public static final int IN_RANGE=192;
    public static final int DOT=257;
    public static final int MATCHREC_MEASURES=251;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=121;
    public static final int INSERTINTO_EXPR=171;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=137;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=222;
    public static final int EVAL_EQUALS_EXPR=141;
    public static final int TIMEPERIOD_MINUTES=88;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=185;
    public static final int EVENT_LIMIT_EXPR=165;
    public static final int TIMEPERIOD_MINUTE=87;
    public static final int NOT_BETWEEN=184;
    public static final int EVAL_OR_EXPR=140;
    public static final int ON_SELECT_INSERT_OUTPUT=213;
    public static final int MEASURES=102;
    public static final int AFTER=106;
    public static final int BAND=269;
    public static final int MATCHREC_PATTERN_ATOM=243;
    public static final int QUOTED_STRING_LITERAL=268;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=263;
    public static final int OBSERVER_EXPR=132;
    public static final int EVENT_FILTER_IDENT=122;
    public static final int EVENT_PROP_MAPPED=160;
    public static final int UnicodeEscape=315;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=187;
    public static final int SELECTION_ELEMENT_EXPR=147;
    public static final int CREATE_WINDOW_SELECT_EXPR=206;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=232;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=148;
    public static final int SR_ASSIGN=300;
    public static final int LE=275;
    public static final int DBFROM_CLAUSE=188;
    public static final int EVAL_IDENT=145;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after';");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:515:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:516:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:516:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:516:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:516:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1570);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1575);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1579); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:521:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:522:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:522:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:522:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:522:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1593);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1599);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 525:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:525:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:525:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:528:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:529:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:529:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1629);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1633); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:536:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:537:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:537:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1655);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:537:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);

                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);

                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||LA4_30==PLUS||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||LA4_30==MINUS||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:537:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:537:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:537:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1663);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:537:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1667);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueNoEnum, elementValuePairsNoEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 538:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:538:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:538:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:538:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:541:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:542:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:542:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1715);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:542:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:542:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:542:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:542:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1723);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:542:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1727);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueEnum, elementValuePairsEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 543:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:543:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:543:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:543:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:546:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:547:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:547:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1773);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:547:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:547:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1776); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1779);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:550:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:551:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:551:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1800);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:551:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:551:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1803); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1806);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:554:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:555:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:555:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1833);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: i, elementValueNoEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 556:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:556:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:559:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:560:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:560:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1874);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 561:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:561:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:564:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:565:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:565:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1905);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:566:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:566:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:566:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1916);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 566:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:567:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1929);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:570:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:571:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:571:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1952);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:572:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:572:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:572:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1963);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 572:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:573:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1976);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:574:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1984);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:577:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:578:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:578:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:578:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:578:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2007);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:578:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:578:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2010); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2012);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:578:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:578:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 579:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:579:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:579:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:582:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:583:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:583:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:583:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:583:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2055);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:583:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:583:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2058); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2060);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:583:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:583:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 584:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:584:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:584:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:590:1: eplExpression : ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | onExpr | updateExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr54 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr55 = null;



        try {
            // EsperEPL2Grammar.g:591:2: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | onExpr | updateExpr )
            int alt17=6;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }

                }
                break;
            case ON:
                {
                alt17=5;
                }
                break;
            case UPDATE:
                {
                alt17=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:591:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression2103);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:592:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2108);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:593:4: createIndexExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2113);
                    createIndexExpr52=createIndexExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:594:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2118);
                    createVariableExpr53=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:595:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression2123);
                    onExpr54=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr54.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:596:4: updateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_updateExpr_in_eplExpression2128);
                    updateExpr55=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr55.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:599:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT56=null;
        Token SELECT58=null;
        Token FROM60=null;
        Token WHERE63=null;
        Token GROUP65=null;
        Token BY66=null;
        Token HAVING68=null;
        Token OUTPUT70=null;
        Token ORDER72=null;
        Token BY73=null;
        Token ROW_LIMIT_EXPR75=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr57 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause59 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause61 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog62 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause64 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr67 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause69 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit71 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr74 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit76 = null;


        CommonTree INSERT56_tree=null;
        CommonTree SELECT58_tree=null;
        CommonTree FROM60_tree=null;
        CommonTree WHERE63_tree=null;
        CommonTree GROUP65_tree=null;
        CommonTree BY66_tree=null;
        CommonTree HAVING68_tree=null;
        CommonTree OUTPUT70_tree=null;
        CommonTree ORDER72_tree=null;
        CommonTree BY73_tree=null;
        CommonTree ROW_LIMIT_EXPR75_tree=null;

        try {
            // EsperEPL2Grammar.g:600:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:600:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:600:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:600:5: INSERT insertIntoExpr
                    {
                    INSERT56=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2141); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2144);
                    insertIntoExpr57=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr57.getTree());

                    }
                    break;

            }

            SELECT58=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2150); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2153);
            selectClause59=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause59.getTree());
            FROM60=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2157); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2160);
            fromClause61=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause61.getTree());
            // EsperEPL2Grammar.g:603:3: ( matchRecog )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==MATCH_RECOGNIZE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:603:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2164);
                    matchRecog62=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog62.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:604:3: ( WHERE whereClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:604:4: WHERE whereClause
                    {
                    WHERE63=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2170); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2173);
                    whereClause64=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause64.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:605:3: ( GROUP BY groupByListExpr )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:605:4: GROUP BY groupByListExpr
                    {
                    GROUP65=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2180); if (state.failed) return retval;
                    BY66=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2183); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2186);
                    groupByListExpr67=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr67.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:606:3: ( HAVING havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:606:4: HAVING havingClause
                    {
                    HAVING68=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2193); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2196);
                    havingClause69=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause69.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:607:3: ( OUTPUT outputLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==OUTPUT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:607:4: OUTPUT outputLimit
                    {
                    OUTPUT70=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2203); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2206);
                    outputLimit71=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit71.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:608:3: ( ORDER BY orderByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ORDER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:608:4: ORDER BY orderByListExpr
                    {
                    ORDER72=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2213); if (state.failed) return retval;
                    BY73=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2216); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2219);
                    orderByListExpr74=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr74.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:609:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ROW_LIMIT_EXPR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:609:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR75=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2226); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2229);
                    rowLimit76=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit76.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:612:1: onExpr : ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON77=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr78 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr79 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr80 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr81 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert82 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr83 = null;

        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr84 = null;


        CommonTree ON77_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            // EsperEPL2Grammar.g:613:2: ( ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) )
            // EsperEPL2Grammar.g:613:4: ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            {
            ON77=(Token)match(input,ON,FOLLOW_ON_in_onExpr2244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON77);

            pushFollow(FOLLOW_onStreamExpr_in_onExpr2246);
            onStreamExpr78=onStreamExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr78.getTree());
            // EsperEPL2Grammar.g:614:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            int alt29=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt29=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt29=2;
                }
                break;
            case SET:
                {
                alt29=3;
                }
                break;
            case UPDATE:
                {
                alt29=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // EsperEPL2Grammar.g:614:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2251);
                    onDeleteExpr79=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr79.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:614:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2255);
                    onSelectExpr80=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr80.getTree());
                    // EsperEPL2Grammar.g:614:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==INSERT) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // EsperEPL2Grammar.g:614:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:614:33: ( onSelectInsertExpr )+
                            int cnt26=0;
                            loop26:
                            do {
                                int alt26=2;
                                int LA26_0 = input.LA(1);

                                if ( (LA26_0==INSERT) ) {
                                    alt26=1;
                                }


                                switch (alt26) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:614:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2258);
                            	    onSelectInsertExpr81=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr81.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt26 >= 1 ) break loop26;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(26, input);
                                        throw eee;
                                }
                                cnt26++;
                            } while (true);

                            // EsperEPL2Grammar.g:614:53: ( outputClauseInsert )?
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0==OUTPUT) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    // EsperEPL2Grammar.g:614:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2261);
                                    outputClauseInsert82=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert82.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:614:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2268);
                    onSetExpr83=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr83.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:614:89: onUpdateExpr
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2272);
                    onUpdateExpr84=onUpdateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr84.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onDeleteExpr, onUpdateExpr, onSelectExpr, onStreamExpr, onSelectInsertExpr, outputClauseInsert, onSetExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:3: -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
            {
                // EsperEPL2Grammar.g:615:6: ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                // EsperEPL2Grammar.g:615:29: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:615:43: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:615:57: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:615:77: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:615:97: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:615:108: ( onUpdateExpr )?
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());

                }
                stream_onUpdateExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onStreamExpr"
    // EsperEPL2Grammar.g:618:1: onStreamExpr : ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) ;
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS87=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression85 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression86 = null;


        CommonTree i_tree=null;
        CommonTree AS87_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:619:2: ( ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) )
            // EsperEPL2Grammar.g:619:4: ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )?
            {
            // EsperEPL2Grammar.g:619:4: ( eventFilterExpression | patternInclusionExpression )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==IDENT||LA30_0==TICKED_STRING_LITERAL) ) {
                alt30=1;
            }
            else if ( (LA30_0==PATTERN) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:619:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2315);
                    eventFilterExpression85=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression85.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:619:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2319);
                    patternInclusionExpression86=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression86.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:619:57: ( AS i= IDENT | i= IDENT )?
            int alt31=3;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==AS) ) {
                alt31=1;
            }
            else if ( (LA31_0==IDENT) ) {
                alt31=2;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:619:58: AS i= IDENT
                    {
                    AS87=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS87);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:619:71: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: patternInclusionExpression, eventFilterExpression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 620:3: -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
            {
                // EsperEPL2Grammar.g:620:6: ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);

                // EsperEPL2Grammar.g:620:18: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:620:41: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:620:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onStreamExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:623:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE88=null;
        Token ISTREAM89=null;
        Token AS91=null;
        Token SET92=null;
        Token COMMA94=null;
        Token WHERE96=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier90 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment93 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment95 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause97 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE88_tree=null;
        CommonTree ISTREAM89_tree=null;
        CommonTree AS91_tree=null;
        CommonTree SET92_tree=null;
        CommonTree COMMA94_tree=null;
        CommonTree WHERE96_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:624:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:624:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE88=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE88);

            ISTREAM89=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM89);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2368);
            classIdentifier90=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier90.getTree());
            // EsperEPL2Grammar.g:624:35: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:624:36: AS i= IDENT
                    {
                    AS91=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS91);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:624:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET92=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET92);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2389);
            onSetAssignment93=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment93.getTree());
            // EsperEPL2Grammar.g:625:23: ( COMMA onSetAssignment )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // EsperEPL2Grammar.g:625:24: COMMA onSetAssignment
            	    {
            	    COMMA94=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2392); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA94);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2394);
            	    onSetAssignment95=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment95.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // EsperEPL2Grammar.g:626:3: ( WHERE whereClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:626:4: WHERE whereClause
                    {
                    WHERE96=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE96);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2404);
                    whereClause97=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause97.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, whereClause, onSetAssignment, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:627:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:627:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:627:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:630:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT98=null;
        Token SELECT100=null;
        Token DISTINCT101=null;
        Token WHERE104=null;
        Token GROUP106=null;
        Token BY107=null;
        Token HAVING109=null;
        Token ORDER111=null;
        Token BY112=null;
        Token ROW_LIMIT_EXPR114=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr99 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList102 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom103 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr108 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause110 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr113 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit115 = null;


        CommonTree INSERT98_tree=null;
        CommonTree SELECT100_tree=null;
        CommonTree DISTINCT101_tree=null;
        CommonTree WHERE104_tree=null;
        CommonTree GROUP106_tree=null;
        CommonTree BY107_tree=null;
        CommonTree HAVING109_tree=null;
        CommonTree ORDER111_tree=null;
        CommonTree BY112_tree=null;
        CommonTree ROW_LIMIT_EXPR114_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:633:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) )
            // EsperEPL2Grammar.g:633:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            // EsperEPL2Grammar.g:633:4: ( INSERT insertIntoExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==INSERT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:633:5: INSERT insertIntoExpr
                    {
                    INSERT98=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT98);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2454);
                    insertIntoExpr99=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr99.getTree());

                    }
                    break;

            }

            SELECT100=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT100);

            // EsperEPL2Grammar.g:634:10: ( DISTINCT )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DISTINCT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:634:10: DISTINCT
                    {
                    DISTINCT101=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT101);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2465);
            selectionList102=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList102.getTree());
            // EsperEPL2Grammar.g:635:3: ( onExprFrom )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FROM) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:635:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2469);
                    onExprFrom103=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom103.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:636:3: ( WHERE whereClause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:636:4: WHERE whereClause
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2477);
                    whereClause105=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:637:3: ( GROUP BY groupByListExpr )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==GROUP) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:637:4: GROUP BY groupByListExpr
                    {
                    GROUP106=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP106);

                    BY107=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY107);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2490);
                    groupByListExpr108=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr108.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:638:3: ( HAVING havingClause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==HAVING) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:638:4: HAVING havingClause
                    {
                    HAVING109=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING109);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2499);
                    havingClause110=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause110.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:639:3: ( ORDER BY orderByListExpr )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ORDER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:639:4: ORDER BY orderByListExpr
                    {
                    ORDER111=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER111);

                    BY112=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY112);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2510);
                    orderByListExpr113=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr113.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:640:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ROW_LIMIT_EXPR) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:640:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR114=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR114);

                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2519);
                    rowLimit115=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit115.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: rowLimit, orderByListExpr, havingClause, selectionList, whereClause, DISTINCT, onExprFrom, groupByListExpr, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 641:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
            {
                // EsperEPL2Grammar.g:641:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:641:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:641:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:641:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:641:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:641:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:641:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:641:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();
                // EsperEPL2Grammar.g:641:136: ( rowLimit )?
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());

                }
                stream_rowLimit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onUpdateExpr"
    // EsperEPL2Grammar.g:644:1: onUpdateExpr : UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token UPDATE116=null;
        Token AS117=null;
        Token SET118=null;
        Token COMMA120=null;
        Token WHERE122=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment119 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause123 = null;


        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE116_tree=null;
        CommonTree AS117_tree=null;
        CommonTree SET118_tree=null;
        CommonTree COMMA120_tree=null;
        CommonTree WHERE122_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            // EsperEPL2Grammar.g:647:2: ( UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:647:4: UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE116=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE116);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:648:11: ( AS i= IDENT | i= IDENT )?
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            else if ( (LA43_0==IDENT) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:648:12: AS i= IDENT
                    {
                    AS117=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS117);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:648:25: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET118=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET118);

            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2607);
            onSetAssignment119=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment119.getTree());
            // EsperEPL2Grammar.g:649:23: ( COMMA onSetAssignment )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // EsperEPL2Grammar.g:649:24: COMMA onSetAssignment
            	    {
            	    COMMA120=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2610); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA120);

            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2612);
            	    onSetAssignment121=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);

            // EsperEPL2Grammar.g:650:3: ( WHERE whereClause )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==WHERE) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:650:4: WHERE whereClause
                    {
                    WHERE122=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE122);

                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2621);
                    whereClause123=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause123.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSetAssignment, i, whereClause, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 651:3: -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:651:6: ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);

                // EsperEPL2Grammar.g:651:23: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);

                adaptor.addChild(root_2, stream_n.nextNode());
                // EsperEPL2Grammar.g:651:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:651:63: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onUpdateExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:654:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT124=null;
        Token SELECT126=null;
        Token WHERE128=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr125 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList127 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause129 = null;


        CommonTree INSERT124_tree=null;
        CommonTree SELECT126_tree=null;
        CommonTree WHERE128_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:657:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:657:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT124=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT124);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2674);
            insertIntoExpr125=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr125.getTree());
            SELECT126=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT126);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2680);
            selectionList127=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList127.getTree());
            // EsperEPL2Grammar.g:659:3: ( WHERE whereClause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==WHERE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:659:4: WHERE whereClause
                    {
                    WHERE128=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE128);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2687);
                    whereClause129=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause129.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoExpr, selectionList, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 660:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:660:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:660:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:663:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT130=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT130_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:664:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:664:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT130=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT130);

            // EsperEPL2Grammar.g:664:11: (f= FIRST | a= ALL )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==FIRST) ) {
                alt47=1;
            }
            else if ( (LA47_0==ALL) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:664:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:664:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: f, a
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 665:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:665:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:665:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:665:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:668:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE131=null;
        Token WHERE133=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom132 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause134 = null;


        CommonTree DELETE131_tree=null;
        CommonTree WHERE133_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:671:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:671:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE131=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE131);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2775);
            onExprFrom132=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom132.getTree());
            // EsperEPL2Grammar.g:673:3: ( WHERE whereClause )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==WHERE) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:673:4: WHERE whereClause
                    {
                    WHERE133=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE133);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2782);
                    whereClause134=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause134.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 674:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:674:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:674:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:677:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET135=null;
        Token COMMA137=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment136 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment138 = null;


        CommonTree SET135_tree=null;
        CommonTree COMMA137_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:680:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:680:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET135=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET135);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2824);
            onSetAssignment136=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment136.getTree());
            // EsperEPL2Grammar.g:680:24: ( COMMA onSetAssignment )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // EsperEPL2Grammar.g:680:25: COMMA onSetAssignment
            	    {
            	    COMMA137=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2827); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA137);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2829);
            	    onSetAssignment138=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment138.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 681:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:681:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:684:1: onSetAssignment : eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS140=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty139 = null;

        EsperEPL2GrammarParser.expression_return expression141 = null;


        CommonTree EQUALS140_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:685:2: ( eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) )
            // EsperEPL2Grammar.g:685:4: eventProperty EQUALS expression
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment2854);
            eventProperty139=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty139.getTree());
            EQUALS140=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS140);

            pushFollow(FOLLOW_expression_in_onSetAssignment2858);
            expression141=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression141.getTree());


            // AST REWRITE
            // elements: expression, eventProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 686:3: -> ^( ON_SET_EXPR_ITEM eventProperty expression )
            {
                // EsperEPL2Grammar.g:686:6: ^( ON_SET_EXPR_ITEM eventProperty expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:689:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM142=null;
        Token AS143=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM142_tree=null;
        CommonTree AS143_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:690:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:690:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM142=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM142);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:690:17: ( AS i= IDENT | i= IDENT )?
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==AS) ) {
                alt50=1;
            }
            else if ( (LA50_0==IDENT) ) {
                alt50=2;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:690:18: AS i= IDENT
                    {
                    AS143=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS143);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:690:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: n, i
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 691:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:691:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:691:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:694:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE144=null;
        Token WINDOW145=null;
        Token DOT146=null;
        Token DOT148=null;
        Token AS150=null;
        Token LPAREN152=null;
        Token RPAREN154=null;
        Token WHERE155=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression147 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression149 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter151 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList153 = null;

        EsperEPL2GrammarParser.expression_return expression156 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE144_tree=null;
        CommonTree WINDOW145_tree=null;
        CommonTree DOT146_tree=null;
        CommonTree DOT148_tree=null;
        CommonTree AS150_tree=null;
        CommonTree LPAREN152_tree=null;
        CommonTree RPAREN154_tree=null;
        CommonTree WHERE155_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:695:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:695:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE144=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE144);

            WINDOW145=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW145);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:695:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==DOT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // EsperEPL2Grammar.g:695:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT146=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT146);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2939);
                    viewExpression147=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression147.getTree());
                    // EsperEPL2Grammar.g:695:46: ( DOT viewExpression )*
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==DOT) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:695:47: DOT viewExpression
                    	    {
                    	    DOT148=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2942); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT148);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2944);
                    	    viewExpression149=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression149.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop51;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:695:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt53=3;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==RETAINUNION) ) {
                alt53=1;
            }
            else if ( (LA53_0==RETAININTERSECTION) ) {
                alt53=2;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:695:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:695:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:695:110: ( AS )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==AS) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:695:110: AS
                    {
                    AS150=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS150);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:696:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SELECT||LA55_0==IDENT||LA55_0==TICKED_STRING_LITERAL) ) {
                alt55=1;
            }
            else if ( (LA55_0==LPAREN) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:697:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2976);
                    createWindowExprModelAfter151=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter151.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:698:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN152=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN152);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2993);
                    createWindowColumnList153=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList153.getTree());
                    RPAREN154=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN154);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:700:5: (i1= INSERT ( WHERE expression )? )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==INSERT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // EsperEPL2Grammar.g:700:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:700:16: ( WHERE expression )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==WHERE) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // EsperEPL2Grammar.g:700:17: WHERE expression
                            {
                            WHERE155=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3015); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE155);

                            pushFollow(FOLLOW_expression_in_createWindowExpr3017);
                            expression156=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression156.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: createWindowColumnList, i, viewExpression, createWindowExprModelAfter, ru, ri, INSERT, ru, i, viewExpression, expression, ri, createWindowExprModelAfter, createWindowColumnList
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 701:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:701:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:701:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:701:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:701:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:701:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:701:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:702:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:702:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 703:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:703:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:703:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:703:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:703:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:703:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:703:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:706:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT157=null;
        Token FROM159=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList158 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier160 = null;


        CommonTree SELECT157_tree=null;
        CommonTree FROM159_tree=null;

        try {
            // EsperEPL2Grammar.g:707:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:707:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:707:4: ( SELECT createSelectionList FROM )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==SELECT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:707:5: SELECT createSelectionList FROM
                    {
                    SELECT157=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3104); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3107);
                    createSelectionList158=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList158.getTree());
                    FROM159=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3109); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3114);
            classIdentifier160=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier160.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createIndexExpr"
    // EsperEPL2Grammar.g:710:1: createIndexExpr : CREATE INDEX n= IDENT ON w= IDENT ( columnList ) -> ^( CREATE_INDEX_EXPR $n $w columnList ) ;
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token w=null;
        Token CREATE161=null;
        Token INDEX162=null;
        Token ON163=null;
        EsperEPL2GrammarParser.columnList_return columnList164 = null;


        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE161_tree=null;
        CommonTree INDEX162_tree=null;
        CommonTree ON163_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:711:2: ( CREATE INDEX n= IDENT ON w= IDENT ( columnList ) -> ^( CREATE_INDEX_EXPR $n $w columnList ) )
            // EsperEPL2Grammar.g:711:4: CREATE INDEX n= IDENT ON w= IDENT ( columnList )
            {
            CREATE161=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE161);

            INDEX162=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX162);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            ON163=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON163);

            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);

            // EsperEPL2Grammar.g:711:36: ( columnList )
            // EsperEPL2Grammar.g:711:37: columnList
            {
            pushFollow(FOLLOW_columnList_in_createIndexExpr3142);
            columnList164=columnList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList164.getTree());

            }



            // AST REWRITE
            // elements: n, columnList, w
            // token labels: w, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:3: -> ^( CREATE_INDEX_EXPR $n $w columnList )
            {
                // EsperEPL2Grammar.g:712:6: ^( CREATE_INDEX_EXPR $n $w columnList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createIndexExpr"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:715:1: createVariableExpr : CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token CREATE165=null;
        Token VARIABLE166=null;
        Token EQUALS168=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier167 = null;

        EsperEPL2GrammarParser.expression_return expression169 = null;


        CommonTree n_tree=null;
        CommonTree CREATE165_tree=null;
        CommonTree VARIABLE166_tree=null;
        CommonTree EQUALS168_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:716:2: ( CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) )
            // EsperEPL2Grammar.g:716:4: CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )?
            {
            CREATE165=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE165);

            VARIABLE166=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE166);

            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3174);
            classIdentifier167=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier167.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:716:44: ( EQUALS expression )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==EQUALS) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:716:45: EQUALS expression
                    {
                    EQUALS168=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS168);

                    pushFollow(FOLLOW_expression_in_createVariableExpr3183);
                    expression169=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression169.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, n, classIdentifier
            // token labels: n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 717:3: -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
            {
                // EsperEPL2Grammar.g:717:6: ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:717:48: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:720:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA171=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement170 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement172 = null;


        CommonTree COMMA171_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:723:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:723:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3225);
            createWindowColumnListElement170=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement170.getTree());
            // EsperEPL2Grammar.g:723:34: ( COMMA createWindowColumnListElement )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // EsperEPL2Grammar.g:723:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA171=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList3228); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA171);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3230);
            	    createWindowColumnListElement172=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement172.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:724:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:727:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:728:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:728:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 729:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:729:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:732:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA174=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement173 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement175 = null;


        CommonTree COMMA174_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:735:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:735:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3302);
            createSelectionListElement173=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement173.getTree());
            // EsperEPL2Grammar.g:735:31: ( COMMA createSelectionListElement )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:735:32: COMMA createSelectionListElement
            	    {
            	    COMMA174=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3305); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA174);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3307);
            	    createSelectionListElement175=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement175.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 736:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:736:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:739:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS177=null;
        Token AS179=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty176 = null;

        EsperEPL2GrammarParser.constant_return constant178 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS177_tree=null;
        CommonTree AS179_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:740:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt63=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt63=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt63=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt63=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // EsperEPL2Grammar.g:740:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 741:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:742:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3348);
                    eventProperty176=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty176.getTree());
                    // EsperEPL2Grammar.g:742:18: ( AS i= IDENT )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==AS) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // EsperEPL2Grammar.g:742:19: AS i= IDENT
                            {
                            AS177=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3351); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS177);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3355); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 743:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:743:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:743:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:744:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3376);
                    constant178=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant178.getTree());
                    AS179=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS179);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 745:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:745:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:745:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:748:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( columnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO180=null;
        EsperEPL2GrammarParser.columnList_return columnList181 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO180_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:751:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( columnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) )
            // EsperEPL2Grammar.g:751:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( columnList )?
            {
            // EsperEPL2Grammar.g:751:4: (s= ISTREAM | s= RSTREAM )?
            int alt64=3;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==ISTREAM) ) {
                alt64=1;
            }
            else if ( (LA64_0==RSTREAM) ) {
                alt64=2;
            }
            switch (alt64) {
                case 1 :
                    // EsperEPL2Grammar.g:751:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:751:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO180=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO180);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:751:42: ( columnList )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==LPAREN) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:751:43: columnList
                    {
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3438);
                    columnList181=columnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList181.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: columnList, s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 752:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
            {
                // EsperEPL2Grammar.g:752:6: ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:752:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:752:31: ( columnList )?
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());

                }
                stream_columnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "columnList"
    // EsperEPL2Grammar.g:755:1: columnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN182=null;
        Token IDENT183=null;
        Token COMMA184=null;
        Token IDENT185=null;
        Token RPAREN186=null;

        CommonTree LPAREN182_tree=null;
        CommonTree IDENT183_tree=null;
        CommonTree COMMA184_tree=null;
        CommonTree IDENT185_tree=null;
        CommonTree RPAREN186_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:756:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:756:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN182=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_columnList3472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN182);

            IDENT183=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT183);

            // EsperEPL2Grammar.g:756:18: ( COMMA IDENT )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==COMMA) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // EsperEPL2Grammar.g:756:19: COMMA IDENT
            	    {
            	    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList3477); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA184);

            	    IDENT185=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3479); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT185);


            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_columnList3483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 757:3: -> ^( EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:757:6: ^( EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:757:16: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "columnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:760:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression187 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin188 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList189 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:763:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:763:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3518);
            streamExpression187=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression187.getTree());
            // EsperEPL2Grammar.g:763:21: ( regularJoin | outerJoinList )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==EOF||LA67_0==WHERE||(LA67_0>=GROUP && LA67_0<=HAVING)||LA67_0==OUTPUT||LA67_0==ORDER||LA67_0==ROW_LIMIT_EXPR||LA67_0==MATCH_RECOGNIZE||LA67_0==COMMA) ) {
                alt67=1;
            }
            else if ( ((LA67_0>=INNER && LA67_0<=FULL)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:763:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3521);
                    regularJoin188=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin188.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:763:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3525);
                    outerJoinList189=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList189.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:766:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA190=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression191 = null;


        CommonTree COMMA190_tree=null;

        try {
            // EsperEPL2Grammar.g:767:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:767:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:767:4: ( COMMA streamExpression )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // EsperEPL2Grammar.g:767:5: COMMA streamExpression
            	    {
            	    COMMA190=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3539); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3542);
            	    streamExpression191=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression191.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:770:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin192 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin193 = null;



        try {
            // EsperEPL2Grammar.g:771:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:771:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3556);
            outerJoin192=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin192.getTree());
            // EsperEPL2Grammar.g:771:14: ( outerJoin )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( ((LA69_0>=INNER && LA69_0<=FULL)) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // EsperEPL2Grammar.g:771:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3559);
            	    outerJoin193=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin193.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:774:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER194=null;
        Token JOIN195=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression196 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent197 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER194_tree=null;
        CommonTree JOIN195_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:777:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:777:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:777:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=JOIN && LA72_0<=FULL)) ) {
                alt72=1;
            }
            else if ( (LA72_0==INNER) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:778:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:778:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( ((LA71_0>=LEFT && LA71_0<=FULL)) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // EsperEPL2Grammar.g:778:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:778:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt70=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt70=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt70=2;
                                }
                                break;
                            case FULL:
                                {
                                alt70=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 70, 0, input);

                                throw nvae;
                            }

                            switch (alt70) {
                                case 1 :
                                    // EsperEPL2Grammar.g:778:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3602); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:778:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3606); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:778:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3610); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER194=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3613); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER194);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:779:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:779:14: (i= INNER )
                    // EsperEPL2Grammar.g:779:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN195=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN195);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3650);
            streamExpression196=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression196.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3652);
            outerJoinIdent197=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent197.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, outerJoinIdent, outerJoinIdent, streamExpression, streamExpression, streamExpression, outerJoinIdent, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 781:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:781:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 782:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:782:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 783:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:783:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 784:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:784:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:787:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON198=null;
        Token AND_EXPR200=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair199 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair201 = null;


        CommonTree ON198_tree=null;
        CommonTree AND_EXPR200_tree=null;

        try {
            // EsperEPL2Grammar.g:788:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:788:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON198=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3717); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3720);
            outerJoinIdentPair199=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair199.getTree());
            // EsperEPL2Grammar.g:788:27: ( AND_EXPR outerJoinIdentPair )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==AND_EXPR) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // EsperEPL2Grammar.g:788:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR200=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3723); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3726);
            	    outerJoinIdentPair201=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair201.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:791:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS203=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty202 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty204 = null;


        CommonTree EQUALS203_tree=null;

        try {
            // EsperEPL2Grammar.g:792:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:792:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3741);
            eventProperty202=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty202.getTree());
            EQUALS203=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3743); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3746);
            eventProperty204=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty204.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:795:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression205 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:798:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:798:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3768);
            evalOrExpression205=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression205.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 799:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:799:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:802:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList206 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:805:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:805:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:805:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt74=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt74=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt74=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt74=3;
                    }
                    break;
            }

            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:805:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:805:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:805:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:805:43: (d= DISTINCT )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==DISTINCT) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:805:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause3822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3825);
            selectionList206=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList206.getTree());


            // AST REWRITE
            // elements: d, selectionList, s
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 806:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:806:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:806:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:806:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:809:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA208=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement207 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement209 = null;


        CommonTree COMMA208_tree=null;

        try {
            // EsperEPL2Grammar.g:810:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:810:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3856);
            selectionListElement207=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement207.getTree());
            // EsperEPL2Grammar.g:810:25: ( COMMA selectionListElement )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // EsperEPL2Grammar.g:810:26: COMMA selectionListElement
            	    {
            	    COMMA208=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3859); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3862);
            	    selectionListElement209=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement209.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:813:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS212=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector210 = null;

        EsperEPL2GrammarParser.expression_return expression211 = null;


        CommonTree s_tree=null;
        CommonTree AS212_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:815:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt78=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt78=1;
                }
                break;
            case IDENT:
                {
                int LA78_2 = input.LA(2);

                if ( (LA78_2==DOT) ) {
                    int LA78_62 = input.LA(3);

                    if ( (LA78_62==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt78=2;
                    }
                    else if ( (LA78_62==WINDOW||LA78_62==ESCAPE||LA78_62==EVERY_EXPR||(LA78_62>=SUM && LA78_62<=COUNT)||LA78_62==OUTER||(LA78_62>=JOIN && LA78_62<=FULL)||(LA78_62>=EVENTS && LA78_62<=LAST)||(LA78_62>=UNIDIRECTIONAL && LA78_62<=PRIOR)||(LA78_62>=WEEKDAY && LA78_62<=CAST)||LA78_62==SNAPSHOT||(LA78_62>=VARIABLE && LA78_62<=INDEX)||(LA78_62>=DEFINE && LA78_62<=MATCHES)||LA78_62==IDENT||LA78_62==TICKED_STRING_LITERAL) ) {
                        alt78=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 78, 62, input);

                        throw nvae;
                    }
                }
                else if ( (LA78_2==EOF||(LA78_2>=IN_SET && LA78_2<=REGEXP)||(LA78_2>=OR_EXPR && LA78_2<=NOT_EXPR)||(LA78_2>=WHERE && LA78_2<=AS)||LA78_2==FROM||LA78_2==IS||(LA78_2>=GROUP && LA78_2<=HAVING)||LA78_2==OUTPUT||LA78_2==INSERT||LA78_2==ORDER||LA78_2==ROW_LIMIT_EXPR||LA78_2==COMMA||LA78_2==EQUALS||LA78_2==LPAREN||(LA78_2>=STAR && LA78_2<=LBRACK)||(LA78_2>=BAND && LA78_2<=MOD)||LA78_2==ESCAPECHAR) ) {
                    alt78=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt78=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:815:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 815:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:816:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3904);
                    streamSelector210=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector210.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:817:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3909);
                    expression211=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression211.getTree());
                    // EsperEPL2Grammar.g:817:15: ( AS i= keywordAllowedIdent )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==AS) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // EsperEPL2Grammar.g:817:16: AS i= keywordAllowedIdent
                            {
                            AS212=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3912); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS212);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3916);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 818:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:818:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 819:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:819:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 820:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:820:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:823:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT213=null;
        Token STAR214=null;
        Token AS215=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT213_tree=null;
        CommonTree STAR214_tree=null;
        CommonTree AS215_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:824:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:824:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT213=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT213);

            STAR214=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR214);

            // EsperEPL2Grammar.g:824:21: ( AS i= IDENT )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // EsperEPL2Grammar.g:824:22: AS i= IDENT
                    {
                    AS215=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS215);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 825:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:825:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:825:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:829:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT220=null;
        Token DOT222=null;
        Token AS224=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression216 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression217 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression218 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression219 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression221 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression223 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT220_tree=null;
        CommonTree DOT222_tree=null;
        CommonTree AS224_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:830:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:830:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:830:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt80=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA80_1 = input.LA(2);

                if ( (LA80_1==EOF||(LA80_1>=WHERE && LA80_1<=AS)||(LA80_1>=INNER && LA80_1<=ON)||(LA80_1>=GROUP && LA80_1<=HAVING)||LA80_1==OUTPUT||LA80_1==ORDER||(LA80_1>=UNIDIRECTIONAL && LA80_1<=RETAININTERSECTION)||LA80_1==ROW_LIMIT_EXPR||LA80_1==MATCH_RECOGNIZE||(LA80_1>=COMMA && LA80_1<=LPAREN)||LA80_1==LBRACK) ) {
                    alt80=1;
                }
                else if ( (LA80_1==COLON) ) {
                    alt80=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt80=1;
                }
                break;
            case PATTERN:
                {
                alt80=2;
                }
                break;
            case SQL:
                {
                alt80=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:830:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4014);
                    eventFilterExpression216=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression216.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:830:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4018);
                    patternInclusionExpression217=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression217.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:830:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4022);
                    databaseJoinExpression218=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression218.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:830:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4026);
                    methodJoinExpression219=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression219.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:831:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==DOT) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:831:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT220=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT220);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression4035);
                    viewExpression221=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression221.getTree());
                    // EsperEPL2Grammar.g:831:23: ( DOT viewExpression )*
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==DOT) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:831:24: DOT viewExpression
                    	    {
                    	    DOT222=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4038); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT222);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4040);
                    	    viewExpression223=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression223.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop81;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:831:47: ( AS i= IDENT | i= IDENT )?
            int alt83=3;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==AS) ) {
                alt83=1;
            }
            else if ( (LA83_0==IDENT) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:831:48: AS i= IDENT
                    {
                    AS224=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS224);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:831:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:831:71: (u= UNIDIRECTIONAL )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==UNIDIRECTIONAL) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:831:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:831:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt85=3;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==RETAINUNION) ) {
                alt85=1;
            }
            else if ( (LA85_0==RETAININTERSECTION) ) {
                alt85=2;
            }
            switch (alt85) {
                case 1 :
                    // EsperEPL2Grammar.g:831:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:831:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, ri, ru, patternInclusionExpression, methodJoinExpression, viewExpression, databaseJoinExpression, eventFilterExpression, u
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:832:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:832:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:832:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:832:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:832:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:833:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:833:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:833:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:833:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:833:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:844:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE225=null;
        Token LPAREN226=null;
        Token RPAREN234=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy227 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures228 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection229 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip230 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern231 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval232 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine233 = null;


        CommonTree MATCH_RECOGNIZE225_tree=null;
        CommonTree LPAREN226_tree=null;
        CommonTree RPAREN234_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:845:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:845:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE225=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE225);

            LPAREN226=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN226);

            // EsperEPL2Grammar.g:847:4: ( matchRecogPartitionBy )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==PARTITION) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // EsperEPL2Grammar.g:847:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4158);
                    matchRecogPartitionBy227=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy227.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4165);
            matchRecogMeasures228=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures228.getTree());
            // EsperEPL2Grammar.g:849:4: ( matchRecogMatchesSelection )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ALL) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:849:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4170);
                    matchRecogMatchesSelection229=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection229.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:850:4: ( matchRecogMatchesAfterSkip )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==AFTER) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // EsperEPL2Grammar.g:850:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4176);
                    matchRecogMatchesAfterSkip230=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip230.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4182);
            matchRecogPattern231=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern231.getTree());
            // EsperEPL2Grammar.g:852:4: ( matchRecogMatchesInterval )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==IDENT) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:852:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4188);
                    matchRecogMatchesInterval232=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval232.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4194);
            matchRecogDefine233=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine233.getTree());
            RPAREN234=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN234);



            // AST REWRITE
            // elements: matchRecogMatchesInterval, matchRecogPattern, matchRecogDefine, matchRecogMeasures, matchRecogPartitionBy, matchRecogMatchesSelection, MATCH_RECOGNIZE, matchRecogMatchesAfterSkip
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 855:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:855:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:855:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:855:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:855:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:855:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:858:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION235=null;
        Token BY236=null;
        Token COMMA238=null;
        EsperEPL2GrammarParser.expression_return expression237 = null;

        EsperEPL2GrammarParser.expression_return expression239 = null;


        CommonTree PARTITION235_tree=null;
        CommonTree BY236_tree=null;
        CommonTree COMMA238_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:859:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:859:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION235=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION235);

            BY236=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY236);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4242);
            expression237=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression237.getTree());
            // EsperEPL2Grammar.g:859:28: ( COMMA expression )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==COMMA) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // EsperEPL2Grammar.g:859:29: COMMA expression
            	    {
            	    COMMA238=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4245); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA238);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4247);
            	    expression239=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression239.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 860:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:860:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:863:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES240=null;
        Token COMMA242=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem241 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem243 = null;


        CommonTree MEASURES240_tree=null;
        CommonTree COMMA242_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:864:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:864:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES240=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES240);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4278);
            matchRecogMeasureItem241=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem241.getTree());
            // EsperEPL2Grammar.g:864:35: ( COMMA matchRecogMeasureItem )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // EsperEPL2Grammar.g:864:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4281); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4283);
            	    matchRecogMeasureItem243=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem243.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 865:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:865:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:865:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:868:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS245=null;
        EsperEPL2GrammarParser.expression_return expression244 = null;


        CommonTree i_tree=null;
        CommonTree AS245_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:869:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:869:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4308);
            expression244=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression244.getTree());
            // EsperEPL2Grammar.g:869:15: ( AS (i= IDENT )? )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==AS) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:869:16: AS (i= IDENT )?
                    {
                    AS245=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS245);

                    // EsperEPL2Grammar.g:869:19: (i= IDENT )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==IDENT) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // EsperEPL2Grammar.g:869:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4316); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 870:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:870:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:870:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:873:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL246=null;
        Token MATCHES247=null;

        CommonTree ALL246_tree=null;
        CommonTree MATCHES247_tree=null;

        try {
            // EsperEPL2Grammar.g:874:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:874:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL246=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL246_tree = (CommonTree)adaptor.create(ALL246);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL246_tree, root_0);
            }
            MATCHES247=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4350); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:877:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN248=null;
        Token LPAREN249=null;
        Token RPAREN251=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration250 = null;


        CommonTree PATTERN248_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN251_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:878:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:878:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN248=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN248);

            LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4369);
            matchRecogPatternAlteration250=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration250.getTree());
            RPAREN251=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN251);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 879:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:879:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:882:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER252=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER252_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:883:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:883:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER252=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER252);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4397);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4401);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4405);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4409);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4413);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i5, i4, i1, i3, i2
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 884:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:884:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:887:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod253 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:888:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:888:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4451);
            timePeriod253=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod253.getTree());


            // AST REWRITE
            // elements: timePeriod, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 889:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:889:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:892:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat254 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat255 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:893:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:893:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4477);
            matchRecogPatternConcat254=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat254.getTree());
            // EsperEPL2Grammar.g:893:28: (o= BOR matchRecogPatternConcat )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==BOR) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // EsperEPL2Grammar.g:893:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4482); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4484);
            	    matchRecogPatternConcat255=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat255.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 894:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:894:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 895:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:898:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary256 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:899:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:899:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:899:4: ( matchRecogPatternUnary )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==IDENT||LA95_0==LPAREN) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // EsperEPL2Grammar.g:899:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4517);
            	    matchRecogPatternUnary256=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary256.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 900:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:900:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:903:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested257 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom258 = null;



        try {
            // EsperEPL2Grammar.g:904:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            else if ( (LA96_0==IDENT) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:904:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4542);
                    matchRecogPatternNested257=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested257.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:905:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4548);
                    matchRecogPatternAtom258=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom258.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:908:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN259=null;
        Token RPAREN261=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration260 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN259_tree=null;
        CommonTree RPAREN261_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:909:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:909:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN259=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN259);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4562);
            matchRecogPatternAlteration260=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration260.getTree());
            RPAREN261=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN261);

            // EsperEPL2Grammar.g:909:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt97=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt97=1;
                    }
                    break;
                case PLUS:
                    {
                    alt97=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt97=3;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:909:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:909:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:909:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: matchRecogPatternAlteration, p, s, q
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 910:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:910:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:910:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:910:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:910:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:913:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:914:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:914:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:914:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==STAR||(LA100_0>=PLUS && LA100_0<=QUESTION)) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:914:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:914:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt98=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt98=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt98=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt98=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 0, input);

                        throw nvae;
                    }

                    switch (alt98) {
                        case 1 :
                            // EsperEPL2Grammar.g:914:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4626); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:914:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4632); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:914:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4638); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:914:44: (reluctant= QUESTION )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==QUESTION) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // EsperEPL2Grammar.g:914:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4644); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: p, s, i, reluctant, q
            // token labels: reluctant, s, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 915:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:915:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:915:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:915:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:915:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:915:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:918:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE262=null;
        Token COMMA264=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem263 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem265 = null;


        CommonTree DEFINE262_tree=null;
        CommonTree COMMA264_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:919:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:919:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE262=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE262);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4690);
            matchRecogDefineItem263=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem263.getTree());
            // EsperEPL2Grammar.g:919:32: ( COMMA matchRecogDefineItem )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // EsperEPL2Grammar.g:919:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA264=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4693); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA264);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4695);
            	    matchRecogDefineItem265=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem265.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 920:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:920:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:923:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS266=null;
        EsperEPL2GrammarParser.expression_return expression267 = null;


        CommonTree i_tree=null;
        CommonTree AS266_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:924:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:924:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem4722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS266=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem4724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS266);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem4726);
            expression267=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 925:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:925:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:928:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN268=null;
        Token LBRACK269=null;
        Token RBRACK271=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression270 = null;


        CommonTree PATTERN268_tree=null;
        CommonTree LBRACK269_tree=null;
        CommonTree RBRACK271_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:929:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:929:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN268=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression4751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN268);

            LBRACK269=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression4753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK269);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression4755);
            patternExpression270=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression270.getTree());
            RBRACK271=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression4757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK271);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 930:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:930:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:933:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL272=null;
        Token COLON273=null;
        Token LBRACK274=null;
        Token METADATASQL275=null;
        Token RBRACK276=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL272_tree=null;
        CommonTree COLON273_tree=null;
        CommonTree LBRACK274_tree=null;
        CommonTree METADATASQL275_tree=null;
        CommonTree RBRACK276_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:936:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:936:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL272=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression4790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL272);

            COLON273=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression4792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON273);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression4796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK274=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression4798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK274);

            // EsperEPL2Grammar.g:936:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==STRING_LITERAL) ) {
                alt102=1;
            }
            else if ( (LA102_0==QUOTED_STRING_LITERAL) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // EsperEPL2Grammar.g:936:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:936:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:936:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==METADATASQL) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:936:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL275=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression4813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL275);

                    // EsperEPL2Grammar.g:936:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==STRING_LITERAL) ) {
                        alt103=1;
                    }
                    else if ( (LA103_0==QUOTED_STRING_LITERAL) ) {
                        alt103=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 103, 0, input);

                        throw nvae;
                    }
                    switch (alt103) {
                        case 1 :
                            // EsperEPL2Grammar.g:936:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4818); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:936:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4824); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK276=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression4829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK276);



            // AST REWRITE
            // elements: s2, s, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 937:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:937:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:937:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:940:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON277=null;
        Token LPAREN279=null;
        Token RPAREN281=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier278 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList280 = null;


        CommonTree i_tree=null;
        CommonTree COLON277_tree=null;
        CommonTree LPAREN279_tree=null;
        CommonTree RPAREN281_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:943:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:943:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression4880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON277=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression4882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON277);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression4884);
            classIdentifier278=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier278.getTree());
            // EsperEPL2Grammar.g:943:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==LPAREN) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // EsperEPL2Grammar.g:943:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN279=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression4887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN279);

                    // EsperEPL2Grammar.g:943:49: ( expressionList )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==WINDOW||LA105_0==ESCAPE||(LA105_0>=NOT_EXPR && LA105_0<=EVERY_EXPR)||(LA105_0>=SUM && LA105_0<=COUNT)||LA105_0==CASE||LA105_0==OUTER||(LA105_0>=JOIN && LA105_0<=FULL)||(LA105_0>=EVENTS && LA105_0<=LAST)||(LA105_0>=UNIDIRECTIONAL && LA105_0<=CURRENT_TIMESTAMP)||LA105_0==SNAPSHOT||(LA105_0>=VARIABLE && LA105_0<=INDEX)||(LA105_0>=BOOLEAN_TRUE && LA105_0<=VALUE_NULL)||(LA105_0>=DEFINE && LA105_0<=MATCHES)||LA105_0==NUM_DOUBLE||LA105_0==IDENT||LA105_0==LPAREN||(LA105_0>=PLUS && LA105_0<=QUESTION)||(LA105_0>=STRING_LITERAL && LA105_0<=QUOTED_STRING_LITERAL)||LA105_0==MINUS||LA105_0==LCURLY||LA105_0==NUM_INT||(LA105_0>=TICKED_STRING_LITERAL && LA105_0<=NUM_FLOAT)) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // EsperEPL2Grammar.g:943:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression4889);
                            expressionList280=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList280.getTree());

                            }
                            break;

                    }

                    RPAREN281=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression4892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN281);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 944:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:944:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:944:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:947:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON282=null;
        Token LPAREN283=null;
        Token RPAREN285=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList284 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON282_tree=null;
        CommonTree LPAREN283_tree=null;
        CommonTree RPAREN285_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:950:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:950:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON282=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression4947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON282);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN283=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression4953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN283);

            // EsperEPL2Grammar.g:950:35: ( expressionWithTimeList )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==WINDOW||LA107_0==ESCAPE||(LA107_0>=NOT_EXPR && LA107_0<=EVERY_EXPR)||(LA107_0>=SUM && LA107_0<=COUNT)||LA107_0==CASE||LA107_0==OUTER||(LA107_0>=JOIN && LA107_0<=FULL)||(LA107_0>=EVENTS && LA107_0<=LAST)||(LA107_0>=UNIDIRECTIONAL && LA107_0<=CURRENT_TIMESTAMP)||LA107_0==SNAPSHOT||(LA107_0>=VARIABLE && LA107_0<=INDEX)||(LA107_0>=BOOLEAN_TRUE && LA107_0<=VALUE_NULL)||(LA107_0>=DEFINE && LA107_0<=MATCHES)||LA107_0==NUM_DOUBLE||LA107_0==IDENT||LA107_0==LPAREN||LA107_0==STAR||(LA107_0>=PLUS && LA107_0<=LBRACK)||(LA107_0>=STRING_LITERAL && LA107_0<=QUOTED_STRING_LITERAL)||LA107_0==MINUS||LA107_0==LCURLY||LA107_0==NUM_INT||(LA107_0>=TICKED_STRING_LITERAL && LA107_0<=NUM_FLOAT)) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // EsperEPL2Grammar.g:950:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression4955);
                    expressionWithTimeList284=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList284.getTree());

                    }
                    break;

            }

            RPAREN285=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression4958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN285);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 951:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:951:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:951:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:954:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA287=null;
        EsperEPL2GrammarParser.expression_return expression286 = null;

        EsperEPL2GrammarParser.expression_return expression288 = null;


        CommonTree COMMA287_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:957:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:957:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr4997);
            expression286=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression286.getTree());
            // EsperEPL2Grammar.g:957:15: ( COMMA expression )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // EsperEPL2Grammar.g:957:16: COMMA expression
            	    {
            	    COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5000); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA287);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr5002);
            	    expression288=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression288.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 958:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:958:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:961:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA290=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement289 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement291 = null;


        CommonTree COMMA290_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:964:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:964:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5037);
            orderByListElement289=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement289.getTree());
            // EsperEPL2Grammar.g:964:23: ( COMMA orderByListElement )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // EsperEPL2Grammar.g:964:24: COMMA orderByListElement
            	    {
            	    COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5040); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA290);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5042);
            	    orderByListElement291=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement291.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 965:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:965:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:968:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression292 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:969:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:969:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5067);
            expression292=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression292.getTree());
            // EsperEPL2Grammar.g:969:15: (d= ASC | d= DESC )?
            int alt110=3;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASC) ) {
                alt110=1;
            }
            else if ( (LA110_0==DESC) ) {
                alt110=2;
            }
            switch (alt110) {
                case 1 :
                    // EsperEPL2Grammar.g:969:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:969:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 970:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:970:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:970:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:973:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression293 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:976:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:976:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5114);
            evalOrExpression293=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression293.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 977:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:977:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:980:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN299=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter294 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod295 = null;

        EsperEPL2GrammarParser.number_return number296 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet297 = null;

        EsperEPL2GrammarParser.expression_return expression298 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr300 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN299_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:983:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:983:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:983:9: ( outputLimitAfter )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==AFTER) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // EsperEPL2Grammar.g:983:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5152);
                    outputLimitAfter294=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter294.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:984:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt112=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt112=1;
                    }
                    break;
                case FIRST:
                    {
                    alt112=2;
                    }
                    break;
                case LAST:
                    {
                    alt112=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt112=4;
                    }
                    break;
            }

            switch (alt112) {
                case 1 :
                    // EsperEPL2Grammar.g:984:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:984:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:984:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:984:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:985:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt116=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt116=1;
                }
                break;
            case AT:
                {
                alt116=2;
                }
                break;
            case WHEN:
                {
                alt116=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
                {
                alt116=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // EsperEPL2Grammar.g:986:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:986:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:986:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:987:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==NUM_INT) ) {
                        int LA114_1 = input.LA(2);

                        if ( (LA114_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==EVENTS) ) {
                            alt114=2;
                        }
                        else if ( (LA114_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA114_0==NUM_LONG) ) {
                        int LA114_2 = input.LA(2);

                        if ( (LA114_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_2==EVENTS) ) {
                            alt114=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA114_0==NUM_FLOAT) ) {
                        int LA114_3 = input.LA(2);

                        if ( (LA114_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_3==EVENTS) ) {
                            alt114=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA114_0==NUM_DOUBLE) ) {
                        int LA114_4 = input.LA(2);

                        if ( (LA114_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==EVENTS) ) {
                            alt114=2;
                        }
                        else if ( (LA114_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA114_0==IDENT) ) {
                        int LA114_5 = input.LA(2);

                        if ( (LA114_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt114=1;
                        }
                        else if ( (LA114_5==EVENTS) ) {
                            alt114=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA114_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt114=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // EsperEPL2Grammar.g:988:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5236);
                            timePeriod295=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod295.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:989:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:989:9: ( number | i= IDENT )
                            int alt113=2;
                            int LA113_0 = input.LA(1);

                            if ( (LA113_0==NUM_DOUBLE||LA113_0==NUM_INT||(LA113_0>=NUM_LONG && LA113_0<=NUM_FLOAT)) ) {
                                alt113=1;
                            }
                            else if ( (LA113_0==IDENT) ) {
                                alt113=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 113, 0, input);

                                throw nvae;
                            }
                            switch (alt113) {
                                case 1 :
                                    // EsperEPL2Grammar.g:989:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5247);
                                    number296=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number296.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:989:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5253); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:989:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:989:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5259); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:993:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:993:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:993:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5292);
                    crontabLimitParameterSet297=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet297.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:995:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:995:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:995:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5311);
                    expression298=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression298.getTree());
                    // EsperEPL2Grammar.g:995:26: ( THEN onSetExpr )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==THEN) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // EsperEPL2Grammar.g:995:27: THEN onSetExpr
                            {
                            THEN299=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5314); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN299);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5316);
                            onSetExpr300=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr300.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:997:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: crontabLimitParameterSet, k, outputLimitAfter, outputLimitAfter, outputLimitAfter, k, k, k, timePeriod, onSetExpr, number, i, outputLimitAfter, expression, outputLimitAfter
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 998:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:998:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:998:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:998:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:998:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:998:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 999:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:999:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:999:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:999:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1000:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:1000:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1000:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:1000:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1001:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:1001:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1001:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1001:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:1001:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1002:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:1002:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:1005:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS303=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod301 = null;

        EsperEPL2GrammarParser.number_return number302 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS303_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1006:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:1006:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:1006:14: ( timePeriod | number EVENTS )
            int alt117=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA117_1 = input.LA(2);

                if ( (LA117_1==MIN||(LA117_1>=TIMEPERIOD_DAY && LA117_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt117=1;
                }
                else if ( (LA117_1==EVENTS) ) {
                    alt117=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA117_2 = input.LA(2);

                if ( (LA117_2==MIN||(LA117_2>=TIMEPERIOD_DAY && LA117_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt117=1;
                }
                else if ( (LA117_2==EVENTS) ) {
                    alt117=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA117_3 = input.LA(2);

                if ( (LA117_3==EVENTS) ) {
                    alt117=2;
                }
                else if ( (LA117_3==MIN||(LA117_3>=TIMEPERIOD_DAY && LA117_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt117=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA117_4 = input.LA(2);

                if ( (LA117_4==EVENTS) ) {
                    alt117=2;
                }
                else if ( (LA117_4==MIN||(LA117_4>=TIMEPERIOD_DAY && LA117_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt117=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt117=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }

            switch (alt117) {
                case 1 :
                    // EsperEPL2Grammar.g:1006:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5469);
                    timePeriod301=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod301.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1006:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5473);
                    number302=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number302.getTree());
                    EVENTS303=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS303);


                    }
                    break;

            }



            // AST REWRITE
            // elements: timePeriod, AFTER, number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1007:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:1007:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:1007:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:1007:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:1010:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:1013:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:1013:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:1013:6: (n1= numberconstant | i1= IDENT )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==NUM_DOUBLE||LA118_0==PLUS||LA118_0==MINUS||LA118_0==NUM_INT||(LA118_0>=NUM_LONG && LA118_0<=NUM_FLOAT)) ) {
                alt118=1;
            }
            else if ( (LA118_0==IDENT) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:1013:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5521);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1013:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1013:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==OFFSET||LA121_0==COMMA) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // EsperEPL2Grammar.g:1013:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:1013:38: (c= COMMA | o= OFFSET )
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==COMMA) ) {
                        alt119=1;
                    }
                    else if ( (LA119_0==OFFSET) ) {
                        alt119=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 0, input);

                        throw nvae;
                    }
                    switch (alt119) {
                        case 1 :
                            // EsperEPL2Grammar.g:1013:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5534); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1013:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5540); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1013:59: (n2= numberconstant | i2= IDENT )
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==NUM_DOUBLE||LA120_0==PLUS||LA120_0==MINUS||LA120_0==NUM_INT||(LA120_0>=NUM_LONG && LA120_0<=NUM_FLOAT)) ) {
                        alt120=1;
                    }
                    else if ( (LA120_0==IDENT) ) {
                        alt120=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 0, input);

                        throw nvae;
                    }
                    switch (alt120) {
                        case 1 :
                            // EsperEPL2Grammar.g:1013:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5546);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1013:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5552); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n2, i1, n1, o, i2, c
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1014:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:1014:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1014:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:1014:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:1014:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:1014:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:1014:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:1014:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:1017:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN304=null;
        Token COMMA306=null;
        Token COMMA308=null;
        Token COMMA310=null;
        Token COMMA312=null;
        Token COMMA314=null;
        Token RPAREN316=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime305 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime307 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime309 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime311 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime313 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime315 = null;


        CommonTree LPAREN304_tree=null;
        CommonTree COMMA306_tree=null;
        CommonTree COMMA308_tree=null;
        CommonTree COMMA310_tree=null;
        CommonTree COMMA312_tree=null;
        CommonTree COMMA314_tree=null;
        CommonTree RPAREN316_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:1018:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:1018:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN304=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN304);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5606);
            expressionWithTime305=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime305.getTree());
            COMMA306=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA306);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5610);
            expressionWithTime307=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime307.getTree());
            COMMA308=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA308);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5614);
            expressionWithTime309=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime309.getTree());
            COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA310);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5618);
            expressionWithTime311=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime311.getTree());
            COMMA312=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA312);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5622);
            expressionWithTime313=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime313.getTree());
            // EsperEPL2Grammar.g:1018:130: ( COMMA expressionWithTime )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==COMMA) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // EsperEPL2Grammar.g:1018:131: COMMA expressionWithTime
                    {
                    COMMA314=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA314);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5627);
                    expressionWithTime315=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime315.getTree());

                    }
                    break;

            }

            RPAREN316=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN316);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1019:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:1019:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:1019:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:1022:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN317=null;
        Token THEN319=null;
        EsperEPL2GrammarParser.expression_return expression318 = null;

        EsperEPL2GrammarParser.expression_return expression320 = null;


        CommonTree WHEN317_tree=null;
        CommonTree THEN319_tree=null;

        try {
            // EsperEPL2Grammar.g:1023:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:1023:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1023:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:1023:5: WHEN expression THEN expression
            {
            WHEN317=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5661); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5664);
            expression318=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression318.getTree());
            THEN319=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5666); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5669);
            expression320=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression320.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:1026:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE321=null;
        EsperEPL2GrammarParser.expression_return expression322 = null;


        CommonTree ELSE321_tree=null;

        try {
            // EsperEPL2Grammar.g:1027:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:1027:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1027:4: ( ELSE expression )
            // EsperEPL2Grammar.g:1027:5: ELSE expression
            {
            ELSE321=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5682); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5685);
            expression322=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression322.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1031:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression323 = null;



        try {
            // EsperEPL2Grammar.g:1032:2: ( caseExpression )
            // EsperEPL2Grammar.g:1032:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5698);
            caseExpression323=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression323.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1035:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE324=null;
        Token END327=null;
        Token CASE328=null;
        Token END332=null;
        EsperEPL2GrammarParser.whenClause_return whenClause325 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause326 = null;

        EsperEPL2GrammarParser.expression_return expression329 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause330 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause331 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression333 = null;


        CommonTree CASE324_tree=null;
        CommonTree END327_tree=null;
        CommonTree CASE328_tree=null;
        CommonTree END332_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1036:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt127=3;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==CASE) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==WINDOW||LA127_1==ESCAPE||(LA127_1>=NOT_EXPR && LA127_1<=EVERY_EXPR)||(LA127_1>=SUM && LA127_1<=COUNT)||LA127_1==CASE||LA127_1==OUTER||(LA127_1>=JOIN && LA127_1<=FULL)||(LA127_1>=EVENTS && LA127_1<=LAST)||(LA127_1>=UNIDIRECTIONAL && LA127_1<=CURRENT_TIMESTAMP)||LA127_1==SNAPSHOT||(LA127_1>=VARIABLE && LA127_1<=INDEX)||(LA127_1>=BOOLEAN_TRUE && LA127_1<=VALUE_NULL)||(LA127_1>=DEFINE && LA127_1<=MATCHES)||LA127_1==NUM_DOUBLE||LA127_1==IDENT||LA127_1==LPAREN||(LA127_1>=PLUS && LA127_1<=QUESTION)||(LA127_1>=STRING_LITERAL && LA127_1<=QUOTED_STRING_LITERAL)||LA127_1==MINUS||LA127_1==LCURLY||LA127_1==NUM_INT||(LA127_1>=TICKED_STRING_LITERAL && LA127_1<=NUM_FLOAT)) ) {
                    alt127=2;
                }
                else if ( (LA127_1==WHEN) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA127_0==WINDOW||LA127_0==ESCAPE||(LA127_0>=NOT_EXPR && LA127_0<=EVERY_EXPR)||(LA127_0>=SUM && LA127_0<=COUNT)||LA127_0==OUTER||(LA127_0>=JOIN && LA127_0<=FULL)||(LA127_0>=EVENTS && LA127_0<=LAST)||(LA127_0>=UNIDIRECTIONAL && LA127_0<=CURRENT_TIMESTAMP)||LA127_0==SNAPSHOT||(LA127_0>=VARIABLE && LA127_0<=INDEX)||(LA127_0>=BOOLEAN_TRUE && LA127_0<=VALUE_NULL)||(LA127_0>=DEFINE && LA127_0<=MATCHES)||LA127_0==NUM_DOUBLE||LA127_0==IDENT||LA127_0==LPAREN||(LA127_0>=PLUS && LA127_0<=QUESTION)||(LA127_0>=STRING_LITERAL && LA127_0<=QUOTED_STRING_LITERAL)||LA127_0==MINUS||LA127_0==LCURLY||LA127_0==NUM_INT||(LA127_0>=TICKED_STRING_LITERAL && LA127_0<=NUM_FLOAT)) ) {
                alt127=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    // EsperEPL2Grammar.g:1036:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE324=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE324_tree = (CommonTree)adaptor.create(CASE324);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE324_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1036:52: ( whenClause )+
                    int cnt123=0;
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==WHEN) ) {
                            alt123=1;
                        }


                        switch (alt123) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1036:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5715);
                    	    whenClause325=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause325.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt123 >= 1 ) break loop123;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(123, input);
                                throw eee;
                        }
                        cnt123++;
                    } while (true);

                    // EsperEPL2Grammar.g:1036:64: ( elseClause )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==ELSE) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // EsperEPL2Grammar.g:1036:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5718);
                            elseClause326=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause326.getTree());

                            }
                            break;

                    }

                    END327=(Token)match(input,END,FOLLOW_END_in_caseExpression5721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1037:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE328=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE328);

                    pushFollow(FOLLOW_expression_in_caseExpression5734);
                    expression329=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression329.getTree());
                    // EsperEPL2Grammar.g:1037:62: ( whenClause )+
                    int cnt125=0;
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==WHEN) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1037:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5736);
                    	    whenClause330=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause330.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt125 >= 1 ) break loop125;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(125, input);
                                throw eee;
                        }
                        cnt125++;
                    } while (true);

                    // EsperEPL2Grammar.g:1037:74: ( elseClause )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==ELSE) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // EsperEPL2Grammar.g:1037:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5739);
                            elseClause331=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause331.getTree());

                            }
                            break;

                    }

                    END332=(Token)match(input,END,FOLLOW_END_in_caseExpression5742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END332);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, whenClause, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1038:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1038:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1038:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1039:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression5766);
                    evalOrExpression333=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression333.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1042:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression334 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression335 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1043:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1043:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5777);
            evalAndExpression334=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression334.getTree());
            // EsperEPL2Grammar.g:1043:22: (op= OR_EXPR evalAndExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==OR_EXPR) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1043:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression5782); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5784);
            	    evalAndExpression335=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression335.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1044:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1044:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1044:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1045:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1048:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression336 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression337 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1049:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1049:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5816);
            bitWiseExpression336=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression336.getTree());
            // EsperEPL2Grammar.g:1049:22: (op= AND_EXPR bitWiseExpression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==AND_EXPR) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1049:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression5821); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5823);
            	    bitWiseExpression337=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression337.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1050:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1050:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1051:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1054:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND339=null;
        Token BOR340=null;
        Token BXOR341=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression338 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression342 = null;


        CommonTree BAND339_tree=null;
        CommonTree BOR340_tree=null;
        CommonTree BXOR341_tree=null;

        try {
            // EsperEPL2Grammar.g:1055:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1055:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5855);
            negatedExpression338=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression338.getTree());
            // EsperEPL2Grammar.g:1055:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==BOR||(LA131_0>=BAND && LA131_0<=BXOR)) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1055:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1055:24: ( BAND | BOR | BXOR )
            	    int alt130=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt130=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt130=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt130=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 130, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt130) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1055:25: BAND
            	            {
            	            BAND339=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression5860); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND339_tree = (CommonTree)adaptor.create(BAND339);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND339_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1055:31: BOR
            	            {
            	            BOR340=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression5863); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR340_tree = (CommonTree)adaptor.create(BOR340);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR340_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1055:36: BXOR
            	            {
            	            BXOR341=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression5866); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR341_tree = (CommonTree)adaptor.create(BXOR341);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR341_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5870);
            	    negatedExpression342=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression342.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1058:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR344=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression343 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression345 = null;


        CommonTree NOT_EXPR344_tree=null;

        try {
            // EsperEPL2Grammar.g:1059:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==WINDOW||LA132_0==ESCAPE||LA132_0==EVERY_EXPR||(LA132_0>=SUM && LA132_0<=COUNT)||LA132_0==OUTER||(LA132_0>=JOIN && LA132_0<=FULL)||(LA132_0>=EVENTS && LA132_0<=LAST)||(LA132_0>=UNIDIRECTIONAL && LA132_0<=CURRENT_TIMESTAMP)||LA132_0==SNAPSHOT||(LA132_0>=VARIABLE && LA132_0<=INDEX)||(LA132_0>=BOOLEAN_TRUE && LA132_0<=VALUE_NULL)||(LA132_0>=DEFINE && LA132_0<=MATCHES)||LA132_0==NUM_DOUBLE||LA132_0==IDENT||LA132_0==LPAREN||(LA132_0>=PLUS && LA132_0<=QUESTION)||(LA132_0>=STRING_LITERAL && LA132_0<=QUOTED_STRING_LITERAL)||LA132_0==MINUS||LA132_0==LCURLY||LA132_0==NUM_INT||(LA132_0>=TICKED_STRING_LITERAL && LA132_0<=NUM_FLOAT)) ) {
                alt132=1;
            }
            else if ( (LA132_0==NOT_EXPR) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // EsperEPL2Grammar.g:1059:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5885);
                    evalEqualsExpression343=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression343.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1060:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR344=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression5891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR344_tree = (CommonTree)adaptor.create(NOT_EXPR344);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR344_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5894);
                    evalEqualsExpression345=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression345.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1063:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR347=null;
        Token LPAREN349=null;
        Token RPAREN351=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression346 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression348 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList350 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression352 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR347_tree=null;
        CommonTree LPAREN349_tree=null;
        CommonTree RPAREN351_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1064:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1064:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5907);
            evalRelationalExpression346=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression346.getTree());
            // EsperEPL2Grammar.g:1064:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==IS||LA138_0==EQUALS||(LA138_0>=SQL_NE && LA138_0<=NOT_EQUAL)) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1065:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1065:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt133=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt133=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA133_2 = input.LA(2);

            	        if ( (LA133_2==NOT_EXPR) ) {
            	            alt133=3;
            	        }
            	        else if ( (LA133_2==WINDOW||LA133_2==ESCAPE||LA133_2==EVERY_EXPR||(LA133_2>=SUM && LA133_2<=COUNT)||LA133_2==OUTER||(LA133_2>=JOIN && LA133_2<=FULL)||(LA133_2>=ALL && LA133_2<=SOME)||(LA133_2>=EVENTS && LA133_2<=LAST)||(LA133_2>=UNIDIRECTIONAL && LA133_2<=CURRENT_TIMESTAMP)||LA133_2==SNAPSHOT||(LA133_2>=VARIABLE && LA133_2<=INDEX)||(LA133_2>=BOOLEAN_TRUE && LA133_2<=VALUE_NULL)||(LA133_2>=DEFINE && LA133_2<=MATCHES)||LA133_2==NUM_DOUBLE||LA133_2==IDENT||LA133_2==LPAREN||(LA133_2>=PLUS && LA133_2<=QUESTION)||(LA133_2>=STRING_LITERAL && LA133_2<=QUOTED_STRING_LITERAL)||LA133_2==MINUS||LA133_2==LCURLY||LA133_2==NUM_INT||(LA133_2>=TICKED_STRING_LITERAL && LA133_2<=NUM_FLOAT)) ) {
            	            alt133=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 133, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt133=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt133=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 133, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt133) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1065:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression5920); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1066:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5938); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1067:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5952); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR347=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression5954); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR347);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1068:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression5968); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1069:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression5982); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1071:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt137=2;
            	    int LA137_0 = input.LA(1);

            	    if ( (LA137_0==WINDOW||LA137_0==ESCAPE||LA137_0==EVERY_EXPR||(LA137_0>=SUM && LA137_0<=COUNT)||LA137_0==OUTER||(LA137_0>=JOIN && LA137_0<=FULL)||(LA137_0>=EVENTS && LA137_0<=LAST)||(LA137_0>=UNIDIRECTIONAL && LA137_0<=CURRENT_TIMESTAMP)||LA137_0==SNAPSHOT||(LA137_0>=VARIABLE && LA137_0<=INDEX)||(LA137_0>=BOOLEAN_TRUE && LA137_0<=VALUE_NULL)||(LA137_0>=DEFINE && LA137_0<=MATCHES)||LA137_0==NUM_DOUBLE||LA137_0==IDENT||LA137_0==LPAREN||(LA137_0>=PLUS && LA137_0<=QUESTION)||(LA137_0>=STRING_LITERAL && LA137_0<=QUOTED_STRING_LITERAL)||LA137_0==MINUS||LA137_0==LCURLY||LA137_0==NUM_INT||(LA137_0>=TICKED_STRING_LITERAL && LA137_0<=NUM_FLOAT)) ) {
            	        alt137=1;
            	    }
            	    else if ( ((LA137_0>=ALL && LA137_0<=SOME)) ) {
            	        alt137=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 137, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt137) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1072:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6012);
            	            evalRelationalExpression348=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression348.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1073:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1073:13: (a= ANY | a= SOME | a= ALL )
            	            int alt134=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt134=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt134=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt134=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 134, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt134) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1073:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6029); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1073:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6035); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1073:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6041); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1073:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt136=2;
            	            int LA136_0 = input.LA(1);

            	            if ( (LA136_0==LPAREN) ) {
            	                int LA136_1 = input.LA(2);

            	                if ( (LA136_1==SELECT) ) {
            	                    alt136=2;
            	                }
            	                else if ( (LA136_1==WINDOW||LA136_1==ESCAPE||(LA136_1>=NOT_EXPR && LA136_1<=EVERY_EXPR)||(LA136_1>=SUM && LA136_1<=COUNT)||LA136_1==CASE||LA136_1==OUTER||(LA136_1>=JOIN && LA136_1<=FULL)||(LA136_1>=EVENTS && LA136_1<=LAST)||(LA136_1>=UNIDIRECTIONAL && LA136_1<=CURRENT_TIMESTAMP)||LA136_1==SNAPSHOT||(LA136_1>=VARIABLE && LA136_1<=INDEX)||(LA136_1>=BOOLEAN_TRUE && LA136_1<=VALUE_NULL)||(LA136_1>=DEFINE && LA136_1<=MATCHES)||LA136_1==NUM_DOUBLE||LA136_1==IDENT||(LA136_1>=LPAREN && LA136_1<=RPAREN)||(LA136_1>=PLUS && LA136_1<=QUESTION)||(LA136_1>=STRING_LITERAL && LA136_1<=QUOTED_STRING_LITERAL)||LA136_1==MINUS||LA136_1==LCURLY||LA136_1==NUM_INT||(LA136_1>=TICKED_STRING_LITERAL && LA136_1<=NUM_FLOAT)) ) {
            	                    alt136=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 136, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 136, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt136) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1073:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1073:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1073:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6047); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN349);

            	                    // EsperEPL2Grammar.g:1073:48: ( expressionList )?
            	                    int alt135=2;
            	                    int LA135_0 = input.LA(1);

            	                    if ( (LA135_0==WINDOW||LA135_0==ESCAPE||(LA135_0>=NOT_EXPR && LA135_0<=EVERY_EXPR)||(LA135_0>=SUM && LA135_0<=COUNT)||LA135_0==CASE||LA135_0==OUTER||(LA135_0>=JOIN && LA135_0<=FULL)||(LA135_0>=EVENTS && LA135_0<=LAST)||(LA135_0>=UNIDIRECTIONAL && LA135_0<=CURRENT_TIMESTAMP)||LA135_0==SNAPSHOT||(LA135_0>=VARIABLE && LA135_0<=INDEX)||(LA135_0>=BOOLEAN_TRUE && LA135_0<=VALUE_NULL)||(LA135_0>=DEFINE && LA135_0<=MATCHES)||LA135_0==NUM_DOUBLE||LA135_0==IDENT||LA135_0==LPAREN||(LA135_0>=PLUS && LA135_0<=QUESTION)||(LA135_0>=STRING_LITERAL && LA135_0<=QUOTED_STRING_LITERAL)||LA135_0==MINUS||LA135_0==LCURLY||LA135_0==NUM_INT||(LA135_0>=TICKED_STRING_LITERAL && LA135_0<=NUM_FLOAT)) ) {
            	                        alt135=1;
            	                    }
            	                    switch (alt135) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1073:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6049);
            	                            expressionList350=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList350.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN351=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6052); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN351);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1073:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6057);
            	                    subSelectGroupExpression352=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression352.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);



            // AST REWRITE
            // elements: expressionList, evalRelationalExpression, a, subSelectGroupExpression, a, expressionList, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, subSelectGroupExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1076:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1076:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1077:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1077:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1077:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1077:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1078:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1078:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1079:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1079:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1079:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1079:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1080:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1083:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN355=null;
        Token RPAREN357=null;
        Token COMMA361=null;
        Token IN_SET363=null;
        Token BETWEEN365=null;
        Token LIKE367=null;
        Token ESCAPE369=null;
        Token REGEXP371=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr353 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr354 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList356 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression358 = null;

        EsperEPL2GrammarParser.expression_return expression359 = null;

        EsperEPL2GrammarParser.expression_return expression360 = null;

        EsperEPL2GrammarParser.expression_return expression362 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery364 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList366 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr368 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant370 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr372 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN355_tree=null;
        CommonTree RPAREN357_tree=null;
        CommonTree COMMA361_tree=null;
        CommonTree IN_SET363_tree=null;
        CommonTree BETWEEN365_tree=null;
        CommonTree LIKE367_tree=null;
        CommonTree ESCAPE369_tree=null;
        CommonTree REGEXP371_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1084:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1084:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6185);
            concatenationExpr353=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr353.getTree());
            // EsperEPL2Grammar.g:1085:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==EOF||(LA152_0>=OR_EXPR && LA152_0<=AND_EXPR)||(LA152_0>=WHERE && LA152_0<=AS)||(LA152_0>=ELSE && LA152_0<=FROM)||LA152_0==IS||(LA152_0>=GROUP && LA152_0<=HAVING)||LA152_0==ALL||LA152_0==OUTPUT||LA152_0==INSERT||(LA152_0>=ORDER && LA152_0<=DESC)||LA152_0==PATTERN||(LA152_0>=TIMEPERIOD_SEC && LA152_0<=TIMEPERIOD_SECONDS)||LA152_0==ROW_LIMIT_EXPR||LA152_0==MEASURES||LA152_0==AFTER||LA152_0==COMMA||LA152_0==EQUALS||LA152_0==RPAREN||LA152_0==BOR||(LA152_0>=RBRACK && LA152_0<=COLON)||(LA152_0>=BAND && LA152_0<=GE)||LA152_0==RCURLY) ) {
                alt152=1;
            }
            else if ( ((LA152_0>=IN_SET && LA152_0<=REGEXP)||LA152_0==NOT_EXPR) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // EsperEPL2Grammar.g:1086:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1086:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1087:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1087:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( ((LA144_0>=LT && LA144_0<=GE)) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1088:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1088:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt139=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt139=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt139=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt139=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt139=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 139, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt139) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1088:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6217); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1088:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6221); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1088:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6225); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1088:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6229); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1089:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt143=2;
                    	    int LA143_0 = input.LA(1);

                    	    if ( (LA143_0==WINDOW||LA143_0==ESCAPE||LA143_0==EVERY_EXPR||(LA143_0>=SUM && LA143_0<=COUNT)||LA143_0==OUTER||(LA143_0>=JOIN && LA143_0<=FULL)||(LA143_0>=EVENTS && LA143_0<=LAST)||(LA143_0>=UNIDIRECTIONAL && LA143_0<=CURRENT_TIMESTAMP)||LA143_0==SNAPSHOT||(LA143_0>=VARIABLE && LA143_0<=INDEX)||(LA143_0>=BOOLEAN_TRUE && LA143_0<=VALUE_NULL)||(LA143_0>=DEFINE && LA143_0<=MATCHES)||LA143_0==NUM_DOUBLE||LA143_0==IDENT||LA143_0==LPAREN||(LA143_0>=PLUS && LA143_0<=QUESTION)||(LA143_0>=STRING_LITERAL && LA143_0<=QUOTED_STRING_LITERAL)||LA143_0==MINUS||LA143_0==LCURLY||LA143_0==NUM_INT||(LA143_0>=TICKED_STRING_LITERAL && LA143_0<=NUM_FLOAT)) ) {
                    	        alt143=1;
                    	    }
                    	    else if ( ((LA143_0>=ALL && LA143_0<=SOME)) ) {
                    	        alt143=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 143, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt143) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1090:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6253);
                    	            concatenationExpr354=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr354.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1091:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1091:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt140=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt140=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt140=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt140=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 140, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt140) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1091:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6270); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1091:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6276); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1091:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6282); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1091:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt142=2;
                    	            int LA142_0 = input.LA(1);

                    	            if ( (LA142_0==LPAREN) ) {
                    	                int LA142_1 = input.LA(2);

                    	                if ( (LA142_1==SELECT) ) {
                    	                    alt142=2;
                    	                }
                    	                else if ( (LA142_1==WINDOW||LA142_1==ESCAPE||(LA142_1>=NOT_EXPR && LA142_1<=EVERY_EXPR)||(LA142_1>=SUM && LA142_1<=COUNT)||LA142_1==CASE||LA142_1==OUTER||(LA142_1>=JOIN && LA142_1<=FULL)||(LA142_1>=EVENTS && LA142_1<=LAST)||(LA142_1>=UNIDIRECTIONAL && LA142_1<=CURRENT_TIMESTAMP)||LA142_1==SNAPSHOT||(LA142_1>=VARIABLE && LA142_1<=INDEX)||(LA142_1>=BOOLEAN_TRUE && LA142_1<=VALUE_NULL)||(LA142_1>=DEFINE && LA142_1<=MATCHES)||LA142_1==NUM_DOUBLE||LA142_1==IDENT||(LA142_1>=LPAREN && LA142_1<=RPAREN)||(LA142_1>=PLUS && LA142_1<=QUESTION)||(LA142_1>=STRING_LITERAL && LA142_1<=QUOTED_STRING_LITERAL)||LA142_1==MINUS||LA142_1==LCURLY||LA142_1==NUM_INT||(LA142_1>=TICKED_STRING_LITERAL && LA142_1<=NUM_FLOAT)) ) {
                    	                    alt142=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 142, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 142, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt142) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1091:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1091:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1091:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN355=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6288); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN355);

                    	                    // EsperEPL2Grammar.g:1091:48: ( expressionList )?
                    	                    int alt141=2;
                    	                    int LA141_0 = input.LA(1);

                    	                    if ( (LA141_0==WINDOW||LA141_0==ESCAPE||(LA141_0>=NOT_EXPR && LA141_0<=EVERY_EXPR)||(LA141_0>=SUM && LA141_0<=COUNT)||LA141_0==CASE||LA141_0==OUTER||(LA141_0>=JOIN && LA141_0<=FULL)||(LA141_0>=EVENTS && LA141_0<=LAST)||(LA141_0>=UNIDIRECTIONAL && LA141_0<=CURRENT_TIMESTAMP)||LA141_0==SNAPSHOT||(LA141_0>=VARIABLE && LA141_0<=INDEX)||(LA141_0>=BOOLEAN_TRUE && LA141_0<=VALUE_NULL)||(LA141_0>=DEFINE && LA141_0<=MATCHES)||LA141_0==NUM_DOUBLE||LA141_0==IDENT||LA141_0==LPAREN||(LA141_0>=PLUS && LA141_0<=QUESTION)||(LA141_0>=STRING_LITERAL && LA141_0<=QUOTED_STRING_LITERAL)||LA141_0==MINUS||LA141_0==LCURLY||LA141_0==NUM_INT||(LA141_0>=TICKED_STRING_LITERAL && LA141_0<=NUM_FLOAT)) ) {
                    	                        alt141=1;
                    	                    }
                    	                    switch (alt141) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1091:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6290);
                    	                            expressionList356=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList356.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN357=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6293); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN357);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1091:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6298);
                    	                    subSelectGroupExpression358=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression358.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop144;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: concatenationExpr, subSelectGroupExpression, expressionList, g, concatenationExpr, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1095:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1095:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1096:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1096:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1096:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1096:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1097:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1099:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1099:6: (n= NOT_EXPR )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==NOT_EXPR) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // EsperEPL2Grammar.g:1099:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6394); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1100:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt151=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA151_1 = input.LA(2);

                        if ( (LA151_1==LPAREN) ) {
                            int LA151_5 = input.LA(3);

                            if ( (LA151_5==SELECT) ) {
                                alt151=2;
                            }
                            else if ( (LA151_5==WINDOW||LA151_5==ESCAPE||(LA151_5>=NOT_EXPR && LA151_5<=EVERY_EXPR)||(LA151_5>=SUM && LA151_5<=COUNT)||LA151_5==CASE||LA151_5==OUTER||(LA151_5>=JOIN && LA151_5<=FULL)||(LA151_5>=EVENTS && LA151_5<=LAST)||(LA151_5>=UNIDIRECTIONAL && LA151_5<=CURRENT_TIMESTAMP)||LA151_5==SNAPSHOT||(LA151_5>=VARIABLE && LA151_5<=INDEX)||(LA151_5>=BOOLEAN_TRUE && LA151_5<=VALUE_NULL)||(LA151_5>=DEFINE && LA151_5<=MATCHES)||LA151_5==NUM_DOUBLE||LA151_5==IDENT||LA151_5==LPAREN||(LA151_5>=PLUS && LA151_5<=QUESTION)||(LA151_5>=STRING_LITERAL && LA151_5<=QUOTED_STRING_LITERAL)||LA151_5==MINUS||LA151_5==LCURLY||LA151_5==NUM_INT||(LA151_5>=TICKED_STRING_LITERAL && LA151_5<=NUM_FLOAT)) ) {
                                alt151=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 151, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA151_1==LBRACK) ) {
                            alt151=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 151, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt151=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt151=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt151=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);

                        throw nvae;
                    }

                    switch (alt151) {
                        case 1 :
                            // EsperEPL2Grammar.g:1103:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1103:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1103:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6421); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1104:8: (l= LPAREN | l= LBRACK )
                            int alt146=2;
                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==LPAREN) ) {
                                alt146=1;
                            }
                            else if ( (LA146_0==LBRACK) ) {
                                alt146=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 146, 0, input);

                                throw nvae;
                            }
                            switch (alt146) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1104:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6433); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1104:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6439); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6442);
                            expression359=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression359.getTree());
                            // EsperEPL2Grammar.g:1105:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt148=2;
                            int LA148_0 = input.LA(1);

                            if ( (LA148_0==COLON) ) {
                                alt148=1;
                            }
                            else if ( (LA148_0==COMMA||LA148_0==RPAREN||LA148_0==RBRACK) ) {
                                alt148=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 148, 0, input);

                                throw nvae;
                            }
                            switch (alt148) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1106:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1106:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1106:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6464); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1106:20: ( expression )
                                    // EsperEPL2Grammar.g:1106:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6467);
                                    expression360=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression360.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1108:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1108:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1108:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1108:10: ( COMMA expression )*
                                    loop147:
                                    do {
                                        int alt147=2;
                                        int LA147_0 = input.LA(1);

                                        if ( (LA147_0==COMMA) ) {
                                            alt147=1;
                                        }


                                        switch (alt147) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1108:11: COMMA expression
                                    	    {
                                    	    COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6493); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA361);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6495);
                                    	    expression362=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression362.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop147;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1110:8: (r= RPAREN | r= RBRACK )
                            int alt149=2;
                            int LA149_0 = input.LA(1);

                            if ( (LA149_0==RPAREN) ) {
                                alt149=1;
                            }
                            else if ( (LA149_0==RBRACK) ) {
                                alt149=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 149, 0, input);

                                throw nvae;
                            }
                            switch (alt149) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1110:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6521); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1110:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6527); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: expression, concatenationExpr, concatenationExpr, r, l, concatenationExpr, r, l, r, expression, l, l, r, expression, concatenationExpr, IN_SET, expression
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1112:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1112:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1113:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1113:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1114:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1114:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1115:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1115:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1116:7: IN_SET inSubSelectQuery
                            {
                            IN_SET363=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6650); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET363);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6652);
                            inSubSelectQuery364=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery364.getTree());


                            // AST REWRITE
                            // elements: inSubSelectQuery, inSubSelectQuery, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1117:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1117:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1118:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1118:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1119:7: BETWEEN betweenList
                            {
                            BETWEEN365=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6698); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN365);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6700);
                            betweenList366=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList366.getTree());


                            // AST REWRITE
                            // elements: betweenList, concatenationExpr, BETWEEN, betweenList, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1120:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1120:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1121:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1121:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1122:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE367=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression6750); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE367);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6752);
                            concatenationExpr368=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr368.getTree());
                            // EsperEPL2Grammar.g:1122:30: ( ESCAPE stringconstant )?
                            int alt150=2;
                            int LA150_0 = input.LA(1);

                            if ( (LA150_0==ESCAPE) ) {
                                alt150=1;
                            }
                            switch (alt150) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1122:31: ESCAPE stringconstant
                                    {
                                    ESCAPE369=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression6755); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE369);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression6757);
                                    stringconstant370=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant370.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: stringconstant, LIKE, concatenationExpr, stringconstant, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1123:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1123:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1123:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1123:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1124:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1124:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1124:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1124:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1125:7: REGEXP concatenationExpr
                            {
                            REGEXP371=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression6809); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP371);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6811);
                            concatenationExpr372=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr372.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, REGEXP, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1126:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1126:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1127:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1127:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1132:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr373 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1133:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1133:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery6873);
            subQueryExpr373=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr373.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1134:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1134:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1137:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR376=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression374 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression375 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression377 = null;


        CommonTree c_tree=null;
        CommonTree LOR376_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1138:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1138:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6898);
            additiveExpression374=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression374.getTree());
            // EsperEPL2Grammar.g:1138:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LOR) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // EsperEPL2Grammar.g:1138:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6906);
                    additiveExpression375=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression375.getTree());
                    // EsperEPL2Grammar.g:1138:50: ( LOR additiveExpression )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==LOR) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1138:52: LOR additiveExpression
                    	    {
                    	    LOR376=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6910); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR376);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6912);
                    	    additiveExpression377=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression377.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1139:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1139:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1140:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1143:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS379=null;
        Token MINUS380=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression378 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression381 = null;


        CommonTree PLUS379_tree=null;
        CommonTree MINUS380_tree=null;

        try {
            // EsperEPL2Grammar.g:1144:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1144:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6953);
            multiplyExpression378=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression378.getTree());
            // EsperEPL2Grammar.g:1144:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==PLUS||LA156_0==MINUS) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1144:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1144:25: ( PLUS | MINUS )
            	    int alt155=2;
            	    int LA155_0 = input.LA(1);

            	    if ( (LA155_0==PLUS) ) {
            	        alt155=1;
            	    }
            	    else if ( (LA155_0==MINUS) ) {
            	        alt155=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 155, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt155) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1144:26: PLUS
            	            {
            	            PLUS379=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression6958); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS379_tree = (CommonTree)adaptor.create(PLUS379);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS379_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1144:32: MINUS
            	            {
            	            MINUS380=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression6961); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS380_tree = (CommonTree)adaptor.create(MINUS380);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS380_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6965);
            	    multiplyExpression381=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression381.getTree());

            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1147:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR383=null;
        Token DIV384=null;
        Token MOD385=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression382 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression386 = null;


        CommonTree STAR383_tree=null;
        CommonTree DIV384_tree=null;
        CommonTree MOD385_tree=null;

        try {
            // EsperEPL2Grammar.g:1148:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1148:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6979);
            unaryExpression382=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression382.getTree());
            // EsperEPL2Grammar.g:1148:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==STAR||(LA158_0>=DIV && LA158_0<=MOD)) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1148:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1148:22: ( STAR | DIV | MOD )
            	    int alt157=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt157=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt157=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt157=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 157, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt157) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1148:23: STAR
            	            {
            	            STAR383=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression6984); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR383_tree = (CommonTree)adaptor.create(STAR383);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR383_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1148:29: DIV
            	            {
            	            DIV384=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression6987); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV384_tree = (CommonTree)adaptor.create(DIV384);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV384_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1148:34: MOD
            	            {
            	            MOD385=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression6990); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD385_tree = (CommonTree)adaptor.create(MOD385);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD385_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6994);
            	    unaryExpression386=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression386.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1151:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS387=null;
        Token LPAREN391=null;
        Token RPAREN393=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty388 = null;

        EsperEPL2GrammarParser.constant_return constant389 = null;

        EsperEPL2GrammarParser.substitution_return substitution390 = null;

        EsperEPL2GrammarParser.expression_return expression392 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction394 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc395 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression396 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression397 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression398 = null;


        CommonTree MINUS387_tree=null;
        CommonTree LPAREN391_tree=null;
        CommonTree RPAREN393_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1152:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt159=9;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // EsperEPL2Grammar.g:1152:4: MINUS eventProperty
                    {
                    MINUS387=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS387);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7011);
                    eventProperty388=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty388.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1152:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1152:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1153:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression7024);
                    constant389=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant389.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1154:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression7029);
                    substitution390=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution390.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1155:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN391=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7034); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression7037);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression392.getTree());
                    RPAREN393=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7039); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1156:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7045);
                    eventPropertyOrLibFunction394=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction394.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1157:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1157:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1157:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7057);
                    builtinFunc395=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc395.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1158:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7063);
                    arrayExpression396=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression396.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1159:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7068);
                    subSelectExpression397=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression397.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1160:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7073);
                    existsSubSelectExpression398=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression398.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1163:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr399 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1164:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1164:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7090);
            subQueryExpr399=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr399.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1165:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1165:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1168:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr400 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1169:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1169:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7112);
            subQueryExpr400=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr400.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1170:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1170:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1173:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS401=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr402 = null;


        CommonTree EXISTS401_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1174:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1174:4: EXISTS subQueryExpr
            {
            EXISTS401=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS401);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7136);
            subQueryExpr402=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr402.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1175:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1175:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1178:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN403=null;
        Token SELECT404=null;
        Token DISTINCT405=null;
        Token FROM407=null;
        Token WHERE409=null;
        Token RPAREN411=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement406 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr408 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause410 = null;


        CommonTree LPAREN403_tree=null;
        CommonTree SELECT404_tree=null;
        CommonTree DISTINCT405_tree=null;
        CommonTree FROM407_tree=null;
        CommonTree WHERE409_tree=null;
        CommonTree RPAREN411_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1181:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1181:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN403=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7169); if (state.failed) return retval;
            SELECT404=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7175); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1182:11: ( DISTINCT )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==DISTINCT) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1182:11: DISTINCT
                    {
                    DISTINCT405=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT405_tree = (CommonTree)adaptor.create(DISTINCT405);
                    adaptor.addChild(root_0, DISTINCT405_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr7181);
            selectionListElement406=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement406.getTree());
            FROM407=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7188); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7191);
            subSelectFilterExpr408=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr408.getTree());
            // EsperEPL2Grammar.g:1184:6: ( WHERE whereClause )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==WHERE) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // EsperEPL2Grammar.g:1184:7: WHERE whereClause
                    {
                    WHERE409=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7199); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7202);
                    whereClause410=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause410.getTree());

                    }
                    break;

            }

            RPAREN411=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7211); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1188:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT413=null;
        Token DOT415=null;
        Token AS417=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression412 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression414 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression416 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT413_tree=null;
        CommonTree DOT415_tree=null;
        CommonTree AS417_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1191:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1191:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7235);
            eventFilterExpression412=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression412.getTree());
            // EsperEPL2Grammar.g:1192:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==DOT) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1192:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT413=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT413);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7242);
                    viewExpression414=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression414.getTree());
                    // EsperEPL2Grammar.g:1192:23: ( DOT viewExpression )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==DOT) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1192:24: DOT viewExpression
                    	    {
                    	    DOT415=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7245); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT415);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7247);
                    	    viewExpression416=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression416.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1192:47: ( AS i= IDENT | i= IDENT )?
            int alt164=3;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==AS) ) {
                alt164=1;
            }
            else if ( (LA164_0==IDENT) ) {
                alt164=2;
            }
            switch (alt164) {
                case 1 :
                    // EsperEPL2Grammar.g:1192:48: AS i= IDENT
                    {
                    AS417=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS417);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1192:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1192:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt165=3;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==RETAINUNION) ) {
                alt165=1;
            }
            else if ( (LA165_0==RETAININTERSECTION) ) {
                alt165=2;
            }
            switch (alt165) {
                case 1 :
                    // EsperEPL2Grammar.g:1192:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1192:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, ru, i, eventFilterExpression, ri
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1193:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1193:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1193:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1193:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1193:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1193:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1196:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY418=null;
        Token COMMA420=null;
        Token RCURLY422=null;
        EsperEPL2GrammarParser.expression_return expression419 = null;

        EsperEPL2GrammarParser.expression_return expression421 = null;


        CommonTree LCURLY418_tree=null;
        CommonTree COMMA420_tree=null;
        CommonTree RCURLY422_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1197:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1197:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY418=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY418);

            // EsperEPL2Grammar.g:1197:11: ( expression ( COMMA expression )* )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==WINDOW||LA167_0==ESCAPE||(LA167_0>=NOT_EXPR && LA167_0<=EVERY_EXPR)||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==CASE||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||LA167_0==SNAPSHOT||(LA167_0>=VARIABLE && LA167_0<=INDEX)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=MATCHES)||LA167_0==NUM_DOUBLE||LA167_0==IDENT||LA167_0==LPAREN||(LA167_0>=PLUS && LA167_0<=QUESTION)||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==LCURLY||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // EsperEPL2Grammar.g:1197:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7318);
                    expression419=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression419.getTree());
                    // EsperEPL2Grammar.g:1197:23: ( COMMA expression )*
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==COMMA) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1197:24: COMMA expression
                    	    {
                    	    COMMA420=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7321); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA420);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7323);
                    	    expression421=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression421.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY422=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY422);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1198:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1198:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1198:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1201:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM423=null;
        Token LPAREN424=null;
        Token ALL425=null;
        Token DISTINCT426=null;
        Token RPAREN428=null;
        Token AVG429=null;
        Token LPAREN430=null;
        Token ALL431=null;
        Token DISTINCT432=null;
        Token RPAREN434=null;
        Token COUNT435=null;
        Token LPAREN436=null;
        Token ALL437=null;
        Token DISTINCT438=null;
        Token STAR440=null;
        Token RPAREN441=null;
        Token MEDIAN442=null;
        Token LPAREN443=null;
        Token ALL444=null;
        Token DISTINCT445=null;
        Token RPAREN447=null;
        Token STDDEV448=null;
        Token LPAREN449=null;
        Token ALL450=null;
        Token DISTINCT451=null;
        Token RPAREN453=null;
        Token AVEDEV454=null;
        Token LPAREN455=null;
        Token ALL456=null;
        Token DISTINCT457=null;
        Token RPAREN459=null;
        Token COALESCE462=null;
        Token LPAREN463=null;
        Token COMMA465=null;
        Token COMMA467=null;
        Token RPAREN469=null;
        Token PREVIOUS470=null;
        Token LPAREN471=null;
        Token COMMA473=null;
        Token RPAREN475=null;
        Token PRIOR476=null;
        Token LPAREN477=null;
        Token NUM_INT478=null;
        Token COMMA479=null;
        Token RPAREN481=null;
        Token INSTANCEOF482=null;
        Token LPAREN483=null;
        Token COMMA485=null;
        Token COMMA487=null;
        Token RPAREN489=null;
        Token CAST490=null;
        Token LPAREN491=null;
        Token COMMA493=null;
        Token AS494=null;
        Token RPAREN496=null;
        Token EXISTS497=null;
        Token LPAREN498=null;
        Token RPAREN500=null;
        Token CURRENT_TIMESTAMP501=null;
        Token LPAREN502=null;
        Token RPAREN503=null;
        EsperEPL2GrammarParser.expression_return expression427 = null;

        EsperEPL2GrammarParser.expression_return expression433 = null;

        EsperEPL2GrammarParser.expression_return expression439 = null;

        EsperEPL2GrammarParser.expression_return expression446 = null;

        EsperEPL2GrammarParser.expression_return expression452 = null;

        EsperEPL2GrammarParser.expression_return expression458 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation460 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation461 = null;

        EsperEPL2GrammarParser.expression_return expression464 = null;

        EsperEPL2GrammarParser.expression_return expression466 = null;

        EsperEPL2GrammarParser.expression_return expression468 = null;

        EsperEPL2GrammarParser.expression_return expression472 = null;

        EsperEPL2GrammarParser.expression_return expression474 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty480 = null;

        EsperEPL2GrammarParser.expression_return expression484 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier486 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier488 = null;

        EsperEPL2GrammarParser.expression_return expression492 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier495 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty499 = null;


        CommonTree SUM423_tree=null;
        CommonTree LPAREN424_tree=null;
        CommonTree ALL425_tree=null;
        CommonTree DISTINCT426_tree=null;
        CommonTree RPAREN428_tree=null;
        CommonTree AVG429_tree=null;
        CommonTree LPAREN430_tree=null;
        CommonTree ALL431_tree=null;
        CommonTree DISTINCT432_tree=null;
        CommonTree RPAREN434_tree=null;
        CommonTree COUNT435_tree=null;
        CommonTree LPAREN436_tree=null;
        CommonTree ALL437_tree=null;
        CommonTree DISTINCT438_tree=null;
        CommonTree STAR440_tree=null;
        CommonTree RPAREN441_tree=null;
        CommonTree MEDIAN442_tree=null;
        CommonTree LPAREN443_tree=null;
        CommonTree ALL444_tree=null;
        CommonTree DISTINCT445_tree=null;
        CommonTree RPAREN447_tree=null;
        CommonTree STDDEV448_tree=null;
        CommonTree LPAREN449_tree=null;
        CommonTree ALL450_tree=null;
        CommonTree DISTINCT451_tree=null;
        CommonTree RPAREN453_tree=null;
        CommonTree AVEDEV454_tree=null;
        CommonTree LPAREN455_tree=null;
        CommonTree ALL456_tree=null;
        CommonTree DISTINCT457_tree=null;
        CommonTree RPAREN459_tree=null;
        CommonTree COALESCE462_tree=null;
        CommonTree LPAREN463_tree=null;
        CommonTree COMMA465_tree=null;
        CommonTree COMMA467_tree=null;
        CommonTree RPAREN469_tree=null;
        CommonTree PREVIOUS470_tree=null;
        CommonTree LPAREN471_tree=null;
        CommonTree COMMA473_tree=null;
        CommonTree RPAREN475_tree=null;
        CommonTree PRIOR476_tree=null;
        CommonTree LPAREN477_tree=null;
        CommonTree NUM_INT478_tree=null;
        CommonTree COMMA479_tree=null;
        CommonTree RPAREN481_tree=null;
        CommonTree INSTANCEOF482_tree=null;
        CommonTree LPAREN483_tree=null;
        CommonTree COMMA485_tree=null;
        CommonTree COMMA487_tree=null;
        CommonTree RPAREN489_tree=null;
        CommonTree CAST490_tree=null;
        CommonTree LPAREN491_tree=null;
        CommonTree COMMA493_tree=null;
        CommonTree AS494_tree=null;
        CommonTree RPAREN496_tree=null;
        CommonTree EXISTS497_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree RPAREN500_tree=null;
        CommonTree CURRENT_TIMESTAMP501_tree=null;
        CommonTree LPAREN502_tree=null;
        CommonTree RPAREN503_tree=null;

        try {
            // EsperEPL2Grammar.g:1202:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt180=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt180=1;
                }
                break;
            case AVG:
                {
                alt180=2;
                }
                break;
            case COUNT:
                {
                alt180=3;
                }
                break;
            case MEDIAN:
                {
                alt180=4;
                }
                break;
            case STDDEV:
                {
                alt180=5;
                }
                break;
            case AVEDEV:
                {
                alt180=6;
                }
                break;
            case FIRST:
                {
                alt180=7;
                }
                break;
            case LAST:
                {
                alt180=8;
                }
                break;
            case COALESCE:
                {
                alt180=9;
                }
                break;
            case PREVIOUS:
                {
                alt180=10;
                }
                break;
            case PRIOR:
                {
                alt180=11;
                }
                break;
            case INSTANCEOF:
                {
                alt180=12;
                }
                break;
            case CAST:
                {
                alt180=13;
                }
                break;
            case EXISTS:
                {
                alt180=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt180=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // EsperEPL2Grammar.g:1202:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM423=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM423_tree = (CommonTree)adaptor.create(SUM423);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM423_tree, root_0);
                    }
                    LPAREN424=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7356); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1202:17: ( ALL | DISTINCT )?
                    int alt168=3;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==ALL) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==DISTINCT) ) {
                        alt168=2;
                    }
                    switch (alt168) {
                        case 1 :
                            // EsperEPL2Grammar.g:1202:18: ALL
                            {
                            ALL425=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7360); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1202:25: DISTINCT
                            {
                            DISTINCT426=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7365); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT426_tree = (CommonTree)adaptor.create(DISTINCT426);
                            adaptor.addChild(root_0, DISTINCT426_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7369);
                    expression427=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression427.getTree());
                    RPAREN428=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7371); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1203:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG429=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG429_tree = (CommonTree)adaptor.create(AVG429);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG429_tree, root_0);
                    }
                    LPAREN430=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7380); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1203:17: ( ALL | DISTINCT )?
                    int alt169=3;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==ALL) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==DISTINCT) ) {
                        alt169=2;
                    }
                    switch (alt169) {
                        case 1 :
                            // EsperEPL2Grammar.g:1203:18: ALL
                            {
                            ALL431=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7384); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1203:25: DISTINCT
                            {
                            DISTINCT432=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7389); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT432_tree = (CommonTree)adaptor.create(DISTINCT432);
                            adaptor.addChild(root_0, DISTINCT432_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7393);
                    expression433=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression433.getTree());
                    RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7395); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1204:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT435=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT435_tree = (CommonTree)adaptor.create(COUNT435);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT435_tree, root_0);
                    }
                    LPAREN436=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7404); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1205:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==WINDOW||LA171_0==ESCAPE||(LA171_0>=NOT_EXPR && LA171_0<=EVERY_EXPR)||(LA171_0>=SUM && LA171_0<=COUNT)||LA171_0==CASE||LA171_0==OUTER||(LA171_0>=JOIN && LA171_0<=FULL)||(LA171_0>=DISTINCT && LA171_0<=ALL)||(LA171_0>=EVENTS && LA171_0<=LAST)||(LA171_0>=UNIDIRECTIONAL && LA171_0<=CURRENT_TIMESTAMP)||LA171_0==SNAPSHOT||(LA171_0>=VARIABLE && LA171_0<=INDEX)||(LA171_0>=BOOLEAN_TRUE && LA171_0<=VALUE_NULL)||(LA171_0>=DEFINE && LA171_0<=MATCHES)||LA171_0==NUM_DOUBLE||LA171_0==IDENT||LA171_0==LPAREN||(LA171_0>=PLUS && LA171_0<=QUESTION)||(LA171_0>=STRING_LITERAL && LA171_0<=QUOTED_STRING_LITERAL)||LA171_0==MINUS||LA171_0==LCURLY||LA171_0==NUM_INT||(LA171_0>=TICKED_STRING_LITERAL && LA171_0<=NUM_FLOAT)) ) {
                        alt171=1;
                    }
                    else if ( (LA171_0==STAR) ) {
                        alt171=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }
                    switch (alt171) {
                        case 1 :
                            // EsperEPL2Grammar.g:1206:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1206:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1206:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1206:5: ( ALL | DISTINCT )?
                            int alt170=3;
                            int LA170_0 = input.LA(1);

                            if ( (LA170_0==ALL) ) {
                                alt170=1;
                            }
                            else if ( (LA170_0==DISTINCT) ) {
                                alt170=2;
                            }
                            switch (alt170) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1206:6: ALL
                                    {
                                    ALL437=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7416); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1206:13: DISTINCT
                                    {
                                    DISTINCT438=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7421); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT438_tree = (CommonTree)adaptor.create(DISTINCT438);
                                    adaptor.addChild(root_0, DISTINCT438_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7425);
                            expression439=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression439.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1208:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1208:4: ( STAR )
                            // EsperEPL2Grammar.g:1208:5: STAR
                            {
                            STAR440=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7436); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN441=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7447); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1211:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN442=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN442_tree = (CommonTree)adaptor.create(MEDIAN442);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN442_tree, root_0);
                    }
                    LPAREN443=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7456); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1211:20: ( ALL | DISTINCT )?
                    int alt172=3;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==ALL) ) {
                        alt172=1;
                    }
                    else if ( (LA172_0==DISTINCT) ) {
                        alt172=2;
                    }
                    switch (alt172) {
                        case 1 :
                            // EsperEPL2Grammar.g:1211:21: ALL
                            {
                            ALL444=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7460); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1211:28: DISTINCT
                            {
                            DISTINCT445=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7465); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT445_tree = (CommonTree)adaptor.create(DISTINCT445);
                            adaptor.addChild(root_0, DISTINCT445_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7469);
                    expression446=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression446.getTree());
                    RPAREN447=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7471); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1212:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV448=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7477); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV448_tree = (CommonTree)adaptor.create(STDDEV448);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV448_tree, root_0);
                    }
                    LPAREN449=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7480); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1212:20: ( ALL | DISTINCT )?
                    int alt173=3;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==ALL) ) {
                        alt173=1;
                    }
                    else if ( (LA173_0==DISTINCT) ) {
                        alt173=2;
                    }
                    switch (alt173) {
                        case 1 :
                            // EsperEPL2Grammar.g:1212:21: ALL
                            {
                            ALL450=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7484); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1212:28: DISTINCT
                            {
                            DISTINCT451=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7489); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT451_tree = (CommonTree)adaptor.create(DISTINCT451);
                            adaptor.addChild(root_0, DISTINCT451_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7493);
                    expression452=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression452.getTree());
                    RPAREN453=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7495); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1213:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV454=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV454_tree = (CommonTree)adaptor.create(AVEDEV454);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV454_tree, root_0);
                    }
                    LPAREN455=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7504); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1213:20: ( ALL | DISTINCT )?
                    int alt174=3;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==ALL) ) {
                        alt174=1;
                    }
                    else if ( (LA174_0==DISTINCT) ) {
                        alt174=2;
                    }
                    switch (alt174) {
                        case 1 :
                            // EsperEPL2Grammar.g:1213:21: ALL
                            {
                            ALL456=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7508); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1213:28: DISTINCT
                            {
                            DISTINCT457=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7513); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT457_tree = (CommonTree)adaptor.create(DISTINCT457);
                            adaptor.addChild(root_0, DISTINCT457_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7517);
                    expression458=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression458.getTree());
                    RPAREN459=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7519); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1214:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7525);
                    firstAggregation460=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation460.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1215:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7530);
                    lastAggregation461=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation461.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1216:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE462=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE462_tree = (CommonTree)adaptor.create(COALESCE462);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE462_tree, root_0);
                    }
                    LPAREN463=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7538); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7541);
                    expression464=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression464.getTree());
                    COMMA465=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7543); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7546);
                    expression466=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression466.getTree());
                    // EsperEPL2Grammar.g:1216:51: ( COMMA expression )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==COMMA) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1216:52: COMMA expression
                    	    {
                    	    COMMA467=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7549); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7552);
                    	    expression468=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression468.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);

                    RPAREN469=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7556); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1217:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS470=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS470_tree = (CommonTree)adaptor.create(PREVIOUS470);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS470_tree, root_0);
                    }
                    LPAREN471=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7565); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7568);
                    expression472=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression472.getTree());
                    // EsperEPL2Grammar.g:1217:33: ( COMMA expression )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==COMMA) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // EsperEPL2Grammar.g:1217:34: COMMA expression
                            {
                            COMMA473=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7571); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7574);
                            expression474=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression474.getTree());

                            }
                            break;

                    }

                    RPAREN475=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7578); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1218:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR476=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR476_tree = (CommonTree)adaptor.create(PRIOR476);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR476_tree, root_0);
                    }
                    LPAREN477=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7587); if (state.failed) return retval;
                    NUM_INT478=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT478_tree = (CommonTree)adaptor.create(NUM_INT478);
                    adaptor.addChild(root_0, NUM_INT478_tree);
                    }
                    COMMA479=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7592); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7595);
                    eventProperty480=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty480.getTree());
                    RPAREN481=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7597); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1221:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF482=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF482_tree = (CommonTree)adaptor.create(INSTANCEOF482);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF482_tree, root_0);
                    }
                    LPAREN483=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7610); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7613);
                    expression484=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression484.getTree());
                    COMMA485=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7615); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7618);
                    classIdentifier486=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier486.getTree());
                    // EsperEPL2Grammar.g:1221:58: ( COMMA classIdentifier )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1221:59: COMMA classIdentifier
                    	    {
                    	    COMMA487=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7621); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7624);
                    	    classIdentifier488=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier488.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);

                    RPAREN489=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7628); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1222:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST490=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST490_tree = (CommonTree)adaptor.create(CAST490);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST490_tree, root_0);
                    }
                    LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7637); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7640);
                    expression492=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression492.getTree());
                    // EsperEPL2Grammar.g:1222:29: ( COMMA | AS )
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==COMMA) ) {
                        alt178=1;
                    }
                    else if ( (LA178_0==AS) ) {
                        alt178=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 178, 0, input);

                        throw nvae;
                    }
                    switch (alt178) {
                        case 1 :
                            // EsperEPL2Grammar.g:1222:30: COMMA
                            {
                            COMMA493=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7643); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1222:39: AS
                            {
                            AS494=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7648); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7652);
                    classIdentifier495=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier495.getTree());
                    RPAREN496=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7654); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1223:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS497=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS497_tree = (CommonTree)adaptor.create(EXISTS497);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS497_tree, root_0);
                    }
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7663); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7666);
                    eventProperty499=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty499.getTree());
                    RPAREN500=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7668); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1224:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP501=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP501_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP501);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP501_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1224:23: ( LPAREN RPAREN )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==LPAREN) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1224:24: LPAREN RPAREN
                            {
                            LPAREN502=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7678); if (state.failed) return retval;
                            RPAREN503=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7681); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1227:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST504=null;
        Token LPAREN505=null;
        Token RPAREN507=null;
        EsperEPL2GrammarParser.expression_return expression506 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST504_tree=null;
        CommonTree LPAREN505_tree=null;
        CommonTree RPAREN507_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1228:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1228:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST504=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST504);

            LPAREN505=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN505);

            // EsperEPL2Grammar.g:1228:17: (a= ALL | d= DISTINCT )?
            int alt181=3;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ALL) ) {
                alt181=1;
            }
            else if ( (LA181_0==DISTINCT) ) {
                alt181=2;
            }
            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1228:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7703); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1228:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7709); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation7713);
            expression506=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression506.getTree());
            RPAREN507=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation7715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN507);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1229:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1229:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1229:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1232:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST508=null;
        Token LPAREN509=null;
        Token RPAREN511=null;
        EsperEPL2GrammarParser.expression_return expression510 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST508_tree=null;
        CommonTree LPAREN509_tree=null;
        CommonTree RPAREN511_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1233:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1233:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST508=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation7741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST508);

            LPAREN509=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation7743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN509);

            // EsperEPL2Grammar.g:1233:16: (a= ALL | d= DISTINCT )?
            int alt182=3;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==ALL) ) {
                alt182=1;
            }
            else if ( (LA182_0==DISTINCT) ) {
                alt182=2;
            }
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1233:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation7748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1233:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation7754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation7758);
            expression510=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression510.getTree());
            RPAREN511=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation7760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN511);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1234:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1234:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1234:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1237:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX512=null;
        Token MIN513=null;
        Token LPAREN514=null;
        Token COMMA516=null;
        Token COMMA518=null;
        Token RPAREN520=null;
        EsperEPL2GrammarParser.expression_return expression515 = null;

        EsperEPL2GrammarParser.expression_return expression517 = null;

        EsperEPL2GrammarParser.expression_return expression519 = null;


        CommonTree MAX512_tree=null;
        CommonTree MIN513_tree=null;
        CommonTree LPAREN514_tree=null;
        CommonTree COMMA516_tree=null;
        CommonTree COMMA518_tree=null;
        CommonTree RPAREN520_tree=null;

        try {
            // EsperEPL2Grammar.g:1238:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1238:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1238:4: ( MAX | MIN )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==MAX) ) {
                alt183=1;
            }
            else if ( (LA183_0==MIN) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // EsperEPL2Grammar.g:1238:5: MAX
                    {
                    MAX512=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc7787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX512_tree = (CommonTree)adaptor.create(MAX512);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX512_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1238:12: MIN
                    {
                    MIN513=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc7792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN513_tree = (CommonTree)adaptor.create(MIN513);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN513_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN514=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc7796); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc7799);
            expression515=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression515.getTree());
            // EsperEPL2Grammar.g:1238:37: ( COMMA expression ( COMMA expression )* )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==COMMA) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1238:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7802); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc7805);
                    expression517=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression517.getTree());
                    // EsperEPL2Grammar.g:1238:56: ( COMMA expression )*
                    loop184:
                    do {
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==COMMA) ) {
                            alt184=1;
                        }


                        switch (alt184) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1238:57: COMMA expression
                    	    {
                    	    COMMA518=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7808); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc7811);
                    	    expression519=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression519.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop184;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN520=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc7818); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1241:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty521 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction522 = null;



        try {
            // EsperEPL2Grammar.g:1242:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt186=2;
            alt186 = dfa186.predict(input);
            switch (alt186) {
                case 1 :
                    // EsperEPL2Grammar.g:1242:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction7837);
                    eventProperty521=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty521.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1243:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction7842);
                    libFunction522=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction522.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1246:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT524=null;
        Token LPAREN526=null;
        Token RPAREN528=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy523 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent525 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs527 = null;


        CommonTree DOT524_tree=null;
        CommonTree LPAREN526_tree=null;
        CommonTree RPAREN528_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1247:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1247:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1247:4: ( classIdentifierNonGreedy DOT )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==IDENT) ) {
                int LA187_1 = input.LA(2);

                if ( (LA187_1==DOT) ) {
                    alt187=1;
                }
            }
            else if ( (LA187_0==TICKED_STRING_LITERAL) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1247:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction7855);
                    classIdentifierNonGreedy523=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy523.getTree());
                    DOT524=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction7857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT524);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction7861);
            funcIdent525=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent525.getTree());
            LPAREN526=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction7863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN526);

            // EsperEPL2Grammar.g:1247:53: ( libFunctionArgs )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==WINDOW||LA188_0==ESCAPE||(LA188_0>=NOT_EXPR && LA188_0<=EVERY_EXPR)||(LA188_0>=SUM && LA188_0<=COUNT)||LA188_0==CASE||LA188_0==OUTER||(LA188_0>=JOIN && LA188_0<=FULL)||(LA188_0>=DISTINCT && LA188_0<=ALL)||(LA188_0>=EVENTS && LA188_0<=LAST)||(LA188_0>=UNIDIRECTIONAL && LA188_0<=CURRENT_TIMESTAMP)||LA188_0==SNAPSHOT||(LA188_0>=VARIABLE && LA188_0<=INDEX)||(LA188_0>=BOOLEAN_TRUE && LA188_0<=VALUE_NULL)||(LA188_0>=DEFINE && LA188_0<=MATCHES)||LA188_0==NUM_DOUBLE||LA188_0==IDENT||LA188_0==LPAREN||(LA188_0>=PLUS && LA188_0<=QUESTION)||(LA188_0>=STRING_LITERAL && LA188_0<=QUOTED_STRING_LITERAL)||LA188_0==MINUS||LA188_0==LCURLY||LA188_0==NUM_INT||(LA188_0>=TICKED_STRING_LITERAL && LA188_0<=NUM_FLOAT)) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1247:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction7866);
                    libFunctionArgs527=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs527.getTree());

                    }
                    break;

            }

            RPAREN528=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction7870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN528);



            // AST REWRITE
            // elements: classIdentifierNonGreedy, libFunctionArgs, funcIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1248:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1248:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1248:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1248:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1251:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT529=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT529_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1252:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt189=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt189=1;
                }
                break;
            case MAX:
                {
                alt189=2;
                }
                break;
            case MIN:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1252:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT529=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent7900); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT529_tree = (CommonTree)adaptor.create(IDENT529);
                    adaptor.addChild(root_0, IDENT529_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1253:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent7907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1253:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1254:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent7919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1254:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1257:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL530=null;
        Token DISTINCT531=null;
        Token COMMA533=null;
        EsperEPL2GrammarParser.expression_return expression532 = null;

        EsperEPL2GrammarParser.expression_return expression534 = null;


        CommonTree ALL530_tree=null;
        CommonTree DISTINCT531_tree=null;
        CommonTree COMMA533_tree=null;

        try {
            // EsperEPL2Grammar.g:1258:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1258:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1258:4: ( ALL | DISTINCT )?
            int alt190=3;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ALL) ) {
                alt190=1;
            }
            else if ( (LA190_0==DISTINCT) ) {
                alt190=2;
            }
            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1258:5: ALL
                    {
                    ALL530=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs7937); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1258:12: DISTINCT
                    {
                    DISTINCT531=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs7942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT531_tree = (CommonTree)adaptor.create(DISTINCT531);
                    adaptor.addChild(root_0, DISTINCT531_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs7946);
            expression532=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression532.getTree());
            // EsperEPL2Grammar.g:1258:34: ( COMMA expression )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1258:35: COMMA expression
            	    {
            	    COMMA533=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs7949); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs7952);
            	    expression534=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression534.getTree());

            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1261:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR536=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr535 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr537 = null;


        CommonTree AND_EXPR536_tree=null;

        try {
            // EsperEPL2Grammar.g:1262:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1262:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList7966);
            concatenationExpr535=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr535.getTree());
            AND_EXPR536=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList7968); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList7971);
            concatenationExpr537=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr537.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1271:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression538 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1274:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1274:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression7999);
            followedByExpression538=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression538.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1277:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression539 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression540 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1278:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1278:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8011);
            orExpression539=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression539.getTree());
            // EsperEPL2Grammar.g:1278:17: (f= FOLLOWED_BY orExpression )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==FOLLOWED_BY) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1278:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8016); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8018);
            	    orExpression540=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression540.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1279:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1279:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1280:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1283:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression541 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression542 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1284:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1284:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8057);
            andExpression541=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression541.getTree());
            // EsperEPL2Grammar.g:1284:18: (o= OR_EXPR andExpression )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==OR_EXPR) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1284:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8062); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression8064);
            	    andExpression542=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression542.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);



            // AST REWRITE
            // elements: OR_EXPR, andExpression, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1285:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1285:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1286:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1289:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression543 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression544 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1290:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1290:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8096);
            matchUntilExpression543=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression543.getTree());
            // EsperEPL2Grammar.g:1290:25: (a= AND_EXPR matchUntilExpression )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==AND_EXPR) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1290:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8101); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8103);
            	    matchUntilExpression544=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression544.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1291:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1291:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1292:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1295:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression545 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression546 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1296:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1296:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1296:4: (r= matchUntilRange )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==LBRACK) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1296:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8138);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8142);
            qualifyExpression545=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression545.getTree());
            // EsperEPL2Grammar.g:1296:43: (a= UNTIL qualifyExpression )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==UNTIL) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1296:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8149);
                    qualifyExpression546=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression546.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange, matchUntilRange, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1297:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1297:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1298:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1298:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1299:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1299:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1300:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1303:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList547 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix548 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1304:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1304:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1304:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( ((LA199_0>=NOT_EXPR && LA199_0<=EVERY_DISTINCT_EXPR)) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // EsperEPL2Grammar.g:1304:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1304:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt197=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt197=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt197=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt197=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 197, 0, input);

                        throw nvae;
                    }

                    switch (alt197) {
                        case 1 :
                            // EsperEPL2Grammar.g:1304:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1304:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8220); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1304:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8226); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8228);
                            distinctExpressionList547=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList547.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1304:80: (r= matchUntilRange )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==LBRACK) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // EsperEPL2Grammar.g:1304:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8234);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8243);
            guardPostFix548=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix548.getTree());


            // AST REWRITE
            // elements: matchUntilRange, EVERY_DISTINCT_EXPR, EVERY_EXPR, matchUntilRange, guardPostFix, distinctExpressionList, guardPostFix, distinctExpressionList, matchUntilRange, guardPostFix, guardPostFix, EVERY_EXPR, EVERY_DISTINCT_EXPR, guardPostFix, guardPostFix, guardPostFix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1306:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1306:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1307:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1307:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1308:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1308:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1309:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1309:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1309:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1310:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1310:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1310:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1311:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1311:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1311:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1312:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1315:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN549=null;
        Token COMMA551=null;
        Token RPAREN553=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom550 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom552 = null;


        CommonTree LPAREN549_tree=null;
        CommonTree COMMA551_tree=null;
        CommonTree RPAREN553_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1316:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1316:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN549);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8360);
            distinctExpressionAtom550=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom550.getTree());
            // EsperEPL2Grammar.g:1316:34: ( COMMA distinctExpressionAtom )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1316:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8363); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA551);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8365);
            	    distinctExpressionAtom552=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom552.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);

            RPAREN553=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN553);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1317:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1317:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1320:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression554 = null;



        try {
            // EsperEPL2Grammar.g:1321:2: ( expression )
            // EsperEPL2Grammar.g:1321:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8392);
            expression554=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1324:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN557=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression555 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression556 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression558 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN557_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1325:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1325:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1325:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==IDENT||LA201_0==TICKED_STRING_LITERAL) ) {
                alt201=1;
            }
            else if ( (LA201_0==LPAREN) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1325:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8407);
                    atomicExpression555=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression555.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1325:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8415);
                    patternExpression556=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression556.getTree());
                    RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN557);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1325:59: (w= WHERE guardExpression )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==WHERE) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1325:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix8425);
                    guardExpression558=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression558.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: guardExpression, atomicExpression, patternExpression, atomicExpression, patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1326:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1326:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1326:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1326:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1327:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1327:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1327:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1330:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression559 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression560 = null;



        try {
            // EsperEPL2Grammar.g:1331:2: ( observerExpression | patternFilterExpression )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==IDENT) ) {
                int LA203_1 = input.LA(2);

                if ( (LA203_1==COLON) ) {
                    alt203=1;
                }
                else if ( (LA203_1==EOF||(LA203_1>=OR_EXPR && LA203_1<=AND_EXPR)||LA203_1==WHERE||LA203_1==UNTIL||(LA203_1>=EQUALS && LA203_1<=RPAREN)||(LA203_1>=LBRACK && LA203_1<=RBRACK)||LA203_1==FOLLOWED_BY) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA203_0==TICKED_STRING_LITERAL) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1331:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8467);
                    observerExpression559=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression559.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1331:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8471);
                    patternFilterExpression560=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression560.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1334:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON561=null;
        Token LPAREN562=null;
        Token RPAREN564=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList563 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON561_tree=null;
        CommonTree LPAREN562_tree=null;
        CommonTree RPAREN564_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1335:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1335:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON561=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON561);

            // EsperEPL2Grammar.g:1335:19: (nm= IDENT | a= AT )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==IDENT) ) {
                alt204=1;
            }
            else if ( (LA204_0==AT) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // EsperEPL2Grammar.g:1335:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1335:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN562=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN562);

            // EsperEPL2Grammar.g:1335:44: ( expressionWithTimeList )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==WINDOW||LA205_0==ESCAPE||(LA205_0>=NOT_EXPR && LA205_0<=EVERY_EXPR)||(LA205_0>=SUM && LA205_0<=COUNT)||LA205_0==CASE||LA205_0==OUTER||(LA205_0>=JOIN && LA205_0<=FULL)||(LA205_0>=EVENTS && LA205_0<=LAST)||(LA205_0>=UNIDIRECTIONAL && LA205_0<=CURRENT_TIMESTAMP)||LA205_0==SNAPSHOT||(LA205_0>=VARIABLE && LA205_0<=INDEX)||(LA205_0>=BOOLEAN_TRUE && LA205_0<=VALUE_NULL)||(LA205_0>=DEFINE && LA205_0<=MATCHES)||LA205_0==NUM_DOUBLE||LA205_0==IDENT||LA205_0==LPAREN||LA205_0==STAR||(LA205_0>=PLUS && LA205_0<=LBRACK)||(LA205_0>=STRING_LITERAL && LA205_0<=QUOTED_STRING_LITERAL)||LA205_0==MINUS||LA205_0==LCURLY||LA205_0==NUM_INT||(LA205_0>=TICKED_STRING_LITERAL && LA205_0<=NUM_FLOAT)) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // EsperEPL2Grammar.g:1335:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8504);
                    expressionWithTimeList563=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList563.getTree());

                    }
                    break;

            }

            RPAREN564=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN564);



            // AST REWRITE
            // elements: nm, expressionWithTimeList, expressionWithTimeList, ns, ns, IDENT
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1336:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1336:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1336:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1336:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1337:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1337:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1337:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1340:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT565=null;
        Token COLON566=null;
        Token IDENT567=null;
        Token LPAREN568=null;
        Token RPAREN570=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList569 = null;


        CommonTree IDENT565_tree=null;
        CommonTree COLON566_tree=null;
        CommonTree IDENT567_tree=null;
        CommonTree LPAREN568_tree=null;
        CommonTree RPAREN570_tree=null;

        try {
            // EsperEPL2Grammar.g:1341:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1341:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT565=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT565_tree = (CommonTree)adaptor.create(IDENT565);
            adaptor.addChild(root_0, IDENT565_tree);
            }
            COLON566=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression8558); if (state.failed) return retval;
            IDENT567=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT567_tree = (CommonTree)adaptor.create(IDENT567);
            adaptor.addChild(root_0, IDENT567_tree);
            }
            LPAREN568=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression8563); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1341:31: ( expressionWithTimeList )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==WINDOW||LA206_0==ESCAPE||(LA206_0>=NOT_EXPR && LA206_0<=EVERY_EXPR)||(LA206_0>=SUM && LA206_0<=COUNT)||LA206_0==CASE||LA206_0==OUTER||(LA206_0>=JOIN && LA206_0<=FULL)||(LA206_0>=EVENTS && LA206_0<=LAST)||(LA206_0>=UNIDIRECTIONAL && LA206_0<=CURRENT_TIMESTAMP)||LA206_0==SNAPSHOT||(LA206_0>=VARIABLE && LA206_0<=INDEX)||(LA206_0>=BOOLEAN_TRUE && LA206_0<=VALUE_NULL)||(LA206_0>=DEFINE && LA206_0<=MATCHES)||LA206_0==NUM_DOUBLE||LA206_0==IDENT||LA206_0==LPAREN||LA206_0==STAR||(LA206_0>=PLUS && LA206_0<=LBRACK)||(LA206_0>=STRING_LITERAL && LA206_0<=QUOTED_STRING_LITERAL)||LA206_0==MINUS||LA206_0==LCURLY||LA206_0==NUM_INT||(LA206_0>=TICKED_STRING_LITERAL && LA206_0<=NUM_FLOAT)) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // EsperEPL2Grammar.g:1341:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression8567);
                    expressionWithTimeList569=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList569.getTree());

                    }
                    break;

            }

            RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression8571); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1345:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK571=null;
        Token DOT572=null;
        Token DOT573=null;
        Token DOT574=null;
        Token DOT575=null;
        Token RBRACK576=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK571_tree=null;
        CommonTree DOT572_tree=null;
        CommonTree DOT573_tree=null;
        CommonTree DOT574_tree=null;
        CommonTree DOT575_tree=null;
        CommonTree RBRACK576_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1346:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1346:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK571=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK571);

            // EsperEPL2Grammar.g:1346:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt211=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt211=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt211=2;
                }
                break;
            case DOT:
                {
                int LA211_3 = input.LA(2);

                if ( (LA211_3==DOT) ) {
                    alt211=3;
                }
                else if ( (LA211_3==NUM_DOUBLE) ) {
                    alt211=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }

            switch (alt211) {
                case 1 :
                    // EsperEPL2Grammar.g:1347:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1347:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt208=3;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==DOT) ) {
                        alt208=1;
                    }
                    else if ( (LA208_0==COLON) ) {
                        alt208=2;
                    }
                    switch (alt208) {
                        case 1 :
                            // EsperEPL2Grammar.g:1347:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1347:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1347:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8602); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT572=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT572);

                            // EsperEPL2Grammar.g:1347:30: (r= NUM_INT )?
                            int alt207=2;
                            int LA207_0 = input.LA(1);

                            if ( (LA207_0==NUM_INT) ) {
                                alt207=1;
                            }
                            switch (alt207) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1347:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8608); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1348:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1348:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1348:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8632); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8636); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1350:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1350:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt210=3;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==DOT) ) {
                        alt210=1;
                    }
                    else if ( (LA210_0==NUM_DOUBLE) ) {
                        alt210=2;
                    }
                    switch (alt210) {
                        case 1 :
                            // EsperEPL2Grammar.g:1351:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8690); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1351:35: (r= NUM_INT )?
                            int alt209=2;
                            int LA209_0 = input.LA(1);

                            if ( (LA209_0==NUM_INT) ) {
                                alt209=1;
                            }
                            switch (alt209) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1351:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8694); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1353:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8754); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1355:8: DOT DOT r= NUM_INT
                    {
                    DOT573=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT573);

                    DOT574=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT574);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1356:8: DOT db3= NUM_DOUBLE
                    {
                    DOT575=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT575);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK576=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange8821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK576);



            // AST REWRITE
            // elements: db2, r, db3, r, r, l, l, db, db, db, db, l, l, r
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1359:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1359:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1360:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1360:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1361:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1361:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1362:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1362:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1363:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1363:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1364:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1364:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1365:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1365:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1366:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1366:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1367:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1367:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1368:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1368:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1376:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS577=null;
        Token LPAREN579=null;
        Token RPAREN581=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier578 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList580 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression582 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS577_tree=null;
        CommonTree LPAREN579_tree=null;
        CommonTree RPAREN581_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1379:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1379:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1379:9: (i= IDENT EQUALS )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==IDENT) ) {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==EQUALS) ) {
                    alt212=1;
                }
            }
            switch (alt212) {
                case 1 :
                    // EsperEPL2Grammar.g:1379:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS577=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS577);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9017);
            classIdentifier578=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier578.getTree());
            // EsperEPL2Grammar.g:1381:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==LPAREN) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1381:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN579=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN579);

                    // EsperEPL2Grammar.g:1381:17: ( expressionList )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==WINDOW||LA213_0==ESCAPE||(LA213_0>=NOT_EXPR && LA213_0<=EVERY_EXPR)||(LA213_0>=SUM && LA213_0<=COUNT)||LA213_0==CASE||LA213_0==OUTER||(LA213_0>=JOIN && LA213_0<=FULL)||(LA213_0>=EVENTS && LA213_0<=LAST)||(LA213_0>=UNIDIRECTIONAL && LA213_0<=CURRENT_TIMESTAMP)||LA213_0==SNAPSHOT||(LA213_0>=VARIABLE && LA213_0<=INDEX)||(LA213_0>=BOOLEAN_TRUE && LA213_0<=VALUE_NULL)||(LA213_0>=DEFINE && LA213_0<=MATCHES)||LA213_0==NUM_DOUBLE||LA213_0==IDENT||LA213_0==LPAREN||(LA213_0>=PLUS && LA213_0<=QUESTION)||(LA213_0>=STRING_LITERAL && LA213_0<=QUOTED_STRING_LITERAL)||LA213_0==MINUS||LA213_0==LCURLY||LA213_0==NUM_INT||(LA213_0>=TICKED_STRING_LITERAL && LA213_0<=NUM_FLOAT)) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // EsperEPL2Grammar.g:1381:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9030);
                            expressionList580=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList580.getTree());

                            }
                            break;

                    }

                    RPAREN581=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN581);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1382:9: ( propertyExpression )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==LBRACK) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1382:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9045);
                    propertyExpression582=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression582.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, propertyExpression, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1383:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1383:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1383:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1383:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1383:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1386:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic583 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic584 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1387:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1387:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9090);
            propertyExpressionAtomic583=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic583.getTree());
            // EsperEPL2Grammar.g:1387:29: ( propertyExpressionAtomic )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==LBRACK) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1387:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9093);
            	    propertyExpressionAtomic584=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic584.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1388:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1388:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1391:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK585=null;
        Token SELECT586=null;
        Token FROM588=null;
        Token AS590=null;
        Token IDENT591=null;
        Token WHERE592=null;
        Token RBRACK594=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList587 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty589 = null;

        EsperEPL2GrammarParser.expression_return expression593 = null;


        CommonTree LBRACK585_tree=null;
        CommonTree SELECT586_tree=null;
        CommonTree FROM588_tree=null;
        CommonTree AS590_tree=null;
        CommonTree IDENT591_tree=null;
        CommonTree WHERE592_tree=null;
        CommonTree RBRACK594_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1392:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1392:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK585=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK585);

            // EsperEPL2Grammar.g:1392:11: ( SELECT propertySelectionList FROM )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==SELECT) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1392:12: SELECT propertySelectionList FROM
                    {
                    SELECT586=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT586);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9128);
                    propertySelectionList587=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList587.getTree());
                    FROM588=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM588);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9134);
            eventProperty589=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty589.getTree());
            // EsperEPL2Grammar.g:1392:62: ( AS IDENT )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==AS) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1392:63: AS IDENT
                    {
                    AS590=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS590);

                    IDENT591=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT591);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1392:74: ( WHERE expression )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==WHERE) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1392:75: WHERE expression
                    {
                    WHERE592=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9144); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE592);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9146);
                    expression593=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression593.getTree());

                    }
                    break;

            }

            RBRACK594=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK594);



            // AST REWRITE
            // elements: propertySelectionList, expression, IDENT, eventProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1393:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1393:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1393:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1393:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1393:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1393:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1396:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA596=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement595 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement597 = null;


        CommonTree COMMA596_tree=null;

        try {
            // EsperEPL2Grammar.g:1397:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1397:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9200);
            propertySelectionListElement595=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement595.getTree());
            // EsperEPL2Grammar.g:1397:33: ( COMMA propertySelectionListElement )*
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==COMMA) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1397:34: COMMA propertySelectionListElement
            	    {
            	    COMMA596=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9203); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9206);
            	    propertySelectionListElement597=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement597.getTree());

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1400:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS600=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector598 = null;

        EsperEPL2GrammarParser.expression_return expression599 = null;


        CommonTree s_tree=null;
        CommonTree AS600_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1402:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt222=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt222=1;
                }
                break;
            case IDENT:
                {
                int LA222_2 = input.LA(2);

                if ( (LA222_2==DOT) ) {
                    int LA222_62 = input.LA(3);

                    if ( (LA222_62==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt222=2;
                    }
                    else if ( (LA222_62==WINDOW||LA222_62==ESCAPE||LA222_62==EVERY_EXPR||(LA222_62>=SUM && LA222_62<=COUNT)||LA222_62==OUTER||(LA222_62>=JOIN && LA222_62<=FULL)||(LA222_62>=EVENTS && LA222_62<=LAST)||(LA222_62>=UNIDIRECTIONAL && LA222_62<=PRIOR)||(LA222_62>=WEEKDAY && LA222_62<=CAST)||LA222_62==SNAPSHOT||(LA222_62>=VARIABLE && LA222_62<=INDEX)||(LA222_62>=DEFINE && LA222_62<=MATCHES)||LA222_62==IDENT||LA222_62==TICKED_STRING_LITERAL) ) {
                        alt222=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 222, 62, input);

                        throw nvae;
                    }
                }
                else if ( ((LA222_2>=IN_SET && LA222_2<=REGEXP)||(LA222_2>=OR_EXPR && LA222_2<=NOT_EXPR)||LA222_2==AS||LA222_2==FROM||LA222_2==IS||LA222_2==COMMA||LA222_2==EQUALS||LA222_2==LPAREN||(LA222_2>=STAR && LA222_2<=LBRACK)||(LA222_2>=BAND && LA222_2<=MOD)||LA222_2==ESCAPECHAR) ) {
                    alt222=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt222=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }

            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1402:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1402:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1403:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9248);
                    propertyStreamSelector598=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector598.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1404:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9253);
                    expression599=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression599.getTree());
                    // EsperEPL2Grammar.g:1404:15: ( AS i= keywordAllowedIdent )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==AS) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1404:16: AS i= keywordAllowedIdent
                            {
                            AS600=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9256); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS600);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9260);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1405:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1405:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1406:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1406:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1409:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT601=null;
        Token STAR602=null;
        Token AS603=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT601_tree=null;
        CommonTree STAR602_tree=null;
        CommonTree AS603_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1410:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1410:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT601=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT601);

            STAR602=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR602);

            // EsperEPL2Grammar.g:1410:21: ( AS i= IDENT )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==AS) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1410:22: AS i= IDENT
                    {
                    AS603=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS603);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1411:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1411:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1411:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1414:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS604=null;
        Token LPAREN606=null;
        Token RPAREN608=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier605 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList607 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression609 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS604_tree=null;
        CommonTree LPAREN606_tree=null;
        CommonTree RPAREN608_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1417:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1417:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1417:9: (i= IDENT EQUALS )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==IDENT) ) {
                int LA224_1 = input.LA(2);

                if ( (LA224_1==EQUALS) ) {
                    alt224=1;
                }
            }
            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1417:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9362); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS604=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS604);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9373);
            classIdentifier605=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier605.getTree());
            // EsperEPL2Grammar.g:1419:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==LPAREN) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1419:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN606);

                    // EsperEPL2Grammar.g:1419:17: ( expressionList )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==WINDOW||LA225_0==ESCAPE||(LA225_0>=NOT_EXPR && LA225_0<=EVERY_EXPR)||(LA225_0>=SUM && LA225_0<=COUNT)||LA225_0==CASE||LA225_0==OUTER||(LA225_0>=JOIN && LA225_0<=FULL)||(LA225_0>=EVENTS && LA225_0<=LAST)||(LA225_0>=UNIDIRECTIONAL && LA225_0<=CURRENT_TIMESTAMP)||LA225_0==SNAPSHOT||(LA225_0>=VARIABLE && LA225_0<=INDEX)||(LA225_0>=BOOLEAN_TRUE && LA225_0<=VALUE_NULL)||(LA225_0>=DEFINE && LA225_0<=MATCHES)||LA225_0==NUM_DOUBLE||LA225_0==IDENT||LA225_0==LPAREN||(LA225_0>=PLUS && LA225_0<=QUESTION)||(LA225_0>=STRING_LITERAL && LA225_0<=QUOTED_STRING_LITERAL)||LA225_0==MINUS||LA225_0==LCURLY||LA225_0==NUM_INT||(LA225_0>=TICKED_STRING_LITERAL && LA225_0<=NUM_FLOAT)) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // EsperEPL2Grammar.g:1419:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9386);
                            expressionList607=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList607.getTree());

                            }
                            break;

                    }

                    RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN608);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1420:9: ( propertyExpression )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==LBRACK) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // EsperEPL2Grammar.g:1420:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9401);
                    propertyExpression609=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression609.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, propertyExpression, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1421:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1421:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1421:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1421:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1421:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1425:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT610=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT610_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1427:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1427:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier9456);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1428:6: ( DOT i2= escapableIdent )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==DOT) ) {
                    int LA228_20 = input.LA(2);

                    if ( (LA228_20==IDENT) ) {
                        int LA228_42 = input.LA(3);

                        if ( (LA228_42==EOF||LA228_42==CREATE||(LA228_42>=OR_EXPR && LA228_42<=AS)||LA228_42==SELECT||(LA228_42>=INNER && LA228_42<=ON)||(LA228_42>=GROUP && LA228_42<=HAVING)||LA228_42==OUTPUT||LA228_42==INSERT||LA228_42==ORDER||(LA228_42>=UNIDIRECTIONAL && LA228_42<=RETAININTERSECTION)||LA228_42==DELETE||LA228_42==SET||LA228_42==UNTIL||LA228_42==ROW_LIMIT_EXPR||(LA228_42>=UPDATE && LA228_42<=MATCH_RECOGNIZE)||(LA228_42>=COMMA && LA228_42<=IDENT)||(LA228_42>=DOT && LA228_42<=RPAREN)||(LA228_42>=LBRACK && LA228_42<=RBRACK)||LA228_42==RCURLY||LA228_42==FOLLOWED_BY||LA228_42==TICKED_STRING_LITERAL||LA228_42==EMAILAT) ) {
                            alt228=1;
                        }


                    }
                    else if ( (LA228_20==TICKED_STRING_LITERAL) ) {
                        alt228=1;
                    }


                }


                switch (alt228) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1429:8: DOT i2= escapableIdent
            	    {
            	    DOT610=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9475); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT610);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier9479);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1431:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1431:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1434:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT611=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT611_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1436:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1436:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9524);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1437:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA229_2 = input.LA(3);

                        if ( (LA229_2==DOT) ) {
                            alt229=1;
                        }
                        else if ( (LA229_2==LPAREN) ) {
                            alt229=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt229=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt229=2;
                        }
                        break;

                    }

                }


                switch (alt229) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1439:8: DOT i2= escapableIdent
            	    {
            	    DOT611=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9559); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT611);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9563);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1441:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1441:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1444:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA613=null;
        EsperEPL2GrammarParser.expression_return expression612 = null;

        EsperEPL2GrammarParser.expression_return expression614 = null;


        CommonTree COMMA613_tree=null;

        try {
            // EsperEPL2Grammar.g:1445:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1445:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9605);
            expression612=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression612.getTree());
            // EsperEPL2Grammar.g:1445:22: ( COMMA expression )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1445:23: COMMA expression
            	    {
            	    COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9608); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9611);
            	    expression614=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression614.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1448:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA616=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime615 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime617 = null;


        CommonTree COMMA616_tree=null;

        try {
            // EsperEPL2Grammar.g:1449:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1449:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9639);
            expressionWithTime615=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime615.getTree());
            // EsperEPL2Grammar.g:1449:30: ( COMMA expressionWithTime )*
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==COMMA) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1449:31: COMMA expressionWithTime
            	    {
            	    COMMA616=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9642); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9645);
            	    expressionWithTime617=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime617.getTree());

            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1452:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand618 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand619 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod620 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable621 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand622 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand623 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator624 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator625 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList626 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar627 = null;



        try {
            // EsperEPL2Grammar.g:1453:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt232=10;
            alt232 = dfa232.predict(input);
            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1453:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9671);
                    lastOperand618=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand618.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1454:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9682);
                    lastWeekdayOperand619=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand619.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1455:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9693);
                    timePeriod620=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod620.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1456:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9704);
                    expressionQualifyable621=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable621.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1457:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9715);
                    rangeOperand622=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand622.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1458:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9727);
                    frequencyOperand623=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand623.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1459:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9738);
                    lastOperator624=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator624.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1460:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9750);
                    weekDayOperator625=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator625.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1461:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9762);
                    numericParameterList626=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList626.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1462:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9767);
                    numberSetStar627=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar627.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1465:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression628 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1466:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1466:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9778);
            expression628=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression628.getTree());
            // EsperEPL2Grammar.g:1466:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt233=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt233=1;
                    }
                    break;
                case DESC:
                    {
                    alt233=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt233=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt233=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt233=5;
                    }
                    break;
            }

            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1466:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1466:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1466:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1466:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1466:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, expression, expression, expression, d
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1467:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1467:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1467:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1467:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1468:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1468:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1468:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1469:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1473:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR629=null;

        CommonTree STAR629_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1474:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1474:4: STAR
            {
            STAR629=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar9856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR629);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1475:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1475:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1478:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW630=null;

        CommonTree LW630_tree=null;

        try {
            // EsperEPL2Grammar.g:1479:2: ( LW )
            // EsperEPL2Grammar.g:1479:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW630=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand9876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW630_tree = (CommonTree)adaptor.create(LW630);
            root_0 = (CommonTree)adaptor.becomeRoot(LW630_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1482:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST631=null;

        CommonTree LAST631_tree=null;

        try {
            // EsperEPL2Grammar.g:1483:2: ( LAST )
            // EsperEPL2Grammar.g:1483:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST631=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand9889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST631_tree = (CommonTree)adaptor.create(LAST631);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST631_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1486:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR632=null;
        Token DIV633=null;
        EsperEPL2GrammarParser.number_return number634 = null;

        EsperEPL2GrammarParser.substitution_return substitution635 = null;


        CommonTree i_tree=null;
        CommonTree STAR632_tree=null;
        CommonTree DIV633_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1487:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1487:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR632=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand9901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR632);

            DIV633=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand9903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV633);

            // EsperEPL2Grammar.g:1487:13: ( number | i= IDENT | substitution )
            int alt234=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt234=1;
                }
                break;
            case IDENT:
                {
                alt234=2;
                }
                break;
            case QUESTION:
                {
                alt234=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }

            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1487:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand9906);
                    number634=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number634.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1487:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand9910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1487:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand9912);
                    substitution635=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution635.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1488:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1488:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1488:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1488:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1489:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1489:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1489:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1489:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1492:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON638=null;
        EsperEPL2GrammarParser.number_return number636 = null;

        EsperEPL2GrammarParser.substitution_return substitution637 = null;

        EsperEPL2GrammarParser.number_return number639 = null;

        EsperEPL2GrammarParser.substitution_return substitution640 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON638_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1493:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1493:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1493:4: ( number | i1= IDENT | substitution )
            int alt235=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt235=1;
                }
                break;
            case IDENT:
                {
                alt235=2;
                }
                break;
            case QUESTION:
                {
                alt235=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1493:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9961);
                    number636=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number636.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1493:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1493:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9967);
                    substitution637=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution637.getTree());

                    }
                    break;

            }

            COLON638=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand9970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON638);

            // EsperEPL2Grammar.g:1493:41: ( number | i2= IDENT | substitution )
            int alt236=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt236=1;
                }
                break;
            case IDENT:
                {
                alt236=2;
                }
                break;
            case QUESTION:
                {
                alt236=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // EsperEPL2Grammar.g:1493:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9973);
                    number639=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number639.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1493:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1493:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9979);
                    substitution640=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution640.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, substitution, substitution, number, i1, number, number, substitution, i2, i1
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1494:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1494:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1494:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1494:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1494:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1494:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1495:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1495:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1495:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1495:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1495:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1495:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1496:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1496:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1496:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1496:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1496:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1496:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1497:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1497:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1497:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1497:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1500:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST643=null;
        EsperEPL2GrammarParser.number_return number641 = null;

        EsperEPL2GrammarParser.substitution_return substitution642 = null;


        CommonTree i_tree=null;
        CommonTree LAST643_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1501:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1501:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1501:4: ( number | i= IDENT | substitution )
            int alt237=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt237=1;
                }
                break;
            case IDENT:
                {
                alt237=2;
                }
                break;
            case QUESTION:
                {
                alt237=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }

            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1501:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10093);
                    number641=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number641.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1501:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1501:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10099);
                    substitution642=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution642.getTree());

                    }
                    break;

            }

            LAST643=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST643);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1502:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1502:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1502:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1502:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1503:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1503:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1503:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1503:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1506:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY646=null;
        EsperEPL2GrammarParser.number_return number644 = null;

        EsperEPL2GrammarParser.substitution_return substitution645 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY646_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1507:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1507:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1507:4: ( number | i= IDENT | substitution )
            int alt238=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt238=1;
                }
                break;
            case IDENT:
                {
                alt238=2;
                }
                break;
            case QUESTION:
                {
                alt238=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;
            }

            switch (alt238) {
                case 1 :
                    // EsperEPL2Grammar.g:1507:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10150);
                    number644=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number644.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1507:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1507:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10156);
                    substitution645=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution645.getTree());

                    }
                    break;

            }

            WEEKDAY646=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY646);



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1508:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1508:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1508:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1508:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1509:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1509:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1509:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1509:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1512:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK647=null;
        Token COMMA649=null;
        Token RBRACK651=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter648 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter650 = null;


        CommonTree LBRACK647_tree=null;
        CommonTree COMMA649_tree=null;
        CommonTree RBRACK651_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1513:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1513:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK647=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK647);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10208);
            numericListParameter648=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter648.getTree());
            // EsperEPL2Grammar.g:1513:32: ( COMMA numericListParameter )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==COMMA) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1513:33: COMMA numericListParameter
            	    {
            	    COMMA649=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10211); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA649);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10213);
            	    numericListParameter650=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter650.getTree());

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);

            RBRACK651=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK651);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1514:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1514:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1517:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand652 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand653 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant654 = null;



        try {
            // EsperEPL2Grammar.g:1518:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt240=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA240_1 = input.LA(2);

                if ( (LA240_1==COMMA||LA240_1==RBRACK) ) {
                    alt240=3;
                }
                else if ( (LA240_1==COLON) ) {
                    alt240=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA240_2 = input.LA(2);

                if ( (LA240_2==COMMA||LA240_2==RBRACK) ) {
                    alt240=3;
                }
                else if ( (LA240_2==COLON) ) {
                    alt240=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA240_3 = input.LA(2);

                if ( (LA240_3==COMMA||LA240_3==RBRACK) ) {
                    alt240=3;
                }
                else if ( (LA240_3==COLON) ) {
                    alt240=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA240_4 = input.LA(2);

                if ( (LA240_4==COMMA||LA240_4==RBRACK) ) {
                    alt240=3;
                }
                else if ( (LA240_4==COLON) ) {
                    alt240=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt240=1;
                }
                break;
            case STAR:
                {
                alt240=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt240=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }

            switch (alt240) {
                case 1 :
                    // EsperEPL2Grammar.g:1518:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10239);
                    rangeOperand652=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand652.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1519:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10245);
                    frequencyOperand653=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand653.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1520:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10250);
                    numberconstant654=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant654.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1523:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT656=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic655 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic657 = null;


        CommonTree DOT656_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1524:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1524:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10266);
            eventPropertyAtomic655=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic655.getTree());
            // EsperEPL2Grammar.g:1524:24: ( DOT eventPropertyAtomic )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==DOT) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1524:25: DOT eventPropertyAtomic
            	    {
            	    DOT656=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10269); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT656);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10271);
            	    eventPropertyAtomic657=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic657.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1525:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1525:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1528:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK659=null;
        Token RPAREN660=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent658 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK659_tree=null;
        CommonTree RPAREN660_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1529:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1529:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10297);
            eventPropertyIdent658=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent658.getTree());
            // EsperEPL2Grammar.g:1529:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt245=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt245=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt245=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt245=3;
                    }
                    break;
            }

            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1530:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK659=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK659);

                    // EsperEPL2Grammar.g:1530:32: (q= QUESTION )?
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==QUESTION) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            // EsperEPL2Grammar.g:1530:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10317); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1532:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1532:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==STRING_LITERAL) ) {
                        alt243=1;
                    }
                    else if ( (LA243_0==QUOTED_STRING_LITERAL) ) {
                        alt243=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 0, input);

                        throw nvae;
                    }
                    switch (alt243) {
                        case 1 :
                            // EsperEPL2Grammar.g:1532:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10336); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1532:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10342); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN660=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN660);

                    // EsperEPL2Grammar.g:1532:66: (q= QUESTION )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==QUESTION) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // EsperEPL2Grammar.g:1532:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10350); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1534:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, eventPropertyIdent, ni, s, eventPropertyIdent, s, eventPropertyIdent, ni, eventPropertyIdent, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1537:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1537:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1538:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1538:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1539:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1539:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1540:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1540:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1541:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1541:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1542:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1542:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1545:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR661=null;
        Token DOT662=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR661_tree=null;
        CommonTree DOT662_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1547:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1547:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10487);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1548:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);

                if ( (LA247_0==ESCAPECHAR) ) {
                    alt247=1;
                }


                switch (alt247) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1549:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR661=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10499); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR661);

            	    DOT662=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10501); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT662);

            	    // EsperEPL2Grammar.g:1549:24: (ipi2= keywordAllowedIdent )?
            	    int alt246=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt246=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA246_5 = input.LA(2);

            	            if ( (LA246_5==EOF||(LA246_5>=IN_SET && LA246_5<=NOT_EXPR)||(LA246_5>=WHERE && LA246_5<=AS)||(LA246_5>=ELSE && LA246_5<=FROM)||(LA246_5>=INNER && LA246_5<=FULL)||LA246_5==IS||(LA246_5>=GROUP && LA246_5<=HAVING)||LA246_5==ALL||LA246_5==OUTPUT||LA246_5==INSERT||(LA246_5>=ORDER && LA246_5<=DESC)||LA246_5==PATTERN||(LA246_5>=TIMEPERIOD_SEC && LA246_5<=TIMEPERIOD_SECONDS)||LA246_5==ROW_LIMIT_EXPR||(LA246_5>=MATCH_RECOGNIZE && LA246_5<=MEASURES)||LA246_5==AFTER||LA246_5==COMMA||(LA246_5>=EQUALS && LA246_5<=COLON)||(LA246_5>=BAND && LA246_5<=MOD)||LA246_5==RCURLY||LA246_5==ESCAPECHAR) ) {
            	                alt246=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA246_22 = input.LA(2);

            	            if ( (LA246_22==LPAREN) ) {
            	                int LA246_167 = input.LA(3);

            	                if ( ((LA246_167>=STRING_LITERAL && LA246_167<=QUOTED_STRING_LITERAL)) ) {
            	                    alt246=1;
            	                }
            	            }
            	            else if ( (LA246_22==EOF||(LA246_22>=IN_SET && LA246_22<=NOT_EXPR)||(LA246_22>=WHERE && LA246_22<=AS)||(LA246_22>=ELSE && LA246_22<=FROM)||(LA246_22>=INNER && LA246_22<=FULL)||LA246_22==IS||(LA246_22>=GROUP && LA246_22<=HAVING)||LA246_22==ALL||LA246_22==OUTPUT||LA246_22==INSERT||(LA246_22>=ORDER && LA246_22<=DESC)||LA246_22==PATTERN||(LA246_22>=TIMEPERIOD_SEC && LA246_22<=TIMEPERIOD_SECONDS)||LA246_22==ROW_LIMIT_EXPR||(LA246_22>=MATCH_RECOGNIZE && LA246_22<=MEASURES)||LA246_22==AFTER||LA246_22==COMMA||(LA246_22>=EQUALS && LA246_22<=DOT)||(LA246_22>=RPAREN && LA246_22<=COLON)||(LA246_22>=BAND && LA246_22<=MOD)||LA246_22==RCURLY||LA246_22==ESCAPECHAR) ) {
            	                alt246=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA246_35 = input.LA(2);

            	            if ( (LA246_35==EOF||(LA246_35>=IN_SET && LA246_35<=NOT_EXPR)||(LA246_35>=WHERE && LA246_35<=AS)||(LA246_35>=ELSE && LA246_35<=FROM)||(LA246_35>=INNER && LA246_35<=FULL)||LA246_35==IS||(LA246_35>=GROUP && LA246_35<=HAVING)||LA246_35==ALL||LA246_35==OUTPUT||LA246_35==INSERT||(LA246_35>=ORDER && LA246_35<=DESC)||LA246_35==PATTERN||(LA246_35>=TIMEPERIOD_SEC && LA246_35<=TIMEPERIOD_SECONDS)||LA246_35==ROW_LIMIT_EXPR||(LA246_35>=MATCH_RECOGNIZE && LA246_35<=MEASURES)||LA246_35==AFTER||LA246_35==COMMA||(LA246_35>=EQUALS && LA246_35<=COLON)||(LA246_35>=BAND && LA246_35<=MOD)||LA246_35==RCURLY||LA246_35==ESCAPECHAR) ) {
            	                alt246=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA246_36 = input.LA(2);

            	            if ( (LA246_36==EOF||(LA246_36>=IN_SET && LA246_36<=NOT_EXPR)||(LA246_36>=WHERE && LA246_36<=AS)||(LA246_36>=ELSE && LA246_36<=FROM)||(LA246_36>=INNER && LA246_36<=FULL)||LA246_36==IS||(LA246_36>=GROUP && LA246_36<=HAVING)||LA246_36==ALL||LA246_36==OUTPUT||LA246_36==INSERT||(LA246_36>=ORDER && LA246_36<=DESC)||LA246_36==PATTERN||(LA246_36>=TIMEPERIOD_SEC && LA246_36<=TIMEPERIOD_SECONDS)||LA246_36==ROW_LIMIT_EXPR||(LA246_36>=MATCH_RECOGNIZE && LA246_36<=MEASURES)||LA246_36==AFTER||LA246_36==COMMA||(LA246_36>=EQUALS && LA246_36<=COLON)||(LA246_36>=BAND && LA246_36<=MOD)||LA246_36==RCURLY||LA246_36==ESCAPECHAR) ) {
            	                alt246=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA246_38 = input.LA(2);

            	            if ( (LA246_38==EOF||(LA246_38>=IN_SET && LA246_38<=NOT_EXPR)||(LA246_38>=WHERE && LA246_38<=AS)||(LA246_38>=ELSE && LA246_38<=FROM)||(LA246_38>=INNER && LA246_38<=FULL)||LA246_38==IS||(LA246_38>=GROUP && LA246_38<=HAVING)||LA246_38==ALL||LA246_38==OUTPUT||LA246_38==INSERT||(LA246_38>=ORDER && LA246_38<=DESC)||LA246_38==PATTERN||(LA246_38>=TIMEPERIOD_SEC && LA246_38<=TIMEPERIOD_SECONDS)||LA246_38==ROW_LIMIT_EXPR||(LA246_38>=MATCH_RECOGNIZE && LA246_38<=MEASURES)||LA246_38==AFTER||LA246_38==COMMA||(LA246_38>=EQUALS && LA246_38<=COLON)||(LA246_38>=BAND && LA246_38<=MOD)||LA246_38==RCURLY||LA246_38==ESCAPECHAR) ) {
            	                alt246=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA246_39 = input.LA(2);

            	            if ( (LA246_39==EOF||(LA246_39>=IN_SET && LA246_39<=NOT_EXPR)||(LA246_39>=WHERE && LA246_39<=AS)||(LA246_39>=ELSE && LA246_39<=FROM)||(LA246_39>=INNER && LA246_39<=FULL)||LA246_39==IS||(LA246_39>=GROUP && LA246_39<=HAVING)||LA246_39==ALL||LA246_39==OUTPUT||LA246_39==INSERT||(LA246_39>=ORDER && LA246_39<=DESC)||(LA246_39>=TIMEPERIOD_SEC && LA246_39<=TIMEPERIOD_SECONDS)||LA246_39==ROW_LIMIT_EXPR||(LA246_39>=MATCH_RECOGNIZE && LA246_39<=MEASURES)||LA246_39==AFTER||LA246_39==COMMA||(LA246_39>=EQUALS && LA246_39<=COLON)||(LA246_39>=BAND && LA246_39<=MOD)||LA246_39==RCURLY||LA246_39==ESCAPECHAR) ) {
            	                alt246=1;
            	            }
            	            else if ( (LA246_39==PATTERN) ) {
            	                int LA246_470 = input.LA(3);

            	                if ( (LA246_470==LPAREN) ) {
            	                    alt246=1;
            	                }
            	            }
            	            }
            	            break;
            	    }

            	    switch (alt246) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1549:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10505);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop247;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1551:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1551:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1554:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT663=null;
        Token COUNT664=null;
        Token ESCAPE665=null;
        Token EVERY_EXPR666=null;
        Token SUM667=null;
        Token AVG668=null;
        Token MAX669=null;
        Token MIN670=null;
        Token COALESCE671=null;
        Token MEDIAN672=null;
        Token STDDEV673=null;
        Token AVEDEV674=null;
        Token EVENTS675=null;
        Token FIRST676=null;
        Token LAST677=null;
        Token UNIDIRECTIONAL678=null;
        Token RETAINUNION679=null;
        Token RETAININTERSECTION680=null;
        Token UNTIL681=null;
        Token PATTERN682=null;
        Token SQL683=null;
        Token METADATASQL684=null;
        Token PREVIOUS685=null;
        Token PRIOR686=null;
        Token WEEKDAY687=null;
        Token LW688=null;
        Token INSTANCEOF689=null;
        Token CAST690=null;
        Token SNAPSHOT691=null;
        Token VARIABLE692=null;
        Token INDEX693=null;
        Token WINDOW694=null;
        Token LEFT695=null;
        Token RIGHT696=null;
        Token OUTER697=null;
        Token FULL698=null;
        Token JOIN699=null;
        Token DEFINE700=null;
        Token PARTITION701=null;
        Token MATCHES702=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT663_tree=null;
        CommonTree COUNT664_tree=null;
        CommonTree ESCAPE665_tree=null;
        CommonTree EVERY_EXPR666_tree=null;
        CommonTree SUM667_tree=null;
        CommonTree AVG668_tree=null;
        CommonTree MAX669_tree=null;
        CommonTree MIN670_tree=null;
        CommonTree COALESCE671_tree=null;
        CommonTree MEDIAN672_tree=null;
        CommonTree STDDEV673_tree=null;
        CommonTree AVEDEV674_tree=null;
        CommonTree EVENTS675_tree=null;
        CommonTree FIRST676_tree=null;
        CommonTree LAST677_tree=null;
        CommonTree UNIDIRECTIONAL678_tree=null;
        CommonTree RETAINUNION679_tree=null;
        CommonTree RETAININTERSECTION680_tree=null;
        CommonTree UNTIL681_tree=null;
        CommonTree PATTERN682_tree=null;
        CommonTree SQL683_tree=null;
        CommonTree METADATASQL684_tree=null;
        CommonTree PREVIOUS685_tree=null;
        CommonTree PRIOR686_tree=null;
        CommonTree WEEKDAY687_tree=null;
        CommonTree LW688_tree=null;
        CommonTree INSTANCEOF689_tree=null;
        CommonTree CAST690_tree=null;
        CommonTree SNAPSHOT691_tree=null;
        CommonTree VARIABLE692_tree=null;
        CommonTree INDEX693_tree=null;
        CommonTree WINDOW694_tree=null;
        CommonTree LEFT695_tree=null;
        CommonTree RIGHT696_tree=null;
        CommonTree OUTER697_tree=null;
        CommonTree FULL698_tree=null;
        CommonTree JOIN699_tree=null;
        CommonTree DEFINE700_tree=null;
        CommonTree PARTITION701_tree=null;
        CommonTree MATCHES702_tree=null;

        try {
            // EsperEPL2Grammar.g:1555:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt248=42;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt248=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt248=2;
                }
                break;
            case AT:
                {
                alt248=3;
                }
                break;
            case COUNT:
                {
                alt248=4;
                }
                break;
            case ESCAPE:
                {
                alt248=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt248=6;
                }
                break;
            case SUM:
                {
                alt248=7;
                }
                break;
            case AVG:
                {
                alt248=8;
                }
                break;
            case MAX:
                {
                alt248=9;
                }
                break;
            case MIN:
                {
                alt248=10;
                }
                break;
            case COALESCE:
                {
                alt248=11;
                }
                break;
            case MEDIAN:
                {
                alt248=12;
                }
                break;
            case STDDEV:
                {
                alt248=13;
                }
                break;
            case AVEDEV:
                {
                alt248=14;
                }
                break;
            case EVENTS:
                {
                alt248=15;
                }
                break;
            case FIRST:
                {
                alt248=16;
                }
                break;
            case LAST:
                {
                alt248=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt248=18;
                }
                break;
            case RETAINUNION:
                {
                alt248=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt248=20;
                }
                break;
            case UNTIL:
                {
                alt248=21;
                }
                break;
            case PATTERN:
                {
                alt248=22;
                }
                break;
            case SQL:
                {
                alt248=23;
                }
                break;
            case METADATASQL:
                {
                alt248=24;
                }
                break;
            case PREVIOUS:
                {
                alt248=25;
                }
                break;
            case PRIOR:
                {
                alt248=26;
                }
                break;
            case WEEKDAY:
                {
                alt248=27;
                }
                break;
            case LW:
                {
                alt248=28;
                }
                break;
            case INSTANCEOF:
                {
                alt248=29;
                }
                break;
            case CAST:
                {
                alt248=30;
                }
                break;
            case SNAPSHOT:
                {
                alt248=31;
                }
                break;
            case VARIABLE:
                {
                alt248=32;
                }
                break;
            case INDEX:
                {
                alt248=33;
                }
                break;
            case WINDOW:
                {
                alt248=34;
                }
                break;
            case LEFT:
                {
                alt248=35;
                }
                break;
            case RIGHT:
                {
                alt248=36;
                }
                break;
            case OUTER:
                {
                alt248=37;
                }
                break;
            case FULL:
                {
                alt248=38;
                }
                break;
            case JOIN:
                {
                alt248=39;
                }
                break;
            case DEFINE:
                {
                alt248=40;
                }
                break;
            case PARTITION:
                {
                alt248=41;
                }
                break;
            case MATCHES:
                {
                alt248=42;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }

            switch (alt248) {
                case 1 :
                    // EsperEPL2Grammar.g:1555:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1556:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1557:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT663=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT663_tree = (CommonTree)adaptor.create(AT663);
                    adaptor.addChild(root_0, AT663_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1558:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT664=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT664_tree = (CommonTree)adaptor.create(COUNT664);
                    adaptor.addChild(root_0, COUNT664_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1559:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE665=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE665_tree = (CommonTree)adaptor.create(ESCAPE665);
                    adaptor.addChild(root_0, ESCAPE665_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1560:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR666=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR666_tree = (CommonTree)adaptor.create(EVERY_EXPR666);
                    adaptor.addChild(root_0, EVERY_EXPR666_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1561:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM667=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM667_tree = (CommonTree)adaptor.create(SUM667);
                    adaptor.addChild(root_0, SUM667_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1562:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG668=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10599); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG668_tree = (CommonTree)adaptor.create(AVG668);
                    adaptor.addChild(root_0, AVG668_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1563:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX669=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX669_tree = (CommonTree)adaptor.create(MAX669);
                    adaptor.addChild(root_0, MAX669_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1564:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN670=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN670_tree = (CommonTree)adaptor.create(MIN670);
                    adaptor.addChild(root_0, MIN670_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1565:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE671=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE671_tree = (CommonTree)adaptor.create(COALESCE671);
                    adaptor.addChild(root_0, COALESCE671_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1566:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN672=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN672_tree = (CommonTree)adaptor.create(MEDIAN672);
                    adaptor.addChild(root_0, MEDIAN672_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1567:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV673=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV673_tree = (CommonTree)adaptor.create(STDDEV673);
                    adaptor.addChild(root_0, STDDEV673_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1568:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV674=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV674_tree = (CommonTree)adaptor.create(AVEDEV674);
                    adaptor.addChild(root_0, AVEDEV674_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1569:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS675=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS675_tree = (CommonTree)adaptor.create(EVENTS675);
                    adaptor.addChild(root_0, EVENTS675_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1570:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST676=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST676_tree = (CommonTree)adaptor.create(FIRST676);
                    adaptor.addChild(root_0, FIRST676_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1571:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST677=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST677_tree = (CommonTree)adaptor.create(LAST677);
                    adaptor.addChild(root_0, LAST677_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1572:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL678=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL678_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL678);
                    adaptor.addChild(root_0, UNIDIRECTIONAL678_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1573:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION679=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION679_tree = (CommonTree)adaptor.create(RETAINUNION679);
                    adaptor.addChild(root_0, RETAINUNION679_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1574:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION680=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION680_tree = (CommonTree)adaptor.create(RETAININTERSECTION680);
                    adaptor.addChild(root_0, RETAININTERSECTION680_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1575:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL681=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL681_tree = (CommonTree)adaptor.create(UNTIL681);
                    adaptor.addChild(root_0, UNTIL681_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1576:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN682=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN682_tree = (CommonTree)adaptor.create(PATTERN682);
                    adaptor.addChild(root_0, PATTERN682_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1577:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL683=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL683_tree = (CommonTree)adaptor.create(SQL683);
                    adaptor.addChild(root_0, SQL683_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1578:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL684=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL684_tree = (CommonTree)adaptor.create(METADATASQL684);
                    adaptor.addChild(root_0, METADATASQL684_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1579:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS685=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS685_tree = (CommonTree)adaptor.create(PREVIOUS685);
                    adaptor.addChild(root_0, PREVIOUS685_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1580:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR686=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10725); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR686_tree = (CommonTree)adaptor.create(PRIOR686);
                    adaptor.addChild(root_0, PRIOR686_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1581:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY687=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY687_tree = (CommonTree)adaptor.create(WEEKDAY687);
                    adaptor.addChild(root_0, WEEKDAY687_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1582:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW688=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW688_tree = (CommonTree)adaptor.create(LW688);
                    adaptor.addChild(root_0, LW688_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1583:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF689=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF689_tree = (CommonTree)adaptor.create(INSTANCEOF689);
                    adaptor.addChild(root_0, INSTANCEOF689_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1584:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST690=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10753); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST690_tree = (CommonTree)adaptor.create(CAST690);
                    adaptor.addChild(root_0, CAST690_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1585:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT691=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT691_tree = (CommonTree)adaptor.create(SNAPSHOT691);
                    adaptor.addChild(root_0, SNAPSHOT691_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1586:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE692=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE692_tree = (CommonTree)adaptor.create(VARIABLE692);
                    adaptor.addChild(root_0, VARIABLE692_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1587:4: INDEX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INDEX693=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent10776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX693_tree = (CommonTree)adaptor.create(INDEX693);
                    adaptor.addChild(root_0, INDEX693_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1588:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW694=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW694_tree = (CommonTree)adaptor.create(WINDOW694);
                    adaptor.addChild(root_0, WINDOW694_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1589:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT695=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT695_tree = (CommonTree)adaptor.create(LEFT695);
                    adaptor.addChild(root_0, LEFT695_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1590:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT696=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent10799); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT696_tree = (CommonTree)adaptor.create(RIGHT696);
                    adaptor.addChild(root_0, RIGHT696_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1591:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER697=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent10806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER697_tree = (CommonTree)adaptor.create(OUTER697);
                    adaptor.addChild(root_0, OUTER697_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1592:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL698=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent10813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL698_tree = (CommonTree)adaptor.create(FULL698);
                    adaptor.addChild(root_0, FULL698_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1593:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN699=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent10820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN699_tree = (CommonTree)adaptor.create(JOIN699);
                    adaptor.addChild(root_0, JOIN699_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1594:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE700=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent10827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE700_tree = (CommonTree)adaptor.create(DEFINE700);
                    adaptor.addChild(root_0, DEFINE700_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1595:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION701=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent10834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION701_tree = (CommonTree)adaptor.create(PARTITION701);
                    adaptor.addChild(root_0, PARTITION701_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 42 :
                    // EsperEPL2Grammar.g:1596:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES702=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent10841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES702_tree = (CommonTree)adaptor.create(MATCHES702);
                    adaptor.addChild(root_0, MATCHES702_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1599:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1600:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==IDENT) ) {
                alt249=1;
            }
            else if ( (LA249_0==TICKED_STRING_LITERAL) ) {
                alt249=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // EsperEPL2Grammar.g:1600:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent10862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1601:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1604:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart703 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart704 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart705 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart706 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart707 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart708 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart709 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart710 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart711 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart712 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart713 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart714 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart715 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart716 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart717 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1605:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1606:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1606:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt260=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt260=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt260=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt260=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt260=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt260=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt260=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt260=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt260=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt260=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt260=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt260=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt260=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt260=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt260=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt260=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt260=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt260=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt260=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt260=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt260=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }

            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1607:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod10894);
                    dayPart703=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart703.getTree());
                    // EsperEPL2Grammar.g:1607:11: ( hourPart )?
                    int alt250=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA250_1 = input.LA(2);

                            if ( ((LA250_1>=TIMEPERIOD_HOUR && LA250_1<=TIMEPERIOD_HOURS)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA250_2 = input.LA(2);

                            if ( ((LA250_2>=TIMEPERIOD_HOUR && LA250_2<=TIMEPERIOD_HOURS)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA250_3 = input.LA(2);

                            if ( ((LA250_3>=TIMEPERIOD_HOUR && LA250_3<=TIMEPERIOD_HOURS)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA250_4 = input.LA(2);

                            if ( ((LA250_4>=TIMEPERIOD_HOUR && LA250_4<=TIMEPERIOD_HOURS)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA250_5 = input.LA(2);

                            if ( ((LA250_5>=TIMEPERIOD_HOUR && LA250_5<=TIMEPERIOD_HOURS)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA250_6 = input.LA(2);

                            if ( ((LA250_6>=TIMEPERIOD_HOUR && LA250_6<=TIMEPERIOD_HOURS)) ) {
                                alt250=1;
                            }
                            }
                            break;
                    }

                    switch (alt250) {
                        case 1 :
                            // EsperEPL2Grammar.g:1607:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod10896);
                            hourPart704=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart704.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1607:21: ( minutePart )?
                    int alt251=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA251_1 = input.LA(2);

                            if ( (LA251_1==MIN||(LA251_1>=TIMEPERIOD_MINUTE && LA251_1<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA251_2 = input.LA(2);

                            if ( (LA251_2==MIN||(LA251_2>=TIMEPERIOD_MINUTE && LA251_2<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA251_3 = input.LA(2);

                            if ( (LA251_3==MIN||(LA251_3>=TIMEPERIOD_MINUTE && LA251_3<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA251_4 = input.LA(2);

                            if ( (LA251_4==MIN||(LA251_4>=TIMEPERIOD_MINUTE && LA251_4<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA251_5 = input.LA(2);

                            if ( (LA251_5==MIN||(LA251_5>=TIMEPERIOD_MINUTE && LA251_5<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA251_6 = input.LA(2);

                            if ( (LA251_6==MIN||(LA251_6>=TIMEPERIOD_MINUTE && LA251_6<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                    }

                    switch (alt251) {
                        case 1 :
                            // EsperEPL2Grammar.g:1607:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10899);
                            minutePart705=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart705.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1607:33: ( secondPart )?
                    int alt252=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA252_1 = input.LA(2);

                            if ( ((LA252_1>=TIMEPERIOD_SEC && LA252_1<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA252_2 = input.LA(2);

                            if ( ((LA252_2>=TIMEPERIOD_SEC && LA252_2<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA252_3 = input.LA(2);

                            if ( ((LA252_3>=TIMEPERIOD_SEC && LA252_3<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA252_4 = input.LA(2);

                            if ( ((LA252_4>=TIMEPERIOD_SEC && LA252_4<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA252_5 = input.LA(2);

                            if ( ((LA252_5>=TIMEPERIOD_SEC && LA252_5<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA252_6 = input.LA(2);

                            if ( ((LA252_6>=TIMEPERIOD_SEC && LA252_6<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                    }

                    switch (alt252) {
                        case 1 :
                            // EsperEPL2Grammar.g:1607:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10902);
                            secondPart706=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart706.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1607:45: ( millisecondPart )?
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==NUM_DOUBLE||LA253_0==IDENT||LA253_0==QUESTION||LA253_0==NUM_INT||(LA253_0>=NUM_LONG && LA253_0<=NUM_FLOAT)) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            // EsperEPL2Grammar.g:1607:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10905);
                            millisecondPart707=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart707.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1608:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod10911);
                    hourPart708=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart708.getTree());
                    // EsperEPL2Grammar.g:1608:13: ( minutePart )?
                    int alt254=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA254_1 = input.LA(2);

                            if ( (LA254_1==MIN||(LA254_1>=TIMEPERIOD_MINUTE && LA254_1<=TIMEPERIOD_MINUTES)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA254_2 = input.LA(2);

                            if ( (LA254_2==MIN||(LA254_2>=TIMEPERIOD_MINUTE && LA254_2<=TIMEPERIOD_MINUTES)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA254_3 = input.LA(2);

                            if ( (LA254_3==MIN||(LA254_3>=TIMEPERIOD_MINUTE && LA254_3<=TIMEPERIOD_MINUTES)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA254_4 = input.LA(2);

                            if ( (LA254_4==MIN||(LA254_4>=TIMEPERIOD_MINUTE && LA254_4<=TIMEPERIOD_MINUTES)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA254_5 = input.LA(2);

                            if ( (LA254_5==MIN||(LA254_5>=TIMEPERIOD_MINUTE && LA254_5<=TIMEPERIOD_MINUTES)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA254_6 = input.LA(2);

                            if ( (LA254_6==MIN||(LA254_6>=TIMEPERIOD_MINUTE && LA254_6<=TIMEPERIOD_MINUTES)) ) {
                                alt254=1;
                            }
                            }
                            break;
                    }

                    switch (alt254) {
                        case 1 :
                            // EsperEPL2Grammar.g:1608:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10913);
                            minutePart709=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart709.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1608:25: ( secondPart )?
                    int alt255=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA255_1 = input.LA(2);

                            if ( ((LA255_1>=TIMEPERIOD_SEC && LA255_1<=TIMEPERIOD_SECONDS)) ) {
                                alt255=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA255_2 = input.LA(2);

                            if ( ((LA255_2>=TIMEPERIOD_SEC && LA255_2<=TIMEPERIOD_SECONDS)) ) {
                                alt255=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA255_3 = input.LA(2);

                            if ( ((LA255_3>=TIMEPERIOD_SEC && LA255_3<=TIMEPERIOD_SECONDS)) ) {
                                alt255=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA255_4 = input.LA(2);

                            if ( ((LA255_4>=TIMEPERIOD_SEC && LA255_4<=TIMEPERIOD_SECONDS)) ) {
                                alt255=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA255_5 = input.LA(2);

                            if ( ((LA255_5>=TIMEPERIOD_SEC && LA255_5<=TIMEPERIOD_SECONDS)) ) {
                                alt255=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA255_6 = input.LA(2);

                            if ( ((LA255_6>=TIMEPERIOD_SEC && LA255_6<=TIMEPERIOD_SECONDS)) ) {
                                alt255=1;
                            }
                            }
                            break;
                    }

                    switch (alt255) {
                        case 1 :
                            // EsperEPL2Grammar.g:1608:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10916);
                            secondPart710=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart710.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1608:37: ( millisecondPart )?
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==NUM_DOUBLE||LA256_0==IDENT||LA256_0==QUESTION||LA256_0==NUM_INT||(LA256_0>=NUM_LONG && LA256_0<=NUM_FLOAT)) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            // EsperEPL2Grammar.g:1608:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10919);
                            millisecondPart711=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart711.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1609:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod10925);
                    minutePart712=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart712.getTree());
                    // EsperEPL2Grammar.g:1609:15: ( secondPart )?
                    int alt257=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA257_1 = input.LA(2);

                            if ( ((LA257_1>=TIMEPERIOD_SEC && LA257_1<=TIMEPERIOD_SECONDS)) ) {
                                alt257=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA257_2 = input.LA(2);

                            if ( ((LA257_2>=TIMEPERIOD_SEC && LA257_2<=TIMEPERIOD_SECONDS)) ) {
                                alt257=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA257_3 = input.LA(2);

                            if ( ((LA257_3>=TIMEPERIOD_SEC && LA257_3<=TIMEPERIOD_SECONDS)) ) {
                                alt257=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA257_4 = input.LA(2);

                            if ( ((LA257_4>=TIMEPERIOD_SEC && LA257_4<=TIMEPERIOD_SECONDS)) ) {
                                alt257=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA257_5 = input.LA(2);

                            if ( ((LA257_5>=TIMEPERIOD_SEC && LA257_5<=TIMEPERIOD_SECONDS)) ) {
                                alt257=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA257_6 = input.LA(2);

                            if ( ((LA257_6>=TIMEPERIOD_SEC && LA257_6<=TIMEPERIOD_SECONDS)) ) {
                                alt257=1;
                            }
                            }
                            break;
                    }

                    switch (alt257) {
                        case 1 :
                            // EsperEPL2Grammar.g:1609:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10927);
                            secondPart713=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart713.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1609:27: ( millisecondPart )?
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==NUM_DOUBLE||LA258_0==IDENT||LA258_0==QUESTION||LA258_0==NUM_INT||(LA258_0>=NUM_LONG && LA258_0<=NUM_FLOAT)) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            // EsperEPL2Grammar.g:1609:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10930);
                            millisecondPart714=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart714.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1610:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod10936);
                    secondPart715=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart715.getTree());
                    // EsperEPL2Grammar.g:1610:15: ( millisecondPart )?
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==NUM_DOUBLE||LA259_0==IDENT||LA259_0==QUESTION||LA259_0==NUM_INT||(LA259_0>=NUM_LONG && LA259_0<=NUM_FLOAT)) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            // EsperEPL2Grammar.g:1610:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10938);
                            millisecondPart716=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart716.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1611:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod10944);
                    millisecondPart717=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart717.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dayPart, hourPart, millisecondPart, secondPart, minutePart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1613:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1613:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1613:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1613:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1613:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1613:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1613:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1616:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS720=null;
        Token TIMEPERIOD_DAY721=null;
        EsperEPL2GrammarParser.number_return number718 = null;

        EsperEPL2GrammarParser.substitution_return substitution719 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS720_tree=null;
        CommonTree TIMEPERIOD_DAY721_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1617:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1617:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1617:4: ( number | i= IDENT | substitution )
            int alt261=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt261=1;
                }
                break;
            case IDENT:
                {
                alt261=2;
                }
                break;
            case QUESTION:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // EsperEPL2Grammar.g:1617:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart10982);
                    number718=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number718.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1617:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart10986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1617:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart10988);
                    substitution719=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution719.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1617:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==TIMEPERIOD_DAYS) ) {
                alt262=1;
            }
            else if ( (LA262_0==TIMEPERIOD_DAY) ) {
                alt262=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }
            switch (alt262) {
                case 1 :
                    // EsperEPL2Grammar.g:1617:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS720=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart10992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS720);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1617:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY721=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart10996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY721);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1618:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1618:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1618:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1618:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1619:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1619:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1619:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1619:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1622:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS724=null;
        Token TIMEPERIOD_HOUR725=null;
        EsperEPL2GrammarParser.number_return number722 = null;

        EsperEPL2GrammarParser.substitution_return substitution723 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS724_tree=null;
        CommonTree TIMEPERIOD_HOUR725_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1623:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1623:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1623:4: ( number | i= IDENT | substitution )
            int alt263=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt263=1;
                }
                break;
            case IDENT:
                {
                alt263=2;
                }
                break;
            case QUESTION:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }

            switch (alt263) {
                case 1 :
                    // EsperEPL2Grammar.g:1623:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart11045);
                    number722=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number722.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1623:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1623:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11051);
                    substitution723=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution723.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1623:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==TIMEPERIOD_HOURS) ) {
                alt264=1;
            }
            else if ( (LA264_0==TIMEPERIOD_HOUR) ) {
                alt264=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                throw nvae;
            }
            switch (alt264) {
                case 1 :
                    // EsperEPL2Grammar.g:1623:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS724=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS724);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1623:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR725=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR725);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1624:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1624:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1624:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1624:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1625:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1625:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1625:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1625:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1628:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES728=null;
        Token TIMEPERIOD_MINUTE729=null;
        Token MIN730=null;
        EsperEPL2GrammarParser.number_return number726 = null;

        EsperEPL2GrammarParser.substitution_return substitution727 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES728_tree=null;
        CommonTree TIMEPERIOD_MINUTE729_tree=null;
        CommonTree MIN730_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1629:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1629:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1629:4: ( number | i= IDENT | substitution )
            int alt265=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt265=1;
                }
                break;
            case IDENT:
                {
                alt265=2;
                }
                break;
            case QUESTION:
                {
                alt265=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }

            switch (alt265) {
                case 1 :
                    // EsperEPL2Grammar.g:1629:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart11108);
                    number726=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number726.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1629:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1629:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11114);
                    substitution727=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution727.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1629:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt266=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt266=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt266=2;
                }
                break;
            case MIN:
                {
                alt266=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }

            switch (alt266) {
                case 1 :
                    // EsperEPL2Grammar.g:1629:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES728=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES728);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1629:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE729=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE729);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1629:76: MIN
                    {
                    MIN730=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN730);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1630:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1630:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1630:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1630:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1631:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1631:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1631:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1631:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1634:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS733=null;
        Token TIMEPERIOD_SECOND734=null;
        Token TIMEPERIOD_SEC735=null;
        EsperEPL2GrammarParser.number_return number731 = null;

        EsperEPL2GrammarParser.substitution_return substitution732 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS733_tree=null;
        CommonTree TIMEPERIOD_SECOND734_tree=null;
        CommonTree TIMEPERIOD_SEC735_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1635:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1635:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1635:4: ( number | i= IDENT | substitution )
            int alt267=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt267=1;
                }
                break;
            case IDENT:
                {
                alt267=2;
                }
                break;
            case QUESTION:
                {
                alt267=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }

            switch (alt267) {
                case 1 :
                    // EsperEPL2Grammar.g:1635:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart11176);
                    number731=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number731.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1635:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1635:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11182);
                    substitution732=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution732.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1635:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt268=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt268=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt268=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt268=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;
            }

            switch (alt268) {
                case 1 :
                    // EsperEPL2Grammar.g:1635:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS733=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS733);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1635:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND734=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND734);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1635:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC735=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC735);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1636:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1636:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1636:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1636:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1637:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1637:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1637:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1637:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1640:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS738=null;
        Token TIMEPERIOD_MILLISECOND739=null;
        Token TIMEPERIOD_MILLISEC740=null;
        EsperEPL2GrammarParser.number_return number736 = null;

        EsperEPL2GrammarParser.substitution_return substitution737 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS738_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND739_tree=null;
        CommonTree TIMEPERIOD_MILLISEC740_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1641:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1641:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1641:4: ( number | i= IDENT | substitution )
            int alt269=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt269=1;
                }
                break;
            case IDENT:
                {
                alt269=2;
                }
                break;
            case QUESTION:
                {
                alt269=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;
            }

            switch (alt269) {
                case 1 :
                    // EsperEPL2Grammar.g:1641:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11244);
                    number736=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number736.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1641:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1641:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11250);
                    substitution737=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution737.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1641:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt270=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt270=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt270=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt270=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;
            }

            switch (alt270) {
                case 1 :
                    // EsperEPL2Grammar.g:1641:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS738=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS738);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1641:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND739=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND739);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1641:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC740=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC740);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1642:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1642:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1642:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1642:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1643:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1643:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1643:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1643:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1646:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1647:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt271=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt271=1;
                }
                break;
            case NUM_LONG:
                {
                alt271=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt271=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt271=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }

            switch (alt271) {
                case 1 :
                    // EsperEPL2Grammar.g:1647:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1647:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1648:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1648:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1649:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1649:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1650:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1650:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1653:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1654:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1654:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1654:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1657:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant741 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant742 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1658:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt272=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt272=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt272=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt272=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt272=4;
                }
                break;
            case VALUE_NULL:
                {
                alt272=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // EsperEPL2Grammar.g:1658:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11408);
                    numberconstant741=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant741.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1659:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11415);
                    stringconstant742=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant742.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1660:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1660:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1660:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1661:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1661:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1661:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1662:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1662:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1662:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1665:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number743 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1666:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1666:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1666:5: (m= MINUS | p= PLUS )?
            int alt273=3;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==MINUS) ) {
                alt273=1;
            }
            else if ( (LA273_0==PLUS) ) {
                alt273=2;
            }
            switch (alt273) {
                case 1 :
                    // EsperEPL2Grammar.g:1666:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1666:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11500);
            number743=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number743.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1667:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number743!=null?((CommonTree)number743.tree):null).getType(), "-" + (number743!=null?input.toString(number743.start,number743.stop):null)));

            }
            else // 1668:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1671:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1672:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==STRING_LITERAL) ) {
                alt274=1;
            }
            else if ( (LA274_0==QUOTED_STRING_LITERAL) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;
            }
            switch (alt274) {
                case 1 :
                    // EsperEPL2Grammar.g:1672:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1672:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1672:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1673:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1673:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1673:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:816:4: ( streamSelector )
        // EsperEPL2Grammar.g:816:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3899);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:988:9: ( timePeriod )
        // EsperEPL2Grammar.g:988:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5231);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1157:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1157:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7051);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1242:4: ( eventProperty )
        // EsperEPL2Grammar.g:1242:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7832);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1403:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1403:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9243);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1453:7: ( lastOperand )
        // EsperEPL2Grammar.g:1453:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9666);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1454:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1454:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9677);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1455:4: ( timePeriod )
        // EsperEPL2Grammar.g:1455:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9688);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1456:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1456:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9699);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1457:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1457:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9710);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1458:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1458:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9722);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1459:4: ( lastOperator )
        // EsperEPL2Grammar.g:1459:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9733);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1460:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1460:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9744);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1461:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1461:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9757);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA159 dfa159 = new DFA159(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA232 dfa232 = new DFA232(this);
    static final String DFA159_eotS =
        "\u090a\uffff";
    static final String DFA159_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\7\uffff\2"+
        "\16\2\uffff\2\16\u08de\uffff";
    static final String DFA159_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\7\uffff\2\6\2\uffff\2\6\14\uffff\1\u0102\155\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\u010b\71"+
        "\uffff\1\5\71\uffff\1\5\71\uffff\1\5\2\6\75\uffff\2\6\74\uffff\2"+
        "\6\74\uffff\2\6\103\uffff\2\6\63\uffff\2\6\105\uffff\2\6\74\uffff"+
        "\2\6\63\uffff\2\6\74\uffff\2\6\75\uffff\2\6\72\uffff\2\6\145\uffff"+
        "\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff"+
        "\1\0\137\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\157\uffff";
    static final String DFA159_maxS =
        "\2\u0120\13\uffff\1\u0120\3\uffff\1\u011d\2\uffff\2\u011d\2\uffff"+
        "\4\u011d\1\uffff\2\u011d\7\uffff\2\u011d\2\uffff\2\u011d\14\uffff"+
        "\1\u0102\155\uffff\1\u0120\71\uffff\1\u0120\71\uffff\1\u0120\71"+
        "\uffff\1\u0120\71\uffff\1\u0120\71\uffff\1\u0120\71\uffff\1\u0120"+
        "\71\uffff\1\u0120\71\uffff\1\u0120\71\uffff\1\u0120\71\uffff\1\u011b"+
        "\71\uffff\1\u0120\71\uffff\1\u0120\71\uffff\1\u011e\2\u0118\75\uffff"+
        "\2\u0118\74\uffff\2\u0118\74\uffff\2\u0118\103\uffff\2\u0118\63"+
        "\uffff\2\u0118\105\uffff\2\u0118\74\uffff\2\u0118\63\uffff\2\u0118"+
        "\74\uffff\2\u0118\75\uffff\2\u0118\72\uffff\2\u0118\145\uffff\1"+
        "\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff\1"+
        "\0\137\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff\1"+
        "\0\30\uffff\1\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\157\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\52\uffff\1\6\1\7\4\uffff"+
        "\1\1\51\uffff\1\10\1\4\u0330\uffff\75\6\2\uffff\74\6\2\uffff\74"+
        "\6\2\uffff\103\6\2\uffff\63\6\2\uffff\105\6\2\uffff\74\6\2\uffff"+
        "\63\6\2\uffff\74\6\2\uffff\73\6\4\uffff\72\6\2\uffff\72\6\1\11\52"+
        "\6\1\uffff\53\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\5"+
        "\6\1\uffff\30\6\1\uffff\31\6\1\uffff\54\6\1\uffff\5\6\1\uffff\53"+
        "\6\1\uffff\5\6\1\uffff\30\6\1\uffff\30\6\1\uffff\53\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\36"+
        "\6\2\uffff\31\6\1\uffff\32\6\1\uffff\32\6";
    static final String DFA159_specialS =
        "\1\0\u00a5\uffff\1\1\71\uffff\1\2\71\uffff\1\3\71\uffff\1\4\71"+
        "\uffff\1\5\71\uffff\1\6\71\uffff\1\7\71\uffff\1\10\71\uffff\1\11"+
        "\71\uffff\1\12\71\uffff\1\13\71\uffff\1\14\71\uffff\1\15\71\uffff"+
        "\1\16\1\17\1\20\75\uffff\1\21\1\22\74\uffff\1\23\1\24\74\uffff\1"+
        "\25\1\26\103\uffff\1\27\1\30\63\uffff\1\31\1\32\105\uffff\1\33\1"+
        "\34\74\uffff\1\35\1\36\63\uffff\1\37\1\40\74\uffff\1\41\1\42\75"+
        "\uffff\1\43\1\44\72\uffff\1\45\1\46\145\uffff\1\47\53\uffff\1\50"+
        "\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\5\uffff\1\54\137\uffff"+
        "\1\55\5\uffff\1\56\53\uffff\1\57\5\uffff\1\60\30\uffff\1\61\30\uffff"+
        "\1\62\53\uffff\1\63\30\uffff\1\64\30\uffff\1\65\30\uffff\1\66\31"+
        "\uffff\1\67\31\uffff\1\70\157\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\10\uffff\6\16\1\46\1\47\1\70\2\16\1\52\1\53\1\71"+
            "\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff\3\16\u0086\uffff"+
            "\1\2\16\uffff\1\16\2\uffff\1\15\3\uffff\1\2\1\14\3\uffff\2\2"+
            "\11\uffff\1\1\2\uffff\1\72\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\77\4\uffff\1\77\3\uffff\1\77\3\uffff\11\77\10\uffff\1\77"+
            "\1\uffff\4\77\12\uffff\3\77\10\uffff\10\77\1\uffff\4\77\2\uffff"+
            "\1\77\1\uffff\4\77\24\uffff\3\77\u0086\uffff\1\2\16\uffff\1"+
            "\77\33\uffff\1\2\2\uffff\1\77\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\152\4\uffff\1\152\2\uffff\2\152\3\uffff\11\152\1\151\1"+
            "\152\6\uffff\1\152\1\uffff\4\152\12\uffff\3\152\10\uffff\16"+
            "\152\1\uffff\1\152\1\uffff\4\152\14\uffff\3\152\5\uffff\3\152"+
            "\u0086\uffff\1\152\16\uffff\1\152\2\uffff\1\152\3\uffff\2\152"+
            "\3\uffff\2\152\11\uffff\1\152\2\uffff\1\152\1\uffff\1\152\2"+
            "\uffff\3\152",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u00a6\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u00e0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u011a\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u0154\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u018e\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u01c8\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u0202\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u023c\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u0276\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u02b0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u02ea\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u0324\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0093"+
            "\uffff\1\16\1\uffff\2\16\1\u035e\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0398",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ca\4\uffff\1\u03ad\2\uffff\1\u03d6\1\u03ae\3\uffff\1"+
            "\u03af\1\u03b0\1\u03b1\1\u03b2\1\u03b3\1\u03b4\1\u03b5\1\u03b6"+
            "\1\u03ac\1\uffff\1\u039d\6\uffff\1\u03cd\1\uffff\1\u03cf\1\u03cb"+
            "\1\u03cc\1\u03ce\5\uffff\1\u039c\1\u039b\3\uffff\1\u03b7\1\u03b8"+
            "\1\u03b9\10\uffff\1\u03ba\1\u03bb\1\u03bc\1\u03be\1\u03bf\1"+
            "\u03c0\1\u03c1\1\u03c2\1\u03d3\1\u03c3\1\u03c4\1\u03c5\1\u03c6"+
            "\1\u03d4\1\uffff\1\u03c7\1\uffff\1\u03c8\1\u03bd\1\u03ab\1\u03c9"+
            "\14\uffff\1\u03a4\1\u03a5\1\u03a6\5\uffff\1\u03d0\1\u03d1\1"+
            "\u03d2\u0086\uffff\1\u03a3\16\uffff\1\u03a9\2\uffff\1\u03a8"+
            "\1\uffff\1\u03d7\1\uffff\1\u039f\1\u03a7\3\uffff\1\u0399\1\u039a"+
            "\11\uffff\1\u039e\2\uffff\1\u03d5\1\uffff\1\u03a0\2\uffff\1"+
            "\u03aa\1\u03a1\1\u03a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0409\4\uffff\1\u03ec\2\uffff\1\u0415\1\u03ed\3\uffff\1"+
            "\u03ee\1\u03ef\1\u03f0\1\u03f1\1\u03f2\1\u03f3\1\u03f4\1\u03f5"+
            "\1\u03eb\1\uffff\1\u03dc\6\uffff\1\u040c\1\uffff\1\u040e\1\u040a"+
            "\1\u040b\1\u040d\5\uffff\1\u03db\1\u03da\3\uffff\1\u03f6\1\u03f7"+
            "\1\u03f8\10\uffff\1\u03f9\1\u03fa\1\u03fb\1\u03fd\1\u03fe\1"+
            "\u03ff\1\u0400\1\u0401\1\u0412\1\u0402\1\u0403\1\u0404\1\u0405"+
            "\1\u0413\1\uffff\1\u0406\1\uffff\1\u0407\1\u03fc\1\u03ea\1\u0408"+
            "\14\uffff\1\u03e3\1\u03e4\1\u03e5\5\uffff\1\u040f\1\u0410\1"+
            "\u0411\u0086\uffff\1\u03e2\16\uffff\1\u03e8\2\uffff\1\u03e7"+
            "\3\uffff\1\u03de\1\u03e6\3\uffff\1\u03d8\1\u03d9\11\uffff\1"+
            "\u03dd\2\uffff\1\u0414\1\uffff\1\u03df\2\uffff\1\u03e9\1\u03e0"+
            "\1\u03e1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0447\4\uffff\1\u042a\2\uffff\1\u0453\1\u042b\3\uffff\1"+
            "\u042c\1\u042d\1\u042e\1\u042f\1\u0430\1\u0431\1\u0432\1\u0433"+
            "\1\u0429\1\uffff\1\u041a\6\uffff\1\u044a\1\uffff\1\u044c\1\u0448"+
            "\1\u0449\1\u044b\5\uffff\1\u0419\1\u0418\3\uffff\1\u0434\1\u0435"+
            "\1\u0436\10\uffff\1\u0437\1\u0438\1\u0439\1\u043b\1\u043c\1"+
            "\u043d\1\u043e\1\u043f\1\u0450\1\u0440\1\u0441\1\u0442\1\u0443"+
            "\1\u0451\1\uffff\1\u0444\1\uffff\1\u0445\1\u043a\1\u0428\1\u0446"+
            "\14\uffff\1\u0421\1\u0422\1\u0423\5\uffff\1\u044d\1\u044e\1"+
            "\u044f\u0086\uffff\1\u0420\16\uffff\1\u0426\2\uffff\1\u0425"+
            "\3\uffff\1\u041c\1\u0424\3\uffff\1\u0416\1\u0417\11\uffff\1"+
            "\u041b\2\uffff\1\u0452\1\uffff\1\u041d\2\uffff\1\u0427\1\u041e"+
            "\1\u041f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0483\4\uffff\1\u0466\2\uffff\1\u048f\1\u0467\3\uffff\1"+
            "\u0468\1\u0469\1\u046a\1\u046b\1\u046c\1\u046d\1\u046e\1\u046f"+
            "\1\u0465\1\uffff\1\u0456\6\uffff\1\u0486\1\uffff\1\u0488\1\u0484"+
            "\1\u0485\1\u0487\12\uffff\1\u0470\1\u0471\1\u0472\10\uffff\1"+
            "\u0473\1\u0474\1\u0475\1\u0477\1\u0478\1\u0479\1\u047a\1\u047b"+
            "\1\u048c\1\u047c\1\u047d\1\u047e\1\u047f\1\u048d\1\uffff\1\u0480"+
            "\1\uffff\1\u0481\1\u0476\1\u0464\1\u0482\14\uffff\1\u045d\1"+
            "\u045e\1\u045f\5\uffff\1\u0489\1\u048a\1\u048b\u0086\uffff\1"+
            "\u045c\16\uffff\1\u0462\2\uffff\1\u0461\3\uffff\1\u0458\1\u0460"+
            "\3\uffff\1\u0454\1\u0455\11\uffff\1\u0457\2\uffff\1\u048e\1"+
            "\uffff\1\u0459\2\uffff\1\u0463\1\u045a\1\u045b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04c1\4\uffff\1\u04a4\2\uffff\1\u04cd\1\u04a5\3\uffff\1"+
            "\u04a6\1\u04a7\1\u04a8\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04ad"+
            "\1\u04a3\1\uffff\1\u0492\6\uffff\1\u04c4\1\uffff\1\u04c6\1\u04c2"+
            "\1\u04c3\1\u04c5\5\uffff\1\u0491\1\u0490\3\uffff\1\u04ae\1\u04af"+
            "\1\u04b0\10\uffff\1\u04b1\1\u04b2\1\u04b3\1\u04b5\1\u04b6\1"+
            "\u04b7\1\u04b8\1\u04b9\1\u04ca\1\u04ba\1\u04bb\1\u04bc\1\u04bd"+
            "\1\u04cb\1\uffff\1\u04be\1\uffff\1\u04bf\1\u04b4\1\u04a2\1\u04c0"+
            "\14\uffff\1\u049b\1\u049c\1\u049d\5\uffff\1\u04c7\1\u04c8\1"+
            "\u04c9\u0086\uffff\1\u0498\16\uffff\1\u04a0\2\uffff\1\u049f"+
            "\3\uffff\1\u0494\1\u049e\3\uffff\1\u0499\1\u049a\11\uffff\1"+
            "\u0493\2\uffff\1\u04cc\1\uffff\1\u0495\2\uffff\1\u04a1\1\u0496"+
            "\1\u0497",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04ff\4\uffff\1\u04e2\2\uffff\1\u050b\1\u04e3\3\uffff\1"+
            "\u04e4\1\u04e5\1\u04e6\1\u04e7\1\u04e8\1\u04e9\1\u04ea\1\u04eb"+
            "\1\u04e1\1\uffff\1\u04d2\6\uffff\1\u0502\1\uffff\1\u0504\1\u0500"+
            "\1\u0501\1\u0503\5\uffff\1\u04d1\1\u04d0\3\uffff\1\u04ec\1\u04ed"+
            "\1\u04ee\10\uffff\1\u04ef\1\u04f0\1\u04f1\1\u04f3\1\u04f4\1"+
            "\u04f5\1\u04f6\1\u04f7\1\u0508\1\u04f8\1\u04f9\1\u04fa\1\u04fb"+
            "\1\u0509\1\uffff\1\u04fc\1\uffff\1\u04fd\1\u04f2\1\u04e0\1\u04fe"+
            "\14\uffff\1\u04d9\1\u04da\1\u04db\5\uffff\1\u0505\1\u0506\1"+
            "\u0507\u0086\uffff\1\u04d8\16\uffff\1\u04de\2\uffff\1\u04dd"+
            "\3\uffff\1\u04d4\1\u04dc\3\uffff\1\u04ce\1\u04cf\11\uffff\1"+
            "\u04d3\2\uffff\1\u050a\1\uffff\1\u04d5\2\uffff\1\u04df\1\u04d6"+
            "\1\u04d7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053d\4\uffff\1\u0520\2\uffff\1\u0549\1\u0521\3\uffff\1"+
            "\u0522\1\u0523\1\u0524\1\u0525\1\u0526\1\u0527\1\u0528\1\u0529"+
            "\1\u051f\1\uffff\1\u050e\6\uffff\1\u0540\1\uffff\1\u0542\1\u053e"+
            "\1\u053f\1\u0541\5\uffff\1\u050d\1\u050c\3\uffff\1\u052a\1\u052b"+
            "\1\u052c\10\uffff\1\u052d\1\u052e\1\u052f\1\u0531\1\u0532\1"+
            "\u0533\1\u0534\1\u0535\1\u0546\1\u0536\1\u0537\1\u0538\1\u0539"+
            "\1\u0547\1\uffff\1\u053a\1\uffff\1\u053b\1\u0530\1\u051e\1\u053c"+
            "\14\uffff\1\u0517\1\u0518\1\u0519\5\uffff\1\u0543\1\u0544\1"+
            "\u0545\u0086\uffff\1\u0514\16\uffff\1\u051c\2\uffff\1\u051b"+
            "\3\uffff\1\u0510\1\u051a\3\uffff\1\u0515\1\u0516\11\uffff\1"+
            "\u050f\2\uffff\1\u0548\1\uffff\1\u0511\2\uffff\1\u051d\1\u0512"+
            "\1\u0513",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u057b\4\uffff\1\u055e\2\uffff\1\u0587\1\u055f\3\uffff\1"+
            "\u0560\1\u0561\1\u0562\1\u0563\1\u0564\1\u0565\1\u0566\1\u0567"+
            "\1\u055d\1\uffff\1\u054c\6\uffff\1\u057e\1\uffff\1\u0580\1\u057c"+
            "\1\u057d\1\u057f\5\uffff\1\u054b\1\u054a\3\uffff\1\u0568\1\u0569"+
            "\1\u056a\10\uffff\1\u056b\1\u056c\1\u056d\1\u056f\1\u0570\1"+
            "\u0571\1\u0572\1\u0573\1\u0584\1\u0574\1\u0575\1\u0576\1\u0577"+
            "\1\u0585\1\uffff\1\u0578\1\uffff\1\u0579\1\u056e\1\u055c\1\u057a"+
            "\14\uffff\1\u0555\1\u0556\1\u0557\5\uffff\1\u0581\1\u0582\1"+
            "\u0583\u0086\uffff\1\u0552\16\uffff\1\u055a\2\uffff\1\u0559"+
            "\3\uffff\1\u054e\1\u0558\3\uffff\1\u0553\1\u0554\11\uffff\1"+
            "\u054d\2\uffff\1\u0586\1\uffff\1\u054f\2\uffff\1\u055b\1\u0550"+
            "\1\u0551",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b9\4\uffff\1\u059c\2\uffff\1\u05c5\1\u059d\3\uffff\1"+
            "\u059e\1\u059f\1\u05a0\1\u05a1\1\u05a2\1\u05a3\1\u05a4\1\u05a5"+
            "\1\u059b\1\uffff\1\u058c\6\uffff\1\u05bc\1\uffff\1\u05be\1\u05ba"+
            "\1\u05bb\1\u05bd\5\uffff\1\u058b\1\u058a\3\uffff\1\u05a6\1\u05a7"+
            "\1\u05a8\10\uffff\1\u05a9\1\u05aa\1\u05ab\1\u05ad\1\u05ae\1"+
            "\u05af\1\u05b0\1\u05b1\1\u05c2\1\u05b2\1\u05b3\1\u05b4\1\u05b5"+
            "\1\u05c3\1\uffff\1\u05b6\1\uffff\1\u05b7\1\u05ac\1\u059a\1\u05b8"+
            "\14\uffff\1\u0593\1\u0594\1\u0595\5\uffff\1\u05bf\1\u05c0\1"+
            "\u05c1\u0086\uffff\1\u0592\16\uffff\1\u0598\2\uffff\1\u0597"+
            "\3\uffff\1\u058e\1\u0596\3\uffff\1\u0588\1\u0589\11\uffff\1"+
            "\u058d\2\uffff\1\u05c4\1\uffff\1\u058f\2\uffff\1\u0599\1\u0590"+
            "\1\u0591",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f5\4\uffff\1\u05d8\2\uffff\1\u0601\1\u05d9\3\uffff\1"+
            "\u05da\1\u05db\1\u05dc\1\u05dd\1\u05de\1\u05df\1\u05e0\1\u05e1"+
            "\1\u05d7\1\uffff\1\u05c8\6\uffff\1\u05f8\1\uffff\1\u05fa\1\u05f6"+
            "\1\u05f7\1\u05f9\12\uffff\1\u05e2\1\u05e3\1\u05e4\10\uffff\1"+
            "\u05e5\1\u05e6\1\u05e7\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed"+
            "\1\u05fe\1\u05ee\1\u05ef\1\u05f0\1\u05f1\1\u05ff\1\uffff\1\u05f2"+
            "\1\uffff\1\u05f3\1\u05e8\1\u05d6\1\u05f4\14\uffff\1\u05cf\1"+
            "\u05d0\1\u05d1\5\uffff\1\u05fb\1\u05fc\1\u05fd\u0086\uffff\1"+
            "\u05ce\16\uffff\1\u05d4\2\uffff\1\u05d3\3\uffff\1\u05ca\1\u05d2"+
            "\3\uffff\1\u05c6\1\u05c7\11\uffff\1\u05c9\2\uffff\1\u0600\1"+
            "\uffff\1\u05cb\2\uffff\1\u05d5\1\u05cc\1\u05cd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0602",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0634\4\uffff\1\u0617\2\uffff\1\u0640\1\u0618\3\uffff\1"+
            "\u0619\1\u061a\1\u061b\1\u061c\1\u061d\1\u061e\1\u061f\1\u0620"+
            "\1\u0616\1\uffff\1\u0607\6\uffff\1\u0637\1\uffff\1\u0639\1\u0635"+
            "\1\u0636\1\u0638\12\uffff\1\u0621\1\u0622\1\u0623\10\uffff\1"+
            "\u0624\1\u0625\1\u0626\1\u0628\1\u0629\1\u062a\1\u062b\1\u062c"+
            "\1\u063d\1\u062d\1\u062e\1\u062f\1\u0630\1\u063e\1\uffff\1\u0631"+
            "\1\uffff\1\u0632\1\u0627\1\u0615\1\u0633\14\uffff\1\u060e\1"+
            "\u060f\1\u0610\5\uffff\1\u063a\1\u063b\1\u063c\u0086\uffff\1"+
            "\u060d\16\uffff\1\u0613\2\uffff\1\u0612\3\uffff\1\u0609\1\u0611"+
            "\3\uffff\1\u0605\1\u0606\11\uffff\1\u0608\2\uffff\1\u063f\1"+
            "\uffff\1\u060a\2\uffff\1\u0614\1\u060b\1\u060c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0670\4\uffff\1\u0653\2\uffff\1\u067c\1\u0654\3\uffff\1"+
            "\u0655\1\u0656\1\u0657\1\u0658\1\u0659\1\u065a\1\u065b\1\u065c"+
            "\1\u0652\1\uffff\1\u0643\6\uffff\1\u0673\1\uffff\1\u0675\1\u0671"+
            "\1\u0672\1\u0674\12\uffff\1\u065d\1\u065e\1\u065f\10\uffff\1"+
            "\u0660\1\u0661\1\u0662\1\u0664\1\u0665\1\u0666\1\u0667\1\u0668"+
            "\1\u0679\1\u0669\1\u066a\1\u066b\1\u066c\1\u067a\1\uffff\1\u066d"+
            "\1\uffff\1\u066e\1\u0663\1\u0651\1\u066f\14\uffff\1\u064a\1"+
            "\u064b\1\u064c\5\uffff\1\u0676\1\u0677\1\u0678\u0086\uffff\1"+
            "\u0649\16\uffff\1\u064f\2\uffff\1\u064e\3\uffff\1\u0645\1\u064d"+
            "\3\uffff\1\u0641\1\u0642\11\uffff\1\u0644\2\uffff\1\u067b\1"+
            "\uffff\1\u0646\2\uffff\1\u0650\1\u0647\1\u0648",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u069f\4\uffff\1\u0682\3\uffff\1\u0683\3\uffff\1\u0684\1"+
            "\u0685\1\u0686\1\u0687\1\u0688\1\u0689\1\u068a\1\u068b\1\u0681"+
            "\1\u067d\7\uffff\1\u06a2\1\uffff\1\u06a4\1\u06a0\1\u06a1\1\u06a3"+
            "\12\uffff\1\u068c\1\u068d\1\u068e\10\uffff\1\u068f\1\u0690\1"+
            "\u0691\1\u0693\1\u0694\1\u0695\1\u0696\1\u0697\1\uffff\1\u0698"+
            "\1\u0699\1\u069a\1\u069b\2\uffff\1\u069c\1\uffff\1\u069d\1\u0692"+
            "\1\u0680\1\u069e\24\uffff\1\u06a5\1\u06a6\1\u06a7\u0095\uffff"+
            "\1\u067e\36\uffff\1\u067f",
            "\1\u06bd\1\u06be\1\u06bf\1\u06c0\1\uffff\1\u06bb\1\u06ba\1"+
            "\u06bc\34\uffff\1\u06b4\u00d5\uffff\1\u06b3\2\uffff\1\u06a8"+
            "\1\u06a9\1\u06b8\1\u06ac\6\uffff\1\u06b7\1\u06b9\1\u06b5\1\u06b6"+
            "\1\u06af\1\u06b0\1\u06b1\1\u06b2\1\u06ae\1\u06ad\1\u06aa\1\u06ab",
            "\1\u06d6\1\u06d7\1\u06d8\1\u06d9\1\uffff\1\u06d3\1\u06d2\1"+
            "\u06d5\34\uffff\1\u06cc\u00d5\uffff\1\u06cb\2\uffff\1\u06d4"+
            "\1\u06c1\1\u06d0\1\u06c4\6\uffff\1\u06cf\1\u06d1\1\u06cd\1\u06ce"+
            "\1\u06c7\1\u06c8\1\u06c9\1\u06ca\1\u06c6\1\u06c5\1\u06c2\1\u06c3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ef\1\u06f0\1\u06f1\1\u06f2\1\uffff\1\u06ec\1\u06eb\1"+
            "\u06ee\34\uffff\1\u06e5\u00d5\uffff\1\u06e4\2\uffff\1\u06ed"+
            "\1\u06da\1\u06e9\1\u06dd\6\uffff\1\u06e8\1\u06ea\1\u06e6\1\u06e7"+
            "\1\u06e0\1\u06e1\1\u06e2\1\u06e3\1\u06df\1\u06de\1\u06db\1\u06dc",
            "\1\u0708\1\u0709\1\u070a\1\u070b\1\uffff\1\u0705\1\u0704\1"+
            "\u0707\34\uffff\1\u06fe\u00d5\uffff\1\u06fd\2\uffff\1\u0706"+
            "\1\u06f3\1\u0702\1\u06f6\6\uffff\1\u0701\1\u0703\1\u06ff\1\u0700"+
            "\1\u06f9\1\u06fa\1\u06fb\1\u06fc\1\u06f8\1\u06f7\1\u06f4\1\u06f5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0721\1\u0722\1\u0723\1\u0724\1\uffff\1\u071e\1\u071d\1"+
            "\u0720\34\uffff\1\u0717\u00d5\uffff\1\u0716\2\uffff\1\u071f"+
            "\1\u070c\1\u071b\1\u070f\6\uffff\1\u071a\1\u071c\1\u0718\1\u0719"+
            "\1\u0712\1\u0713\1\u0714\1\u0715\1\u0711\1\u0710\1\u070d\1\u070e",
            "\1\u073a\1\u073b\1\u073c\1\u073d\1\uffff\1\u0738\1\u0737\1"+
            "\u0739\34\uffff\1\u0731\u00d5\uffff\1\u0730\2\uffff\1\u0725"+
            "\1\u0726\1\u0735\1\u0729\6\uffff\1\u0734\1\u0736\1\u0732\1\u0733"+
            "\1\u072c\1\u072d\1\u072e\1\u072f\1\u072b\1\u072a\1\u0727\1\u0728",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0754\1\u0755\1\u0756\1\u0757\1\uffff\1\u0751\1\u0750\1"+
            "\u0753\34\uffff\1\u074a\u00d3\uffff\1\u0752\1\uffff\1\u0749"+
            "\2\uffff\1\16\1\u073f\1\u074e\1\u0742\6\uffff\1\u074d\1\u074f"+
            "\1\u074b\1\u074c\1\u0745\1\u0746\1\u0747\1\u0748\1\u0744\1\u0743"+
            "\1\u0740\1\u0741",
            "\1\u076e\1\u076f\1\u0770\1\u0771\1\uffff\1\u076b\1\u076a\1"+
            "\u076d\34\uffff\1\u0764\u00d3\uffff\1\u076c\1\uffff\1\u0763"+
            "\2\uffff\1\16\1\u0759\1\u0768\1\u075c\6\uffff\1\u0767\1\u0769"+
            "\1\u0765\1\u0766\1\u075f\1\u0760\1\u0761\1\u0762\1\u075e\1\u075d"+
            "\1\u075a\1\u075b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0787\1\u0788\1\u0789\1\u078a\1\uffff\1\u0784\1\u0783\1"+
            "\u0786\34\uffff\1\u077d\u00d5\uffff\1\u077c\2\uffff\1\u0785"+
            "\1\u0772\1\u0781\1\u0775\6\uffff\1\u0780\1\u0782\1\u077e\1\u077f"+
            "\1\u0778\1\u0779\1\u077a\1\u077b\1\u0777\1\u0776\1\u0773\1\u0774",
            "\1\u07a0\1\u07a1\1\u07a2\1\u07a3\1\uffff\1\u079e\1\u079d\1"+
            "\u079f\34\uffff\1\u0797\u00d5\uffff\1\u0796\2\uffff\1\u078b"+
            "\1\u078c\1\u079b\1\u078f\6\uffff\1\u079a\1\u079c\1\u0798\1\u0799"+
            "\1\u0792\1\u0793\1\u0794\1\u0795\1\u0791\1\u0790\1\u078d\1\u078e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07b9\1\u07ba\1\u07bb\1\u07bc\1\uffff\1\u07b6\1\u07b5\1"+
            "\u07b8\34\uffff\1\u07af\u00d5\uffff\1\u07ae\2\uffff\1\u07b7"+
            "\1\u07a4\1\u07b3\1\u07a7\6\uffff\1\u07b2\1\u07b4\1\u07b0\1\u07b1"+
            "\1\u07aa\1\u07ab\1\u07ac\1\u07ad\1\u07a9\1\u07a8\1\u07a5\1\u07a6",
            "\1\u07d2\1\u07d3\1\u07d4\1\u07d5\1\uffff\1\u07d0\1\u07cf\1"+
            "\u07d1\34\uffff\1\u07c9\u00d5\uffff\1\u07c8\2\uffff\1\u07bd"+
            "\1\u07be\1\u07cd\1\u07c1\6\uffff\1\u07cc\1\u07ce\1\u07ca\1\u07cb"+
            "\1\u07c4\1\u07c5\1\u07c6\1\u07c7\1\u07c3\1\u07c2\1\u07bf\1\u07c0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07eb\1\u07ec\1\u07ed\1\u07ee\1\uffff\1\u07e9\1\u07e8\1"+
            "\u07ea\34\uffff\1\u07e2\u00d5\uffff\1\u07e1\2\uffff\1\u07d6"+
            "\1\u07d7\1\u07e6\1\u07da\6\uffff\1\u07e5\1\u07e7\1\u07e3\1\u07e4"+
            "\1\u07dd\1\u07de\1\u07df\1\u07e0\1\u07dc\1\u07db\1\u07d8\1\u07d9",
            "\1\u0804\1\u0805\1\u0806\1\u0807\1\uffff\1\u0802\1\u0801\1"+
            "\u0803\34\uffff\1\u07fb\u00d5\uffff\1\u07fa\2\uffff\1\u07ef"+
            "\1\u07f0\1\u07ff\1\u07f3\6\uffff\1\u07fe\1\u0800\1\u07fc\1\u07fd"+
            "\1\u07f6\1\u07f7\1\u07f8\1\u07f9\1\u07f5\1\u07f4\1\u07f1\1\u07f2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081d\1\u081e\1\u081f\1\u0820\1\uffff\1\u081a\1\u0819\1"+
            "\u081c\34\uffff\1\u0813\u00d5\uffff\1\u0812\2\uffff\1\u081b"+
            "\1\u0808\1\u0817\1\u080b\6\uffff\1\u0816\1\u0818\1\u0814\1\u0815"+
            "\1\u080e\1\u080f\1\u0810\1\u0811\1\u080d\1\u080c\1\u0809\1\u080a",
            "\1\u0836\1\u0837\1\u0838\1\u0839\1\uffff\1\u0833\1\u0832\1"+
            "\u0835\34\uffff\1\u082c\u00d5\uffff\1\u082b\2\uffff\1\u0834"+
            "\1\u0821\1\u0830\1\u0824\6\uffff\1\u082f\1\u0831\1\u082d\1\u082e"+
            "\1\u0827\1\u0828\1\u0829\1\u082a\1\u0826\1\u0825\1\u0822\1\u0823",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u084f\1\u0850\1\u0851\1\u0852\1\uffff\1\u084c\1\u084b\1"+
            "\u084e\34\uffff\1\u0845\u00d5\uffff\1\u0844\2\uffff\1\u084d"+
            "\1\u083a\1\u0849\1\u083d\6\uffff\1\u0848\1\u084a\1\u0846\1\u0847"+
            "\1\u0840\1\u0841\1\u0842\1\u0843\1\u083f\1\u083e\1\u083b\1\u083c",
            "\1\u0868\1\u0869\1\u086a\1\u086b\1\uffff\1\u0865\1\u0864\1"+
            "\u0867\34\uffff\1\u085e\u00d5\uffff\1\u085d\2\uffff\1\u0866"+
            "\1\u0853\1\u0862\1\u0856\6\uffff\1\u0861\1\u0863\1\u085f\1\u0860"+
            "\1\u0859\1\u085a\1\u085b\1\u085c\1\u0858\1\u0857\1\u0854\1\u0855",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0882\1\u0883\1\u0884\1\u0885\1\uffff\1\u087e\1\u087d\1"+
            "\u0881\34\uffff\1\u0877\u00d3\uffff\1\u087f\1\uffff\1\u0876"+
            "\2\uffff\1\u0880\1\u086c\1\u087b\1\u086f\6\uffff\1\u087a\1\u087c"+
            "\1\u0878\1\u0879\1\u0872\1\u0873\1\u0874\1\u0875\1\u0871\1\u0870"+
            "\1\u086d\1\u086e",
            "\1\u089c\1\u089d\1\u089e\1\u089f\1\uffff\1\u0898\1\u0897\1"+
            "\u089b\34\uffff\1\u0891\u00d3\uffff\1\u0899\1\uffff\1\u0890"+
            "\2\uffff\1\u089a\1\u0886\1\u0895\1\u0889\6\uffff\1\u0894\1\u0896"+
            "\1\u0892\1\u0893\1\u088c\1\u088d\1\u088e\1\u088f\1\u088b\1\u088a"+
            "\1\u0887\1\u0888",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b5\1\u08b6\1\u08b7\1\u08b8\1\uffff\1\u08b2\1\u08b1\1"+
            "\u08b4\34\uffff\1\u08ab\u00d3\uffff\1\u08b3\1\uffff\1\u08aa"+
            "\2\uffff\1\16\1\u08a0\1\u08af\1\u08a3\6\uffff\1\u08ae\1\u08b0"+
            "\1\u08ac\1\u08ad\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\u08a5\1\u08a4"+
            "\1\u08a1\1\u08a2",
            "\1\u08d0\1\u08d1\1\u08d2\1\u08d3\1\uffff\1\u08cd\1\u08cc\1"+
            "\u08cf\34\uffff\1\u08c6\u00d3\uffff\1\u08ce\1\uffff\1\u08c5"+
            "\2\uffff\1\16\1\u08bb\1\u08ca\1\u08be\6\uffff\1\u08c9\1\u08cb"+
            "\1\u08c7\1\u08c8\1\u08c1\1\u08c2\1\u08c3\1\u08c4\1\u08c0\1\u08bf"+
            "\1\u08bc\1\u08bd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08eb\1\u08ec\1\u08ed\1\u08ee\1\uffff\1\u08e7\1\u08e6\1"+
            "\u08ea\3\uffff\1\u08e9\30\uffff\1\u08e0\u00d3\uffff\1\u08e8"+
            "\1\uffff\1\u08df\2\uffff\1\16\1\u08d5\1\u08e4\1\u08d8\6\uffff"+
            "\1\u08e3\1\u08e5\1\u08e1\1\u08e2\1\u08db\1\u08dc\1\u08dd\1\u08de"+
            "\1\u08da\1\u08d9\1\u08d6\1\u08d7",
            "\1\u0906\1\u0907\1\u0908\1\u0909\1\uffff\1\u0902\1\u0901\1"+
            "\u0905\3\uffff\1\u0904\30\uffff\1\u08fb\u00d3\uffff\1\u0903"+
            "\1\uffff\1\u08fa\2\uffff\1\16\1\u08f0\1\u08ff\1\u08f3\6\uffff"+
            "\1\u08fe\1\u0900\1\u08fc\1\u08fd\1\u08f6\1\u08f7\1\u08f8\1\u08f9"+
            "\1\u08f5\1\u08f4\1\u08f1\1\u08f2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1151:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_0 = input.LA(1);

                         
                        int index159_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_0==MINUS) ) {s = 1;}

                        else if ( ((LA159_0>=BOOLEAN_TRUE && LA159_0<=VALUE_NULL)||LA159_0==NUM_DOUBLE||LA159_0==PLUS||(LA159_0>=STRING_LITERAL && LA159_0<=QUOTED_STRING_LITERAL)||LA159_0==NUM_INT||(LA159_0>=NUM_LONG && LA159_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA159_0==QUESTION) ) {s = 12;}

                        else if ( (LA159_0==LPAREN) ) {s = 13;}

                        else if ( (LA159_0==WINDOW||LA159_0==ESCAPE||LA159_0==EVERY_EXPR||(LA159_0>=MAX && LA159_0<=MIN)||LA159_0==OUTER||(LA159_0>=JOIN && LA159_0<=FULL)||LA159_0==EVENTS||(LA159_0>=UNIDIRECTIONAL && LA159_0<=METADATASQL)||(LA159_0>=WEEKDAY && LA159_0<=LW)||LA159_0==SNAPSHOT||(LA159_0>=VARIABLE && LA159_0<=INDEX)||(LA159_0>=DEFINE && LA159_0<=MATCHES)||LA159_0==IDENT||LA159_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA159_0==COUNT) ) {s = 17;}

                        else if ( (LA159_0==SUM) ) {s = 20;}

                        else if ( (LA159_0==AVG) ) {s = 21;}

                        else if ( (LA159_0==COALESCE) ) {s = 24;}

                        else if ( (LA159_0==MEDIAN) ) {s = 25;}

                        else if ( (LA159_0==STDDEV) ) {s = 26;}

                        else if ( (LA159_0==AVEDEV) ) {s = 27;}

                        else if ( (LA159_0==FIRST) ) {s = 29;}

                        else if ( (LA159_0==LAST) ) {s = 30;}

                        else if ( (LA159_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA159_0==PRIOR) ) {s = 39;}

                        else if ( (LA159_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA159_0==CAST) ) {s = 43;}

                        else if ( (LA159_0==EXISTS) ) {s = 56;}

                        else if ( (LA159_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA159_0==LCURLY) ) {s = 58;}

                         
                        input.seek(index159_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_166 = input.LA(1);

                         
                        int index159_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_166==STRING_LITERAL) ) {s = 921;}

                        else if ( (LA159_166==QUOTED_STRING_LITERAL) ) {s = 922;}

                        else if ( (LA159_166==ALL) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA159_166==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA159_166==CASE) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA159_166==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA159_166==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA159_166==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA159_166==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA159_166==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA159_166==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA159_166==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA159_166==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA159_166==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA159_166==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA159_166==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA159_166==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA159_166==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA159_166==AT) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA159_166==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA159_166==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA159_166==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA159_166==SUM) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA159_166==AVG) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA159_166==MAX) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA159_166==MIN) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA159_166==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA159_166==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA159_166==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA159_166==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA159_166==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA159_166==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA159_166==LAST) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA159_166==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA159_166==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA159_166==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA159_166==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA159_166==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA159_166==SQL) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA159_166==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA159_166==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA159_166==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA159_166==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA159_166==LW) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA159_166==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA159_166==CAST) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA159_166==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA159_166==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA159_166==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA159_166==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA159_166==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA159_166==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA159_166==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA159_166==FULL) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA159_166==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA159_166==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA159_166==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA159_166==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA159_166==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA159_166==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA159_166==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA159_166==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA159_166==STAR) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                         
                        input.seek(index159_166);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_224 = input.LA(1);

                         
                        int index159_224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_224==STRING_LITERAL) ) {s = 984;}

                        else if ( (LA159_224==QUOTED_STRING_LITERAL) ) {s = 985;}

                        else if ( (LA159_224==ALL) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA159_224==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA159_224==CASE) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA159_224==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA159_224==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA159_224==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA159_224==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA159_224==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA159_224==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA159_224==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA159_224==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA159_224==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA159_224==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA159_224==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA159_224==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA159_224==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA159_224==AT) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA159_224==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA159_224==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA159_224==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA159_224==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA159_224==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA159_224==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA159_224==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA159_224==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA159_224==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA159_224==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA159_224==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA159_224==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA159_224==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA159_224==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA159_224==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA159_224==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA159_224==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA159_224==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA159_224==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA159_224==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA159_224==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA159_224==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA159_224==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA159_224==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA159_224==LW) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA159_224==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA159_224==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA159_224==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA159_224==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA159_224==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA159_224==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA159_224==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA159_224==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA159_224==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA159_224==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA159_224==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA159_224==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA159_224==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA159_224==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA159_224==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA159_224==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA159_224==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA159_224==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                         
                        input.seek(index159_224);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_282 = input.LA(1);

                         
                        int index159_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_282==STRING_LITERAL) ) {s = 1046;}

                        else if ( (LA159_282==QUOTED_STRING_LITERAL) ) {s = 1047;}

                        else if ( (LA159_282==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA159_282==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA159_282==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA159_282==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA159_282==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA159_282==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA159_282==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA159_282==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA159_282==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA159_282==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA159_282==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA159_282==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA159_282==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA159_282==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA159_282==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA159_282==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA159_282==AT) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA159_282==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA159_282==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA159_282==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA159_282==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA159_282==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA159_282==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA159_282==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA159_282==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA159_282==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA159_282==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA159_282==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA159_282==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA159_282==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA159_282==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA159_282==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA159_282==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA159_282==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA159_282==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA159_282==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA159_282==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA159_282==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA159_282==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA159_282==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA159_282==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA159_282==LW) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA159_282==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA159_282==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA159_282==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA159_282==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA159_282==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA159_282==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA159_282==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA159_282==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA159_282==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA159_282==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA159_282==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA159_282==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA159_282==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA159_282==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA159_282==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA159_282==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA159_282==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA159_282==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                         
                        input.seek(index159_282);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_340 = input.LA(1);

                         
                        int index159_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_340==STRING_LITERAL) ) {s = 1108;}

                        else if ( (LA159_340==QUOTED_STRING_LITERAL) ) {s = 1109;}

                        else if ( (LA159_340==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA159_340==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA159_340==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA159_340==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA159_340==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA159_340==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA159_340==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA159_340==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA159_340==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA159_340==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA159_340==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA159_340==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA159_340==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA159_340==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA159_340==AT) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA159_340==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA159_340==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA159_340==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA159_340==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA159_340==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA159_340==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA159_340==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA159_340==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA159_340==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA159_340==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA159_340==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA159_340==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA159_340==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA159_340==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA159_340==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA159_340==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA159_340==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA159_340==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA159_340==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA159_340==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA159_340==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA159_340==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA159_340==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA159_340==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA159_340==LW) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA159_340==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA159_340==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA159_340==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA159_340==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA159_340==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA159_340==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA159_340==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA159_340==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA159_340==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA159_340==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA159_340==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA159_340==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA159_340==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA159_340==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA159_340==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA159_340==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA159_340==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA159_340==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                         
                        input.seek(index159_340);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_398 = input.LA(1);

                         
                        int index159_398 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_398==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA159_398==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA159_398==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA159_398==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA159_398==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA159_398==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA159_398==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA159_398==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA159_398==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA159_398==STRING_LITERAL) ) {s = 1177;}

                        else if ( (LA159_398==QUOTED_STRING_LITERAL) ) {s = 1178;}

                        else if ( (LA159_398==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA159_398==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA159_398==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA159_398==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA159_398==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA159_398==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA159_398==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA159_398==AT) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA159_398==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA159_398==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA159_398==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA159_398==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA159_398==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA159_398==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA159_398==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA159_398==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA159_398==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA159_398==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA159_398==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA159_398==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA159_398==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA159_398==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA159_398==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA159_398==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA159_398==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA159_398==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA159_398==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA159_398==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA159_398==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA159_398==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA159_398==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA159_398==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA159_398==LW) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA159_398==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA159_398==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA159_398==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA159_398==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA159_398==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA159_398==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA159_398==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA159_398==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA159_398==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA159_398==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA159_398==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA159_398==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA159_398==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA159_398==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA159_398==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA159_398==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA159_398==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA159_398==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                         
                        input.seek(index159_398);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_456 = input.LA(1);

                         
                        int index159_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_456==STRING_LITERAL) ) {s = 1230;}

                        else if ( (LA159_456==QUOTED_STRING_LITERAL) ) {s = 1231;}

                        else if ( (LA159_456==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA159_456==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA159_456==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA159_456==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA159_456==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA159_456==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA159_456==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA159_456==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA159_456==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA159_456==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA159_456==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA159_456==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA159_456==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA159_456==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA159_456==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA159_456==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA159_456==AT) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA159_456==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA159_456==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA159_456==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA159_456==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA159_456==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA159_456==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA159_456==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA159_456==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA159_456==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA159_456==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA159_456==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA159_456==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA159_456==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA159_456==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA159_456==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA159_456==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA159_456==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA159_456==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA159_456==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA159_456==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA159_456==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA159_456==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA159_456==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA159_456==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA159_456==LW) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA159_456==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA159_456==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA159_456==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA159_456==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA159_456==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA159_456==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA159_456==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA159_456==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA159_456==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA159_456==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA159_456==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA159_456==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA159_456==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA159_456==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA159_456==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA159_456==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA159_456==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA159_456==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                         
                        input.seek(index159_456);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA159_514 = input.LA(1);

                         
                        int index159_514 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_514==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA159_514==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA159_514==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA159_514==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA159_514==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA159_514==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA159_514==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA159_514==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA159_514==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA159_514==STRING_LITERAL) ) {s = 1301;}

                        else if ( (LA159_514==QUOTED_STRING_LITERAL) ) {s = 1302;}

                        else if ( (LA159_514==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA159_514==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA159_514==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA159_514==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA159_514==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA159_514==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA159_514==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA159_514==AT) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA159_514==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA159_514==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA159_514==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA159_514==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA159_514==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA159_514==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA159_514==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA159_514==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA159_514==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA159_514==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA159_514==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA159_514==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA159_514==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA159_514==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA159_514==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA159_514==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA159_514==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA159_514==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA159_514==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA159_514==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA159_514==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA159_514==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA159_514==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA159_514==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA159_514==LW) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA159_514==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA159_514==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA159_514==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA159_514==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA159_514==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA159_514==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA159_514==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA159_514==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA159_514==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA159_514==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA159_514==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA159_514==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA159_514==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA159_514==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA159_514==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA159_514==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA159_514==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA159_514==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                         
                        input.seek(index159_514);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA159_572 = input.LA(1);

                         
                        int index159_572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_572==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA159_572==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA159_572==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA159_572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA159_572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA159_572==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA159_572==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA159_572==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA159_572==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA159_572==STRING_LITERAL) ) {s = 1363;}

                        else if ( (LA159_572==QUOTED_STRING_LITERAL) ) {s = 1364;}

                        else if ( (LA159_572==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA159_572==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA159_572==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA159_572==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA159_572==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA159_572==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA159_572==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA159_572==AT) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA159_572==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA159_572==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA159_572==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA159_572==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA159_572==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA159_572==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA159_572==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA159_572==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA159_572==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA159_572==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA159_572==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA159_572==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA159_572==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA159_572==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA159_572==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA159_572==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA159_572==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA159_572==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA159_572==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA159_572==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA159_572==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA159_572==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA159_572==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA159_572==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA159_572==LW) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA159_572==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA159_572==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA159_572==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA159_572==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA159_572==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA159_572==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA159_572==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA159_572==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA159_572==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA159_572==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA159_572==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA159_572==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA159_572==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA159_572==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA159_572==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA159_572==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA159_572==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA159_572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                         
                        input.seek(index159_572);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA159_630 = input.LA(1);

                         
                        int index159_630 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_630==STRING_LITERAL) ) {s = 1416;}

                        else if ( (LA159_630==QUOTED_STRING_LITERAL) ) {s = 1417;}

                        else if ( (LA159_630==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA159_630==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA159_630==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA159_630==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA159_630==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA159_630==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA159_630==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA159_630==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA159_630==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA159_630==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA159_630==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA159_630==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA159_630==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA159_630==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA159_630==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA159_630==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA159_630==AT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA159_630==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA159_630==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA159_630==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA159_630==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA159_630==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA159_630==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA159_630==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA159_630==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA159_630==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA159_630==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA159_630==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA159_630==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA159_630==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA159_630==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA159_630==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA159_630==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA159_630==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA159_630==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA159_630==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA159_630==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA159_630==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA159_630==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA159_630==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA159_630==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA159_630==LW) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA159_630==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA159_630==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA159_630==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA159_630==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA159_630==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA159_630==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA159_630==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA159_630==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA159_630==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA159_630==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA159_630==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA159_630==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA159_630==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA159_630==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA159_630==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA159_630==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA159_630==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA159_630==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                         
                        input.seek(index159_630);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA159_688 = input.LA(1);

                         
                        int index159_688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_688==STRING_LITERAL) ) {s = 1478;}

                        else if ( (LA159_688==QUOTED_STRING_LITERAL) ) {s = 1479;}

                        else if ( (LA159_688==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA159_688==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA159_688==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA159_688==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA159_688==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA159_688==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA159_688==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA159_688==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA159_688==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA159_688==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA159_688==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA159_688==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA159_688==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA159_688==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA159_688==AT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA159_688==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA159_688==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA159_688==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA159_688==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA159_688==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA159_688==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA159_688==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA159_688==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA159_688==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA159_688==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA159_688==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA159_688==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA159_688==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA159_688==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA159_688==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA159_688==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA159_688==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA159_688==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA159_688==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA159_688==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA159_688==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA159_688==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA159_688==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA159_688==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA159_688==LW) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA159_688==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA159_688==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA159_688==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA159_688==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA159_688==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA159_688==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA159_688==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA159_688==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA159_688==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA159_688==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA159_688==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA159_688==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA159_688==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA159_688==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA159_688==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA159_688==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA159_688==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA159_688==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                         
                        input.seek(index159_688);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA159_746 = input.LA(1);

                         
                        int index159_746 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_746==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( ((LA159_746>=STRING_LITERAL && LA159_746<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index159_746);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA159_804 = input.LA(1);

                         
                        int index159_804 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_804==STRING_LITERAL) ) {s = 1541;}

                        else if ( (LA159_804==QUOTED_STRING_LITERAL) ) {s = 1542;}

                        else if ( (LA159_804==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA159_804==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA159_804==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA159_804==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA159_804==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA159_804==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA159_804==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA159_804==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA159_804==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA159_804==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA159_804==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA159_804==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA159_804==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA159_804==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA159_804==AT) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA159_804==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA159_804==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA159_804==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA159_804==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA159_804==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA159_804==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA159_804==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA159_804==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA159_804==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA159_804==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA159_804==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA159_804==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA159_804==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA159_804==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA159_804==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA159_804==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA159_804==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA159_804==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA159_804==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA159_804==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA159_804==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA159_804==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA159_804==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA159_804==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA159_804==LW) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA159_804==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA159_804==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA159_804==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA159_804==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA159_804==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA159_804==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA159_804==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA159_804==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA159_804==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA159_804==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA159_804==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA159_804==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA159_804==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA159_804==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA159_804==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA159_804==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA159_804==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA159_804==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                         
                        input.seek(index159_804);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA159_862 = input.LA(1);

                         
                        int index159_862 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_862==STRING_LITERAL) ) {s = 1601;}

                        else if ( (LA159_862==QUOTED_STRING_LITERAL) ) {s = 1602;}

                        else if ( (LA159_862==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA159_862==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA159_862==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA159_862==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA159_862==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA159_862==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA159_862==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA159_862==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA159_862==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA159_862==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA159_862==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA159_862==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA159_862==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA159_862==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA159_862==AT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA159_862==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA159_862==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA159_862==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA159_862==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA159_862==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA159_862==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA159_862==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA159_862==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA159_862==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA159_862==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA159_862==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA159_862==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA159_862==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA159_862==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA159_862==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA159_862==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA159_862==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA159_862==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA159_862==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA159_862==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA159_862==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA159_862==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA159_862==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA159_862==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA159_862==LW) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA159_862==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA159_862==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA159_862==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA159_862==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA159_862==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA159_862==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA159_862==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA159_862==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA159_862==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA159_862==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA159_862==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA159_862==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA159_862==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA159_862==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA159_862==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA159_862==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA159_862==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA159_862==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                         
                        input.seek(index159_862);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA159_920 = input.LA(1);

                         
                        int index159_920 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_920==SELECT) ) {s = 1661;}

                        else if ( (LA159_920==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA159_920==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA159_920==AT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA159_920==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA159_920==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA159_920==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA159_920==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA159_920==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA159_920==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA159_920==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA159_920==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA159_920==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA159_920==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA159_920==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA159_920==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA159_920==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA159_920==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA159_920==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA159_920==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA159_920==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA159_920==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA159_920==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA159_920==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA159_920==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA159_920==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA159_920==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA159_920==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA159_920==LW) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA159_920==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA159_920==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA159_920==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA159_920==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA159_920==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA159_920==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA159_920==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA159_920==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA159_920==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA159_920==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA159_920==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA159_920==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA159_920==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA159_920==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                         
                        input.seek(index159_920);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA159_921 = input.LA(1);

                         
                        int index159_921 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_921==RPAREN) ) {s = 1704;}

                        else if ( (LA159_921==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA159_921==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA159_921==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA159_921==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA159_921==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA159_921==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA159_921==LT) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA159_921==GT) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA159_921==LE) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA159_921==GE) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA159_921==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA159_921==IS) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA159_921==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA159_921==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA159_921==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA159_921==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA159_921==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA159_921==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA159_921==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA159_921==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA159_921==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA159_921==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA159_921==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA159_921==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                         
                        input.seek(index159_921);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA159_922 = input.LA(1);

                         
                        int index159_922 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_922==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA159_922==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA159_922==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA159_922==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA159_922==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA159_922==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA159_922==LT) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA159_922==GT) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA159_922==LE) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA159_922==GE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA159_922==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA159_922==IS) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA159_922==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA159_922==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA159_922==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA159_922==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA159_922==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA159_922==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA159_922==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA159_922==RPAREN) ) {s = 1748;}

                        else if ( (LA159_922==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA159_922==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA159_922==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA159_922==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA159_922==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                         
                        input.seek(index159_922);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA159_984 = input.LA(1);

                         
                        int index159_984 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_984==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA159_984==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA159_984==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA159_984==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA159_984==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA159_984==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA159_984==LT) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA159_984==GT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA159_984==LE) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA159_984==GE) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA159_984==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA159_984==IS) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA159_984==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA159_984==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA159_984==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA159_984==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA159_984==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA159_984==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA159_984==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA159_984==RPAREN) ) {s = 1773;}

                        else if ( (LA159_984==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA159_984==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA159_984==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA159_984==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA159_984==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                         
                        input.seek(index159_984);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA159_985 = input.LA(1);

                         
                        int index159_985 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_985==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA159_985==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA159_985==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA159_985==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA159_985==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA159_985==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA159_985==LT) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA159_985==GT) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA159_985==LE) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA159_985==GE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA159_985==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA159_985==IS) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA159_985==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA159_985==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA159_985==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA159_985==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA159_985==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA159_985==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA159_985==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA159_985==RPAREN) ) {s = 1798;}

                        else if ( (LA159_985==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA159_985==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA159_985==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA159_985==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA159_985==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                         
                        input.seek(index159_985);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA159_1046 = input.LA(1);

                         
                        int index159_1046 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1046==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA159_1046==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA159_1046==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA159_1046==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA159_1046==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA159_1046==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA159_1046==LT) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA159_1046==GT) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA159_1046==LE) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA159_1046==GE) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA159_1046==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA159_1046==IS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA159_1046==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA159_1046==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA159_1046==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA159_1046==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA159_1046==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA159_1046==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA159_1046==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA159_1046==RPAREN) ) {s = 1823;}

                        else if ( (LA159_1046==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA159_1046==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA159_1046==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA159_1046==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA159_1046==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                         
                        input.seek(index159_1046);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA159_1047 = input.LA(1);

                         
                        int index159_1047 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1047==RPAREN) ) {s = 1829;}

                        else if ( (LA159_1047==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA159_1047==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA159_1047==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA159_1047==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA159_1047==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA159_1047==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA159_1047==LT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA159_1047==GT) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA159_1047==LE) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA159_1047==GE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA159_1047==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA159_1047==IS) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA159_1047==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA159_1047==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA159_1047==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA159_1047==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA159_1047==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA159_1047==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA159_1047==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA159_1047==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA159_1047==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA159_1047==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA159_1047==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA159_1047==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                         
                        input.seek(index159_1047);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA159_1108 = input.LA(1);

                         
                        int index159_1108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1108==RPAREN) ) {s = 14;}

                        else if ( (LA159_1108==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA159_1108==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA159_1108==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA159_1108==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA159_1108==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA159_1108==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA159_1108==LT) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA159_1108==GT) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA159_1108==LE) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA159_1108==GE) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA159_1108==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA159_1108==IS) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA159_1108==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA159_1108==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA159_1108==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA159_1108==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA159_1108==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA159_1108==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA159_1108==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA159_1108==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA159_1108==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA159_1108==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA159_1108==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                        else if ( (LA159_1108==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA159_1108==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                         
                        input.seek(index159_1108);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA159_1109 = input.LA(1);

                         
                        int index159_1109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1109==RPAREN) ) {s = 14;}

                        else if ( (LA159_1109==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA159_1109==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA159_1109==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA159_1109==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA159_1109==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA159_1109==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA159_1109==LT) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA159_1109==GT) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA159_1109==LE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA159_1109==GE) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA159_1109==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA159_1109==IS) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA159_1109==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA159_1109==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA159_1109==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA159_1109==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA159_1109==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA159_1109==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA159_1109==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA159_1109==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA159_1109==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA159_1109==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA159_1109==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA159_1109==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA159_1109==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                         
                        input.seek(index159_1109);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA159_1177 = input.LA(1);

                         
                        int index159_1177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1177==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA159_1177==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA159_1177==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA159_1177==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA159_1177==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA159_1177==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA159_1177==LT) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA159_1177==GT) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA159_1177==LE) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA159_1177==GE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA159_1177==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA159_1177==IS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA159_1177==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA159_1177==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA159_1177==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA159_1177==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA159_1177==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA159_1177==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA159_1177==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA159_1177==RPAREN) ) {s = 1925;}

                        else if ( (LA159_1177==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA159_1177==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA159_1177==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA159_1177==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA159_1177==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                         
                        input.seek(index159_1177);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA159_1178 = input.LA(1);

                         
                        int index159_1178 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1178==RPAREN) ) {s = 1931;}

                        else if ( (LA159_1178==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA159_1178==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA159_1178==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA159_1178==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA159_1178==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA159_1178==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA159_1178==LT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA159_1178==GT) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA159_1178==LE) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA159_1178==GE) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA159_1178==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA159_1178==IS) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA159_1178==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA159_1178==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA159_1178==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA159_1178==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA159_1178==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA159_1178==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA159_1178==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA159_1178==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA159_1178==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA159_1178==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA159_1178==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA159_1178==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                         
                        input.seek(index159_1178);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA159_1230 = input.LA(1);

                         
                        int index159_1230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1230==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA159_1230==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA159_1230==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA159_1230==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA159_1230==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA159_1230==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA159_1230==LT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA159_1230==GT) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA159_1230==LE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA159_1230==GE) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA159_1230==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA159_1230==IS) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA159_1230==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA159_1230==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA159_1230==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA159_1230==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA159_1230==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA159_1230==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA159_1230==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA159_1230==RPAREN) ) {s = 1975;}

                        else if ( (LA159_1230==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA159_1230==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA159_1230==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA159_1230==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA159_1230==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                         
                        input.seek(index159_1230);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA159_1231 = input.LA(1);

                         
                        int index159_1231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1231==RPAREN) ) {s = 1981;}

                        else if ( (LA159_1231==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA159_1231==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA159_1231==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA159_1231==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA159_1231==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA159_1231==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA159_1231==LT) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA159_1231==GT) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA159_1231==LE) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA159_1231==GE) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA159_1231==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA159_1231==IS) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA159_1231==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA159_1231==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA159_1231==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA159_1231==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA159_1231==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA159_1231==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA159_1231==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA159_1231==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA159_1231==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA159_1231==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA159_1231==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA159_1231==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                         
                        input.seek(index159_1231);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA159_1301 = input.LA(1);

                         
                        int index159_1301 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1301==RPAREN) ) {s = 2006;}

                        else if ( (LA159_1301==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA159_1301==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA159_1301==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA159_1301==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA159_1301==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA159_1301==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA159_1301==LT) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA159_1301==GT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA159_1301==LE) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA159_1301==GE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA159_1301==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA159_1301==IS) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA159_1301==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA159_1301==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA159_1301==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA159_1301==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA159_1301==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA159_1301==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA159_1301==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA159_1301==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA159_1301==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA159_1301==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA159_1301==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA159_1301==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                         
                        input.seek(index159_1301);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA159_1302 = input.LA(1);

                         
                        int index159_1302 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1302==RPAREN) ) {s = 2031;}

                        else if ( (LA159_1302==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA159_1302==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA159_1302==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA159_1302==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA159_1302==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA159_1302==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA159_1302==LT) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA159_1302==GT) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA159_1302==LE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA159_1302==GE) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA159_1302==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA159_1302==IS) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA159_1302==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA159_1302==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA159_1302==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA159_1302==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA159_1302==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA159_1302==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA159_1302==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA159_1302==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA159_1302==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA159_1302==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA159_1302==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA159_1302==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                         
                        input.seek(index159_1302);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA159_1363 = input.LA(1);

                         
                        int index159_1363 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1363==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA159_1363==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA159_1363==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA159_1363==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA159_1363==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA159_1363==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA159_1363==LT) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA159_1363==GT) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA159_1363==LE) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA159_1363==GE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA159_1363==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA159_1363==IS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA159_1363==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA159_1363==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA159_1363==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA159_1363==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA159_1363==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA159_1363==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA159_1363==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA159_1363==RPAREN) ) {s = 2075;}

                        else if ( (LA159_1363==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA159_1363==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA159_1363==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA159_1363==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA159_1363==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                         
                        input.seek(index159_1363);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA159_1364 = input.LA(1);

                         
                        int index159_1364 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1364==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA159_1364==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA159_1364==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA159_1364==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA159_1364==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA159_1364==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA159_1364==LT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA159_1364==GT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA159_1364==LE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA159_1364==GE) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA159_1364==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA159_1364==IS) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA159_1364==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA159_1364==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA159_1364==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA159_1364==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA159_1364==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA159_1364==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA159_1364==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA159_1364==RPAREN) ) {s = 2100;}

                        else if ( (LA159_1364==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA159_1364==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA159_1364==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA159_1364==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA159_1364==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                         
                        input.seek(index159_1364);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA159_1416 = input.LA(1);

                         
                        int index159_1416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1416==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA159_1416==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA159_1416==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA159_1416==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA159_1416==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA159_1416==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA159_1416==LT) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA159_1416==GT) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA159_1416==LE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA159_1416==GE) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA159_1416==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA159_1416==IS) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA159_1416==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA159_1416==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA159_1416==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA159_1416==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA159_1416==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA159_1416==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA159_1416==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA159_1416==RPAREN) ) {s = 2125;}

                        else if ( (LA159_1416==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA159_1416==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA159_1416==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA159_1416==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA159_1416==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                         
                        input.seek(index159_1416);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA159_1417 = input.LA(1);

                         
                        int index159_1417 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1417==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA159_1417==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA159_1417==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA159_1417==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA159_1417==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA159_1417==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA159_1417==LT) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA159_1417==GT) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA159_1417==LE) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA159_1417==GE) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA159_1417==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA159_1417==IS) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA159_1417==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA159_1417==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA159_1417==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA159_1417==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA159_1417==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA159_1417==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA159_1417==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA159_1417==RPAREN) ) {s = 2150;}

                        else if ( (LA159_1417==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA159_1417==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA159_1417==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA159_1417==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA159_1417==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                         
                        input.seek(index159_1417);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA159_1478 = input.LA(1);

                         
                        int index159_1478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1478==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA159_1478==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA159_1478==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA159_1478==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA159_1478==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA159_1478==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA159_1478==LT) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA159_1478==GT) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA159_1478==LE) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA159_1478==GE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA159_1478==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA159_1478==IS) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA159_1478==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA159_1478==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA159_1478==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA159_1478==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA159_1478==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA159_1478==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA159_1478==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA159_1478==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA159_1478==RPAREN) ) {s = 2176;}

                        else if ( (LA159_1478==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA159_1478==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA159_1478==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA159_1478==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA159_1478==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                         
                        input.seek(index159_1478);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA159_1479 = input.LA(1);

                         
                        int index159_1479 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1479==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA159_1479==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA159_1479==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA159_1479==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA159_1479==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA159_1479==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA159_1479==LT) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA159_1479==GT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA159_1479==LE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA159_1479==GE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA159_1479==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA159_1479==IS) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA159_1479==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA159_1479==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA159_1479==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA159_1479==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA159_1479==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA159_1479==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA159_1479==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA159_1479==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA159_1479==RPAREN) ) {s = 2202;}

                        else if ( (LA159_1479==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA159_1479==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA159_1479==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA159_1479==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA159_1479==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                         
                        input.seek(index159_1479);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA159_1541 = input.LA(1);

                         
                        int index159_1541 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1541==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA159_1541==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA159_1541==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA159_1541==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA159_1541==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA159_1541==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA159_1541==LT) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA159_1541==GT) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA159_1541==LE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA159_1541==GE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                        else if ( (LA159_1541==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2218;}

                        else if ( (LA159_1541==IS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA159_1541==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA159_1541==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA159_1541==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA159_1541==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA159_1541==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}

                        else if ( (LA159_1541==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA159_1541==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA159_1541==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA159_1541==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA159_1541==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA159_1541==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA159_1541==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA159_1541==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA159_1541==RPAREN) ) {s = 14;}

                         
                        input.seek(index159_1541);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA159_1542 = input.LA(1);

                         
                        int index159_1542 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1542==RPAREN) ) {s = 14;}

                        else if ( (LA159_1542==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA159_1542==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA159_1542==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA159_1542==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA159_1542==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA159_1542==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA159_1542==LT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA159_1542==GT) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA159_1542==LE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                        else if ( (LA159_1542==GE) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA159_1542==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA159_1542==IS) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA159_1542==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA159_1542==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA159_1542==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA159_1542==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA159_1542==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA159_1542==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA159_1542==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA159_1542==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA159_1542==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA159_1542==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA159_1542==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA159_1542==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA159_1542==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2259;}

                         
                        input.seek(index159_1542);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA159_1601 = input.LA(1);

                         
                        int index159_1601 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1601==RPAREN) ) {s = 14;}

                        else if ( (LA159_1601==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA159_1601==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA159_1601==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA159_1601==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA159_1601==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA159_1601==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA159_1601==LT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA159_1601==GT) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA159_1601==LE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA159_1601==GE) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                        else if ( (LA159_1601==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA159_1601==IS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA159_1601==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA159_1601==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA159_1601==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA159_1601==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA159_1601==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA159_1601==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA159_1601==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA159_1601==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA159_1601==AS) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA159_1601==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA159_1601==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA159_1601==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA159_1601==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA159_1601==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                         
                        input.seek(index159_1601);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA159_1602 = input.LA(1);

                         
                        int index159_1602 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_1602==RPAREN) ) {s = 14;}

                        else if ( (LA159_1602==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA159_1602==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA159_1602==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA159_1602==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA159_1602==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA159_1602==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA159_1602==LT) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA159_1602==GT) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA159_1602==LE) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA159_1602==GE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                        else if ( (LA159_1602==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2298;}

                        else if ( (LA159_1602==IS) && (synpred3_EsperEPL2Grammar())) {s = 2299;}

                        else if ( (LA159_1602==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2300;}

                        else if ( (LA159_1602==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2301;}

                        else if ( (LA159_1602==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2302;}

                        else if ( (LA159_1602==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}

                        else if ( (LA159_1602==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2304;}

                        else if ( (LA159_1602==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}

                        else if ( (LA159_1602==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2306;}

                        else if ( (LA159_1602==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2307;}

                        else if ( (LA159_1602==AS) && (synpred3_EsperEPL2Grammar())) {s = 2308;}

                        else if ( (LA159_1602==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2309;}

                        else if ( (LA159_1602==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2310;}

                        else if ( (LA159_1602==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2311;}

                        else if ( (LA159_1602==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2312;}

                        else if ( (LA159_1602==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2313;}

                         
                        input.seek(index159_1602);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA159_1704 = input.LA(1);

                         
                        int index159_1704 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1704);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA159_1748 = input.LA(1);

                         
                        int index159_1748 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1748);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA159_1773 = input.LA(1);

                         
                        int index159_1773 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1773);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA159_1798 = input.LA(1);

                         
                        int index159_1798 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1798);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA159_1823 = input.LA(1);

                         
                        int index159_1823 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1823);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA159_1829 = input.LA(1);

                         
                        int index159_1829 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1829);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA159_1925 = input.LA(1);

                         
                        int index159_1925 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1925);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA159_1931 = input.LA(1);

                         
                        int index159_1931 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1931);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA159_1975 = input.LA(1);

                         
                        int index159_1975 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1975);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA159_1981 = input.LA(1);

                         
                        int index159_1981 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_1981);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA159_2006 = input.LA(1);

                         
                        int index159_2006 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2006);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA159_2031 = input.LA(1);

                         
                        int index159_2031 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2031);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA159_2075 = input.LA(1);

                         
                        int index159_2075 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2075);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA159_2100 = input.LA(1);

                         
                        int index159_2100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2100);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA159_2125 = input.LA(1);

                         
                        int index159_2125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2125);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA159_2150 = input.LA(1);

                         
                        int index159_2150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2150);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA159_2176 = input.LA(1);

                         
                        int index159_2176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2176);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA159_2202 = input.LA(1);

                         
                        int index159_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2313;}

                         
                        input.seek(index159_2202);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA186_eotS =
        "\u0490\uffff";
    static final String DFA186_eofS =
        "\1\uffff\1\110\1\u0082\6\uffff\1\u00bc\1\u00f6\u0147\uffff\1\u0275"+
        "\1\u02ae\1\u02e8\1\u0323\46\uffff\1\u035d\1\u0396\1\u03d0\1\u040b"+
        "\u0310\uffff";
    static final String DFA186_minS =
        "\1\5\2\6\6\uffff\2\6\42\uffff\1\5\1\uffff\1\5\71\uffff\1\5\65\uffff"+
        "\1\5\71\uffff\1\5\102\uffff\2\6\64\uffff\4\6\46\uffff\4\6\57\uffff"+
        "\2\6\75\uffff\2\6\110\uffff\1\0\5\uffff\1\0\31\uffff\1\0\2\uffff"+
        "\1\0\66\uffff\1\0\71\uffff\1\0\71\uffff\1\0\71\uffff\1\0\2\uffff"+
        "\1\0\66\uffff\1\0\71\uffff\1\0\71\uffff\1\0\115\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff";
    static final String DFA186_maxS =
        "\1\u011e\2\u011d\6\uffff\2\u011d\42\uffff\1\u0120\1\uffff\1\u011e"+
        "\71\uffff\1\u011e\65\uffff\1\u0120\71\uffff\1\u0120\102\uffff\2"+
        "\u0118\64\uffff\4\u011d\46\uffff\4\u011d\57\uffff\2\u0118\75\uffff"+
        "\2\u0118\110\uffff\1\0\5\uffff\1\0\31\uffff\1\0\2\uffff\1\0\66\uffff"+
        "\1\0\71\uffff\1\0\71\uffff\1\0\71\uffff\1\0\2\uffff\1\0\66\uffff"+
        "\1\0\71\uffff\1\0\71\uffff\1\0\115\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\31\uffff";
    static final String DFA186_acceptS =
        "\3\uffff\6\1\2\uffff\42\1\1\uffff\1\1\1\uffff\71\1\1\uffff\65\1"+
        "\1\uffff\71\1\1\uffff\71\1\1\2\102\uffff\46\1\4\uffff\46\1\u00b3"+
        "\uffff\2\1\1\uffff\66\1\1\uffff\71\1\1\uffff\71\1\1\uffff\71\1\1"+
        "\uffff\2\1\1\uffff\66\1\1\uffff\71\1\1\uffff\71\1\1\uffff\71\1\150"+
        "\uffff";
    static final String DFA186_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\44\uffff\1\5\71\uffff\1\6\u00e8\uffff"+
        "\1\7\1\10\1\11\1\12\46\uffff\1\13\1\14\1\15\1\16\u00b8\uffff\1\17"+
        "\5\uffff\1\20\31\uffff\1\21\2\uffff\1\22\66\uffff\1\23\71\uffff"+
        "\1\24\71\uffff\1\25\71\uffff\1\26\2\uffff\1\27\66\uffff\1\30\71"+
        "\uffff\1\31\71\uffff\1\32\115\uffff\1\33\5\uffff\1\34\55\uffff\1"+
        "\35\5\uffff\1\36\31\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\42\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\45\1\uffff\1\47\1\43\1\44"+
            "\1\46\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\1\41\24\uffff\1\50\1\51\1\52\u0095\uffff"+
            "\1\1\36\uffff\1\2",
            "\1\140\1\141\1\142\1\143\1\144\1\102\1\101\1\137\2\uffff\1"+
            "\114\1\115\14\uffff\1\126\1\130\1\125\1\127\1\116\7\uffff\1"+
            "\73\1\uffff\1\103\1\104\1\uffff\1\120\2\uffff\1\105\3\uffff"+
            "\1\111\1\uffff\1\106\1\123\1\124\6\uffff\1\122\27\uffff\1\136"+
            "\1\135\1\134\6\uffff\1\107\3\uffff\1\117\3\uffff\1\121\u0093"+
            "\uffff\1\113\1\uffff\1\72\1\57\1\55\1\112\1\60\1\77\1\63\1\56"+
            "\1\54\1\132\1\131\2\uffff\1\76\1\100\1\74\1\75\1\66\1\67\1\70"+
            "\1\71\1\65\1\64\1\61\1\62\1\uffff\1\133\2\uffff\1\53",
            "\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\174\1\173\1\u0099"+
            "\2\uffff\1\u0086\1\u0087\14\uffff\1\u0090\1\u0092\1\u008f\1"+
            "\u0091\1\u0088\7\uffff\1\165\1\uffff\1\175\1\176\1\uffff\1\u008a"+
            "\2\uffff\1\177\3\uffff\1\u0083\1\uffff\1\u0080\1\u008d\1\u008e"+
            "\6\uffff\1\u008c\27\uffff\1\u0098\1\u0097\1\u0096\6\uffff\1"+
            "\u0081\3\uffff\1\u0089\3\uffff\1\u008b\u0093\uffff\1\u0085\1"+
            "\uffff\1\164\1\151\1\147\1\u0084\1\152\1\171\1\155\1\150\1\146"+
            "\1\u0094\1\u0093\2\uffff\1\170\1\172\1\166\1\167\1\160\1\161"+
            "\1\162\1\163\1\157\1\156\1\153\1\154\1\uffff\1\u0095\2\uffff"+
            "\1\145",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1\u00b6\1\u00b5\1"+
            "\u00d3\2\uffff\1\u00c0\1\u00c1\14\uffff\1\u00ca\1\u00cc\1\u00c9"+
            "\1\u00cb\1\u00c2\7\uffff\1\u00af\1\uffff\1\u00b7\1\u00b8\1\uffff"+
            "\1\u00c4\2\uffff\1\u00b9\3\uffff\1\u00bd\1\uffff\1\u00ba\1\u00c7"+
            "\1\u00c8\6\uffff\1\u00c6\27\uffff\1\u00d2\1\u00d1\1\u00d0\6"+
            "\uffff\1\u00bb\3\uffff\1\u00c3\3\uffff\1\u00c5\u0093\uffff\1"+
            "\u00bf\1\uffff\1\u00ae\1\u00a3\1\u009f\1\u00be\1\u00a4\1\u00b3"+
            "\1\u00a7\1\u00a2\1\u00a1\1\u00ce\1\u00cd\2\uffff\1\u00b2\1\u00b4"+
            "\1\u00b0\1\u00b1\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00a9\1\u00a8"+
            "\1\u00a5\1\u00a6\1\uffff\1\u00cf\2\uffff\1\u00a0",
            "\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u00f0\1\u00ef\1"+
            "\u010d\2\uffff\1\u00fa\1\u00fb\14\uffff\1\u0104\1\u0106\1\u0103"+
            "\1\u0105\1\u00fc\7\uffff\1\u00e9\1\uffff\1\u00f1\1\u00f2\1\uffff"+
            "\1\u00fe\2\uffff\1\u00f3\3\uffff\1\u00f7\1\uffff\1\u00f4\1\u0101"+
            "\1\u0102\6\uffff\1\u0100\27\uffff\1\u010c\1\u010b\1\u010a\6"+
            "\uffff\1\u00f5\3\uffff\1\u00fd\3\uffff\1\u00ff\u0093\uffff\1"+
            "\u00f9\1\uffff\1\u00e8\1\u00dd\1\u00d9\1\u00f8\1\u00de\1\u00ed"+
            "\1\u00e1\1\u00dc\1\u00db\1\u0108\1\u0107\2\uffff\1\u00ec\1\u00ee"+
            "\1\u00ea\1\u00eb\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e3\1\u00e2"+
            "\1\u00df\1\u00e0\1\uffff\1\u0109\2\uffff\1\u00da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0113\4\uffff\1\u0113\2\uffff\2\u0113\3\uffff\11\u0113"+
            "\1\uffff\1\u0113\6\uffff\1\u0113\1\uffff\4\u0113\5\uffff\2\u0113"+
            "\3\uffff\3\u0113\10\uffff\16\u0113\1\uffff\1\u0113\1\uffff\4"+
            "\u0113\14\uffff\3\u0113\5\uffff\3\u0113\u0086\uffff\1\u0113"+
            "\16\uffff\1\u0113\2\uffff\2\u0113\2\uffff\2\u0113\3\uffff\1"+
            "\u011c\1\u011d\11\uffff\1\u0113\2\uffff\1\u0113\1\uffff\1\u0113"+
            "\2\uffff\3\u0113",
            "",
            "\1\u0173\4\uffff\1\u0158\3\uffff\1\u0159\3\uffff\1\u015a\1"+
            "\u015b\1\u0153\1\u0154\1\u015c\1\u015d\1\u015e\1\u015f\1\u0157"+
            "\10\uffff\1\u0176\1\uffff\1\u0178\1\u0174\1\u0175\1\u0177\12"+
            "\uffff\1\u0160\1\u0161\1\u0162\10\uffff\1\u0163\1\u0164\1\u0165"+
            "\1\u0167\1\u0168\1\u0169\1\u016a\1\u016b\1\uffff\1\u016c\1\u016d"+
            "\1\u016e\1\u016f\2\uffff\1\u0170\1\uffff\1\u0171\1\u0166\1\u0156"+
            "\1\u0172\24\uffff\1\u0179\1\u017a\1\u017b\u0095\uffff\1\u0152"+
            "\36\uffff\1\u0155",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u019d\4\uffff\1\u0182\3\uffff\1\u0183\3\uffff\1\u0184\1"+
            "\u0185\1\u017d\1\u017e\1\u0186\1\u0187\1\u0188\1\u0189\1\u0181"+
            "\10\uffff\1\u01a0\1\uffff\1\u01a2\1\u019e\1\u019f\1\u01a1\12"+
            "\uffff\1\u018a\1\u018b\1\u018c\10\uffff\1\u018d\1\u018e\1\u018f"+
            "\1\u0191\1\u0192\1\u0193\1\u0194\1\u0195\1\uffff\1\u0196\1\u0197"+
            "\1\u0198\1\u0199\2\uffff\1\u019a\1\uffff\1\u019b\1\u0190\1\u0180"+
            "\1\u019c\24\uffff\1\u01a3\1\u01a4\1\u01a5\u0095\uffff\1\u017c"+
            "\36\uffff\1\u017f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0113\4\uffff\1\u0113\2\uffff\2\u0113\3\uffff\11\u0113"+
            "\1\uffff\1\u0113\6\uffff\1\u0113\1\uffff\4\u0113\5\uffff\2\u0113"+
            "\3\uffff\3\u0113\10\uffff\16\u0113\1\uffff\1\u0113\1\uffff\4"+
            "\u0113\14\uffff\3\u0113\5\uffff\3\u0113\u0086\uffff\1\u0113"+
            "\16\uffff\1\u0113\2\uffff\2\u0113\2\uffff\2\u0113\3\uffff\1"+
            "\u01af\1\u01b0\11\uffff\1\u0113\2\uffff\1\u0113\1\uffff\1\u0113"+
            "\2\uffff\3\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0113\4\uffff\1\u0113\2\uffff\2\u0113\3\uffff\11\u0113"+
            "\1\uffff\1\u0113\6\uffff\1\u0113\1\uffff\4\u0113\5\uffff\2\u0113"+
            "\3\uffff\3\u0113\10\uffff\16\u0113\1\uffff\1\u0113\1\uffff\4"+
            "\u0113\14\uffff\3\u0113\5\uffff\3\u0113\u0086\uffff\1\u0113"+
            "\16\uffff\1\u0113\2\uffff\2\u0113\2\uffff\2\u0113\3\uffff\1"+
            "\u01ee\1\u01ef\11\uffff\1\u0113\2\uffff\1\u0113\1\uffff\1\u0113"+
            "\2\uffff\3\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d3\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0238\3\u0113\6\uffff\14\u0113",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d3\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u023e\3\u0113\6\uffff\14\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u028d\1\u028e\1\u028f\1\u0290\1\u0291\1\u026f\1\u026e\1"+
            "\u028c\2\uffff\1\u0279\1\u027a\14\uffff\1\u0283\1\u0285\1\u0282"+
            "\1\u0284\1\u027b\7\uffff\1\u0268\1\uffff\1\u0270\1\u0271\1\uffff"+
            "\1\u027d\2\uffff\1\u0272\3\uffff\1\u0276\1\uffff\1\u0273\1\u0280"+
            "\1\u0281\6\uffff\1\u027f\27\uffff\1\u028b\1\u028a\1\u0289\6"+
            "\uffff\1\u0274\3\uffff\1\u027c\3\uffff\1\u027e\u0093\uffff\1"+
            "\u0278\1\uffff\1\u0267\1\u0258\1\u025b\1\u0277\1\u025d\1\u026c"+
            "\1\u0260\1\u025c\1\u025a\1\u0287\1\u0286\2\uffff\1\u026b\1\u026d"+
            "\1\u0269\1\u026a\1\u0263\1\u0264\1\u0265\1\u0266\1\u0262\1\u0261"+
            "\1\u025e\1\u025f\1\uffff\1\u0288\2\uffff\1\u0259",
            "\1\u02c6\1\u02c7\1\u02c8\1\u02c9\1\u02ca\1\u02a8\1\u02a7\1"+
            "\u02c5\2\uffff\1\u02b2\1\u02b3\14\uffff\1\u02bc\1\u02be\1\u02bb"+
            "\1\u02bd\1\u02b4\7\uffff\1\u02a1\1\uffff\1\u02a9\1\u02aa\1\uffff"+
            "\1\u02b6\2\uffff\1\u02ab\3\uffff\1\u02af\1\uffff\1\u02ac\1\u02b9"+
            "\1\u02ba\6\uffff\1\u02b8\27\uffff\1\u02c4\1\u02c3\1\u02c2\6"+
            "\uffff\1\u02ad\3\uffff\1\u02b5\3\uffff\1\u02b7\u0093\uffff\1"+
            "\u02b1\1\uffff\1\u02a0\1\u02cb\1\u0292\1\u02b0\1\u0296\1\u02a5"+
            "\1\u0299\1\u0295\1\u0294\1\u02c0\1\u02bf\2\uffff\1\u02a4\1\u02a6"+
            "\1\u02a2\1\u02a3\1\u029c\1\u029d\1\u029e\1\u029f\1\u029b\1\u029a"+
            "\1\u0297\1\u0298\1\uffff\1\u02c1\2\uffff\1\u0293",
            "\1\u0300\1\u0301\1\u0302\1\u0303\1\u0304\1\u02e2\1\u02e1\1"+
            "\u02ff\2\uffff\1\u02ec\1\u02ed\14\uffff\1\u02f6\1\u02f8\1\u02f5"+
            "\1\u02f7\1\u02ee\7\uffff\1\u02db\1\uffff\1\u02e3\1\u02e4\1\uffff"+
            "\1\u02f0\2\uffff\1\u02e5\3\uffff\1\u02e9\1\uffff\1\u02e6\1\u02f3"+
            "\1\u02f4\6\uffff\1\u02f2\27\uffff\1\u02fe\1\u02fd\1\u02fc\6"+
            "\uffff\1\u02e7\3\uffff\1\u02ef\3\uffff\1\u02f1\u0093\uffff\1"+
            "\u02eb\1\uffff\1\u02da\1\u0305\1\u02cc\1\u02ea\1\u02d0\1\u02df"+
            "\1\u02d3\1\u02cf\1\u02ce\1\u02fa\1\u02f9\2\uffff\1\u02de\1\u02e0"+
            "\1\u02dc\1\u02dd\1\u02d6\1\u02d7\1\u02d8\1\u02d9\1\u02d5\1\u02d4"+
            "\1\u02d1\1\u02d2\1\uffff\1\u02fb\2\uffff\1\u02cd",
            "\1\u033b\1\u033c\1\u033d\1\u033e\1\u033f\1\u031d\1\u031c\1"+
            "\u033a\2\uffff\1\u0327\1\u0328\14\uffff\1\u0331\1\u0333\1\u0330"+
            "\1\u0332\1\u0329\7\uffff\1\u0316\1\uffff\1\u031e\1\u031f\1\uffff"+
            "\1\u032b\2\uffff\1\u0320\3\uffff\1\u0324\1\uffff\1\u0321\1\u032e"+
            "\1\u032f\6\uffff\1\u032d\27\uffff\1\u0339\1\u0338\1\u0337\6"+
            "\uffff\1\u0322\3\uffff\1\u032a\3\uffff\1\u032c\u0093\uffff\1"+
            "\u0326\1\uffff\1\u0315\1\u0306\1\u0309\1\u0325\1\u030b\1\u031a"+
            "\1\u030e\1\u030a\1\u0308\1\u0335\1\u0334\2\uffff\1\u0319\1\u031b"+
            "\1\u0317\1\u0318\1\u0311\1\u0312\1\u0313\1\u0314\1\u0310\1\u030f"+
            "\1\u030c\1\u030d\1\uffff\1\u0336\2\uffff\1\u0307",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0375\1\u0376\1\u0377\1\u0378\1\u0379\1\u0357\1\u0356\1"+
            "\u0374\2\uffff\1\u0361\1\u0362\14\uffff\1\u036b\1\u036d\1\u036a"+
            "\1\u036c\1\u0363\7\uffff\1\u0350\1\uffff\1\u0358\1\u0359\1\uffff"+
            "\1\u0365\2\uffff\1\u035a\3\uffff\1\u035e\1\uffff\1\u035b\1\u0368"+
            "\1\u0369\6\uffff\1\u0367\27\uffff\1\u0373\1\u0372\1\u0371\6"+
            "\uffff\1\u035c\3\uffff\1\u0364\3\uffff\1\u0366\u0093\uffff\1"+
            "\u0360\1\uffff\1\u034f\1\u0340\1\u0343\1\u035f\1\u0345\1\u0354"+
            "\1\u0348\1\u0344\1\u0342\1\u036f\1\u036e\2\uffff\1\u0353\1\u0355"+
            "\1\u0351\1\u0352\1\u034b\1\u034c\1\u034d\1\u034e\1\u034a\1\u0349"+
            "\1\u0346\1\u0347\1\uffff\1\u0370\2\uffff\1\u0341",
            "\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03b2\1\u0390\1\u038f\1"+
            "\u03ad\2\uffff\1\u039a\1\u039b\14\uffff\1\u03a4\1\u03a6\1\u03a3"+
            "\1\u03a5\1\u039c\7\uffff\1\u0389\1\uffff\1\u0391\1\u0392\1\uffff"+
            "\1\u039e\2\uffff\1\u0393\3\uffff\1\u0397\1\uffff\1\u0394\1\u03a1"+
            "\1\u03a2\6\uffff\1\u03a0\27\uffff\1\u03ac\1\u03ab\1\u03aa\6"+
            "\uffff\1\u0395\3\uffff\1\u039d\3\uffff\1\u039f\u0093\uffff\1"+
            "\u0399\1\uffff\1\u0388\1\u03b3\1\u037a\1\u0398\1\u037e\1\u038d"+
            "\1\u0381\1\u037d\1\u037c\1\u03a8\1\u03a7\2\uffff\1\u038c\1\u038e"+
            "\1\u038a\1\u038b\1\u0384\1\u0385\1\u0386\1\u0387\1\u0383\1\u0382"+
            "\1\u037f\1\u0380\1\uffff\1\u03a9\2\uffff\1\u037b",
            "\1\u03e8\1\u03e9\1\u03ea\1\u03eb\1\u03ec\1\u03ca\1\u03c9\1"+
            "\u03e7\2\uffff\1\u03d4\1\u03d5\14\uffff\1\u03de\1\u03e0\1\u03dd"+
            "\1\u03df\1\u03d6\7\uffff\1\u03c3\1\uffff\1\u03cb\1\u03cc\1\uffff"+
            "\1\u03d8\2\uffff\1\u03cd\3\uffff\1\u03d1\1\uffff\1\u03ce\1\u03db"+
            "\1\u03dc\6\uffff\1\u03da\27\uffff\1\u03e6\1\u03e5\1\u03e4\6"+
            "\uffff\1\u03cf\3\uffff\1\u03d7\3\uffff\1\u03d9\u0093\uffff\1"+
            "\u03d3\1\uffff\1\u03c2\1\u03ed\1\u03b4\1\u03d2\1\u03b8\1\u03c7"+
            "\1\u03bb\1\u03b7\1\u03b6\1\u03e2\1\u03e1\2\uffff\1\u03c6\1\u03c8"+
            "\1\u03c4\1\u03c5\1\u03be\1\u03bf\1\u03c0\1\u03c1\1\u03bd\1\u03bc"+
            "\1\u03b9\1\u03ba\1\uffff\1\u03e3\2\uffff\1\u03b5",
            "\1\u0423\1\u0424\1\u0425\1\u0426\1\u0427\1\u0405\1\u0404\1"+
            "\u0422\2\uffff\1\u040f\1\u0410\14\uffff\1\u0419\1\u041b\1\u0418"+
            "\1\u041a\1\u0411\7\uffff\1\u03fe\1\uffff\1\u0406\1\u0407\1\uffff"+
            "\1\u0413\2\uffff\1\u0408\3\uffff\1\u040c\1\uffff\1\u0409\1\u0416"+
            "\1\u0417\6\uffff\1\u0415\27\uffff\1\u0421\1\u0420\1\u041f\6"+
            "\uffff\1\u040a\3\uffff\1\u0412\3\uffff\1\u0414\u0093\uffff\1"+
            "\u040e\1\uffff\1\u03fd\1\u03ee\1\u03f1\1\u040d\1\u03f3\1\u0402"+
            "\1\u03f6\1\u03f2\1\u03f0\1\u041d\1\u041c\2\uffff\1\u0401\1\u0403"+
            "\1\u03ff\1\u0400\1\u03f9\1\u03fa\1\u03fb\1\u03fc\1\u03f8\1\u03f7"+
            "\1\u03f4\1\u03f5\1\uffff\1\u041e\2\uffff\1\u03ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d3\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u043c\3\u0113\6\uffff\14\u0113",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d3\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0442\3\u0113\6\uffff\14\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d3\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0470\3\u0113\6\uffff\14\u0113",
            "\4\u0113\1\uffff\3\u0113\34\uffff\1\u0113\u00d3\uffff\1\u0113"+
            "\1\uffff\1\u0113\2\uffff\1\u0476\3\u0113\6\uffff\14\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "1241:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_0 = input.LA(1);

                         
                        int index186_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_0==IDENT) ) {s = 1;}

                        else if ( (LA186_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA186_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA186_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA186_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA186_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA186_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA186_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA186_0==MAX) ) {s = 9;}

                        else if ( (LA186_0==MIN) ) {s = 10;}

                        else if ( (LA186_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA186_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA186_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA186_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA186_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA186_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA186_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA186_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA186_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA186_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA186_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA186_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA186_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA186_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA186_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA186_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA186_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA186_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA186_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA186_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA186_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA186_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA186_0==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA186_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA186_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA186_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA186_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA186_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA186_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA186_0==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA186_0==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA186_0==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                         
                        input.seek(index186_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_1 = input.LA(1);

                         
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA186_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA186_1==LPAREN) ) {s = 45;}

                        else if ( (LA186_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA186_1==DOT) ) {s = 47;}

                        else if ( (LA186_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA186_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA186_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA186_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA186_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA186_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA186_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA186_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA186_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA186_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA186_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA186_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA186_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA186_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA186_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA186_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA186_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA186_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA186_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA186_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA186_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA186_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA186_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA186_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA186_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA186_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA186_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA186_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA186_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA186_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA186_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA186_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA186_1==ALL) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA186_1==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA186_1==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA186_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA186_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA186_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA186_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA186_1==END) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA186_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA186_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA186_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA186_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA186_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA186_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA186_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA186_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA186_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA186_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA186_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA186_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA186_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                         
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA186_2 = input.LA(1);

                         
                        int index186_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA186_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA186_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA186_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA186_2==DOT) ) {s = 105;}

                        else if ( (LA186_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA186_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA186_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA186_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA186_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA186_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA186_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA186_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA186_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA186_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA186_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA186_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA186_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA186_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA186_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA186_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA186_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA186_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA186_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA186_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA186_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA186_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA186_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA186_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA186_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA186_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA186_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA186_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA186_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA186_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA186_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA186_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA186_2==ALL) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA186_2==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA186_2==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA186_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA186_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA186_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA186_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA186_2==END) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA186_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA186_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA186_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA186_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA186_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA186_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA186_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA186_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA186_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA186_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA186_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA186_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA186_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                         
                        input.seek(index186_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA186_9 = input.LA(1);

                         
                        int index186_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_9==LPAREN) ) {s = 159;}

                        else if ( (LA186_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA186_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA186_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA186_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA186_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA186_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA186_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA186_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA186_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA186_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA186_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA186_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA186_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA186_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA186_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA186_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA186_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA186_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA186_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA186_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA186_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA186_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA186_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA186_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA186_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA186_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA186_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA186_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA186_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA186_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA186_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA186_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA186_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA186_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA186_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA186_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA186_9==ALL) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA186_9==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA186_9==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA186_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA186_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA186_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA186_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA186_9==END) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA186_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA186_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA186_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA186_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA186_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA186_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA186_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA186_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA186_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA186_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA186_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA186_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA186_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                         
                        input.seek(index186_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA186_10 = input.LA(1);

                         
                        int index186_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_10==LPAREN) ) {s = 217;}

                        else if ( (LA186_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA186_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA186_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA186_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA186_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA186_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA186_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA186_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA186_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA186_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA186_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA186_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA186_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA186_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA186_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA186_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA186_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA186_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA186_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA186_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA186_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA186_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA186_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA186_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA186_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA186_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA186_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA186_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA186_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA186_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA186_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA186_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA186_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA186_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA186_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA186_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA186_10==ALL) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA186_10==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA186_10==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA186_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA186_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA186_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA186_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA186_10==END) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA186_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA186_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA186_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA186_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA186_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA186_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA186_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA186_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA186_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA186_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA186_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA186_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA186_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                         
                        input.seek(index186_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA186_47 = input.LA(1);

                         
                        int index186_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_47==IDENT) ) {s = 338;}

                        else if ( (LA186_47==MAX) ) {s = 339;}

                        else if ( (LA186_47==MIN) ) {s = 340;}

                        else if ( (LA186_47==TICKED_STRING_LITERAL) ) {s = 341;}

                        else if ( (LA186_47==AT) && (synpred4_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA186_47==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA186_47==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA186_47==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA186_47==SUM) && (synpred4_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA186_47==AVG) && (synpred4_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA186_47==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA186_47==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA186_47==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA186_47==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA186_47==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA186_47==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA186_47==LAST) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA186_47==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA186_47==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA186_47==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA186_47==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA186_47==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA186_47==SQL) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA186_47==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA186_47==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA186_47==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA186_47==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA186_47==LW) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA186_47==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA186_47==CAST) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA186_47==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA186_47==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA186_47==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA186_47==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA186_47==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA186_47==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA186_47==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA186_47==FULL) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA186_47==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA186_47==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA186_47==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA186_47==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                         
                        input.seek(index186_47);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA186_105 = input.LA(1);

                         
                        int index186_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_105==IDENT) ) {s = 380;}

                        else if ( (LA186_105==MAX) ) {s = 381;}

                        else if ( (LA186_105==MIN) ) {s = 382;}

                        else if ( (LA186_105==TICKED_STRING_LITERAL) ) {s = 383;}

                        else if ( (LA186_105==AT) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA186_105==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA186_105==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA186_105==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA186_105==SUM) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA186_105==AVG) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA186_105==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA186_105==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA186_105==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA186_105==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA186_105==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA186_105==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA186_105==LAST) && (synpred4_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA186_105==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA186_105==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA186_105==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA186_105==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA186_105==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA186_105==SQL) && (synpred4_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA186_105==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA186_105==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA186_105==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA186_105==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA186_105==LW) && (synpred4_EsperEPL2Grammar())) {s = 407;}

                        else if ( (LA186_105==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 408;}

                        else if ( (LA186_105==CAST) && (synpred4_EsperEPL2Grammar())) {s = 409;}

                        else if ( (LA186_105==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 410;}

                        else if ( (LA186_105==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 411;}

                        else if ( (LA186_105==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 412;}

                        else if ( (LA186_105==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 413;}

                        else if ( (LA186_105==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 414;}

                        else if ( (LA186_105==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 415;}

                        else if ( (LA186_105==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 416;}

                        else if ( (LA186_105==FULL) && (synpred4_EsperEPL2Grammar())) {s = 417;}

                        else if ( (LA186_105==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 418;}

                        else if ( (LA186_105==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 419;}

                        else if ( (LA186_105==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 420;}

                        else if ( (LA186_105==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 421;}

                         
                        input.seek(index186_105);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA186_338 = input.LA(1);

                         
                        int index186_338 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_338==DOT) ) {s = 600;}

                        else if ( (LA186_338==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA186_338==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA186_338==LPAREN) ) {s = 603;}

                        else if ( (LA186_338==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA186_338==STAR) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA186_338==DIV) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA186_338==MOD) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA186_338==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA186_338==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA186_338==LOR) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA186_338==LT) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA186_338==GT) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA186_338==LE) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA186_338==GE) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA186_338==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA186_338==IS) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA186_338==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA186_338==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA186_338==BAND) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA186_338==BOR) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA186_338==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA186_338==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA186_338==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA186_338==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA186_338==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA186_338==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA186_338==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA186_338==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA186_338==EOF) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA186_338==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA186_338==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA186_338==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA186_338==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA186_338==AS) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA186_338==FROM) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA186_338==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA186_338==ALL) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA186_338==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA186_338==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA186_338==ASC) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA186_338==DESC) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA186_338==THEN) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA186_338==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA186_338==END) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA186_338==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA186_338==COLON) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA186_338==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA186_338==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA186_338==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA186_338==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA186_338==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA186_338==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA186_338==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA186_338==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA186_338==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA186_338==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA186_338==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                         
                        input.seek(index186_338);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA186_339 = input.LA(1);

                         
                        int index186_339 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_339==LPAREN) ) {s = 658;}

                        else if ( (LA186_339==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA186_339==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA186_339==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA186_339==STAR) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA186_339==DIV) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA186_339==MOD) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA186_339==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA186_339==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA186_339==LOR) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA186_339==LT) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA186_339==GT) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA186_339==LE) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA186_339==GE) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA186_339==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA186_339==IS) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA186_339==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA186_339==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA186_339==BAND) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA186_339==BOR) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA186_339==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA186_339==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA186_339==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA186_339==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA186_339==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA186_339==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA186_339==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA186_339==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA186_339==EOF) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA186_339==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA186_339==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA186_339==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA186_339==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA186_339==AS) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA186_339==FROM) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA186_339==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA186_339==ALL) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA186_339==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA186_339==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA186_339==ASC) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA186_339==DESC) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA186_339==THEN) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA186_339==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA186_339==END) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA186_339==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA186_339==COLON) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA186_339==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA186_339==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA186_339==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA186_339==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA186_339==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA186_339==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA186_339==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA186_339==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA186_339==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA186_339==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA186_339==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA186_339==DOT) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                         
                        input.seek(index186_339);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA186_340 = input.LA(1);

                         
                        int index186_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_340==LPAREN) ) {s = 716;}

                        else if ( (LA186_340==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA186_340==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA186_340==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA186_340==STAR) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA186_340==DIV) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA186_340==MOD) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA186_340==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA186_340==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA186_340==LOR) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA186_340==LT) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA186_340==GT) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA186_340==LE) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA186_340==GE) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA186_340==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA186_340==IS) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA186_340==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA186_340==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA186_340==BAND) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA186_340==BOR) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA186_340==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA186_340==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA186_340==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA186_340==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA186_340==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA186_340==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA186_340==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA186_340==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA186_340==EOF) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA186_340==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA186_340==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA186_340==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA186_340==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA186_340==AS) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA186_340==FROM) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA186_340==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA186_340==ALL) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA186_340==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA186_340==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA186_340==ASC) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA186_340==DESC) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA186_340==THEN) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA186_340==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA186_340==END) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA186_340==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA186_340==COLON) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA186_340==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA186_340==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA186_340==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA186_340==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA186_340==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA186_340==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA186_340==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA186_340==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA186_340==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA186_340==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA186_340==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA186_340==DOT) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                         
                        input.seek(index186_340);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA186_341 = input.LA(1);

                         
                        int index186_341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_341==DOT) ) {s = 774;}

                        else if ( (LA186_341==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA186_341==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA186_341==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA186_341==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA186_341==STAR) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA186_341==DIV) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA186_341==MOD) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA186_341==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA186_341==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA186_341==LOR) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA186_341==LT) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA186_341==GT) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA186_341==LE) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA186_341==GE) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA186_341==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA186_341==IS) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA186_341==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA186_341==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA186_341==BAND) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA186_341==BOR) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA186_341==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA186_341==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA186_341==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA186_341==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA186_341==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA186_341==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA186_341==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA186_341==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA186_341==EOF) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA186_341==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA186_341==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA186_341==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA186_341==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA186_341==AS) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA186_341==FROM) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA186_341==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA186_341==ALL) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA186_341==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA186_341==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA186_341==ASC) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA186_341==DESC) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA186_341==THEN) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA186_341==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA186_341==END) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA186_341==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA186_341==COLON) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA186_341==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA186_341==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA186_341==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA186_341==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA186_341==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA186_341==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA186_341==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA186_341==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA186_341==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA186_341==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA186_341==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                         
                        input.seek(index186_341);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA186_380 = input.LA(1);

                         
                        int index186_380 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_380==DOT) ) {s = 832;}

                        else if ( (LA186_380==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA186_380==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA186_380==LPAREN) ) {s = 835;}

                        else if ( (LA186_380==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA186_380==STAR) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA186_380==DIV) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA186_380==MOD) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA186_380==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA186_380==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA186_380==LOR) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA186_380==LT) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA186_380==GT) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA186_380==LE) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA186_380==GE) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA186_380==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA186_380==IS) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA186_380==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA186_380==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA186_380==BAND) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA186_380==BOR) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA186_380==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA186_380==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA186_380==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA186_380==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA186_380==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA186_380==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA186_380==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA186_380==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA186_380==EOF) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA186_380==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA186_380==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA186_380==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA186_380==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA186_380==AS) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA186_380==FROM) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA186_380==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA186_380==ALL) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA186_380==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA186_380==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA186_380==ASC) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA186_380==DESC) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA186_380==THEN) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA186_380==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA186_380==END) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA186_380==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA186_380==COLON) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA186_380==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA186_380==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA186_380==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA186_380==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA186_380==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA186_380==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA186_380==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA186_380==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA186_380==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA186_380==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA186_380==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                         
                        input.seek(index186_380);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA186_381 = input.LA(1);

                         
                        int index186_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_381==LPAREN) ) {s = 890;}

                        else if ( (LA186_381==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA186_381==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA186_381==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA186_381==STAR) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA186_381==DIV) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA186_381==MOD) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA186_381==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA186_381==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA186_381==LOR) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA186_381==LT) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA186_381==GT) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA186_381==LE) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA186_381==GE) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA186_381==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA186_381==IS) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA186_381==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA186_381==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA186_381==BAND) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA186_381==BOR) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA186_381==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA186_381==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA186_381==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA186_381==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA186_381==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA186_381==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA186_381==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA186_381==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA186_381==EOF) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA186_381==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA186_381==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA186_381==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA186_381==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA186_381==AS) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA186_381==FROM) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA186_381==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA186_381==ALL) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA186_381==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA186_381==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA186_381==ASC) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA186_381==DESC) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA186_381==THEN) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA186_381==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA186_381==END) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA186_381==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA186_381==COLON) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA186_381==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA186_381==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA186_381==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA186_381==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA186_381==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA186_381==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA186_381==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA186_381==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA186_381==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA186_381==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA186_381==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA186_381==DOT) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                         
                        input.seek(index186_381);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA186_382 = input.LA(1);

                         
                        int index186_382 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_382==LPAREN) ) {s = 948;}

                        else if ( (LA186_382==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA186_382==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA186_382==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA186_382==STAR) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA186_382==DIV) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA186_382==MOD) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA186_382==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA186_382==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA186_382==LOR) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA186_382==LT) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA186_382==GT) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA186_382==LE) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA186_382==GE) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA186_382==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA186_382==IS) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA186_382==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA186_382==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA186_382==BAND) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA186_382==BOR) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA186_382==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA186_382==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA186_382==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA186_382==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA186_382==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA186_382==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA186_382==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA186_382==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA186_382==EOF) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA186_382==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA186_382==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA186_382==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA186_382==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA186_382==AS) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA186_382==FROM) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA186_382==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA186_382==ALL) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA186_382==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA186_382==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA186_382==ASC) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA186_382==DESC) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA186_382==THEN) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA186_382==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA186_382==END) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA186_382==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA186_382==COLON) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA186_382==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA186_382==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA186_382==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA186_382==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA186_382==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA186_382==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA186_382==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA186_382==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA186_382==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA186_382==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA186_382==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA186_382==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1005;}

                         
                        input.seek(index186_382);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA186_383 = input.LA(1);

                         
                        int index186_383 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_383==DOT) ) {s = 1006;}

                        else if ( (LA186_383==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA186_383==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA186_383==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA186_383==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA186_383==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA186_383==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA186_383==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA186_383==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA186_383==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA186_383==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA186_383==LT) && (synpred4_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA186_383==GT) && (synpred4_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA186_383==LE) && (synpred4_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA186_383==GE) && (synpred4_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA186_383==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA186_383==IS) && (synpred4_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA186_383==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA186_383==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA186_383==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA186_383==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA186_383==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA186_383==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA186_383==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA186_383==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA186_383==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA186_383==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA186_383==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA186_383==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA186_383==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA186_383==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA186_383==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA186_383==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA186_383==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA186_383==AS) && (synpred4_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA186_383==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA186_383==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA186_383==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA186_383==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA186_383==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA186_383==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA186_383==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA186_383==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA186_383==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA186_383==END) && (synpred4_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA186_383==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA186_383==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA186_383==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA186_383==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA186_383==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA186_383==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA186_383==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA186_383==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA186_383==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA186_383==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA186_383==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA186_383==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA186_383==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1063;}

                         
                        input.seek(index186_383);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA186_568 = input.LA(1);

                         
                        int index186_568 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_568);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA186_574 = input.LA(1);

                         
                        int index186_574 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_574);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA186_600 = input.LA(1);

                         
                        int index186_600 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_600);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA186_603 = input.LA(1);

                         
                        int index186_603 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_603);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA186_658 = input.LA(1);

                         
                        int index186_658 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_658);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA186_716 = input.LA(1);

                         
                        int index186_716 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_716);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA186_774 = input.LA(1);

                         
                        int index186_774 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_774);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA186_832 = input.LA(1);

                         
                        int index186_832 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_832);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA186_835 = input.LA(1);

                         
                        int index186_835 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_835);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA186_890 = input.LA(1);

                         
                        int index186_890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_890);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA186_948 = input.LA(1);

                         
                        int index186_948 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_948);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA186_1006 = input.LA(1);

                         
                        int index186_1006 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_1006);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA186_1084 = input.LA(1);

                         
                        int index186_1084 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_1084);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA186_1090 = input.LA(1);

                         
                        int index186_1090 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_1090);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA186_1136 = input.LA(1);

                         
                        int index186_1136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_1136);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA186_1142 = input.LA(1);

                         
                        int index186_1142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1063;}

                        else if ( (true) ) {s = 275;}

                         
                        input.seek(index186_1142);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA232_eotS =
        "\u0229\uffff";
    static final String DFA232_eofS =
        "\u0229\uffff";
    static final String DFA232_minS =
        "\1\5\2\0\6\6\64\uffff\1\u00fe\122\uffff\3\0\53\uffff\3\0\43\uffff"+
        "\3\0\74\uffff\3\0\55\uffff\3\0\54\uffff\3\0\u00a4\uffff";
    static final String DFA232_maxS =
        "\1\u0120\2\0\4\u0118\1\u011d\1\u0118\64\uffff\1\u0117\122\uffff"+
        "\3\0\53\uffff\3\0\43\uffff\3\0\74\uffff\3\0\55\uffff\3\0\54\uffff"+
        "\3\0\u00a4\uffff";
    static final String DFA232_acceptS =
        "\11\uffff\64\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\1\7\5\3\1"+
        "\5\3\uffff\5\3\1\10\34\4\10\3\1\5\3\uffff\1\10\34\4\2\3\1\7\2\3"+
        "\1\5\3\uffff\34\4\10\3\1\7\2\10\25\4\3\uffff\7\4\5\3\1\5\5\3\1\7"+
        "\32\4\3\uffff\7\4\3\3\1\7\5\3\1\10\2\3\1\5\3\3\25\4\3\uffff\7\4"+
        "\1\5\2\3\1\7\3\3\1\10\2\3\1\6\1\12\u0091\uffff";
    static final String DFA232_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\64\uffff\1\11\122\uffff\1"+
        "\12\1\13\1\14\53\uffff\1\15\1\16\1\17\43\uffff\1\20\1\21\1\22\74"+
        "\uffff\1\23\1\24\1\25\55\uffff\1\26\1\27\1\30\54\uffff\1\31\1\32"+
        "\1\33\u00a4\uffff}>";
    static final String[] DFA232_transitionS = {
            "\1\60\4\uffff\1\25\2\uffff\1\74\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\63\1\uffff"+
            "\1\65\1\61\1\62\1\64\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\71\1\52\1\2\1\53\1\54\1"+
            "\72\1\uffff\1\55\1\uffff\1\56\1\44\1\23\1\57\14\uffff\1\16\1"+
            "\17\1\20\5\uffff\1\66\1\67\1\70\u0086\uffff\1\6\16\uffff\1\7"+
            "\2\uffff\1\21\1\uffff\1\75\1\uffff\1\13\1\10\1\76\2\uffff\1"+
            "\14\1\15\11\uffff\1\12\2\uffff\1\73\1\uffff\1\3\2\uffff\1\22"+
            "\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\uffff\1\u00ab\1\u00aa\1"+
            "\u00b0\7\uffff\1\u008c\24\uffff\1\u00a4\12\uffff\1\u0089\3\uffff"+
            "\1\u00ac\1\u00ad\14\uffff\1\u0098\13\uffff\1\u008e\1\u008d\1"+
            "\u0097\1\u0096\1\u008b\1\u008a\1\u0092\1\u0091\1\u0090\1\u0095"+
            "\1\u0094\1\u0093\u009f\uffff\1\u00ae\1\uffff\1\u00a3\2\uffff"+
            "\1\u00af\1\u0099\1\u00a8\1\u009c\3\uffff\1\u008f\2\uffff\1\u00a7"+
            "\1\u00a9\1\u00a5\1\u00a6\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u009e"+
            "\1\u009d\1\u009a\1\u009b",
            "\1\u00da\1\u00db\1\u00dc\1\u00dd\1\uffff\1\u00d4\1\u00d3\1"+
            "\u00d9\7\uffff\1\u00b7\24\uffff\1\u00cd\12\uffff\1\u00e0\3\uffff"+
            "\1\u00d5\1\u00d6\14\uffff\1\u00c1\13\uffff\1\u00bc\1\u00bb\1"+
            "\u00df\1\u00de\1\u00b6\1\u00b5\1\u00c0\1\u00bf\1\u00be\1\u00ba"+
            "\1\u00b9\1\u00b8\u009f\uffff\1\u00d7\1\uffff\1\u00cc\2\uffff"+
            "\1\u00d8\1\u00c2\1\u00d1\1\u00c5\3\uffff\1\u00bd\2\uffff\1\u00d0"+
            "\1\u00d2\1\u00ce\1\u00cf\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00c7"+
            "\1\u00c6\1\u00c3\1\u00c4",
            "\1\u00ff\1\u0100\1\u0101\1\u0102\1\uffff\1\u00f9\1\u00f8\1"+
            "\u00fe\7\uffff\1\u0108\24\uffff\1\u00f2\12\uffff\1\u010b\3\uffff"+
            "\1\u00fa\1\u00fb\14\uffff\1\u010c\13\uffff\1\u00e2\1\u00e1\1"+
            "\u010a\1\u0109\1\u0107\1\u0106\1\u00e6\1\u00e5\1\u00e4\1\u0105"+
            "\1\u0104\1\u0103\u009f\uffff\1\u00fc\1\uffff\1\u00f1\2\uffff"+
            "\1\u00fd\1\u00e7\1\u00f6\1\u00ea\3\uffff\1\u00e3\2\uffff\1\u00f5"+
            "\1\u00f7\1\u00f3\1\u00f4\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00ec"+
            "\1\u00eb\1\u00e8\1\u00e9",
            "\1\u0129\1\u012a\1\u012b\1\u012c\1\uffff\1\u0120\1\u011f\1"+
            "\u0128\7\uffff\1\u0137\24\uffff\1\u0119\12\uffff\1\u0138\3\uffff"+
            "\1\u0121\1\u0122\14\uffff\1\u010d\13\uffff\1\u0131\1\u0130\1"+
            "\u0134\1\u0133\1\u0136\1\u0135\1\u0125\1\u0124\1\u0123\1\u012f"+
            "\1\u012e\1\u012d\u009f\uffff\1\u0126\1\uffff\1\u0118\2\uffff"+
            "\1\u0127\1\u010e\1\u011d\1\u0111\3\uffff\1\u0132\2\uffff\1\u011c"+
            "\1\u011e\1\u011a\1\u011b\1\u0114\1\u0115\1\u0116\1\u0117\1\u0113"+
            "\1\u0112\1\u010f\1\u0110",
            "\1\u0159\1\u015a\1\u015b\1\u015c\1\uffff\1\u0150\1\u014f\1"+
            "\u0158\7\uffff\1\u0163\24\uffff\1\u0149\12\uffff\1\u0160\3\uffff"+
            "\1\u0151\1\u0152\14\uffff\1\u0166\13\uffff\1\u0168\1\u0167\1"+
            "\u0165\1\u0164\1\u0162\1\u0161\1\u0155\1\u0154\1\u0153\1\u015f"+
            "\1\u015e\1\u015d\u009f\uffff\1\u0156\1\uffff\1\u0148\1\u0139"+
            "\1\u013c\1\u0157\1\u013e\1\u014d\1\u0141\1\u013d\1\u013b\1\uffff"+
            "\1\u0169\2\uffff\1\u014c\1\u014e\1\u014a\1\u014b\1\u0144\1\u0145"+
            "\1\u0146\1\u0147\1\u0143\1\u0142\1\u013f\1\u0140\4\uffff\1\u013a",
            "\1\u0188\1\u0189\1\u018a\1\u018b\1\uffff\1\u017f\1\u017e\1"+
            "\u0187\7\uffff\1\u0192\24\uffff\1\u0178\12\uffff\1\u018f\3\uffff"+
            "\1\u0180\1\u0181\14\uffff\1\u0193\13\uffff\1\u018e\1\u018d\1"+
            "\u0195\1\u0194\1\u0191\1\u0190\1\u0184\1\u0183\1\u0182\1\u016c"+
            "\1\u016b\1\u016a\u009f\uffff\1\u0185\1\uffff\1\u0177\2\uffff"+
            "\1\u0186\1\u016d\1\u017c\1\u0170\3\uffff\1\u018c\2\uffff\1\u017b"+
            "\1\u017d\1\u0179\1\u017a\1\u0173\1\u0174\1\u0175\1\u0176\1\u0172"+
            "\1\u0171\1\u016e\1\u016f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0197\4\uffff\1\u0197\23\uffff\1\u0196",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_eotS);
    static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_eofS);
    static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS);
    static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS);
    static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS);
    static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_specialS);
    static final short[][] DFA232_transition;

    static {
        int numStates = DFA232_transitionS.length;
        DFA232_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA232_transition[i] = DFA.unpackEncodedString(DFA232_transitionS[i]);
        }
    }

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;
        }
        public String getDescription() {
            return "1452:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA232_0 = input.LA(1);

                         
                        int index232_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_0==LAST) ) {s = 1;}

                        else if ( (LA232_0==LW) ) {s = 2;}

                        else if ( (LA232_0==NUM_INT) ) {s = 3;}

                        else if ( (LA232_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA232_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA232_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA232_0==IDENT) ) {s = 7;}

                        else if ( (LA232_0==QUESTION) ) {s = 8;}

                        else if ( (LA232_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA232_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA232_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA232_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA232_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA232_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA232_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA232_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA232_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA232_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA232_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA232_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA232_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA232_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA232_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA232_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA232_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA232_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA232_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA232_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA232_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA232_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA232_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA232_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA232_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA232_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA232_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA232_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA232_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA232_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA232_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA232_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA232_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA232_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA232_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA232_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA232_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA232_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA232_0==INDEX) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA232_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA232_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA232_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA232_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA232_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA232_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA232_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA232_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA232_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA232_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA232_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA232_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA232_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA232_0==STAR) ) {s = 61;}

                        else if ( (LA232_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 62;}

                         
                        input.seek(index232_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA232_1 = input.LA(1);

                         
                        int index232_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 99;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 60;}

                         
                        input.seek(index232_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA232_2 = input.LA(1);

                         
                        int index232_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 136;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 60;}

                         
                        input.seek(index232_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA232_3 = input.LA(1);

                         
                        int index232_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA232_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA232_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA232_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA232_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA232_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA232_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA232_3==TIMEPERIOD_SECONDS) ) {s = 144;}

                        else if ( (LA232_3==TIMEPERIOD_SECOND) ) {s = 145;}

                        else if ( (LA232_3==TIMEPERIOD_SEC) ) {s = 146;}

                        else if ( (LA232_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA232_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA232_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA232_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA232_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA232_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA232_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA232_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA232_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA232_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA232_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA232_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA232_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA232_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA232_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA232_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA232_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA232_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA232_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA232_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA232_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA232_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA232_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA232_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA232_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA232_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA232_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA232_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA232_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA232_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA232_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA232_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA232_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA232_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 180;}

                         
                        input.seek(index232_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA232_4 = input.LA(1);

                         
                        int index232_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA232_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA232_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA232_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA232_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA232_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA232_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA232_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA232_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA232_4==TIMEPERIOD_SECONDS) ) {s = 190;}

                        else if ( (LA232_4==TIMEPERIOD_SECOND) ) {s = 191;}

                        else if ( (LA232_4==TIMEPERIOD_SEC) ) {s = 192;}

                        else if ( (LA232_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA232_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA232_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA232_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA232_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA232_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA232_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA232_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA232_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA232_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA232_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA232_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA232_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA232_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA232_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA232_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA232_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA232_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA232_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA232_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA232_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA232_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA232_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA232_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA232_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA232_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA232_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA232_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA232_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA232_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA232_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA232_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 224;}

                         
                        input.seek(index232_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA232_5 = input.LA(1);

                         
                        int index232_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA232_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA232_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA232_5==TIMEPERIOD_SECONDS) ) {s = 228;}

                        else if ( (LA232_5==TIMEPERIOD_SECOND) ) {s = 229;}

                        else if ( (LA232_5==TIMEPERIOD_SEC) ) {s = 230;}

                        else if ( (LA232_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA232_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA232_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA232_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA232_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA232_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA232_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA232_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA232_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA232_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA232_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA232_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA232_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA232_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA232_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA232_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA232_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA232_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA232_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA232_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA232_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA232_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA232_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA232_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA232_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA232_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA232_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA232_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA232_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA232_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA232_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA232_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA232_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA232_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA232_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA232_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA232_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA232_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 268;}

                         
                        input.seek(index232_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA232_6 = input.LA(1);

                         
                        int index232_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA232_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA232_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA232_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA232_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA232_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA232_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA232_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA232_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA232_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA232_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA232_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA232_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA232_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA232_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA232_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA232_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA232_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA232_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA232_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA232_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA232_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA232_6==TIMEPERIOD_SECONDS) ) {s = 291;}

                        else if ( (LA232_6==TIMEPERIOD_SECOND) ) {s = 292;}

                        else if ( (LA232_6==TIMEPERIOD_SEC) ) {s = 293;}

                        else if ( (LA232_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA232_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA232_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA232_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA232_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA232_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA232_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA232_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA232_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA232_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA232_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA232_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA232_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA232_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA232_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA232_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA232_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA232_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA232_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 312;}

                         
                        input.seek(index232_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA232_7 = input.LA(1);

                         
                        int index232_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA232_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA232_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA232_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA232_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA232_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA232_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA232_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA232_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA232_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA232_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA232_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA232_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA232_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA232_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA232_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA232_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA232_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA232_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA232_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA232_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA232_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA232_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA232_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA232_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA232_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA232_7==TIMEPERIOD_SECONDS) ) {s = 339;}

                        else if ( (LA232_7==TIMEPERIOD_SECOND) ) {s = 340;}

                        else if ( (LA232_7==TIMEPERIOD_SEC) ) {s = 341;}

                        else if ( (LA232_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA232_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA232_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA232_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA232_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA232_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA232_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA232_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA232_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA232_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA232_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA232_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA232_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA232_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA232_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA232_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA232_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA232_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA232_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA232_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 361;}

                         
                        input.seek(index232_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA232_8 = input.LA(1);

                         
                        int index232_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA232_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA232_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA232_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA232_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA232_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA232_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA232_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA232_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA232_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA232_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA232_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA232_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA232_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA232_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA232_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA232_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA232_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA232_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA232_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA232_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA232_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA232_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA232_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA232_8==TIMEPERIOD_SECONDS) ) {s = 386;}

                        else if ( (LA232_8==TIMEPERIOD_SECOND) ) {s = 387;}

                        else if ( (LA232_8==TIMEPERIOD_SEC) ) {s = 388;}

                        else if ( (LA232_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA232_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA232_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA232_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA232_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA232_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA232_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA232_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA232_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA232_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA232_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA232_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA232_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA232_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA232_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA232_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA232_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 405;}

                         
                        input.seek(index232_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA232_61 = input.LA(1);

                         
                        int index232_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_61==DIV) && (synpred11_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA232_61==COMMA||LA232_61==RPAREN) ) {s = 407;}

                         
                        input.seek(index232_61);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA232_144 = input.LA(1);

                         
                        int index232_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_144);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA232_145 = input.LA(1);

                         
                        int index232_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_145);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA232_146 = input.LA(1);

                         
                        int index232_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_146);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA232_190 = input.LA(1);

                         
                        int index232_190 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_190);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA232_191 = input.LA(1);

                         
                        int index232_191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_191);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA232_192 = input.LA(1);

                         
                        int index232_192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_192);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA232_228 = input.LA(1);

                         
                        int index232_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_228);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA232_229 = input.LA(1);

                         
                        int index232_229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_229);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA232_230 = input.LA(1);

                         
                        int index232_230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_230);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA232_291 = input.LA(1);

                         
                        int index232_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_291);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA232_292 = input.LA(1);

                         
                        int index232_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_292);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA232_293 = input.LA(1);

                         
                        int index232_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_293);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA232_339 = input.LA(1);

                         
                        int index232_339 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_339);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA232_340 = input.LA(1);

                         
                        int index232_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_340);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA232_341 = input.LA(1);

                         
                        int index232_341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_341);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA232_386 = input.LA(1);

                         
                        int index232_386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_386);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA232_387 = input.LA(1);

                         
                        int index232_387 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_387);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA232_388 = input.LA(1);

                         
                        int index232_388 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 405;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 395;}

                         
                        input.seek(index232_388);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 232, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1570 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0040000040000104L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1575 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1593 = new BitSet(new long[]{0x0040020008000010L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1599 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1629 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1659 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x8001000000000000L,0x004000018A401848L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1719 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x8001000000000000L,0x00400001CA401848L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1831 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x0001000000000000L,0x004000018A401840L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1872 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x8001000000000000L,0x00400001CA401840L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2004 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x4001000000000000L,0x004000018E401840L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2010 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x0001000000000000L,0x004000018A401840L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2052 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0xC001000000000000L,0x00400001CE401840L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2058 = new BitSet(new long[]{0x0040020008000010L,0x0000001380000000L,0x0000000000000000L,0x8001000000000000L,0x00400001CA401840L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2141 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2144 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2150 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2153 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2160 = new BitSet(new long[]{0x0104300000010002L,0x0000002400000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2164 = new BitSet(new long[]{0x0104300000010002L,0x0000000400000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2170 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2173 = new BitSet(new long[]{0x0104300000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2180 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2183 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2186 = new BitSet(new long[]{0x0104200000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2193 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2196 = new BitSet(new long[]{0x0104000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2203 = new BitSet(new long[]{0x0130800080004000L,0x0000040400022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2206 = new BitSet(new long[]{0x0100000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2213 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2216 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2219 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x0000000188400040L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2246 = new BitSet(new long[]{0x0040000008000000L,0x0000001000005000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2255 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2258 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2315 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2319 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2364 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2368 = new BitSet(new long[]{0x0000000000020000L,0x0000000000004000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2387 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2389 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2392 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2394 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2402 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2452 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2454 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2460 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2462 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2465 = new BitSet(new long[]{0x0100300400010002L,0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2469 = new BitSet(new long[]{0x0100300000010002L,0x0000000400000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2475 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2477 = new BitSet(new long[]{0x0100300000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2486 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2488 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2490 = new BitSet(new long[]{0x0100200000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2497 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2499 = new BitSet(new long[]{0x0100000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2506 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2508 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2510 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x0000000188400040L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2586 = new BitSet(new long[]{0x0000000000020000L,0x0000000000004000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2605 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2607 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2610 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2612 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2619 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2672 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2674 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2678 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2680 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2685 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2718 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2771 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2775 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2780 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2822 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2827 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment2854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2856 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2887 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2928 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2934 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000040000006L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2939 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000040000006L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2944 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000040000006L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2953 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000004L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2957 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000004L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2961 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000004L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2976 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2995 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3012 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3015 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3104 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007A7BFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA401850L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3107 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3133 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3181 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList3228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3305 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007A7BFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA401850L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3348 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3376 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3421 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3427 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_columnList3472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList3474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_columnList3477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList3479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_columnList3483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3518 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3556 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3559 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3602 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3606 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3610 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3613 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3634 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3650 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3717 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3720 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3723 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3726 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3743 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3804 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3810 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3816 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause3822 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_selectionList_in_selectClause3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3859 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3909 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3912 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3976 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4014 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4018 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4022 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4026 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4035 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4040 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_streamExpression4047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4051 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4057 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4064 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4152 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4158 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4165 = new BitSet(new long[]{0x0000800000000000L,0x0000040000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4170 = new BitSet(new long[]{0x0000800000000000L,0x0000040000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4176 = new BitSet(new long[]{0x0000800000000000L,0x0000040000000002L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4182 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4188 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4238 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4240 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4245 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4276 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4278 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4281 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4308 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4347 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4393 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4397 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4401 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4405 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4409 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4517 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000D0L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000D0L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem4722 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem4724 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem4726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression4751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression4753 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression4755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression4790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression4792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression4796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression4880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression4882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression4884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression4887 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018DCL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression4889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression4892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_viewExpression4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression4953 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019DCL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression4955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression4958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5000 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5040 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5067 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5152 = new BitSet(new long[]{0x0030800080004002L,0x0000000000022000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5167 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5171 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5175 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5179 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5247 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5253 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5309 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_outputLimit5311 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5473 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5521 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5527 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x0000000188400040L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x0000000188400040L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5604 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5608 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5612 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5616 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5620 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5625 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5661 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_whenClause5664 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5666 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_whenClause5669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5682 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_elseClause5685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5712 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5715 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5718 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5732 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_caseExpression5734 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5736 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5739 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression5766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5777 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression5782 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5784 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5816 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression5821 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5823 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006020L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression5860 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression5863 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression5866 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006020L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression5891 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5907 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000018001L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression5920 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5938 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5952 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression5954 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression5968 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression5982 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6012 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000018001L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6047 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018DCL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6052 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000018001L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6057 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000018001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6185 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6217 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6221 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6225 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6229 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6288 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018DCL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6394 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6433 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6439 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000608L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6464 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000208L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6493 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000208L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6698 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression6750 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6752 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression6755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression6757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression6809 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery6873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6904 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6910 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400040L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression6958 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression6961 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400040L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001800010L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression6984 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression6987 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression6990 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001800010L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7009 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7034 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7169 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7175 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7178 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr7181 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7191 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7199 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7235 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7242 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7247 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x8000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7258 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7264 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7315 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CE4018D4L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7321 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7356 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7360 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7365 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7380 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7384 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7389 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7404 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7416 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7421 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7456 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7460 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7465 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7480 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7484 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7489 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7504 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7508 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7513 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7538 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7543 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7549 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7565 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7571 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7592 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7610 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7637 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7640 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7663 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7698 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7703 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7709 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_firstAggregation7713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation7715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation7741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation7743 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_ALL_in_lastAggregation7748 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation7754 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_lastAggregation7758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation7760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc7787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_MIN_in_maxFunc7792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc7796 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_maxFunc7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7802 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_maxFunc7805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7808 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_maxFunc7811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc7818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction7837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction7842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction7855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_libFunction7857 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction7861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction7863 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018DCL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction7866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction7870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent7900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent7907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent7919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs7937 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs7942 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs7949 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7966 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList7968 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018C4L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8016 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8057 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8062 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8064 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8096 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8101 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8103 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8138 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8147 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8214 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8220 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8228 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8234 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8358 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8363 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8407 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8413 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000104L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8417 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix8425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_AT_in_observerExpression8499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8502 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019DCL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_guardExpression8558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression8563 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019DCL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression8567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression8571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000008000002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000602L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000200L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000202L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000200L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange8821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9028 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018DCL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9123 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9126 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9128 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9130 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9134 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9139 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9144 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9203 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9253 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9256 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9308 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9373 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9384 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018DCL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9563 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList9605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9608 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4018D4L});
    public static final BitSet FOLLOW_expression_in_expressionList9611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9642 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000003938007AFFFL,0x0000000000000000L,0x8001000000000000L,0x00400001CA4019D4L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9778 = new BitSet(new long[]{0x0600000000000002L,0x000000000E000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar9856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand9876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand9889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand9901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand9903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_number_in_frequencyOperand9906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand9910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand9912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand9961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_number_in_rangeOperand9973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10093 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10097 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10099 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000D0L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000D0L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10269 = new BitSet(new long[]{0xC03801E807FC4420L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000184L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10487 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10501 = new BitSet(new long[]{0xC03801E807FC4422L,0x000003800007A7BFL,0x0000000000000000L,0x8000000000000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent10776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent10799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent10806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent10813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent10820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent10827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent10834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent10841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent10862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod10894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L,0x00000001884000C0L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart10982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart10986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_substitution_in_dayPart10988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart10992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart10996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11108 = new BitSet(new long[]{0x0000000000200000L,0x0000000001800000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11112 = new BitSet(new long[]{0x0000000000200000L,0x0000000001800000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11114 = new BitSet(new long[]{0x0000000000200000L,0x0000000001800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11176 = new BitSet(new long[]{0x0000000000000000L,0x000000000E000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11180 = new BitSet(new long[]{0x0000000000000000L,0x000000000E000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11182 = new BitSet(new long[]{0x0000000000000000L,0x000000000E000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11244 = new BitSet(new long[]{0x0000000000000000L,0x0000000070000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11248 = new BitSet(new long[]{0x0000000000000000L,0x0000000070000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11250 = new BitSet(new long[]{0x0000000000000000L,0x0000000070000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000188400040L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000188400040L});
    public static final BitSet FOLLOW_number_in_numberconstant11500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9757 = new BitSet(new long[]{0x0000000000000002L});

}