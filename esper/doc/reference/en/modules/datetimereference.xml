<chapter id="datetimereference">
    <title>EPL Reference: Date-Time Methods</title>
        
	<sect1 id="datetime-intro">
		<title>Overview</title>
		<indexterm><primary>methods</primary><secondary>date-time</secondary></indexterm>
		
		<para>
			EPL date-time methods work on date-time values to perform common tasks such as adding or subtracting time periods, setting or rounding calendar fields and querying fields.
		</para>
		
		<para>
			Date-time methods operate on any expression or event property that returns either a long-type millisecond value, a <literal>java.util.Calendar</literal> or <literal>java.util.Date</literal>. Consider the built-in single-row function <literal>current_timestamp</literal> for use with date-time methods.
		</para>

		<para>
			The below table summarizes the built-in date-time methods available:
		</para>

		<table frame="topbot" id="datetime_method_table" revision="2">
			<title>Date-Time Methods</title>
			<tgroup cols="2">
				<colspec colwidth="1.0*"/>
				<colspec colwidth="2.0*"/>
				<thead>
					<row>
						<entry>Method</entry>
						<entry>Result</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>format()</entry>
						<entry>
							<para>
								Formats the date-time returning a string.
							</para>
							<para>
								<xref linkend="datetime-method-format"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>get(field)</entry>
						<entry>
							<para>
								Returns the value of the given date-time value field.
							</para>
							<para>
								<xref linkend="datetime-method-get"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry><para>getMillisOfSecond()</para>
<para>getSecondOfMinute()</para>
<para>getMinuteOfHour()</para>
<para>getHourOfDay()</para>
<para>getDayOfWeek()</para>
<para>getDayOfMonth()</para>
<para>getDayOfYear()</para>
<para>getWeekyear()</para>
<para>getMonthOfYear()</para>
<para>getYear()</para>
<para>getEra()</para></entry>
						<entry>
							<para>
								Returns the value of the given date-time value field.
							</para>
							<para>
								<xref linkend="datetime-method-getitem"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>minus(duration-millis)</entry>
						<entry>
							<para>
								Returns a date-time with the specified duration in long-type milliseconds taken away.
							</para>
							<para>
								<xref linkend="datetime-method-minus"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>minus(time-period)</entry>
						<entry>
							<para>
								Returns a date-time with the specified duration in time-period syntax taken away.
							</para>
							<para>
								<xref linkend="datetime-method-minus"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>plus(duration-millis)</entry>
						<entry>
							<para>
								Returns a date-time with the specified duration in long-type milliseconds added.
							</para>
							<para>
								<xref linkend="datetime-method-plus"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>plus(time-period)</entry>
						<entry>
							<para>
								Returns a date-time with the specified duration in time-period syntax added.
							</para>
							<para>
								<xref linkend="datetime-method-plus"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>roundCeiling(field)</entry>
						<entry>
							<para>
								Returns a date-time rounded to the highest whole unit of the date-time field.
							</para>
							<para>
								<xref linkend="datetime-method-roundceiling"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>roundFloor(field)</entry>
						<entry>
							<para>
								Returns a date-time rounded to the lowest whole unit of the date-time field.
							</para>
							<para>
								<xref linkend="datetime-method-roundfloor"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>roundHalf(field)</entry>
						<entry>
							<para>
								Returns a date-time rounded to the nearest whole unit of the date-time field.
							</para>
							<para>
								<xref linkend="datetime-method-roundhalf"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>set(field, value)</entry>
						<entry>
							<para>
								Returns a date-time with the specified field set to the value returned by a value expression.
							</para>
							<para>
								<xref linkend="datetime-method-set"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>withDate(year,month,day)</entry>
						<entry>
							<para>
								Returns a date-time with the specified date, retaining the time fields.
							</para>
							<para>
								<xref linkend="datetime-method-withdate"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>withMax(field)</entry>
						<entry>
							<para>
								Returns a date-time with the field set to the maximum value for the field.
							</para>
							<para>
								<xref linkend="datetime-method-withmin"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>withMin(field)</entry>
						<entry>
							<para>
								Returns a date-time with the field set to the minimum value for the field.
							</para>
							<para>
								<xref linkend="datetime-method-withmax"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>withTime(hour,minute,sec,msec)</entry>
						<entry>
							<para>
								Returns a date-time with the specified time, retaining the date fields.
							</para>
							<para>
								<xref linkend="datetime-method-withtime"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>toCalendar()</entry>
						<entry>
							<para>
								Returns the <literal>Calendar</literal> object for this date-time value.
							</para>
							<para>
								<xref linkend="datetime-method-tocal"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>toDate()</entry>
						<entry>
							<para>
								Returns the <literal>Date</literal> object for this date-time value.
							</para>
							<para>
								<xref linkend="datetime-method-todate"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>toMillisec()</entry>
						<entry>
							<para>
								Returns the long-type milliseconds value for this date-time value.
							</para>
							<para>
								<xref linkend="datetime-method-tomsec"/>.
							</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>		
	</sect1>
		
	<sect1 id="datetime-howtouse">
		<title>How to Use</title>
		
		<sect2 id="datetime-howtouse-synopsis">
			<title>Syntax</title>

			<para>
				The syntax for date-time methods is the same syntax as for any chained invocation:
			</para>
			<synopsis><emphasis>input_val</emphasis>.<emphasis>datetime_method_name</emphasis>( [<emphasis>method_parameter</emphasis> [, <emphasis>method_parameter</emphasis> [,...]]])
	  .[ <emphasis>datetime_method_name</emphasis>(...) [...]] </synopsis>
	
			<para>
				Following the <emphasis>input_val</emphasis> input value is the <literal>.</literal> (dot) operator and the <emphasis>datetime_method_name</emphasis> date-time method name. It follows in parenthesis a comma-separated list of method parameter expressions. Additional date-time methods can be chained thereafter.
			</para>
			
			<para>
				The input value can be any expression or event property that returns a value of type long or <literal>java.util.Calendar</literal> or <literal>java.util.Date</literal>. If the input value is null, the expression result is also null.
			</para>
			
			<para>
				The input value can also be an event. In this case the event type of the event must have the timestamp special property defined and optionally also the duration special property. 
			</para>

			<para>
				The following example EPL statement employs the <literal>withTime</literal> date-time method. This example returns the current engine time with the time-part set to 1 am:
			</para>
			<programlisting><![CDATA[select current_timestamp.withTime(1, 0, 0, 0) as time1am from MyEvent]]></programlisting>
	
			<para>
				As date-time methods can be chained, this EPL is equivalent:
			</para>
			<programlisting><![CDATA[select current_timestamp.set('hour', 1).set('min', 0).set('sec', 0).set('msec', 0) as time1am
from MyEvent]]></programlisting>
	
			<para>
				The statement above outputs in field <literal>time1am</literal> a long-type millisecond-value reflecting 1am on the same date as engine time. Since the input value is provided by the built-in <literal>current_timestamp</literal> function which returns current engine date as a long-type millisecond value the output is also a long-type millisecond value.
			</para>
			
			<para>
				You may apply a date-time method to an event property.
			</para>
			
			<para>
				Assume that the <literal>RFIDEvent</literal> event type has a <literal>Date</literal>-type property by name <literal>timeTaken</literal>. The following query rounds each time-taken value down to the nearest minute and outputs a <literal>Date</literal>-type value in column <literal>timeTakenRounded</literal>:
			</para>
			<programlisting><![CDATA[select timeTaken.roundFloor('min') as timeTakenRounded from RFIDEvent]]></programlisting>
			
			<para>
				You may apply a date-time method to events. This examples assumes that the RFIDEvent and WifiEvent event types both have a timestamp property defined. The EPL compares the timestamps of the RFIDEvent and the WifiEvent: 
			</para>			
			<programlisting><![CDATA[select rfid.after(wifi) as isAfter from RFIDEvent.std:lastevent() rfid, WifiEvent.std:lastevent() wifi]]></programlisting>

			<para>
			   For comparing date-time values and considering duration we recommend any of the interval algebra methods. You may also compare millisecond values using the <literal>between</literal> or <literal>in</literal> ranges and inverted ranges or relational operators (<literal>&gt; , &lt;, &gt;=, &lt;=)</literal>.
			</para>
						
			<para>
				From a performance perspective, the date-time method evaluation ensures that for each unique chain of date-time methods only a single calendar objects is copied or created when necessary.
			</para>			
		</sect2>
	</sect1>

	<sect1 id="datetime-method-calref">
		<title>Calendar and Formatting Reference</title>
		
		<sect2 id="datetime-method-format">
		  <title>Format</title>
		  
		  	<para>
				The <literal>format</literal> date-time method formats the date-time returning a string. 
			</para>
			
			<para>
				The method takes no parameters. It returns the date-time value formatted using the default locale format obtained from <literal>new SimpleDateFormat()</literal>.
			</para>

			<para>
				The example below outputs the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.format() as timeTakenStr from RFIDEvent</programlisting>
		</sect2>
				
		<sect2 id="datetime-method-get">
		  <title>Get (By Field)</title>
		  	<para>
				The <literal>get</literal> date-time method returns the value of the given date-time value field.
			</para>
			
			<para>
				The method takes a single string-constant field name as parameter. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The method returns the numeric value of the field within the date-time value. The value returned adheres to <literal>Calendar</literal>-class semantics: For example, the value for <literal>month</literal> starts at zero and has a maximum of 11.
			</para>

			<para>
				The example below outputs the month value of the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.get('month') as timeTakenMonth from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-getitem">
		  <title>Get (By Name) </title>
		  	<para>
				The following list of getter-methods are available:  <literal>getMillisOfSecond()</literal>, <literal>getSecondOfMinute()</literal>, <literal>getMinuteOfHour()</literal>, <literal>getHourOfDay()</literal>, <literal>getDayOfWeek()</literal>, <literal>getDayOfMonth()</literal>, <literal>getDayOfYear()</literal>, <literal>getWeekYear()</literal>, <literal>getMonthOfYear()</literal>, <literal>getYear()</literal> and <literal>getEra()</literal>.
			</para>
			
			<para>
				All get-methods take no parameter and return the numeric value of the field within the date-time value. The value returned adheres to <literal>Calendar</literal>-class semantics: For example, the value for <literal>month</literal> starts at zero and has a maximum of 11.
			</para>

			<para>
				The example below outputs the month value of the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.getMonthOfYear() as timeTakenMonth from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-minus">
		  <title>Minus</title>
		  	<para>
				The <literal>minus</literal> date-time method returns a date-time with the specified duration taken away.
			</para>
			
			<para>
				The method has two versions: The first version takes the duration as a long-type millisecond value. The second version takes the duration as a time-period expression, see <xref linkend="epl-syntax-time-periods"/>.
			</para>
			
			<para>
				The example below  demonstrates the time-period parameter to subtract two minutes from the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.minus(2 minutes) as timeTakenMinus2Min from RFIDEvent</programlisting>

			<para>
				The next example is equivalent but passes a millisecond-value instead:
			</para>
			<programlisting>select timeTaken.minus(2*60*1000) as timeTakenMinus2Min from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-plus">
		  <title>Plus</title>
		  	<para>
				The <literal>plus</literal> date-time method returns a date-time with the specified duration added.
			</para>
			
			<para>
				The method has two versions: The first version takes the duration as a long-type millisecond value. The second version takes the duration as a time-period expression, see <xref linkend="epl-syntax-time-periods"/>.
			</para>
			
			<para>
				The next example adds two minutes to the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.plus(2 minutes) as timeTakenPlus2Min from RFIDEvent</programlisting>

			<para>
				The next example is equivalent but passes a millisecond-value instead:
			</para>
			<programlisting>select timeTaken.plus(2*60*1000) as timeTakenPlus2Min from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-roundceiling">
		  <title>RoundCeiling</title>
		  	<para>
				The <literal>roundCeiling</literal> date-time method rounds to the highest whole unit of the date-time field.
			</para>
			
			<para>
				The method takes a single string-constant field name as parameter. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The next example rounds-to-ceiling the minutes of the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.roundCeiling('min') as timeTakenRounded from RFIDEvent</programlisting>

			<para>
				If the input time is <literal>2002-05-30 09:01:23.050</literal>, for example, the output is <literal>2002-05-30 09:02:00.000</literal> (example timestamps are in format <literal>yyyy-MM-dd HH:mm:ss.SSS</literal>).
			</para>
		</sect2>
		
		<sect2 id="datetime-method-roundfloor">
		  <title>RoundFloor</title>
		  	<para>
				The <literal>roundFloor</literal> date-time method rounds to the lowest whole unit of the date-time field.
			</para>
			
			<para>
				The method takes a single string-constant field name as parameter. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The next example rounds-to-floor the minutes of the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.roundFloor('min') as timeTakenRounded from RFIDEvent</programlisting>

			<para>
				If the input time is <literal>2002-05-30 09:01:23.050</literal>, for example, the output is <literal>2002-05-30 09:01:00.000</literal> (example timestamps are in format <literal>yyyy-MM-dd HH:mm:ss.SSS</literal>).
			</para>
		</sect2>
		
		<sect2 id="datetime-method-roundhalf">
		  <title>RoundHalf</title>
		  	<para>
				The <literal>roundFloor</literal> date-time method rounds to the nearest whole unit of the date-time field.
			</para>
			
			<para>
				The method takes a single string-constant field name as parameter. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The next example rounds the minutes of the time-taken property value of the RFID event:
			</para>
			<programlisting>select timeTaken.roundHalf('min') as timeTakenRounded from RFIDEvent</programlisting>

			<para>
				The following table provides a few examples of the rounding (example timestamps are in format <literal>yyyy-MM-dd HH:mm:ss.SSS</literal>):
			</para>

			<table frame="topbot" id="datetime_roundhalf" revision="2">
				<title>RoundHalf Examples</title>
				<tgroup cols="2">
					<colspec colwidth="1.0*"/>
					<colspec colwidth="1.0*"/>
					<thead>
						<row>
							<entry>Input</entry>
							<entry>Output</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>2002-05-30 09:01:23.050</entry>
							<entry>2002-05-30 09:01:00.000</entry>
						</row>
						<row>
							<entry>2002-05-30 09:01:29.999</entry>
							<entry>2002-05-30 09:01:00.000</entry>
						</row>
						<row>
							<entry>2002-05-30 09:01:30.000</entry>
							<entry>2002-05-30 09:02:00.000</entry>
						</row>
					</tbody>
				</tgroup>
			</table>		
		</sect2>
				
		<sect2 id="datetime-method-set">
		  <title>Set (By Field)</title>

		  	<para>
				The <literal>set</literal> date-time method returns a date-time with the specified field set to the value returned by an expression.
			</para>
			
			<para>
				The method takes a string-constant field name and an expression returning an integer-value as parameters. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The method returns the new date-time value with the field set to the provided value. Note that value adheres to <literal>Calendar</literal>-class semantics: For example, the value for <literal>month</literal> starts at zero and has a maximum of 11.
			</para>

			<para>
				The example below outputs the time-taken with the value for month set to April:
			</para>
			<programlisting>select timeTaken.set('month', 3) as timeTakenMonth from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-withdate">
		  <title>WithDate</title>
		  	<para>
				The <literal>withDate</literal> date-time method returns a date-time with the specified date, retaining the time fields.
			</para>
			
			<para>
				The method takes three expressions as parameters: An expression for year, month and day.
			</para>

			<para>
				The method returns the new date-time value with the date fields set to the provided values. For expressions returning null the method ignores the field for which null is returned. Note the <literal>Calendar</literal>-class semantics: For example, the value for <literal>month</literal> starts at zero and has a maximum of 11.
			</para>

			<para>
				The example below outputs the time-taken with the date set to May 30, 2002:
			</para>
			<programlisting>select timeTaken.withDate(2002, 4, 30) as timeTakenDated from RFIDEvent</programlisting>
		</sect2>		
		
		<sect2 id="datetime-method-withmin">
		  <title>WithMax</title>
		  	<para>
				The <literal>withMax</literal> date-time method returns a date-time with the field set to the maximum value for the field.
			</para>
			
			<para>
				The method takes a string-constant field name as parameter. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The method returns the new date-time value with the specific date field set to the maximum value.
			</para>

			<para>
				The example below outputs the time-taken property value with the second-part as 59 seconds:
			</para>
			<programlisting>select timeTaken.withMax('sec') as timeTakenMaxSec from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-withmax">
		  <title>WithMin</title>
		  	<para>
				The <literal>withMin</literal> date-time method returns a date-time with the field set to the minimum value for the field.
			</para>
			
			<para>
				The method takes a string-constant field name as parameter. Please see <xref linkend="epl-syntax-time-periods"/> for a list of recognized keywords (not case-sensitive).
			</para>

			<para>
				The method returns the new date-time value with the specific date field set to the minimum value.
			</para>

			<para>
				The example below outputs the time-taken property value with the second-part as 0 seconds:
			</para>
			<programlisting>select timeTaken.withMin('sec') as timeTakenMaxSec from RFIDEvent</programlisting>
		</sect2>
		
		<sect2 id="datetime-method-withtime">
		  <title>WithTime</title>
		  	<para>
				The <literal>withTime</literal> date-time method returns a date-time with the specified time, retaining the date fields.
			</para>
			
			<para>
				The method takes four expressions as parameters: An expression for hour, minute, second and millisecond.
			</para>

			<para>
				The method returns the new date-time value with the time fields set to the provided values. For expressions returning null the method ignores the field for which null is returned.
			</para>

			<para>
				The example below outputs the time-taken with the time set to 9am:
			</para>
			<programlisting>select timeTaken.withTime(9, 0, 0, 0) as timeTakenDated from RFIDEvent</programlisting>
		</sect2>
			
		<sect2 id="datetime-method-tocal">
		  <title>ToCalendar</title>
		  	<para>
				The <literal>toCalendar</literal> date-time method returns the <literal>Calendar</literal> object for this date-time value.
			</para>
			
			<para>
				The method takes no parameters.
			</para>
			<para>
				The example below outputs the time-taken as a <literal>Calendar</literal> object:
			</para>
			<programlisting>select timeTaken.toCalendar() as timeTakenCal from RFIDEvent</programlisting>
		</sect2>
		
		
		<sect2 id="datetime-method-todate">
		  <title>ToDate</title>
		  	<para>
				The <literal>toDate</literal> date-time method returns the <literal>Date</literal> object for this date-time value.
			</para>
			
			<para>
				The method takes no parameters.
			</para>
			<para>
				The example below outputs the time-taken as a <literal>Date</literal> object:
			</para>
			<programlisting>select timeTaken.toDate() as timeTakenDate from RFIDEvent</programlisting>
		</sect2>
				
		<sect2 id="datetime-method-tomsec">
		  <title>ToMillisec</title>
		  	<para>
				The <literal>toMillisec</literal> date-time method returns the long-typed millisecond value for this date-time value.
			</para>
			
			<para>
				The method takes no parameters.
			</para>
			<para>
				The example below outputs the time-taken as a long-typed <literal>millisecond</literal> value:
			</para>
			<programlisting>select timeTaken.toMillisec() as timeTakenLong from RFIDEvent</programlisting>
		</sect2>
	</sect1>

	<sect1 id="datetime-method-intervalref">
		<title>Interval Algebra Reference</title>

		<para>
			Interval algebra methods compare start and end timestamps of events or timestamps in general. For an event with zero (0) duration the start and end timestamp of the event is the same. 
		</para>
		
		<para>
		  When expression input or parameter is only a timestamp value, such as a long-type value or a <literal>Date</literal> or <literal>Calendar</literal> object, the duration is zero and the start and end timestamp represented by that value are the same.
		</para>
		
		<para>
		  When expression input or parameter is an event that has the special timestamp property and the special duration property declared, the timestamp and duration are taken from the event. 
		</para>
		
		<para>
			Interval algebra methods all return <literal>Boolean</literal>-type value. When the input value is null or the value of the first parameter (the compare-to timestamp and duration) are null, the result value is null.
		</para>
		
		<sect2 id="datetime-method-after">
		  <title>After</title>
		  
		  	<para>
				The <literal>after</literal> date-time method compares the input value's start timestamp and the first parameter's end timestamp.
			</para>
			
			<para>
				If used with one parameter, for example in <literal>a.after(b)</literal>, the method returns true if A starts after B ends. The engine applies the formula <literal>a.startTimestamp - b.endTimeStamp &gt; 0</literal>.
			</para>

			<para>
				If providing two parameters, for example in <literal>a.after(b, 5 sec)</literal>, the method returns true if A starts at least 5 seconds after B ends. The engine applies the formula <literal>a.startTimestamp - b.endTimeStamp &gt;= N</literal>.
			</para>

			<para>
				If providing three parameters, for example in <literal>a.after(b, 5 sec, 10 sec)</literal>, the method returns true if A starts at least 5 seconds but no more then 10 seconds after B ends. The engine applies the formula <literal>MIN &lt;= a.startTimestamp - b.endTimeStamp &lt;= MAX</literal>.
			</para>
		</sect2>
				
		<sect2 id="datetime-method-before">
		  <title>Before</title>
		  	<para>
				The <literal>before</literal> date-time method compares the input value's end timestamp and the first parameter's start timestamp.
			</para>
			
			<para>
				If used with one parameter, for example in <literal>a.before(b)</literal>, the method returns true if A ends before B starts. The engine applies the formula <literal>b.startTimestamp - a.endTimeStamp &gt; 0</literal>.
			</para>

			<para>
				If providing two parameters, for example in <literal>a.before(b, 5 sec)</literal>, the method returns true if A ends at least 5 seconds before B starts. The engine applies the formula <literal>b.startTimestamp - a.endTimeStamp &gt;= N</literal>.
			</para>

			<para>
				If providing three parameters, for example in <literal>a.before(b, 5 sec, 10 sec)</literal>, the method returns true if A ends at least 5 seconds but no more then 10 seconds before B starts. The engine applies the formula <literal>MIN &lt;= a.startTimestamp - b.endTimeStamp &lt;= MAX</literal>.
			</para>
		</sect2>
		
		<sect2 id="datetime-method-coincides">
		  <title>Coincides</title>
		  	<para>
				The <literal>coincides</literal> date-time method compares the input value's end timestamp and the first parameter's start timestamp.
			</para>
			
			<para>
				If used with one parameter, for example in <literal>a.before(b)</literal>, the method returns true if A ends before B starts. The engine applies the formula <literal>b.startTimestamp - a.endTimeStamp &gt; 0</literal>.
			</para>

			<para>
				If providing two parameters, for example in <literal>a.before(b, 5 sec)</literal>, the method returns true if A ends at least 5 seconds before B starts. The engine applies the formula <literal>b.startTimestamp - a.endTimeStamp &gt;= N</literal>.
			</para>

			<para>
				If providing three parameters, for example in <literal>a.before(b, 5 sec, 10 sec)</literal>, the method returns true if A ends at least 5 seconds but no more then 10 seconds before B starts. The engine applies the formula <literal>MIN &lt;= a.startTimestamp - b.endTimeStamp &lt;= MAX</literal>.
			</para>
		</sect2>
		
		<sect2 id="datetime-method-during">
		  <title>During</title>
		  	<para>
				The <literal>during</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-finishes">
		  <title>Finishes</title>
		  	<para>
				The <literal>finishes</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-finishedby">
		  <title>Finished By</title>
		  	<para>
				The <literal>finishedBy</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-includes">
		  <title>Includes</title>
		  	<para>
				The <literal>includes</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-meets">
		  <title>Meets</title>
		  	<para>
				The <literal>meets</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-metby">
		  <title>Met By</title>
		  	<para>
				The <literal>metBy</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-overlaps">
		  <title>Overlaps</title>
		  	<para>
				The <literal>overlaps</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-overlappedby">
		  <title>Overlapped By</title>
		  	<para>
				The <literal>overlappedBy</literal> date-time method ......
			</para>
		</sect2>

		<sect2 id="datetime-method-starts">
		  <title>Starts</title>
		  	<para>
				The <literal>starts</literal> date-time method ......
			</para>
		</sect2>
		
		<sect2 id="datetime-method-startedby">
		  <title>Started By</title>
		  	<para>
				The <literal>startedby</literal> date-time method ......
			</para>
		</sect2>		
	</sect1>

</chapter>