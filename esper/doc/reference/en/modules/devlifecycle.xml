<chapter id="devlifecycle">
    <title>Development Lifecycle</title>
    
    <para>
		This chapter presents information related to the development lifecycle for developing an event processing application with EPL. It includes information on authoring, testing, debugging, packaging and deploying.
    </para>

    <sect1 id="devlifecycle-authoring">
        <title>Authoring</title>
        
        <para>
          Enterprise Edition includes authoring tools for EPL statements and modules by providing form-based dialogs, templates, an expression builder, simulation tool and other tools. Enterprise Edition also supports hot deployment and packaging options for EPL and related code.
        </para>
        
        <para>
           EPL statements can be organized into modules as described below. Any text editor can edit EPL statement and module text. A text editor or IDE that highlights SQL syntax or keywords works.
        </para>
        
        <para>
			For authoring configuration files please consult the XSD schema files as provided with the distribution.
        </para>
        
        <para>
            For information on authoring event classes or event definitions in general please see <xref linkend="event_representation"/> or <xref linkend="epl_createschema"/>.
        </para>
    </sect1>

    <sect1 id="devlifecycle-testing">
        <title>Testing</title>
        
        <para>
			We recommend testing EPL statements using a test framework such as JUnit or TestNG. Please consult the Esper test suite for extensive examples, which can be downloaded from the distribution site.
        </para>
        
        <para>
			We recommend performing latency and throughput tests early in the development lifecycle. Please consider the performance tips in <xref linkend="performance"/> for optimal performance.
        </para>
        
        <para>
			Consider engine and statement metrics reporting for identifying slow-performing statements, for example. See <xref linkend="api-instrumentation"/>.
        </para>
    </sect1>

    <sect1 id="devlifecycle-debugging">
        <title>Debugging</title>
        
        <para>
            One important tool for debugging is the parameterized <literal>@Audit </literal> annotation. This annotation allows to output, on statement-level, detailed information about many aspects of statement processing.
        </para>
        
        <para>
			Another tool for logging engine-level detail is <xref linkend="config-engine-logging-execpath"/>.
        </para>
        
        <para>
			Please see <xref linkend="configuration-logging"/> for information on configuring logging in general.
        </para>
		
		<sect2 id="devlifecycle-debugging-audit">
			<title>@Audit Annotation</title>
			
			<para>
				Use the <literal>@Audit</literal> annotation to have the engine output detailed information about statement processing. The engine reports, at INFO level, the information under log name <literal>com.espertech.esper.audit</literal>.
			</para>
			
			<para>
				You may provide a comma-separated list of category names to <literal>@Audit</literal> to output information related to specific categories only. The table below lists all available categories. If no parameter is provided, the engine outputs information for all categories. Category names are not case-sensitive.
			</para>
			
			<para>
				For the next statement  the engine produces detailed processing information (all categories) for the statement: 
			</para>
			<programlisting><![CDATA[@Name('All Order Events') @Audit select * from OrderEvent]]></programlisting>
			
			<para>
				For the next statement the engine provides information about new events and also about event property values (2 categories are listed):
			</para>
			<programlisting><![CDATA[@Name('All Order Events') @Audit('stream,property') select price from OrderEvent]]></programlisting>
			
			<para>
				Here is a more complete example that uses the API to create the schema, create above statement and send an event:
			</para>
			<programlisting><![CDATA[epService.getEPAdministrator().createEPL("create schema OrderEvent(price double)");
String epl = "@Name('All-Order-Events') @Audit('stream,property') select price from OrderEvent";
epService.getEPAdministrator().createEPL(epl).addListener(listener);
epService.getEPRuntime().sendEvent(Collections.singletonMap("price", 100d), "OrderEvent");]]></programlisting>

			<para>
				The output is similar to the following:
			</para>
			<programlisting><![CDATA[INFO  [audit] Statement All-Order-Events stream OrderEvent inserted {price=100.0}
INFO  [audit] Statement All-Order-Events property price value 100.0]]></programlisting>

			<table frame="topbot">
				<title>@Audit Categories</title>
				<tgroup cols="2">
					<colspec colwidth="0.25*"/>
					<colspec colwidth="1*"/>
					<thead>
						<row>
							<entry>Category</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>Exprdef</entry>
							<entry>Each expression declaration name and return value.</entry>
						</row>
						<row>
							<entry>Expression</entry>
							<entry>Each top-level expression and its return value.</entry>
						</row>
						<row>
							<entry>Expression-nested</entry>
							<entry>Each expression including child or nested expressions and their return value.</entry>
						</row>
						<row>
							<entry>Pattern</entry>
							<entry>Each pattern sub-expression and its change in truth-value.</entry>
						</row>
						<row>
							<entry>Pattern-instances</entry>
							<entry>Each pattern sub-expression and its count of active instances.</entry>
						</row>
						<row>
							<entry>Property</entry>
							<entry>Each property name and the event's property value.</entry>
						</row>
						<row>
							<entry>View</entry>
							<entry>Each view name and its insert and remove stream.</entry>
						</row>
						<row>
							<entry>Schedule</entry>
							<entry>Each schedule modification and trigger received by a statement.</entry>
						</row>
						<row>
							<entry>Stream</entry>
							<entry>Each new event received by a statement.</entry>
						</row>
					</tbody>
				</tgroup>				
			</table>
			
			<para>
				Note that the engine only evaluates select-clause expressions if either a listener or subscriber is attached to the statement or if used with insert-into.
			</para>
		</sect2>
    </sect1>

    <sect1 id="devlifecycle-packagedeploy">
        <title>Packaging and Deploying Overview</title>

		<para>
			Please consider Esper Enterprise Edition as a target deployment platform. Esper alone does not ship with a server as it is designed as a core CEP engine.
		</para>

        <para>
			To support packaging and deploying event-driven applications, Esper offers infrastructure as outlined herein:
        </para>
        
		<itemizedlist>
			<listitem>
				<para>
                    EPL modules to build a cohesive, easily-externalizable deployment unit out of related statements as described in <xref linkend="devlifecycle-eplmodule"/>.
                </para>
			</listitem>
			<listitem>
				<para>
                    The deployment administrative interface is described in <xref linkend="devlifecycle-admin"/>.
                </para>
			</listitem>
			<listitem>
				<para>
			        Instructions and code for use when the deployment target is a J2EE web application server or servlet runtime, please see <xref linkend="devlifecycle-j2ee"/>.
                </para>
			</listitem>
		</itemizedlist>

    </sect1>
    
    <sect1 id="devlifecycle-eplmodule">
        <title>EPL Modules</title>

		<indexterm><primary>packaging</primary><secondary>EPL module</secondary></indexterm>
		<indexterm><primary>deployment</primary><secondary>EPL module</secondary></indexterm>
		
		<para>
			An EPL module file is a plain text file in which EPL statements appear separated by the semicolon (;) character. It bundles EPL statements with optional deployment instructions. A service provider instance keeps track of the known and/or deployed EPL modules and makes it easy to add, remove, deploy and undeploy EPL modules.
		</para>

		<para>
			The synopsis of an EPL module file is:
		</para>
		
		<synopsis>[module <emphasis>module_name</emphasis>;]
[uses <emphasis>module_name</emphasis>; | import <emphasis>import_name</emphasis>;] [uses <emphasis>module_name</emphasis>; | import <emphasis>import_name</emphasis>;] [...]
[<emphasis>epl_statement</emphasis>;] [<emphasis>epl_statement</emphasis>;] [...]</synopsis>

		<para>
			Use the <literal>module</literal> keyword followed a <emphasis>module_name</emphasis> identifier or a package (identifiers separated by dots) to declare the name of the module. The module name declaration must be at the beginning of the file, comments and whitespace excluded. The module name 
			serves to check uses-dependences of other modules.  
		 </para>
		 
		 <para>
			If a module file requires certain constructs that may be shared by other module files, such as named windows, variables, event types, variant streams or inserted-into streams required by statements,
			a module file may specify zero to many dependent modules with the <literal>uses</literal> keyword. At deployment time the engine checks the uses-dependencies
			and ensures that a module of that name is already deployed or will be deployed as part of the deployments. The deployment API supports ordering modules according to their uses-relationship.
		 </para>
		 
		 <para>
			 If the EPL statements in the module require Java classes such as for underlying events or user-defined functions, use the <literal>import</literal> keyword followed by the fully-qualified class name or package name in the format <literal>package.*</literal>.
			 The <literal>uses</literal> and <literal>import</literal> keywords are optional and must occur after the <literal>module</literal> declaration.
		 </para>
		 
		 <para>
			 Following the optional deployment instructions are any number of <emphasis>epl_statement</emphasis> EPL statements that are separated by semicolon (<literal>;</literal>).
		 </para>
		 
		 <para>
			 The following is a sample EPL module file explained in detail thereafter:
		 </para>

		<programlisting><![CDATA[// Declare the name for the module
module org.myorganization.switchmonitor;

// Declare other module(s) that this module depends on
uses org.myorganization.common;

// Import any Java/.NET classes in an application package 
import org.myorganization.events.*;

// Declare an event type based on a Java class in the package that was imported as above
create schema MySwitchEvent as MySwitchEventPOJO;

// Sample statement
@Name('Off-On-Detector')
insert into MyOffOnStream
select * from pattern[every-distinct(id) a=MySwitchEvent(status='off') 
  -> b=MySwitchEvent(id=a.id, status='on')];

// Sample statement
@Name('Count-Switched-On')
@Description('Count per switch id of the number of Off-to-On switches in the last 1 hour')
select id, count(*) from MyOffOnStream.win:time(1 hour) group by id;]]></programlisting>

        <para>
			The example above declares a module name of <literal>org.myorganization.switchmonitor</literal>. As defined by the <literal>uses</literal> keyword, it ensures that the <literal>org.myorganization.common</literal> module is already deployed.
			The example demonstrates the <literal>import</literal> keyword to make a package name known to the engine for resolving POJO class names, as the example assumes that <literal>MySwitchEventPOJO</literal> is a POJO event class.
			In addition the example module contains two statements separated by semicolon characters.
        </para>

        <para>
			Your application code may, after deployment, look up a statement and attach listeners as shown here:
        </para>
			<programlisting><![CDATA[epService.getEPAdministrator().getStatement("Count-Switched-On").addListener(...);]]></programlisting>
    </sect1>

    <sect1 id="devlifecycle-admin">
        <title>The Deployment Administrative Interface</title>

		<indexterm><primary>packaging</primary><secondary>EPDeploymentAdmin interface</secondary></indexterm>
		<indexterm><primary>deployment</primary><secondary>EPDeploymentAdmin interface</secondary></indexterm>
		
		<para>
			The <literal>com.espertech.esper.client.deploy.EPDeploymentAdmin</literal> service available from the <literal>EPAdministrator</literal> interface by method <literal>getDeploymentAdmin</literal> provides the functionality available to manage packaging and deployment.
			Please consult the JavaDoc documentation for more information.
		</para>

		<para>
		  The deployment API allows to read resources and parse text strings to obtain an object representation of the EPL module, the <literal>Module</literal>. A <literal>Module</literal> object can also be simply constructed.
		</para>
		
		<para>
		  After your application obtains a <literal>Module</literal> instance it may either use <literal>deploy</literal> to deploy the module directly, starting all statements of the module. Alternatively your application
		  may add a module, making it known without starting statements for later deployment. In each case the module is assigned a deployment id, which acts as a unique primary key for all known modules. 
		</para>

		<para>
		  A module may be in two states: undeployed or deployed. When calling <literal>add</literal> to add a module, it starts life in the undeployed state. When calling <literal>deploy</literal> to deploy a module, it starts life in the deployed state. 
		  A module may be transitioned by providing the deployment id and by calling the <literal>deploy</literal> or <literal>undeploy</literal> methods.
		</para>

		<para>
		  Your code can remove a module in undeployed state using the <literal>remove</literal> method or the <literal>undeployRemove</literal> method. If the module is in deployed state, use <literal>undeployRemove</literal> to undeploy and remove the module.
		</para>

		<para>The <literal>DeploymentOptions</literal> instance that can be passed to the <literal>deploy</literal> method when validating or deploying modules controls validation, fail-fast, rollback and the isolated service provider, if any, for the deployment.</para>

		<para>
		  We also provide additional sample code to read and deploy modules as part of the J2EE considerations below.
		</para>

		<sect2 id="devlifecycle-admin-readparse">
        <title>Reading Module Content</title>
			<para>
				Read and parse module files via the <literal>EPDeploymentAdmin</literal> interface <literal>read</literal> and <literal>parse</literal> methods, which returns a <literal>Module</literal> instance to represent the module information. 
			</para>
	
			<para>
				This code snippet demonstrates reading and parsing a module given a file name:
			</para>
			<programlisting><![CDATA[EPServiceProvider epService = EPServiceProviderManager.getDefaultProvider();
EPDeploymentAdmin deployAdmin = epService.getEPAdministrator().getDeploymentAdmin();
Module module = deployAdmin.read(new File("switchmonitor.epl"));]]></programlisting>

			<para>
				The service provides additional read and parse methods to read from a URL, classpath, input stream or string.
			</para>
	  </sect2>

		<sect2 id="devlifecycle-admin-order">
        <title>Ordering Multiple Modules</title>
			<para>
				Since modules may have inter-dependencies as discussed under the <literal>uses</literal> declaration,  the deployment interface provides the <literal>getDeploymentOrder</literal> method to order a collection of modules before deployment.
			</para>
			
			<para>
				Assuming your application reads multiple modules into a <literal>mymodules</literal> module list, this code snippet orders the modules for deployment and validates dependency declarations for each module:
			</para>
			<programlisting><![CDATA[List<Module> mymodules =  ... read modules...;  
DeploymentOrder order = deployAdmin.getDeploymentOrder(mymodules, new DeploymentOrderOptions());]]></programlisting>
	  </sect2>

		<sect2 id="devlifecycle-admin-devlifecycle-undeploy">
        <title>Deploying and Undeploying</title>
			<para>
				The deployment interface returns a deployment id for each module made known by adding a module or by deploying a module. To undeploy the module your application must provide the deployment id.
			</para>
			
			<para>
				The <literal>undeploy</literal> operation removes all named windows, variables, event types or any other information associated to the statements within the module to be undeployed.
			</para>
			
			<para>
				The next code snippet deploys modules, starting each modulle's EPL statements:
			</para>
			<programlisting><![CDATA[for (Module mymodule : order.getOrdered()) {
  DeploymentResult deployResult = deployAdmin.deploy(mymodule, new DeploymentOptions());
}]]></programlisting>
			
			<para>
				Undeploying a module destroys all started statements associated to the module.
			</para>

			<para>
				To undeploy and at the same time remove the module from the list of known modules use the <literal>undeployRemove</literal> method and pass the deployment id:
			</para>
			<programlisting><![CDATA[deployAdmin.undeployRemove(deployResult.getDeploymentId());]]></programlisting>
	  </sect2>
	  
	   <sect2 id="devlifecycle-admin-list">
        <title>Listing Deployments</title>
			<para>
				The deployment interface returns all module information that allows your application to determine which modules are known and their current state. 
			</para>
			
			<para>
				To obtain a list of all known modules or information for a specific module, the calls are:
			</para>
			<programlisting><![CDATA[DeploymentInformation[] info = deployAdmin.getDeploymentInformation();
			
// Given a deployment id, return the deployment information
DeploymentInformation infoModule = deployAdmin.getDeploymen(deploymentId);]]></programlisting>			
	  </sect2>

	   <sect2 id="devlifecycle-admin-transition">
        <title>State Transitioning a Module</title>
			
			<para>
				The following sample code adds a module, transitions the module to deployed, then undeploys and removes the module entirely;
			</para>
			<programlisting><![CDATA[// This sample uses the parse method to obtain a module
Module module = deployAdmin.parse("create schema MySchema (col1 int)";

// Make the module know; It now shows up in undeployed state
String moduleDeploymentId = deployAdmin.add(module);

// Start all statements, passing a null options object for default options
deployAdmin.deploy(moduleDeploymentId, null);

// Undeploy module, destroying all statements
deployAdmin.undeploy(moduleDeploymentId);

// Remove module; It will no longer be known
deployAdmin.remove(moduleDeploymentId);]]></programlisting>				  
		</sect2>

	   <sect2 id="devlifecycle-admin-bestpractices">
        <title>Best Practices</title>			
			<para>
				Use the <literal>@Name</literal> annotation to assign a name to each statement that your application would like to attach a listener or subscriber, or look up the statement for iteration or management by the administrative API.
			</para>
			<para>
				Use the <literal>create schema</literal> syntax and the <literal>import</literal> keyword to define event types. When sharing event types, named windows or variables between modules use the <literal>uses</literal> keyword to 
				declare a separate module that holds the shared definitions.
			</para>
			<para>
				To validate whether a set of statements is complete and can start without issues, set the following flags on a <literal>DeploymentOptions</literal> instance passed to the <literal>deploy</literal> method as the code snippet below shows:
			</para>			
			<programlisting><![CDATA[DeploymentOptions options = new DeploymentOptions();
options.setIsolatedServiceProvider("validation");	// we isolate any statements 
options.setValidateOnly(true);	// validate leaving no started statements
options.setFailFast(false); // do not fail on first error
epService.getEPAdministrator().getDeploymentAdmin()
  .deploy(module, options);]]></programlisting>
		</sect2>

	</sect1>

    <sect1 id="devlifecycle-j2ee">
        <title>J2EE Packaging and Deployment</title>

		<indexterm><primary>packaging</primary><secondary>J2EE</secondary></indexterm>
		<indexterm><primary>deployment</primary><secondary>J2EE</secondary></indexterm>

		<para>
			Esper can well be deployed as part of a J2EE web or enterprise application archive to a web application server. 
			When designing for deployment into a J2EE web application server, please consider the items discussed here.
		</para>

		<para>
			We provide a sample servlet context listener in this section that uses the deployment API to deploy and undeploy modules as part of the servlet lifecycle. 
		</para>
		
		<para>
			The distribution provides a message-driven bean (MDB) example that you may find useful.
		</para>
		
		<para>
			Esper does not have a dependency on any J2EE or Servlet APIs to allow the engine to run in any environment or container.
		</para>

		<sect2 id="devlifecycle-j2ee-considerations">
			<title>J2EE Deployment Considerations</title>
			
			<para>
			  As multiple web applications deployed to a J2EE web application server typically have a separate classloader per application, you should consider whether engine instances need to be shared between applications or can remain separate engine instances. Consider the <literal>EPServiceProviderManager</literal> a Singleton. 
			  When deploying multiple web applications, your J2EE container classloader may provide a separate instance of the Singleton <literal>EPServiceProviderManager</literal> to each web application resulting in multiple independent engine instances.
			</para>
			
			<para>
			  To share <literal>EPServiceProvider</literal> instances between web applications, one approach is to add the Esper jar files to the system classpath. A second approach can be to have multiple web applications share the same servet context and have your application place the <literal>EPServiceProvider</literal> instance into a servlet context attribute for sharing. Architecturally you may also consider a single archived application (such as an message-driven bean) that all your web applications communicate to via the JMS broker provided by your application server or an external JMS broker. 
			</para>
			
			<para> 
			  As per J2EE standards there are restrictions in regards to starting new threads in J2EE application code. Esper adheres to these restrictions: It allows to be driven entirely by external events. To remove all Esper threads, set the internal timer off and leave the advanced threading options turned off.
			  To provide timer events when the internal timer is turned off, you should check with your J2EE application container for support of the Java system timer or for support of batch or work loading to send timer events to an engine instance.
			</para>

			<para> 
			  As per J2EE standards there are restrictions in regards to input and output by J2EE application code. Esper adheres to these restrictions: By itself it does not start socket listeners or performs any file IO.
			</para>
		</sect2>

		<sect2 id="devlifecycle-j2ee-servletcontextlistener">
			<title>Servlet Context Listener</title>
			<para>
				When deploying a J2EE archive that contains EPL modules files we provide sample code to read and deploy EPL modules files packaged with the enterprise or web application archive when the servlet initializes. The sample undeploys EPL modules when the servlet context gets destroyed.
			</para>
			
			<para>
				A sample <literal>web.xml</literal> configuration extract is:
			</para>
			<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app>
  <listener>
    <listener-class>SampleServletListener</listener-class>
  </listener>
  <context-param>
    <param-name>eplmodules</param-name>
    <param-value>switchmonitor.epl</param-value>
</context-param>
</web-app>]]></programlisting>			

			<para>
				A servet listener that deploys EPL module files packaged into the archive on context initialization and that undeploys when the application server destroys the context is shown here:
			</para>
			<programlisting><![CDATA[public class SampleServletListener implements ServletContextListener {

  private List<String> deploymentIds = new ArrayList<String>();
  
  public void contextInitialized(ServletContextEvent servletContextEvent) {
    try {
      EPServiceProvider epServiceProvider = EPServiceProviderManager.getDefaultProvider();
      String modulesList = servletContextEvent.getServletContext().getInitParameter("eplmodules");
      List<Module> modules = new ArrayList<Module>();
      if (modulesList != null) {
        String[] split = modulesList.split(",");
        for (int i = 0; i < split.length; i++) {
          String resourceName = split[i].trim();
          if (resourceName.length() == 0) {
            continue;
          }
          String realPath = servletContextEvent.getServletContext().getRealPath(resourceName);
  		Module module = epServiceProvider.getEPAdministrator()
  		        .getDeploymentAdmin().read(new File(realPath));
          modules.add(module);
        }
      }
    
      // Determine deployment order
      DeploymentOrder order = epServiceProvider.getEPAdministrator()
                  .getDeploymentAdmin().getDeploymentOrder(modules, null);
  
      // Deploy
      for (Module module : order.getOrdered()) {
        DeploymentResult result = epServiceProvider.getEPAdministrator()
                  .getDeploymentAdmin().deploy(module, new DeploymentOptions());
        deploymentIds.add(result.getDeploymentId());
      }
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }
  
  public void contextDestroyed(ServletContextEvent servletContextEvent) {
    EPServiceProvider epServiceProvider = EPServiceProviderManager.getDefaultProvider();
    for (String deploymentId : deploymentIds) {
       epServiceProvider.getEPAdministrator().getDeploymentAdmin().undeployRemove(deploymentId);
    }
  }
}]]></programlisting>			
		</sect2>
	</sect1>
</chapter>
