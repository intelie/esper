<chapter id="event_representation">
    <title>Event Representations</title>
    
    <para>
		This section outlines the different means to model and represent events.
    </para>

	<para>
		Esper uses the term <emphasis>event type</emphasis> to describe the type information available for an event representation.
	</para>
	
	<para>
	    Your application may configure predefined event types at startup time or dynamically add event types at runtime via API or EPL syntax. See <xref linkend="configuration-items"/> for startup-time configuration and <xref linkend="api-admin-runtime-config"/> for the runtime configuration API.
	</para>

	<para>
	    The EPL <literal>create schema</literal> syntax allows declaring an event type at runtime using EPL, see <xref linkend="epl_createschema"/>.
	</para>

    <para>
		In <xref linkend="api-event"/> we explain how an event type becomes visible in EPL statements and output events delivered by the engine.
    </para>

    <sect1 id="eventrep_intro">
        <title>Event Underlying Java Objects</title>

		<indexterm><primary>event</primary><secondary>underlying representation</secondary></indexterm>
        <para>
			An event is an immutable record of a past occurrence of an action or state change. Event properties capture the state information for an event.
        </para>

        <para>
			In Esper, an event can be represented by any of the following underlying Java objects:
        </para>
        
		<table frame="topbot">
			<title>Event Underlying Java Objects</title>
			<tgroup cols="2">
				<colspec colwidth="1.5*"/>
				<colspec colwidth="2*"/>
				<thead>
					<row>
						<entry>Java Class</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>java.lang.Object</literal></entry>
						<entry>Any Java POJO (plain-old java object) with getter methods following JavaBean conventions;  Legacy Java classes not following JavaBean conventions can also serve as events .</entry>
					</row>
					<row>
						<entry><literal>java.util.Map</literal></entry>
						<entry>Map events are key-values pairs and can also contain objects, further Map, and arrays thereof.</entry>
					</row>
					<row>
						<entry><literal>org.w3c.dom.Node</literal></entry>
						<entry>XML document object model (DOM).</entry>
					</row>
					<row>
						<entry><literal>org.apache.axiom.om.OMDocument or OMElement</literal></entry>
						<entry>XML - Streaming API for XML (StAX) - Apache Axiom (provided by EsperIO package).</entry>
					</row>
					<row>
						<entry>Application classes</entry>
						<entry>Plug-in event representation via the extension API.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>

		<para>
			Esper provides multiple choices for representing an event. There is no absolute need for you to create new Java classes to represent an event.
		</para>
		
		<para>
			Event representations have the following in common:
		</para>
		
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					All event representations support nested, indexed and mapped properties (aka. property expression), as explained in more detail below. There is no limitation to the nesting level.
				</para>
			</listitem>
			<listitem>
				<para>
					All event representations provide event type metadata. This includes type metadata for nested properties.
				</para>
			</listitem>
			<listitem>
				<para>
					All event representations allow transposing the event itself and parts of all of its property graph into new events. The term transposing refers to selecting the event itself or event properties that are themselves nestable property graphs, and then querying the event's properties or nested property graphs in further statements. The Apache Axiom event representation is an exception and does not currently allow transposing event properties but does allow transposing the event itself.
				</para>
			</listitem>
			<listitem>
				<para>
					The Java object and Map representations allow supertypes.
				</para>
			</listitem>
		</itemizedlist>

		<para>
			The API behavior for all event representations is the same, with minor exceptions noted in this chapter. 
		</para>

		<para>
			The benefits of multiple event representations are:
		</para>
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					For applications that already have events in one of the supported representations, there is no need to transform events into a Java object before processing.
				</para>
			</listitem>
			<listitem>
				<para>
					Event representations are exchangeable, reducing or eliminating the need to change statements when the event representation changes. 
				</para>
			</listitem>
			<listitem>
				<para>
					Event representations are interoperable, allowing all event representations to interoperate in same or different statements.
				</para>
			</listitem>
			<listitem>
				<para>
					The choice makes its possible to consciously trade-off performance, ease-of-use, the ability to evolve and effort needed to import or externalize events and use existing event type metadata. 
				</para>
			</listitem>
		</itemizedlist>

	</sect1>

	<sect1 id="eventrep-properties">
	   <title>Event Properties</title>
           
		<indexterm><primary>event</primary><secondary>properties</secondary></indexterm>
		<para>
			 Event properties capture the state information for an event. Event properties be simple as well as indexed, mapped and nested event properties. The table below outlines the different types of properties and their syntax in an event expression. This syntax allows statements to query deep JavaBean objects graphs, XML structures and Map events. 
		</para>

		<table frame="topbot">
			<title>Types of Event Properties</title>
			<tgroup cols="4">
				<colspec colwidth="1*"/>
				<colspec colwidth="2.5*"/>
				<colspec colwidth="1.5*"/>
				<colspec colwidth="1.5*"/>
				<thead>
					<row>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Syntax</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>Simple</entry>
						<entry>A property that has a single value that may be retrieved.</entry>
						<entry><synopsis>name</synopsis></entry>
						<entry><synopsis>sensorId</synopsis></entry>
					</row>
					<row>
						<entry>Indexed</entry>
						<entry>An indexed property stores an ordered collection of objects (all of the same type) that can be individually accessed by an integer-valued, non-negative index (or subscript).</entry>
						<entry><synopsis>name[<emphasis>index</emphasis>]</synopsis></entry>
						<entry><synopsis>sensor[0]</synopsis></entry>
					</row>
					<row>
						<entry>Mapped</entry>
						<entry>A mapped property stores a keyed collection of objects (all of the same type).</entry>
						<entry><synopsis>name('<emphasis>key</emphasis>')</synopsis></entry>
						<entry><synopsis>sensor('light')</synopsis></entry>
					</row>
					<row>
						<entry>Nested</entry>
						<entry>A nested property is a property that lives within another property of an event.</entry>
						<entry><synopsis>name.nestedname</synopsis></entry>
						<entry><synopsis>sensor.value</synopsis></entry>
					</row>
				</tbody>
			</tgroup>
		</table> 

		<para>
			Combinations are also possible. For example, a valid combination could be <literal>person.address('home').street[0]</literal>.
		</para>

		<sect2 id="eventrep-properties-escaping">
		   <title>Escape Characters</title>
			<para>
				If your application uses <literal>java.util.Map</literal> or XML to represent events, then event property names may themselves contain the dot ('.') character. The backslash ('\') character can be used to escape dot characters in property names, allowing a property name to contain dot characters. 
			</para>
			
			<para>
				For example, the EPL as shown below expects a property by name <literal>part1.part2</literal> to exist on event type <literal>MyEvent</literal>:
			</para>
			<programlisting>select part1\.part2 from MyEvent</programlisting> 

			<para>
				Sometimes your event properties may overlap with EPL language keywords. In this case you may use the backwards apostrophe <literal>`</literal> character to escape the property name.
			</para>
			
			<para>
				The next example assumes a <literal>Quote</literal> event that has a property by name <literal>order</literal>, while <literal>order</literal> is also a reserved keyword:
			</para>
			<programlisting>select `order` from Quote</programlisting> 
		</sect2>
	</sect1>
		
	<sect1 id="eventrep-dyncproperties">
	   <title>Dynamic Event Properties</title>
           
		<indexterm><primary>dynamic event properties</primary></indexterm>
		<indexterm><primary>event</primary><secondary>dynamic properties</secondary></indexterm>
		<para>
			Dynamic (unchecked) properties are event properties that need not be known at statement compilation time. Such properties are resolved during runtime: they provide duck typing functionality.
		</para>
			
		<para>
			The idea behind dynamic properties is that for a given underlying event representation we don't always know all properties in advance. An underlying event may have additional properties that are not known at statement compilation time, that we want to query on. The concept is especially useful for events that represent rich, object-oriented domain models.
		</para>

		<para>
			The syntax of dynamic properties consists of the property name and a question mark. Indexed, mapped and nested properties can also be dynamic properties:
		</para>

		<table frame="topbot">
			<title>Types of Event Properties</title>
			<tgroup cols="2">
				<colspec colwidth="1*"/>
				<colspec colwidth="2.5*"/>
				<thead>
					<row>
						<entry>Type</entry>
						<entry>Syntax</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>Dynamic Simple</entry>
						<entry><synopsis>name?</synopsis></entry>
					</row>
					<row>
						<entry>Dynamic Indexed</entry>
						<entry><synopsis>name[<emphasis>index</emphasis>]?</synopsis></entry>
					</row>
					<row>
						<entry>Dynamic Mapped</entry>
						<entry><synopsis>name('<emphasis>key</emphasis>')?</synopsis></entry>
					</row>
					<row>
						<entry>Dynamic Nested</entry>
						<entry><synopsis>name?.nestedPropertyName</synopsis></entry>
					</row>
				</tbody>
			</tgroup>
		</table> 

		<para>
			 Dynamic properties always return the <literal>java.lang.Object</literal> type. Also, dynamic properties return a <literal>null</literal> value if the dynamic property does not exist on events processed at runtime. 
		</para>

		<para>
			As an example, consider an OrderEvent event that provides an "item" property. The "item" property is of type <literal>Object</literal> and holds a reference to an instance of either a Service or Product. 
		</para>

		<para>
			Assume that both Service and Product classes provide a property named "price". Via a dynamic property we can specify a query that obtains the price property from either object (Service or Product):
		</para>
		<programlisting><![CDATA[select item.price? from OrderEvent]]></programlisting>		

		<para>
			 As a second example, assume that the Service class contains a "serviceName" property that the Product class does not possess. The following query returns the value of the "serviceName" property for Service objects. It returns a <literal>null</literal>-value for Product objects that do not have the "serviceName" property:
		</para>
		<programlisting><![CDATA[select item.serviceName? from OrderEvent]]></programlisting>		

		<para>
			Consider the case where OrderEvent has multiple implementation classes, some of which have a "timestamp" property. The next query returns the timestamp property of those implementations of the OrderEvent interface that feature the property:
		</para>
		<programlisting><![CDATA[select timestamp? from OrderEvent]]></programlisting>		
		
		<para>
			The query as above returns a single column named "timestamp?" of type <literal>Object</literal>. 			
		</para>

		<para>
			When dynamic properties are nested, then all properties under the dynamic property are also considered dynamic properties. In the below example the query asks for the "direction" property of the object returned by the "detail" dynamic property:
		</para>
		<programlisting><![CDATA[select detail?.direction from OrderEvent]]></programlisting>		
		<para>
			Above is equivalent to:
		</para>
		<programlisting><![CDATA[select detail?.direction? from OrderEvent]]></programlisting>		

		<para>
			The functions that are often useful in conjunction with dynamic properties are:
		</para>

		<itemizedlist>
			<listitem>
				<para>
                    The <literal>cast</literal> function casts the value of a dynamic property (or the value of an expression) to a given type.
                </para>
			</listitem>
			<listitem>
				<para>
                    The <literal>exists</literal> function checks whether a dynamic property exists. It returns <literal>true</literal> if the event has a property of that name, or false if the property does not exist on that event.
                </para>
			</listitem>
			<listitem>
				<para>
                    The <literal>instanceof</literal> function checks whether the value of a dynamic property (or the value of an expression) is of any of the given types.
                </para>
			</listitem>
			<listitem>
				<para>
                    The <literal>typeof</literal> function returns the string type name of a dynamic property.
                </para>
			</listitem>
		</itemizedlist>

		<para>
			Dynamic event properties work with all event representations outlined next: Java objects, Map-based and XML DOM-based events.
		</para>

	</sect1>

	<sect1 id="eventrep-fragment">
	   <title>Fragment and Fragment Type</title>
		<para>
			Sometimes an event can have properties that are itself events. Esper uses the term <emphasis>fragment</emphasis> and <emphasis>fragment type</emphasis> for such event pieces. The best example is a pattern
			that matches two or more events and the output event contains the matching events as fragments. In other words, output events can be a composite event that consists of further events, the fragments.
		</para>

		<para>
			Fragments have the same metadata available as their enclosing composite events. The metadata for enclosing composite events contains information about which properties are fragments, or have a property value that can be 
			represented as a fragment and therefore as an event itself.
		</para>

		<para>
			Fragments and type metadata can allow your application to navigate composite events without the need for using the Java reflection API and reducing the coupling to the underlying event representation.
			The API is further described in <xref linkend="api-event"/>.
		</para>		
	</sect1>

	<sect1 id="eventrep-javabean">
	   <title>Plain-Old Java Object Events</title>

		<indexterm><primary>event</primary><secondary>Java object</secondary></indexterm>
		<para>
			Plain-old Java object events are object instances that expose event properties through JavaBeans-style getter methods. Events classes or interfaces do not have to be fully compliant to the JavaBean specification; however for the Esper engine to obtain event properties, the required JavaBean getter methods must be present or an accessor-style and accessor-methods may be defined via configuration.
		</para>

		<para>
			Esper supports JavaBeans-style event classes that extend a superclass or implement one or more interfaces. Also, Esper event pattern and EPL statements can refer to Java interface classes and abstract classes. 
		</para>

		<para>
			Classes that represent events should be made immutable. As events are recordings of a state change or action that occurred in the past, the relevant event properties should not be changeable. However this is not a hard requirement and the Esper engine accepts events that are mutable as well.
		</para>

		<para>
			The <literal>hashCode</literal> and <literal>equals</literal> methods do not need to be implemented. The implementation of these methods by a Java event class does not affect the behavior of the engine in any way.
		</para>

		<para>
			Please see <xref linkend="configuration"/> on options for naming event types represented by Java object event classes.
			Java classes that do not follow JavaBean conventions, such as legacy Java classes that expose public fields, or methods not following naming conventions, require additional configuration. Via configuration it is also possible to control case sensitivity in property name resolution. The relevant section in the chapter on configuration is <xref linkend="config-java-legacy"/>.
		</para>

        <sect2 id="event-properties">
           <title>Java Object Event Properties</title>
           
			<para>
				As outlined earlier, the different property types are supported by the standard JavaBeans specification, and some of which are uniquely supported by Esper:
			</para>

			<itemizedlist spacing="compact">
				<listitem>
					<para>
						<emphasis>Simple</emphasis> properties have a single value that may be retrieved. The underlying property type might be a Java language primitive (such as int, a simple object (such as a java.lang.String), or a more complex object whose class is defined either by the Java language, by the application, or by a class library included with the application.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Indexed</emphasis> - An indexed property stores an ordered collection of objects (all of the same type) that can be individually accessed by an integer-valued, non-negative index (or subscript). 
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Mapped</emphasis> - As an extension to standard JavaBeans APIs, Esper considers any property that accepts a String-valued key a mapped property. 
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Nested</emphasis> - A nested property is a property that lives within another Java object which itself is a property of an event. 
					</para>
				</listitem>
			</itemizedlist>
		
			<para>
				Assume there is an <literal>NewEmployeeEvent</literal> event class as shown below. The mapped and indexed properties in this example return Java objects but could also return Java language primitive types (such as int or String). The <literal>Address</literal> object and <literal>Employee</literal> can themselves have properties that are nested within them, such as a street name in the <literal>Address</literal> object or a name of the employee in the <literal>Employee</literal> object.
			</para>
			
			<programlisting><![CDATA[public class NewEmployeeEvent {
	public String getFirstName();
	public Address getAddress(String type);
	public Employee getSubordinate(int index);
	public Employee[] getAllSubordinates();
}
]]></programlisting>

				<para>
					<emphasis>Simple</emphasis> event properties require a getter-method that returns the property value. In this example, the <literal>getFirstName</literal> getter method returns the <literal>firstName</literal> event property of type String.
				</para>
		
				<para>
					<emphasis>Indexed</emphasis> event properties require either one of the following getter-methods. A method that takes an integer-type key value and returns the property value, such as the <literal>getSubordinate</literal> method, or a method that returns an array-type, or a class that implements <literal>Iterable</literal>. An example is the <literal>getSubordinates</literal> getter method, which returns an array of Employee but could also return an <literal>Iterable</literal>. In an EPL or event pattern statement, indexed properties are accessed via the <literal>property[index]</literal> syntax.
				</para>
		
				<para>
					<emphasis>Mapped</emphasis> event properties require a getter-method that takes a String-typed key value and returns the property value, such as the <literal>getAddress</literal> method. In an EPL or event pattern statement, mapped properties are accessed via the <literal>property('key')</literal> syntax.
				</para>
		
				<para>
					<emphasis>Nested</emphasis> event properties require a getter-method that returns the nesting object. The <literal>getAddress</literal> and <literal>getSubordinate</literal> methods are mapped and indexed properties that return a nesting object. In an EPL or event pattern statement, nested properties are accessed via the <literal>property.nestedProperty</literal> syntax.
				</para>
	
				<para>
					All event pattern and EPL statements allow the use of indexed, mapped and nested properties (or a combination of these) anywhere where one or more event property names are expected. The below example shows different combinations of indexed, mapped and nested properties in filters of event pattern expressions (each line is a separate EPL statement):
				</para>

				<programlisting><![CDATA[every NewEmployeeEvent(firstName='myName')
every NewEmployeeEvent(address('home').streetName='Park Avenue')
every NewEmployeeEvent(subordinate[0].name='anotherName')
every NewEmployeeEvent(allSubordinates[1].name='thatName')
every NewEmployeeEvent(subordinate[0].address('home').streetName='Water Street')]]></programlisting>
	
				<para>
					Similarly, the syntax can be used in EPL statements in all places where an event property name is expected, such as in select lists, where-clauses or join criteria.
				</para>

				<programlisting><![CDATA[select firstName, address('work'), subordinate[0].name, subordinate[1].name
from NewEmployeeEvent
where address('work').streetName = 'Park Ave']]></programlisting>
			</sect2>

			<sect2 id="event-properties-names">
			   <title>Property Names</title>
				<para>
					Property names follows Java standards: the class <literal>java.beans.Introspector</literal> and method <literal>getBeanInfo</literal> returns the property names as derived from the name of getter methods. In addition, Esper configuration provides a flag to turn off case-sensitive property names. A sample list of getter methods and property names is: 
				</para>
	
				<table frame="topbot">
					<title>JavaBeans-style Getter Methods and Property Names</title>
					<tgroup cols="3">
						<colspec colwidth="1*"/>
						<colspec colwidth="1*"/>
						<colspec colwidth="2*"/>
						<thead>
							<row>
								<entry>Method</entry>
								<entry>Property Name</entry>
								<entry>Example</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>getPrice()</literal></entry>
								<entry>price</entry>
								<entry><synopsis>select price from MyEvent</synopsis></entry>
							</row>
							<row>
								<entry><literal>getNAME()</literal></entry>
								<entry>NAME</entry>
								<entry><synopsis>select NAME from MyEvent</synopsis></entry>
							</row>
							<row>
								<entry><literal>getItemDesc()</literal></entry>
								<entry>itemDesc</entry>
								<entry><synopsis>select itemDesc from MyEvent</synopsis></entry>
							</row>
							<row>
								<entry><literal>getQ()</literal></entry>
								<entry>q</entry>
								<entry><synopsis>select q from MyEvent</synopsis></entry>
							</row>
							<row>
								<entry><literal>getQN()</literal></entry>
								<entry>QN</entry>
								<entry><synopsis>select QN from MyEvent</synopsis></entry>
							</row>
							<row>
								<entry><literal>getqn()</literal></entry>
								<entry>qn</entry>
								<entry><synopsis>select qn from MyEvent</synopsis></entry>
							</row>
							<row>
								<entry><literal>gets()</literal></entry>
								<entry>s</entry>
								<entry><synopsis>select s from MyEvent</synopsis></entry>
							</row>
						</tbody>
					</tgroup>
				</table>
		</sect2>
		
        <sect2 id="event-properties-const">
           <title>Constants and Enumeration</title>
			<indexterm><primary>constants</primary></indexterm>
			<indexterm><primary>enumeration</primary></indexterm>
			<para>
				Constants are public static final fields in Java that may also participate in expressions of all kinds, as this example shows:
			</para>
			<programlisting><![CDATA[select * from MyEvent where property=MyConstantClass.FIELD_VALUE]]></programlisting>
	
			<para>
				Event properties that are enumeration values can be compared by their enumeration value:
			</para>
			<programlisting><![CDATA[select * from MyEvent where enumProp=EnumClass.ENUM_VALUE_1]]></programlisting>
	
			<para>
				Alternatively, a static method may be employed on a class, such as the enumeration class 'EnumClass' as below:
			</para>
			<programlisting><![CDATA[select * from MyEvent where enumProp=EnumClass.valueOf('ENUM_VALUE_1')]]></programlisting>
	
			<para>
				If your application does not import, through configuration, the package that contains the enumeration class, then it must also specify the package name of the class. Enumeration
				classes that are inner classes must be qualified with <literal>$</literal> following Java conventions.
			</para>
			<para>
				For example, the Color enumeration as an inner class to <literal>MyEvent</literal> in package <literal>org.myorg</literal> can be referenced as shown:
			</para>
			<programlisting><![CDATA[select * from MyEvent(enumProp=org.myorg.MyEvent$Color.GREEN).std:firstevent()]]></programlisting>
	
			<para>
				Instance methods may also be invoked on event instances by specifying a stream name, as shown below:
			</para>
			<programlisting><![CDATA[select myevent.computeSomething() as result from MyEvent as myevent]]></programlisting>

			<para>
				Chaining instance methods is supported as this example shows:
			</para>
			<programlisting><![CDATA[select myevent.getComputerFor('books', 'movies').calculate() as result 
from MyEvent as myevent]]></programlisting>
		</sect2>

		<sect2 id="event-properties-parameterized">
		   <title>Parameterized Types</title>

			<para>
				When your getter methods or accessor fields return a parameterized type, for example <literal>Iterable&lt;MyEventData&gt;</literal> for an indexed property or <literal>Map&lt;String, MyEventData&gt;</literal> for a mapped property, then property expressions may refer to the properties available through the class that is the type parameter.
			</para>

			<para>
				An example event that has properties that are parameterized types is:
			</para>
	
			<programlisting><![CDATA[public class NewEmployeeEvent {
  public String getName();
  public Iterable<EducationHistory> getEducation();
  public Map<String, Address> getAddresses();
}]]></programlisting>
			
			<para>
				A sample of valid property expressions for this event is shown next:
			</para>
			<programlisting><![CDATA[select name, education, education[0].date, addresses('home').street
from NewEmployeeEvent]]></programlisting>
		</sect2>

		<sect2 id="event-properties-knownlimit">
		   <title>Known Limitations</title>

			<para>
				Esper employs byte code generation for fast access to event properties. When byte code generation is unsuccessful, the engine logs a warning and uses Java reflection to obtain property values instead.
			</para>

			<para>
				A known limitation is that when an interface has an attribute of a particular type and the actual event bean class returns a subclass of that attribute, the engine logs a warning and uses reflection for that property.
			</para>	
		</sect2>
    </sect1>
    
	<sect1 id="eventrep-java-util-map">
	   <title><literal>java.util.Map</literal> Events</title>
	   
		<indexterm><primary>map event representation</primary></indexterm>
		<indexterm><primary>event</primary><secondary>Map representation</secondary></indexterm>

		<sect2 id="eventrep-map-overview">
		   <title>Overview</title>
			<para>
				Events can also be represented by objects that implement the <literal>java.util.Map</literal> interface. 
				Event properties of <literal>Map</literal> events are the values in the map accessible through the <literal>get</literal> method exposed by the <literal>java.util.Map</literal> interface.
			</para>
	
			<para>
				The Map event type is a comprehensive type system that can eliminate the need to use Java classes as event types, thereby making it easier to change types at runtime or generate type information from another source.
			</para>
	
			<para>
				A given Map event type can have one or more supertypes that must also be Map event types. All properties available on any of the Map supertypes are available on the type itself. In addition, anywhere within EPL that an event type name of a Map supertype is used, any of its Map subtypes and their subtypes match that expression.
			</para>
	
			<para>
				Your application can add properties to an existing Map event type during runtime using the configuration operation <literal>updateMapEventType</literal>. Properties may not be updated or deleted - properties can only be added, and nested properties can be added as well. The runtime configuration also allows removing Map event types and adding them back with new type information.
			</para>
	
			<para>
				After your application configures a Map event type by providing a type name, the type name can be used when defining further Map event types by specifying the type name as a property type or an array property type.
			</para>
	
			<para>
				One-to-Many relationships in Map event types are represented via arrays. A property in a Map event type may be an array of primitive, an array of Java object or an array of Map. 
			</para>
	
			<para>
				The engine can process <literal>java.util.Map</literal> events via the <literal>sendEvent(Map map, String eventTypeName)</literal> method on the <literal>EPRuntime</literal> interface. Entries in the Map represent event properties. Keys must be of type <literal>java.util.String</literal> for the engine to be able to look up event property names specified by pattern or EPL statements. 
			</para>
			
			<para>
				The engine does not validate Map event property names or values. Your application should ensure that objects passed in as event properties match the <literal>create schema</literal> property names and types, or the configured event type information when using runtime or static configuration.
			</para>
		</sect2>
			
		<sect2 id="eventrep-map-properties">
		   <title>Map Properties</title>
			<para>
				Map event properties can be of any type. Map event properties that are Java application objects or that are of type <literal>java.util.Map</literal> (or arrays thereof) offer additional power:
			</para>

			<itemizedlist spacing="compact">
				<listitem>
					<para>
						Properties that are Java application objects can be queried via the nested, indexed, mapped and dynamic property syntax as outlined earlier. 
					</para>
				</listitem>
				<listitem>
					<para>
						Properties that are of type <literal>Map</literal> allow Maps to be nested arbitrarily deep and thus can be used to represent complex domain information. The nested, indexed, mapped and dynamic property syntax can be used to query Maps within Maps and arrays of Maps within Maps. 					
					</para>
				</listitem>
			</itemizedlist>

			<para>
				In order to use <literal>Map</literal> events, the event type name and property names and types must be made known to the engine via Configuration. Please see the examples in <xref linkend="config-java-util-map"/>.
			</para>
											
			<para>
				The code snippet below creates and processes a <literal>Map</literal> event. It defines a <literal>CarLocationUpdateEvent</literal> event type first:
			</para>
	
			<programlisting><![CDATA[Map event = new HashMap();
event.put("carId", carId);
event.put("direction", direction);
epRuntime.sendEvent(event, "CarLocUpdateEvent");]]></programlisting>
	
			<para>
				The <literal>CarLocUpdateEvent</literal> can now be used in a statement:
			</para>
			<programlisting>select carId from CarLocUpdateEvent.win:time(1 min) where direction = 1</programlisting> 
			
			<para>
				The engine can also query Java objects as values in a <literal>Map</literal> event via the nested property syntax. Thus <literal>Map</literal> events can be used to 
				aggregate multiple data structures into a single event and query the composite information in a convenient way. The example below demonstrates a <literal>Map</literal> event with a transaction and an account object.
			</para>
			<programlisting><![CDATA[Map event = new HashMap();
event.put("txn", txn);
event.put("account", account);
epRuntime.sendEvent(event, "TxnEvent");]]></programlisting>

			<para>
				An example statement could look as follows.
			</para>
			<programlisting>select account.id, account.rate * txn.amount 
from TxnEvent.win:time(60 sec) 
group by account.id</programlisting> 		
		</sect2>

		<sect2 id="eventrep-map-supertype">
		   <title>Map Supertypes</title>
		   
		   <para>
			   Your <literal>Map</literal> event type may declare one or more supertypes when configuring the type at engine initialization time or at runtime through the administrative interface. 
		   </para>

		   <para>
			   Supertypes of a <literal>Map</literal> event type must also be Map event types. All property names and types of a supertype are also available on a subtype and override such same-name properties of the subtype. In addition, anywhere within EPL that an event type name of a Map supertype is used, any of its Map subtypes also matches that expression (similar to the concept of interface in Java).
		   </para>
		   
		   <para>
			   This example assumes that the <literal>BaseUpdate</literal> event type has been declared and acts as a supertype to the <literal>AccountUpdate</literal> event type (both Map event types): 
		   </para>
		<programlisting><![CDATA[epService.getEPAdministrator().getConfiguration().
    addEventType("AccountUpdate", accountUpdateDef, 
    new String[] {"BaseUpdate"});]]></programlisting>

		   <para>
			   Your application EPL statements may select <literal>BaseUpdate</literal> events and receive both <literal>BaseUpdate</literal> and <literal>AccountUpdate</literal> events, as well as any other subtypes of <literal>BaseUpdate</literal> and their subtypes.
		   </para>
			<programlisting><![CDATA[// Receive BaseUpdate and any subtypes including subtypes of subtypes
select * from BaseUpdate]]></programlisting>

		   <para>
			   Your application Map event type may have multiple supertypes. The multiple inheritance hierarchy between Maps can be arbitrarily deep, however cyclic dependencies are not allowed. If using runtime configuration, supertypes must exist before a subtype to a supertype can be added.
		   </para>
		   
		   <para>
			   See <xref linkend="config-java-util-map"/> for more information on configuring Map event types.
		   </para>

	   </sect2>

		<sect2 id="eventrep-map-advanced">
		   <title>Advanced Map Property Types</title>

			<sect3 id="eventrep-map-nested">
			   <title>Nested Properties</title>
			   
			   <para>
				   Strongly-typed nested <literal>Map</literal>-within-<literal>Map</literal> events can be used to build rich, type-safe event types on the fly. Use the <literal>addEventType</literal> method on <literal>Configuration</literal> or <literal>ConfigurationOperations</literal> for initialization-time and runtime-time type definition.
			   </para>
	
			   <para>
				   Noteworthy points are:
			   </para>
	
				<itemizedlist spacing="compact">
					<listitem>
						<para>
							JavaBean (POJO) objects can appear as properties in <literal>Map</literal>-within-<literal>Map</literal>. 
						</para>
					</listitem>
					<listitem>
						<para>
							One may represent Map-within-Map and Map-Array within Map using the name of a previously registered Map event type.
						</para>
					</listitem>
					<listitem>
						<para>
							There is no limit to the number of nesting levels.
						</para>
					</listitem>
					<listitem>
						<para>
							Dynamic properties can be used to query <literal>Map</literal>-within-<literal>Map</literal> keys that may not be known in advance. 
						</para>
					</listitem>
					<listitem>
						<para>
							The engine returns a <literal>null</literal> value for properties for which the access path into the nested structure cannot be followed where map entries do not exist.
						</para>
					</listitem>
				</itemizedlist>
	
			   <para>
				   For demonstration, in this example our top-level event type is an <literal>AccountUpdate</literal> event, which has an <literal>UpdatedField</literal> structure as a property. Inside the <literal>UpdatedField</literal> structure the example defines various fields, as well as a property by name 'history' that holds a JavaBean class <literal>UpdateHistory</literal> to represent the update history for the account. The code snippet to define the event type is thus:
			   </para>

			<programlisting><![CDATA[Map<String, Object> updatedFieldDef = new HashMap<String, Object>();
updatedFieldDef.put("name", String.class);
updatedFieldDef.put("addressLine1", String.class);
updatedFieldDef.put("history", UpdateHistory.class);

Map<String, Object> accountUpdateDef = new HashMap<String, Object>();
accountUpdateDef.put("accountId", long.class);
accountUpdateDef.put("fields", updatedFieldDef);

epService.getEPAdministrator().getConfiguration().
    addEventType("AccountUpdate", accountUpdateDef);]]></programlisting>

			   <para>
				   The next code snippet populates a sample event and sends the event into the engine:
			   </para>
	
			<programlisting><![CDATA[Map<String, Object> updatedField = new HashMap<String, Object>();
updatedField.put("name", "Joe Doe");
updatedField.put("addressLine1", "40 Popular Street");
updatedField.put("history", new UpdateHistory());

Map<String, Object> accountUpdate = new HashMap<String, Object>();
accountUpdate.put("accountId", 10009901);
accountUpdate.put("fields", updatedField);

epService.getEPRuntime().sendEvent(accountUpdate, "AccountUpdate");]]></programlisting>

			   <para>
				   Last, a sample query to interrogate <literal>AccountUpdate</literal> events is as follows:
			   </para>
				<programlisting><![CDATA[select accountId, fields.name, fields.addressLine1, fields.history.lastUpdate
from AccountUpdate]]></programlisting>

				<para>
					Note that type information for nested maps is only available to the immediately selecting stream. For example, the second select-query does not work:
				</para>			
				<programlisting><![CDATA[insert into MyStream select fields from NestedMapEvent
// this does not work ... instead select the individual fields in the insert-into statement
select fields.name from MyStream ]]></programlisting>
		   </sect3>
	
			<sect3 id="eventrep-map-typereuse">
			   <title>Map Event Type Properties</title>
			   
			   <para>
				   Your application may declare a Map event type for reuse within other Map event types or for one-to-many properties represented by an array of Maps.
			   </para>
	
			   <para>
				   This example declares a Map event type by name <literal>AmountCurrency</literal> with amount and currency properties:
			   </para>
	
			<programlisting><![CDATA[Map<String, Object> amountAndCurr = new HashMap<String, Object>();
amountAndCurr.put("amount", double.class);
amountAndCurr.put("currency", String.class);

epService.getEPAdministrator().getConfiguration().
    addEventType("AmountCurrency", amountAndCurr);]]></programlisting>

			   <para>
				   The <literal>AmountCurrency</literal> type is now available for use as a property type itself. Below code snippet declares <literal>OrderItem</literal> to hold an item number and <literal>AmountCurrency</literal>:
			   </para>
	
			<programlisting><![CDATA[Map<String, Object> orderItem = new HashMap<String, Object>();
orderItem.put("itemNum", int.class);
orderItem.put("price", "AmountCurrency");    // The property type is the name itself

epService.getEPAdministrator().getConfiguration().
    addEventType("OrderItem", orderItem);]]></programlisting>

		   </sect3>
	
			<sect3 id="eventrep-map-array">
			   <title>One-to-Many Relationships</title>
			   
			   <para>
				   To model repeated properties within a Map, you may use arrays as properties in a Map. You may use an array of primitive types or an array of JavaBean objects or an array of a previously declared Map event type.
			   </para>
	
			   <para>
				   When using a previously declared Map event type as an array property, the literal <literal>[]</literal> must be appended after the event type name.
			   </para>

			   <para>
				   This following example defines a Map event type by name <literal>Sale</literal> to hold array properties of the various types. It assumes a <literal>SalesPerson</literal> Java class exists and a Map event type by name <literal>OrderItem</literal> was declared:
			   </para>
	
			<programlisting><![CDATA[Map<String, Object> sale = new HashMap<String, Object>();
sale.put("userids", int[].class);
sale.put("salesPersons", SalesPerson[].class);
sale.put("items", "OrderItem[]");	 // The property type is the name itself appended by []

epService.getEPAdministrator().getConfiguration().
    addEventType("SaleEvent", sale);]]></programlisting>

			   <para>
				   The three properties that the above example declares are:
			   </para>
			   <itemizedlist>
				   <listitem>
					   <para>
						 An integer array of user ids.
					   </para>
				   </listitem>
				   <listitem>
					   <para>
						 An array of <literal>SalesPerson</literal> Java objects.
					   </para>
				   </listitem>
				   <listitem>
					   <para>
						 An array of Maps for order items.
					   </para>
				   </listitem>			   
			   </itemizedlist>
			   
			   <para>
				   The next EPL statement is a sample query asking for property values held by arrays:
			   </para>
	
			<programlisting><![CDATA[select userids[0], salesPersons[1].name, 
    items[1], items[1].price.amount from SaleEvent]]></programlisting>

		   </sect3>
		</sect2>
    </sect1>

	<sect1 id="eventrep-xml-dom">
	   <title><literal>org.w3c.dom.Node</literal> XML Events</title>
	   
		<indexterm><primary>XML event representation</primary></indexterm>
		<indexterm><primary>event</primary><secondary>XML representation</secondary></indexterm>
		<para>
			Events can be represented as <literal>org.w3c.dom.Node</literal> instances and send into the engine via the <literal>sendEvent</literal> method on <literal>EPRuntime</literal> or via <literal>EventSender</literal>. Please note that configuration is required so the event type name and root element name is known. See <xref linkend="configuration"/>.
		</para>
		
		<para>
			If a XML schema document (XSD file) can be made available as part of the configuration, then Esper can read the schema and appropriately present event type metadata and validate statements that use the event type and its properties. See <xref linkend="eventrep-xml-dom-schema"/>.
		</para>

		<para>
			When no XML schema document is provided, XML events can still be queried, however the return type and return values of property expressions are string-only and no event type metadata is available other then for explicitly configured properties. See <xref linkend="eventrep-xml-dom-noschema"/>.
		</para>

		<para>
			In all cases Esper allows you to configure explicit XPath expressions as event properties. You can specify arbitrary XPath functions or expressions and provide a property name and type by which result values will be available for use in EPL statements. See <xref linkend="eventrep-xml-dom-explicit"/>.
		</para>
			
		<para>
			Nested, mapped and indexed event properties are also supported in expressions against <literal>org.w3c.dom.Node</literal> events. Thus XML trees can conveniently be interrogated via the property expression syntax.
		</para>
		
		<para>
			Only one event type per root element name may be configured. The engine recognizes each event by its root element name or you may use <literal>EventSender</literal> to send events.
		</para>

		<para>
			This section uses the following XML document as an example:
		</para>
	
		<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Sensor xmlns="SensorSchema">
  <ID>urn:epc:1:4.16.36</ID>
  <Observation Command="READ_PALLET_TAGS_ONLY">
    <ID>00000001</ID>
    <Tag>
      <ID>urn:epc:1:2.24.400</ID>
    </Tag>
    <Tag>
      <ID>urn:epc:1:2.24.401</ID>
    </Tag>
  </Observation>
</Sensor>]]></programlisting>

		<para>
			The schema for the example is:
		</para>

		<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:element name="Sensor">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ID" type="xs:string"/>
        <xs:element ref="Observation" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="Observation">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ID" type="xs:string"/>
        <xs:element ref="Tag" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="Command" type="xs:string" use="required" />
    </xs:complexType>
  </xs:element>

  <xs:element name="Tag">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ID" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></programlisting>

		<sect2 id="eventrep-xml-dom-schema">
		   <title>Schema-Provided XML Events</title>
		   
		   <para>
			   If you have a XSD schema document available for your XML events, Esper can interrogate the schema. The benefits are:
		   </para>

		   <itemizedlist spacing="compact">
				<listitem>
					<para>
						New EPL statements that refer to event properties are validated against the types provided in the schema.
					</para>
				</listitem>
				<listitem>
					<para>
						Event type metadata becomes available for retrieval as part of the <literal>EventType</literal> interface.
					</para>
				</listitem>
			</itemizedlist>

			<sect3 id="eventrep-xml-dom-schema-start">
			   <title>Getting Started</title>

				<para>
					The engine reads a XSD schema file from an URL you provide. Make sure files imported by the XSD schema file can also be resolved.
				</para>
	
				<para>
					The configuration accepts a schema URL. This is a sample code snippet to determine a schema URL from a file in classpath:
				</para>
	
				<programlisting><![CDATA[URL schemaURL = this.getClass().getClassLoader().getResource("sensor.xsd");]]></programlisting>
	
				<para>
					Here is a sample use of the runtime configuration API, please see <xref linkend="configuration"/> for further examples.
				</para>
	
				<programlisting><![CDATA[epService = EPServiceProviderManager.getDefaultProvider();
ConfigurationEventTypeXMLDOM sensorcfg = new ConfigurationEventTypeXMLDOM();
sensorcfg.setRootElementName("Sensor");
sensorcfg.setSchemaResource(schemaURL.toString());
epService.getEPAdministrator().getConfiguration()
    .addEventType("SensorEvent", sensorcfg);]]></programlisting>

				<para>
					You must provide a root element name. This name is used to look up the event type for the <literal>sendEvent(org.w3c.Node node)</literal> method. An <literal>EventSender</literal> is a useful alternative method
					for sending events if the type lookup based on the root or document element name is not desired.
				</para>

				<para>
					After adding the event type, you may create statements and send events. Next is a sample statement:
				</para>
	
				<programlisting><![CDATA[select ID, Observation.Command, Observation.ID, 
  Observation.Tag[0].ID, Observation.Tag[1].ID
from SensorEvent]]></programlisting>
	
				<para>
					As you can see from the example above, property expressions can query property values held in the XML document's elements and attributes.
				</para>
	
				<para>
					There are multiple ways to obtain a XML DOM document instance from a XML string. The next code snippet shows how to obtain a XML DOM <literal>org.w3c.Document</literal> instance:
				</para>
				<programlisting><![CDATA[InputSource source = new InputSource(new StringReader(xml));
DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
builderFactory.setNamespaceAware(true);
Document doc = builderFactory.newDocumentBuilder().parse(source);]]></programlisting>
	
				<para>
					Send the <literal>org.w3c.Node</literal> or <literal>Document</literal> object into the engine for processing:
				</para>
				<programlisting><![CDATA[epService.getEPRuntime().sendEvent(doc);]]></programlisting>
			</sect3>
			
			<sect3 id="eventrep-xml-dom-schema-propertyexpr">
			   <title>Property Expressions and Namespaces</title>

				<para>
					By default, property expressions such as <literal>Observation.Tag[0].ID</literal> are evaluated by a fast DOM-walker implementation provided by Esper. This DOM-walker implementation is not namespace-aware.
				</para>

				<para>
					Should you require namespace-aware traversal of the DOM document, you must set the <literal>xpath-property-expr</literal> configuration option to true (default is false). This flag causes Esper to generate namespace-aware XPath
					expressions from each property expression instead of the DOM-walker, as described next. Setting the <literal>xpath-property-expr</literal> option to true requires that you also configure namespace prefixes as described below.
				</para>

				<para>
					When matching up the property names with the XSD schema information, the engine determines whether the attribute or element provides values. The algorithm checks attribute names first followed by element names. It takes the first match to the specified property name.
				</para>
			</sect3>
				
			<sect3 id="eventrep-xml-dom-schema-propertyexpr-xpath">
			   <title>Property Expression to XPath Rewrite</title>

				<para>
					By setting the <literal>xpath-property-expr</literal> option the engine rewrites each property expression as an XPath expression, effectively handing the evaluation over to the underlying XPath implementation
					available from classpath. Most JVM have a built-in XPath implementation and there are also optimized, fast implementations such as Jaxen that can be used as well.
				</para>
				
				<para>
					Set the <literal>xpath-property-expr</literal> option if you need namespace-aware document traversal, such as when your schema mixes several namespaces and element names are overlapping.
				</para>

				<para>
					The below table samples several property expressions and the XPath expression generated for each, without namespace prefixes to keep the example simple:
				</para>
				
				<table frame="topbot">
					<title>Property Expression to XPath Expression</title>
					<tgroup cols="2">
						<colspec colwidth="1.5*"/>
						<colspec colwidth="1.5*"/>
						<thead>
							<row>
								<entry>Property Expression</entry>
								<entry>Equivalent XPath</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>Observeration.ID</literal></entry>
								<entry><literal>/Sensor/Observation/ID</literal></entry>
							</row>
							<row>
								<entry><literal>Observeration.Command</literal></entry>
								<entry><literal>/Sensor/Observation/@Command</literal></entry>
							</row>
							<row>
								<entry><literal>Observeration.Tag[0].ID</literal></entry>
								<entry><literal>/Sensor/Observation/Tag[position() = 1]/ID</literal></entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
				<para> 
					For mapped properties that are specified via the syntax <literal>name('key')</literal>, the algorithm looks for an attribute by name <literal>id</literal> and generates a XPath expression as <literal>mapped[@id='key']</literal>.
				</para>

				<para> 
					Finally, here is an example that includes all different types of properties and their XPath expression equivalent in one property expression:
				</para>
				<programlisting><![CDATA[select nested.mapped('key').indexed[1].attribute from MyEvent]]></programlisting>
				<para> 
					The equivalent XPath expression follows, this time including <literal>n0</literal> as a sample namespace prefix:
				</para>
				<programlisting><![CDATA[/n0:rootelement/n0:nested/n0:mapped[@id='key']/n0:indexed[position() = 2]/@attribute]]></programlisting>
			</sect3>
				
			<sect3 id="eventrep-xml-dom-schema-propertyarray">
			   <title>Array Properties</title>
			   
				<para>
					All elements that are unbound or have max occurs greater then 1 in the XSD schema are represented as indexed properties and require an index for resolution.
				</para>	

				<para>
					For example, the following is not a valid property expression in the sample Sensor document: <literal>Observeration.Tag.ID</literal>. As no index is provided for <literal>Tag</literal>, the property expression is not valid.
				</para>	

				<para>
					Repeated elements within a parent element in which the repeated element is a simple type also are represented as an array.
				</para>	

				<para>
					Consider the next XML document:
				</para>	

				<programlisting><![CDATA[<item>
  <book sku="8800090">
    <author>Isaac Asimov</author>
    <author>Robert A Heinlein</author>
  </book>
</item>]]></programlisting>

				<para>
					Here, the result of the expression <literal>book.author</literal> is an array of type String and the result of <literal>book.author[0]</literal> is a String value.
				</para>

			</sect3>

			<sect3 id="eventrep-xml-dom-schema-propertydynamic">
			   <title>Dynamic Properties</title>
			   
				<para>
					  Dynamic properties are not validated against the XSD schema information and their result value is always <literal>org.w3c.Node</literal>. You may use a user-defined function to process dynamic properties returning <literal>Node</literal>. As an alternative consider using an explicit property.
				</para>

				<para>
					An example dynamic property is <literal>Origin?.ID</literal> which will look for an element by name <literal>Origin</literal> that contains an element or attribute node by name <literal>LocationCode</literal>:
				</para>
				<programlisting><![CDATA[select Origin?.LocationCode from SensorEvent]]></programlisting>
			</sect3>
			
			<sect3 id="eventrep-xml-dom-schema-propertytranspose">
			   <title>Transposing Properties</title>
			   
				<para>
					When providing a XSD document, the default configuration allows to transpose property values that are themselves complex elements, as defined in the XSD schema, into a new stream. This behavior can be controlled via the flag <literal>auto-fragment</literal>.
				</para>
				
				<para>
					For example, consider the next query:
				</para>
				<programlisting><![CDATA[insert into ObservationStream
select ID, Observation from SensorEvent]]></programlisting>

				<para>
					The <literal>Observation</literal> as a property of the <literal>SensorEvent</literal> gets itself inserted into a new stream by name <literal>ObservationStream</literal>. The <literal>ObservationStream</literal>
					thus consists of a string-typed <literal>ID</literal> property and a complex-typed property named <literal>Observation</literal>, as described in the schema.
				</para>
				<para>
					A further statement can use this stream to query:
				</para>
				<programlisting><![CDATA[select Observation.Command, Observation.Tag[0].ID from ObservationStream]]></programlisting>

				<para>
					Before continuing the discussion, here is an alternative syntax using the wildcard-select, that is also useful:
				</para>
				<programlisting><![CDATA[insert into TagListStream
select ID as sensorId, Observation.* from SensorEvent]]></programlisting>

				<para>
					The new <literal>TagListStream</literal> has a string-typed <literal>ID</literal> and <literal>Command</literal> property as well as an array of <literal>Tag</literal> properties that are complex types themselves as defined in the schema.
				</para>
				<para>
					Next is a sample statement to query the new stream:
				</para>
				<programlisting><![CDATA[select sensorId, Command, Tag[0].ID from TagListStream]]></programlisting>
				
				<para>
					Please note the following limitations:
				</para>
				<itemizedlist spacing="compact">
					<listitem>
						<para>
							The XPath standard prescribes that XPath expressions against <literal>org.w3c.Node</literal> are evaluated against the owner document of the <literal>Node</literal>. Therefore XPath is not relative to the current node but absolute against each node's owner document. Since Esper does not create new document instances for transposed nodes, transposing properties is not possible when the <literal>xpath-property-expr</literal> flag is set.
						</para>
					</listitem>
					<listitem>
						<para>
							Complex elements that have both simple element values and complex child elements are not transposed. This is to ensure their property value is not hidden. Use an explicit XPath expression to transpose such properties.
						</para>
					</listitem>
				</itemizedlist>

				<para>
					Esper automatically registers a new event type for transposed properties. It generates the type name of the new XML event type from the XML event type name and the property names used in the expression. The synposis is <emphasis>type_name.property_name[.property_name...]</emphasis>. The type name can be looked up, for example for use with <literal>EventSender</literal> or can be created in advance.
				</para>
			</sect3>

			<sect3 id="eventrep-xml-dom-eventsender">
			   <title>Event Sender</title>
			   
				<para>
					An <literal>EventSender</literal> sends events into the engine for a given type, saving a type lookup based on element name.
				</para>

				<para>
					This brief example sends an event via <literal>EventSender</literal>:
				</para>
				<programlisting><![CDATA[EventSender sender = epRuntime.getEventSender("SensorEvent");
sender.sendEvent(node);]]></programlisting>
				
				<para>
					The XML DOM event sender checks the root element name before processing the event. Use the <literal>event-sender-validates-root</literal> setting to disable validation. This forces the engine to process XML documents according to any predefined type without validation of the root element name.
				</para>
			</sect3>

			<sect3 id="eventrep-xml-dom-limitations">
			   <title>Limitations</title>
			   <para>
				   The engine schema interrogation is based on the Xerces distribution packaged into Sun Java runtimes. Your application may not replace the JRE's Xerces version and use XML schemas, unless your application sets the DOM implementation registry as shown below before loading the engine configuration:
			   </para>
				<programlisting><![CDATA[System.setProperty(DOMImplementationRegistry.PROPERTY, 
  "com.sun.org.apache.xerces.internal.dom.DOMXSImplementationSourceImpl");]]></programlisting>
			</sect3>
		</sect2>

		<sect2 id="eventrep-xml-dom-noschema">
		   <title>No-Schema-Provided XML Events</title>
		   
		   <para>
			   Without a schema document a XML event may still be queried. However there are important differences in the metadata available without a schema document and therefore the property expression results. These differences are outlined below.
		   </para>

			<para>
				All property expressions against a XML type without schema are assumed valid. There is no validation of the property expression other then syntax validation. At runtime, property expressions return string-type values or <literal>null</literal> if the expression did not
				yield a matching element or attribute result.
			</para>

			<para>
				When asked for property names or property metadata, a no-schema type returns empty array.
			</para>
			
			<para>
				In all other aspects the type behaves the same as the schema-provided type described earlier.
			</para>

		</sect2>
		
		<sect2 id="eventrep-xml-dom-explicit">
		   <title>Explicitly-Configured Properties</title>
		   
		   <para>
		     Regardless of whether or not you provide a XSD schema for the XML event type, you can always fall back to configuring explicit properties that are backed by XPath expressions.
		   </para>
	
		   <para>
		     For further documentation on XPath, please consult the XPath standard or other online material. Consider using Jaxen or Apache Axiom, for example, to provide faster XPath evaluation then your Java VM built-in XPath provider may offer.
		   </para>

			<sect3 id="eventrep-xml-dom-explicit-simple">
			   <title>Simple Explicit Property</title>
			   
				<para>
					Shown below is an example configuration that adds an explicit property backed by a XPath expression and that defines namespace prefixes:
				</para>
	
				<programlisting><![CDATA[epService = EPServiceProviderManager.getDefaultProvider();
ConfigurationEventTypeXMLDOM sensorcfg = new ConfigurationEventTypeXMLDOM();
sensorcfg.addXPathProperty("countTags", "count(/ss:Sensor/ss:Observation/ss:Tag)", 
    XPathConstants.NUMBER);
sensorcfg.addNamespacePrefix("ss", "SensorSchema");
sensorcfg.setRootElementName("Sensor");
epService.getEPAdministrator().getConfiguration()
    .addEventType("SensorEvent", sensorcfg);]]></programlisting>
			   
				<para>
					The <literal>countTags</literal> property is now available for querying:
				</para>
				<programlisting><![CDATA[select countTags from SensorEvent]]></programlisting>

				<para>
					The XPath expression <literal>count(...)</literal> is a XPath built-in function that counts the number of nodes, for the example document the result is <literal>2</literal>.
				</para>
			</sect3>

			<sect3 id="eventrep-xml-dom-explicit-casted">
			   <title>Explicit Property Casting and Parsing</title>
			   
				<para>
					Esper can parse or cast the result of your XPath expression to the desired type. Your property configuration provides the type to cast to, like this:
				</para>
				<programlisting><![CDATA[sensorcfg.addXPathProperty("countTags", "count(/ss:Sensor/ss:Observation/ss:Tag)", 
    XPathConstants.NUMBER, "int");]]></programlisting>			   

				<para>
					The type supplied to the property configuration must be one of the built-in types. Arrays of built-in type are also possible, requiring the <literal>XPathConstants.NODESET</literal> type returned by your XPath expression, as follows:
				</para>
				<programlisting><![CDATA[sensorcfg.addXPathProperty("idarray", "//ss:Tag/ss:ID", 
    XPathConstants.NODESET, "String[]");]]></programlisting>			   

				<para>
					The XPath expression <literal>//ss:Tag/ss:ID</literal> returns all ID nodes under a Tag node, regardless of where in the node tree the element is located. For the example document the result is <literal>2</literal> array elements <literal>urn:epc:1:2.24.400</literal> and <literal>urn:epc:1:2.24.40</literal>.
				</para>

			</sect3>

			<sect3 id="eventrep-xml-dom-explicit-node">
			   <title>Node and Nodeset Explicit Property</title>
			   
				<para>
					An explicit property may return <literal>XPathConstants.NODE</literal> or <literal>XPathConstants.NODESET</literal> and can provide the event type name of a pre-configured event type for the property. The method name to add such properties is <literal>addXPathPropertyFragment</literal>.
				</para>
	
				<para>
					This code snippet adds two explicit properties and assigns an event type name for each property:
				</para>

				<programlisting><![CDATA[sensorcfg.addXPathPropertyFragment("tagOne", "//ss:Tag[position() = 1]", 
    XPathConstants.NODE, "TagEvent");
sensorcfg.addXPathPropertyFragment("tagArray", "//ss:Tag", 
    XPathConstants.NODESET, "TagEvent");]]></programlisting>
			   
				<para>
					The configuration above references the <literal>TagEvent</literal> event type. This type must also be configured. Prefix the root element name with "//" to cause the lookup to search the nested schema elements for the definition of the type:
				</para>

				<programlisting><![CDATA[ConfigurationEventTypeXMLDOM tagcfg = new ConfigurationEventTypeXMLDOM();
tagcfg.setRootElementName("//Tag");
tagcfg.setSchemaResource(schemaURL);
epAdministrator.getConfiguration()
    .addEventType("TagEvent", tagcfg);]]></programlisting>

				<para>
					The <literal>tagOne</literal> and <literal>tagArray</literal> properties are now ready for selection and transposing to further streams:
				</para>

				<programlisting><![CDATA[insert into TagOneStream select tagOne.* from SensorEvent]]></programlisting>
				<para>
					Select from the new stream:
				</para>
				<programlisting><![CDATA[select ID from TagOneStream]]></programlisting>

				<para>
					An example with indexed properties is shown next:
				</para>
				<programlisting><![CDATA[insert into TagArrayStream select tagArray as mytags from SensorEvent]]></programlisting>
				<para>
					Select from the new stream:
				</para>
				<programlisting><![CDATA[select mytags[0].ID from TagArrayStream]]></programlisting>

			</sect3>
		</sect2>

	</sect1>
   
	<sect1 id="eventrep-plug-in">
	   <title>Additional Event Representations</title>
	   
		<indexterm><primary>event</primary><secondary>additional representations</secondary></indexterm>
		<para>
		    Part of the extension and plug-in features of Esper is an event representation API. This set of classes allow an application to create new event types and event instances based on information available elsewhere, statically or dynamically at runtime when EPL statements are created. Please see <xref linkend="custom-event-representation"/> for details.
		</para>
		    
		<para>
			Creating a plug-in event representation can be useful when your application has existing Java classes that carry event metadata and event property values and your application does not want to (or cannot) extract or transform
such event metadata and event data into one of the built-in event representations (POJO Java objects, Map or XML DOM).
		</para>

		<para>
			Further use of a plug-in event representation is to provide a faster or short-cut access path to event data. For example, access to event data stored in a XML format through the Streaming API for XML (StAX) is known to be very efficient. A plug-in event representation can also provide network lookup and dynamic resolution of event type and dynamic sourcing of event instances.
		</para>
		
		<para>
			Currently, EsperIO provides the following additional event representations:
		</para>
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					Apache Axiom: Streaming API for XML (StAX) implementation
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			Please see the EsperIO documentation for details on the above.
		</para>
		
		<para>
			The chapter on <xref linkend="custom-event-representation"/> explains how to create your own custom event representation.
		</para>
	</sect1>

	<sect1 id="eventrep-update">
	   <title>Updating, Merging and Versioning Events</title>
	   
		<indexterm><primary>event</primary><secondary>update</secondary></indexterm>
		<indexterm><primary>event</primary><secondary>version</secondary></indexterm>

        <para>
			To summarize, an event is an immutable record of a past occurrence of an action or state change, and event properties contain useful information about an event.
        </para>

        <para>
			The length of time an event is of interest to the event processing engine (retention time) depends on your EPL statements, and especially the data window, pattern and output rate 
			limiting clauses of your statements.
        </para>

        <para>
			During the retention time of an event more information about the event may become available, such as additional properties or changes to existing properties. 
			Esper provides three concepts for handling updates to events.
        </para>
        
        <para>
			  The first means to handle updating events is the <literal>update istream</literal> clause as further described in <xref linkend="epl-update"/>. It is useful when you need to update events as they enter a stream, before events are evaluated by any particular 
			  consuming statement to that stream.
        </para>

        <para>
			  The second means to update events is the <literal>on-merge</literal> and <literal>on-update</literal> clauses, for use with named windows only, as further described in <xref linkend="named_upsert"/> and <xref linkend="named_update"/>. On-merge
			  is similar to the SQL <literal>merge</literal> clause and provides what is known as an "Upsert" operation: Update existing events or if no existing event(s) are found then insert a new event, all in one atomic operation provided by a single EPL statement. 
			  On-update can be used to update individual properties of events held in a named window.
        </para>

        <para>
			  The third means to handle updating events is the revision event types, for use with named windows only, as further described in <xref linkend="named_versioning"/>. With revision event types one can declare, via configuration only, multiple different event types and then
			  have the engine present a merged event type that contains a superset of properties of all merged types, and have the engine merge events as they arrive without additional EPL statements.
        </para>

		<para>
			Note that patterns do not reflect changes to past events. For the temporal nature of patterns, any changes to events that were observed in the past do not reflect upon current pattern state.
		</para>
	</sect1>

	<sect1 id="eventrep-coarse">
	   <title>Coarse-Grained Events</title>
	   
		<indexterm><primary>event</primary><secondary>coarse</secondary></indexterm>
		<indexterm><primary>event</primary><secondary>bulk</secondary></indexterm>

        <para>
			Your application events may consist of fairly comprehensive, coarse-grained structures or documents. For example in business-to-business integration scenarios, XML documents or other event objects can be rich deeply-nested graphs of event properties.
        </para>

        <para>
			To extract information from a coarse-grained event or to perform bulk operations on the rows of the property graph in an event, Esper provides a convenient syntax: 
			When specifying a filter expression in a pattern or in a <literal>select</literal> clause, it may contain a contained-event selection syntax, as further described in <xref linkend="epl-containedeventselect"/>.
		</para>

	</sect1>

	<sect1 id="eventrep-insertinto">
	   <title>Event Objects Instantiated and Populated by <literal>Insert Into</literal></title>
	   
		<indexterm><primary>event</primary><secondary>insert into</secondary></indexterm>

        <para>
			The <literal>insert into</literal> clause can populate instantiate new instances of Java object events and <literal>java.util.Map</literal> events directly from the results of <literal>select</literal> clause expressions and populate such instances. Simply use the event type name as the stream name in the <literal>insert into</literal> clause as described in <xref linkend="epl-insert-into"/>.
        </para>
        
        <para>
           If instead you have an existing instance of a Java object returned by an expression, such as a single-row function or static method invocation for example, you can transpose that expression result object to a stream. This is described further in <xref linkend="insert-into-expression"/> and <xref linkend="functionreference-transpose"/>.
        </para>

        <para>
			The column names specified in the <literal>select</literal> and <literal>insert into</literal> clause must match available writable properties in the event object to be populated (the target event type). The expression result types of any expressions in the <literal>select</literal> clause must also be compatible with the property types of the target event type.
		</para>

        <para>
			If populating a POJO-based event type and the class provides a matching constructor, the expression result types of expressions in the <literal>select</literal> clause must be compatible with the constructor parameters in the order listed by the constructor. The <literal>insert into</literal> clause column names are not relevant in this case.
		</para>

        <para>
			Consider the following example statement:
		</para>
		<programlisting>insert into com.mycompany.NewEmployeeEvent 
select fname as firstName, lname as lastName from HRSystemEvent</programlisting> 

        <para>
			The above example specifies the fully-qualified class name of <literal>NewEmployeeEvent</literal>. The engine instantianes <literal>NewEmployeeEvent</literal> for each result row and populates the <literal>firstName</literal> and <literal>lastName</literal> properties of each instance from the result of <literal>select</literal> clause expressions. The <literal>HRSystemEvent</literal> in the example is assumed to have <literal>lname</literal> and <literal>fname</literal> properties, and either setter-methods and a default constructor, or a matching constructor.
		</para>
		
        <para>
			Note how the example uses the <literal>as</literal>-keyword to assign column names that match the property names of the <literal>NewEmployeeEvent</literal> target event. If the property names of the source and target events are the same, the <literal>as</literal>-keyword is not required.
		</para>

        <para>
			The next example is an alternate form and specifies property names within the <literal>insert into</literal> clause instead. The example also assumes that <literal>NewEmployeeEvent</literal> has been defined or imported via configuration since it does not specify the event class package name:
		</para>
		<programlisting>insert into NewEmployeeEvent(firstName, lastName) 
select fname, lname from HRSystemEvent</programlisting> 

        <para>
			Finally, this example populates <literal>HRSystemEvent</literal> events. The example populates the value of a <literal>type</literal> property where the event has the value 'NEW' and populates a new event object with the value 'HIRED', copying the <literal>fname</literal> and <literal>lname</literal> property values to the new event object:
		</para>
		<programlisting>insert into HRSystemEvent 
select fname, lname, 'HIRED' as type from HRSystemEvent(type='NEW')</programlisting> 

        <para>
          The matching of the <literal>select</literal> or <literal>insert into</literal>-clause column names to target event type's property names is case-sensitive. It is allowed to only populate a subset of all available columns in the target event type. Wildcard (<literal>*</literal>) is also allowed and copies all fields of the events or multiple events in a join.
		</para>

        <para>
			For Java object events, your event class must provide setter-methods according to JavaBean conventions or, alternatively, a matching constructor. If the event class provides setter methods the class should also provide a default constructor taking no parameters. If the event class provides a matching constructor there is no need for setter-methods. If your event class does not have a default constructor and setter methods, or a matching constructor, your application may configure a factory method via <literal>ConfigurationEventTypeLegacy</literal>. 
		</para>

        <para>
			The engine follows Java standards in terms of widening, performing widening automatically in cases where widening type conversion is allowed without loss of precision, for both boxed and primitive types and including BigInteger and BigDecimal.
		</para>

        <para>
			When inserting array-typed properties into a Java or Map-type underlying event the event definition should declare the target property as an array.
		</para>

        <para>
		    Please note the following limitations: 
		</para>
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					Event types that utilize XML <literal>org.w3c.dom.Node</literal> underlying event objects cannot be target of an <literal>insert into</literal> clause.
				</para>
			</listitem>
		</itemizedlist>
	</sect1>
</chapter>







